
lab61_app2.elf:     file format elf32-littlenios2
lab61_app2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000224

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000250c memsz 0x0000250c flags r-x
    LOAD off    0x0000352c vaddr 0x0800252c paddr 0x08003b84 align 2**12
         filesz 0x00001658 memsz 0x00001658 flags rw-
    LOAD off    0x000051dc vaddr 0x080051dc paddr 0x080051dc align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000022d4  08000224  08000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  080024f8  080024f8  000034f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001658  0800252c  08003b84  0000352c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  080051dc  080051dc  000051dc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00004b84  2**0
                  CONTENTS
  7 .sdram        00000000  080052fc  080052fc  00004b84  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  00004b84  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000005b8  00000000  00000000  00004bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00007991  00000000  00000000  00005170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ced  00000000  00000000  0000cb01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0000321e  00000000  00000000  0000f7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00000a98  00000000  00000000  00012a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00001b89  00000000  00000000  000134a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000827  00000000  00000000  0001502d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_alt_sim_info 00000010  00000000  00000000  00015854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000180  00000000  00000000  00015868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .thread_model 00000003  00000000  00000000  00017508  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0001750b  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00017517  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00017518  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00017519  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0001751d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00017521  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00017525  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00017530  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0001753b  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  00017546  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000026  00000000  00000000  0001754f  2**0
                  CONTENTS, READONLY
 30 .jdi          00004f2c  00000000  00000000  00017575  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000224 l    d  .text	00000000 .text
080024f8 l    d  .rodata	00000000 .rodata
0800252c l    d  .rwdata	00000000 .rwdata
080051dc l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
080052fc l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/danie/OneDrive/Desktop/Lab6.2/software/lab61_app2_bsp//obj/HAL/src/crt0.o
0800025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
0800031c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
08000484 l     F .text	00000034 alt_dev_reg
0800252c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800077c l     F .text	0000020c altera_avalon_jtag_uart_irq
08000988 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08000fcc l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
08001200 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
08001338 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08001364 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080017c8 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08001918 l     F .text	0000003c alt_get_errno
08001954 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
08003734 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
080051f4 g     O .bss	00000004 alt_instruction_exception_handler
08000408 g     F .text	0000007c alt_main
080051fc g     O .bss	00000100 alt_irq
08003b84 g       *ABS*	00000000 __flash_rwdata_start
08001dac g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
080051f8 g     O .bss	00000004 errno
080051e0 g     O .bss	00000004 alt_argv
0800bb58 g       *ABS*	00000000 _gp
080035b4 g     O .rwdata	00000180 alt_fd_list
08001dd0 g     F .text	00000090 alt_find_dev
08002178 g     F .text	00000100 memcpy
0800189c g     F .text	0000007c alt_io_redirect
080024f8 g       *ABS*	00000000 __DTOR_END__
08002020 g     F .text	00000098 alt_exception_cause_generated_bad_addr
08000b84 g     F .text	00000220 altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08003b68 g     O .rwdata	00000004 alt_max_fd
08003b7c g     O .rwdata	00000004 _global_impure_ptr
080052fc g       *ABS*	00000000 __bss_end
080016e0 g     F .text	000000e8 alt_iic_isr_register
08001ca4 g     F .text	00000108 alt_tick
08001694 g     F .text	0000004c alt_ic_irq_enabled
08001c00 g     F .text	000000a4 alt_alarm_stop
080051e8 g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000c8 alt_irq_handler
0800358c g     O .rwdata	00000028 alt_dev_null
08001318 g     F .text	00000020 alt_dcache_flush_all
08003b84 g       *ABS*	00000000 __ram_rwdata_end
08003b60 g     O .rwdata	00000008 alt_dev_list
0800252c g       *ABS*	00000000 __ram_rodata_end
080052fc g       *ABS*	00000000 end
080006bc g     F .text	000000c0 altera_avalon_jtag_uart_init
080001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
080024f8 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08001048 g     F .text	00000084 alt_avalon_timer_sc_init
08000da4 g     F .text	00000228 altera_avalon_jtag_uart_write
080023a0 g     F .text	00000120 __call_exitprocs
08000224 g     F .text	0000003c _start
080051ec g     O .bss	00000004 _alt_tick_rate
080051f0 g     O .bss	00000004 _alt_nticks
080004f4 g     F .text	00000064 alt_sys_init
08002310 g     F .text	00000090 __register_exitproc
08000a28 g     F .text	00000068 altera_avalon_jtag_uart_close
0800252c g       *ABS*	00000000 __ram_rwdata_start
080024f8 g       *ABS*	00000000 __ram_rodata_start
08000558 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08001f68 g     F .text	000000b8 alt_get_fd
08002100 g     F .text	00000078 memcmp
08000618 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080052fc g       *ABS*	00000000 __alt_stack_base
08000668 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08001e60 g     F .text	00000108 alt_find_file
080013a0 g     F .text	000000a8 alt_dev_llist_insert
080051dc g       *ABS*	00000000 __bss_start
08000260 g     F .text	000000bc main
080051e4 g     O .bss	00000004 alt_envp
080005b8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08003b6c g     O .rwdata	00000004 alt_errno
080024f8 g       *ABS*	00000000 __CTOR_END__
080024f8 g       *ABS*	00000000 __flash_rodata_start
080024f8 g       *ABS*	00000000 __DTOR_LIST__
080004b8 g     F .text	0000003c alt_irq_init
08001b90 g     F .text	00000070 alt_release_fd
080020b8 g     F .text	00000014 atexit
08003b80 g     O .rwdata	00000004 _impure_ptr
080051dc g     O .bss	00000004 alt_argc
080014ac g     F .text	00000064 _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
08003b58 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08001530 g     F .text	00000050 alt_ic_isr_register
08003b84 g       *ABS*	00000000 _edata
080052fc g       *ABS*	00000000 _end
08000224 g       *ABS*	00000000 __ram_exceptions_end
08000a90 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
08001608 g     F .text	0000008c alt_ic_irq_disable
080020cc g     F .text	00000034 exit
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000000 g       *ABS*	00000000 __alt_mem_sdram
080024c0 g     F .text	00000038 _exit
080010cc g     F .text	00000134 alt_alarm_start
08002278 g     F .text	00000098 strlen
08001a30 g     F .text	00000160 open
08001510 g     F .text	00000020 alt_icache_flush_all
08003b70 g     O .rwdata	00000004 alt_priority_mask
08001580 g     F .text	00000088 alt_ic_irq_enable
08003b74 g     O .rwdata	00000008 alt_alarm_list
08001448 g     F .text	00000064 _do_ctors
0800123c g     F .text	000000dc close
08000384 g     F .text	00000084 alt_load



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408914 	ori	at,at,548
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001c40 	call	80001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0ffff17 	ldw	r3,-4(fp)
 8000130:	e0bffe17 	ldw	r2,-8(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001126 	beq	r2,zero,8000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	e0bffd17 	ldw	r2,-12(fp)
 8000140:	100690fa 	slli	r3,r2,3
 8000144:	00820034 	movhi	r2,2048
 8000148:	1885883a 	add	r2,r3,r2
 800014c:	10d47f17 	ldw	r3,20988(r2)
 8000150:	e0bffd17 	ldw	r2,-12(fp)
 8000154:	100890fa 	slli	r4,r2,3
 8000158:	00820034 	movhi	r2,2048
 800015c:	2085883a 	add	r2,r4,r2
 8000160:	10948017 	ldw	r2,20992(r2)
 8000164:	1009883a 	mov	r4,r2
 8000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 800016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 8000170:	0005313a 	rdctl	r2,ipending
 8000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 8000178:	e0bffb17 	ldw	r2,-20(fp)
 800017c:	00000706 	br	800019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 8000180:	e0bffe17 	ldw	r2,-8(fp)
 8000184:	1085883a 	add	r2,r2,r2
 8000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 800018c:	e0bffd17 	ldw	r2,-12(fp)
 8000190:	10800044 	addi	r2,r2,1
 8000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 8000198:	003fe406 	br	800012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 800019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 80001a0:	e0bfff17 	ldw	r2,-4(fp)
 80001a4:	103fde1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a8:	0001883a 	nop
}
 80001ac:	0001883a 	nop
 80001b0:	e037883a 	mov	sp,fp
 80001b4:	dfc00117 	ldw	ra,4(sp)
 80001b8:	df000017 	ldw	fp,0(sp)
 80001bc:	dec00204 	addi	sp,sp,8
 80001c0:	f800283a 	ret

080001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001c4:	defffb04 	addi	sp,sp,-20
 80001c8:	dfc00415 	stw	ra,16(sp)
 80001cc:	df000315 	stw	fp,12(sp)
 80001d0:	df000304 	addi	fp,sp,12
 80001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001d8:	00bfffc4 	movi	r2,-1
 80001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 80001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001e4:	d0a5a717 	ldw	r2,-26980(gp)
 80001e8:	10000726 	beq	r2,zero,8000208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001ec:	d0a5a717 	ldw	r2,-26980(gp)
 80001f0:	e0ffff17 	ldw	r3,-4(fp)
 80001f4:	e1bffe17 	ldw	r6,-8(fp)
 80001f8:	e17ffd17 	ldw	r5,-12(fp)
 80001fc:	1809883a 	mov	r4,r3
 8000200:	103ee83a 	callr	r2
 8000204:	00000206 	br	8000210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800020c:	0005883a 	mov	r2,zero
}
 8000210:	e037883a 	mov	sp,fp
 8000214:	dfc00117 	ldw	ra,4(sp)
 8000218:	df000017 	ldw	fp,0(sp)
 800021c:	dec00204 	addi	sp,sp,8
 8000220:	f800283a 	ret

Disassembly of section .text:

08000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000224:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800022c:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 8000230:	d6aed614 	ori	gp,gp,47960
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000234:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000238:	10947714 	ori	r2,r2,20956

    movhi r3, %hi(__bss_end)
 800023c:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 8000240:	18d4bf14 	ori	r3,r3,21244

    beq r2, r3, 1f
 8000244:	10c00326 	beq	r2,r3,8000254 <_start+0x30>

0:
    stw zero, (r2)
 8000248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000250:	10fffd36 	bltu	r2,r3,8000248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000254:	80003840 	call	8000384 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000258:	80004080 	call	8000408 <alt_main>

0800025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800025c:	003fff06 	br	800025c <alt_after_alt_main>

08000260 <main>:
int main()
{
 8000260:	defffa04 	addi	sp,sp,-24
 8000264:	df000515 	stw	fp,20(sp)
 8000268:	df000504 	addi	fp,sp,20
		unsigned int volatile out_set;
		unsigned int volatile out_clear;
	}NIOS_PIO_t;

	//int i = 0;
	NIOS_PIO_t* LED_PIO = (NIOS_PIO_t*)0x70;
 800026c:	00801c04 	movi	r2,112
 8000270:	e0bffe15 	stw	r2,-8(fp)
	NIOS_PIO_t* SW = (NIOS_PIO_t*)0x60;
 8000274:	00801804 	movi	r2,96
 8000278:	e0bffd15 	stw	r2,-12(fp)
	NIOS_PIO_t* acc = (NIOS_PIO_t*)0x50;
 800027c:	00801404 	movi	r2,80
 8000280:	e0bffc15 	stw	r2,-16(fp)


	LED_PIO->data = 0;
 8000284:	e0bffe17 	ldw	r2,-8(fp)
 8000288:	10000015 	stw	zero,0(r2)
	//unsigned int volatile SW_value = SW->data;
	int acc_down = 0;
 800028c:	e03fff15 	stw	zero,-4(fp)
	unsigned int volatile acc_val = 0;
 8000290:	e03ffb15 	stw	zero,-20(fp)
	while((1+1) != 3)
	{
		acc_val = acc->data;
 8000294:	e0bffc17 	ldw	r2,-16(fp)
 8000298:	10800017 	ldw	r2,0(r2)
 800029c:	e0bffb15 	stw	r2,-20(fp)
		//SW_value = SW->data;
		if(acc_val == 0 && acc_down == 0){
 80002a0:	e0bffb17 	ldw	r2,-20(fp)
 80002a4:	1000151e 	bne	r2,zero,80002fc <main+0x9c>
 80002a8:	e0bfff17 	ldw	r2,-4(fp)
 80002ac:	1000131e 	bne	r2,zero,80002fc <main+0x9c>
			LED_PIO->data += SW->data;
 80002b0:	e0bffd17 	ldw	r2,-12(fp)
 80002b4:	10c00017 	ldw	r3,0(r2)
 80002b8:	e0bffe17 	ldw	r2,-8(fp)
 80002bc:	10800017 	ldw	r2,0(r2)
 80002c0:	1887883a 	add	r3,r3,r2
 80002c4:	e0bffe17 	ldw	r2,-8(fp)
 80002c8:	10c00015 	stw	r3,0(r2)
			if(LED_PIO->data > 255){
 80002cc:	e0bffe17 	ldw	r2,-8(fp)
 80002d0:	10800017 	ldw	r2,0(r2)
 80002d4:	10804030 	cmpltui	r2,r2,256
 80002d8:	1000051e 	bne	r2,zero,80002f0 <main+0x90>
				LED_PIO->data -= 266;
 80002dc:	e0bffe17 	ldw	r2,-8(fp)
 80002e0:	10800017 	ldw	r2,0(r2)
 80002e4:	10ffbd84 	addi	r3,r2,-266
 80002e8:	e0bffe17 	ldw	r2,-8(fp)
 80002ec:	10c00015 	stw	r3,0(r2)
			}
			acc_down = 1;
 80002f0:	00800044 	movi	r2,1
 80002f4:	e0bfff15 	stw	r2,-4(fp)
 80002f8:	00000706 	br	8000318 <main+0xb8>
		} else if (acc_val == 1 && acc_down == 1){
 80002fc:	e0bffb17 	ldw	r2,-20(fp)
 8000300:	10800058 	cmpnei	r2,r2,1
 8000304:	103fe31e 	bne	r2,zero,8000294 <main+0x34>
 8000308:	e0bfff17 	ldw	r2,-4(fp)
 800030c:	10800058 	cmpnei	r2,r2,1
 8000310:	103fe01e 	bne	r2,zero,8000294 <main+0x34>
			acc_down = 0;
 8000314:	e03fff15 	stw	zero,-4(fp)
		acc_val = acc->data;
 8000318:	003fde06 	br	8000294 <main+0x34>

0800031c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800031c:	defffc04 	addi	sp,sp,-16
 8000320:	df000315 	stw	fp,12(sp)
 8000324:	df000304 	addi	fp,sp,12
 8000328:	e13fff15 	stw	r4,-4(fp)
 800032c:	e17ffe15 	stw	r5,-8(fp)
 8000330:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 8000334:	e0fffe17 	ldw	r3,-8(fp)
 8000338:	e0bfff17 	ldw	r2,-4(fp)
 800033c:	18800c26 	beq	r3,r2,8000370 <alt_load_section+0x54>
  {
    while( to != end )
 8000340:	00000806 	br	8000364 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8000344:	e0ffff17 	ldw	r3,-4(fp)
 8000348:	18800104 	addi	r2,r3,4
 800034c:	e0bfff15 	stw	r2,-4(fp)
 8000350:	e0bffe17 	ldw	r2,-8(fp)
 8000354:	11000104 	addi	r4,r2,4
 8000358:	e13ffe15 	stw	r4,-8(fp)
 800035c:	18c00017 	ldw	r3,0(r3)
 8000360:	10c00015 	stw	r3,0(r2)
    while( to != end )
 8000364:	e0fffe17 	ldw	r3,-8(fp)
 8000368:	e0bffd17 	ldw	r2,-12(fp)
 800036c:	18bff51e 	bne	r3,r2,8000344 <alt_load_section+0x28>
    }
  }
}
 8000370:	0001883a 	nop
 8000374:	e037883a 	mov	sp,fp
 8000378:	df000017 	ldw	fp,0(sp)
 800037c:	dec00104 	addi	sp,sp,4
 8000380:	f800283a 	ret

08000384 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8000384:	defffe04 	addi	sp,sp,-8
 8000388:	dfc00115 	stw	ra,4(sp)
 800038c:	df000015 	stw	fp,0(sp)
 8000390:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8000394:	01820034 	movhi	r6,2048
 8000398:	318ee104 	addi	r6,r6,15236
 800039c:	01420034 	movhi	r5,2048
 80003a0:	29494b04 	addi	r5,r5,9516
 80003a4:	01020034 	movhi	r4,2048
 80003a8:	210ee104 	addi	r4,r4,15236
 80003ac:	800031c0 	call	800031c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80003b0:	01820034 	movhi	r6,2048
 80003b4:	31808904 	addi	r6,r6,548
 80003b8:	01420034 	movhi	r5,2048
 80003bc:	29400804 	addi	r5,r5,32
 80003c0:	01020034 	movhi	r4,2048
 80003c4:	21000804 	addi	r4,r4,32
 80003c8:	800031c0 	call	800031c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 80003cc:	01820034 	movhi	r6,2048
 80003d0:	31894b04 	addi	r6,r6,9516
 80003d4:	01420034 	movhi	r5,2048
 80003d8:	29493e04 	addi	r5,r5,9464
 80003dc:	01020034 	movhi	r4,2048
 80003e0:	21093e04 	addi	r4,r4,9464
 80003e4:	800031c0 	call	800031c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80003e8:	80013180 	call	8001318 <alt_dcache_flush_all>
  alt_icache_flush_all();
 80003ec:	80015100 	call	8001510 <alt_icache_flush_all>
}
 80003f0:	0001883a 	nop
 80003f4:	e037883a 	mov	sp,fp
 80003f8:	dfc00117 	ldw	ra,4(sp)
 80003fc:	df000017 	ldw	fp,0(sp)
 8000400:	dec00204 	addi	sp,sp,8
 8000404:	f800283a 	ret

08000408 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8000408:	defffd04 	addi	sp,sp,-12
 800040c:	dfc00215 	stw	ra,8(sp)
 8000410:	df000115 	stw	fp,4(sp)
 8000414:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8000418:	0009883a 	mov	r4,zero
 800041c:	80004b80 	call	80004b8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8000420:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8000424:	80004f40 	call	80004f4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8000428:	01820034 	movhi	r6,2048
 800042c:	31893e04 	addi	r6,r6,9464
 8000430:	01420034 	movhi	r5,2048
 8000434:	29493e04 	addi	r5,r5,9464
 8000438:	01020034 	movhi	r4,2048
 800043c:	21093e04 	addi	r4,r4,9464
 8000440:	800189c0 	call	800189c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8000444:	80014480 	call	8001448 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8000448:	01020034 	movhi	r4,2048
 800044c:	21052b04 	addi	r4,r4,5292
 8000450:	80020b80 	call	80020b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8000454:	d0a5a117 	ldw	r2,-27004(gp)
 8000458:	d0e5a217 	ldw	r3,-27000(gp)
 800045c:	d125a317 	ldw	r4,-26996(gp)
 8000460:	200d883a 	mov	r6,r4
 8000464:	180b883a 	mov	r5,r3
 8000468:	1009883a 	mov	r4,r2
 800046c:	80002600 	call	8000260 <main>
 8000470:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8000474:	01000044 	movi	r4,1
 8000478:	800123c0 	call	800123c <close>
  exit (result);
 800047c:	e13fff17 	ldw	r4,-4(fp)
 8000480:	80020cc0 	call	80020cc <exit>

08000484 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8000484:	defffd04 	addi	sp,sp,-12
 8000488:	dfc00215 	stw	ra,8(sp)
 800048c:	df000115 	stw	fp,4(sp)
 8000490:	df000104 	addi	fp,sp,4
 8000494:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8000498:	d1600204 	addi	r5,gp,-32760
 800049c:	e13fff17 	ldw	r4,-4(fp)
 80004a0:	80013a00 	call	80013a0 <alt_dev_llist_insert>
}
 80004a4:	e037883a 	mov	sp,fp
 80004a8:	dfc00117 	ldw	ra,4(sp)
 80004ac:	df000017 	ldw	fp,0(sp)
 80004b0:	dec00204 	addi	sp,sp,8
 80004b4:	f800283a 	ret

080004b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80004b8:	defffd04 	addi	sp,sp,-12
 80004bc:	dfc00215 	stw	ra,8(sp)
 80004c0:	df000115 	stw	fp,4(sp)
 80004c4:	df000104 	addi	fp,sp,4
 80004c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 80004cc:	8001dac0 	call	8001dac <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80004d0:	00800044 	movi	r2,1
 80004d4:	1001703a 	wrctl	status,r2
}
 80004d8:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 80004dc:	0001883a 	nop
 80004e0:	e037883a 	mov	sp,fp
 80004e4:	dfc00117 	ldw	ra,4(sp)
 80004e8:	df000017 	ldw	fp,0(sp)
 80004ec:	dec00204 	addi	sp,sp,8
 80004f0:	f800283a 	ret

080004f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80004f4:	defffe04 	addi	sp,sp,-8
 80004f8:	dfc00115 	stw	ra,4(sp)
 80004fc:	df000015 	stw	fp,0(sp)
 8000500:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8000504:	01c0fa04 	movi	r7,1000
 8000508:	01800084 	movi	r6,2
 800050c:	000b883a 	mov	r5,zero
 8000510:	01002004 	movi	r4,128
 8000514:	80010480 	call	8001048 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8000518:	01800044 	movi	r6,1
 800051c:	000b883a 	mov	r5,zero
 8000520:	01020034 	movhi	r4,2048
 8000524:	21095504 	addi	r4,r4,9556
 8000528:	80006bc0 	call	80006bc <altera_avalon_jtag_uart_init>
 800052c:	01020034 	movhi	r4,2048
 8000530:	21094b04 	addi	r4,r4,9516
 8000534:	80004840 	call	8000484 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 8000538:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800053c:	0001883a 	nop
}
 8000540:	0001883a 	nop
 8000544:	e037883a 	mov	sp,fp
 8000548:	dfc00117 	ldw	ra,4(sp)
 800054c:	df000017 	ldw	fp,0(sp)
 8000550:	dec00204 	addi	sp,sp,8
 8000554:	f800283a 	ret

08000558 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8000558:	defffa04 	addi	sp,sp,-24
 800055c:	dfc00515 	stw	ra,20(sp)
 8000560:	df000415 	stw	fp,16(sp)
 8000564:	df000404 	addi	fp,sp,16
 8000568:	e13ffe15 	stw	r4,-8(fp)
 800056c:	e17ffd15 	stw	r5,-12(fp)
 8000570:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8000574:	e0bffe17 	ldw	r2,-8(fp)
 8000578:	10800017 	ldw	r2,0(r2)
 800057c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8000580:	e0bfff17 	ldw	r2,-4(fp)
 8000584:	10c00a04 	addi	r3,r2,40
 8000588:	e0bffe17 	ldw	r2,-8(fp)
 800058c:	10800217 	ldw	r2,8(r2)
 8000590:	100f883a 	mov	r7,r2
 8000594:	e1bffc17 	ldw	r6,-16(fp)
 8000598:	e17ffd17 	ldw	r5,-12(fp)
 800059c:	1809883a 	mov	r4,r3
 80005a0:	8000b840 	call	8000b84 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80005a4:	e037883a 	mov	sp,fp
 80005a8:	dfc00117 	ldw	ra,4(sp)
 80005ac:	df000017 	ldw	fp,0(sp)
 80005b0:	dec00204 	addi	sp,sp,8
 80005b4:	f800283a 	ret

080005b8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80005b8:	defffa04 	addi	sp,sp,-24
 80005bc:	dfc00515 	stw	ra,20(sp)
 80005c0:	df000415 	stw	fp,16(sp)
 80005c4:	df000404 	addi	fp,sp,16
 80005c8:	e13ffe15 	stw	r4,-8(fp)
 80005cc:	e17ffd15 	stw	r5,-12(fp)
 80005d0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80005d4:	e0bffe17 	ldw	r2,-8(fp)
 80005d8:	10800017 	ldw	r2,0(r2)
 80005dc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80005e0:	e0bfff17 	ldw	r2,-4(fp)
 80005e4:	10c00a04 	addi	r3,r2,40
 80005e8:	e0bffe17 	ldw	r2,-8(fp)
 80005ec:	10800217 	ldw	r2,8(r2)
 80005f0:	100f883a 	mov	r7,r2
 80005f4:	e1bffc17 	ldw	r6,-16(fp)
 80005f8:	e17ffd17 	ldw	r5,-12(fp)
 80005fc:	1809883a 	mov	r4,r3
 8000600:	8000da40 	call	8000da4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8000604:	e037883a 	mov	sp,fp
 8000608:	dfc00117 	ldw	ra,4(sp)
 800060c:	df000017 	ldw	fp,0(sp)
 8000610:	dec00204 	addi	sp,sp,8
 8000614:	f800283a 	ret

08000618 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8000618:	defffc04 	addi	sp,sp,-16
 800061c:	dfc00315 	stw	ra,12(sp)
 8000620:	df000215 	stw	fp,8(sp)
 8000624:	df000204 	addi	fp,sp,8
 8000628:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800062c:	e0bffe17 	ldw	r2,-8(fp)
 8000630:	10800017 	ldw	r2,0(r2)
 8000634:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8000638:	e0bfff17 	ldw	r2,-4(fp)
 800063c:	10c00a04 	addi	r3,r2,40
 8000640:	e0bffe17 	ldw	r2,-8(fp)
 8000644:	10800217 	ldw	r2,8(r2)
 8000648:	100b883a 	mov	r5,r2
 800064c:	1809883a 	mov	r4,r3
 8000650:	8000a280 	call	8000a28 <altera_avalon_jtag_uart_close>
}
 8000654:	e037883a 	mov	sp,fp
 8000658:	dfc00117 	ldw	ra,4(sp)
 800065c:	df000017 	ldw	fp,0(sp)
 8000660:	dec00204 	addi	sp,sp,8
 8000664:	f800283a 	ret

08000668 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8000668:	defffa04 	addi	sp,sp,-24
 800066c:	dfc00515 	stw	ra,20(sp)
 8000670:	df000415 	stw	fp,16(sp)
 8000674:	df000404 	addi	fp,sp,16
 8000678:	e13ffe15 	stw	r4,-8(fp)
 800067c:	e17ffd15 	stw	r5,-12(fp)
 8000680:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8000684:	e0bffe17 	ldw	r2,-8(fp)
 8000688:	10800017 	ldw	r2,0(r2)
 800068c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8000690:	e0bfff17 	ldw	r2,-4(fp)
 8000694:	10800a04 	addi	r2,r2,40
 8000698:	e1bffc17 	ldw	r6,-16(fp)
 800069c:	e17ffd17 	ldw	r5,-12(fp)
 80006a0:	1009883a 	mov	r4,r2
 80006a4:	8000a900 	call	8000a90 <altera_avalon_jtag_uart_ioctl>
}
 80006a8:	e037883a 	mov	sp,fp
 80006ac:	dfc00117 	ldw	ra,4(sp)
 80006b0:	df000017 	ldw	fp,0(sp)
 80006b4:	dec00204 	addi	sp,sp,8
 80006b8:	f800283a 	ret

080006bc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80006bc:	defffa04 	addi	sp,sp,-24
 80006c0:	dfc00515 	stw	ra,20(sp)
 80006c4:	df000415 	stw	fp,16(sp)
 80006c8:	df000404 	addi	fp,sp,16
 80006cc:	e13fff15 	stw	r4,-4(fp)
 80006d0:	e17ffe15 	stw	r5,-8(fp)
 80006d4:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80006d8:	e0bfff17 	ldw	r2,-4(fp)
 80006dc:	00c00044 	movi	r3,1
 80006e0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 80006e4:	e0bfff17 	ldw	r2,-4(fp)
 80006e8:	10800017 	ldw	r2,0(r2)
 80006ec:	10800104 	addi	r2,r2,4
 80006f0:	1007883a 	mov	r3,r2
 80006f4:	e0bfff17 	ldw	r2,-4(fp)
 80006f8:	10800817 	ldw	r2,32(r2)
 80006fc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8000700:	e0bffe17 	ldw	r2,-8(fp)
 8000704:	e0fffd17 	ldw	r3,-12(fp)
 8000708:	d8000015 	stw	zero,0(sp)
 800070c:	e1ffff17 	ldw	r7,-4(fp)
 8000710:	01820034 	movhi	r6,2048
 8000714:	3181df04 	addi	r6,r6,1916
 8000718:	180b883a 	mov	r5,r3
 800071c:	1009883a 	mov	r4,r2
 8000720:	80015300 	call	8001530 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8000724:	e0bfff17 	ldw	r2,-4(fp)
 8000728:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800072c:	e0bfff17 	ldw	r2,-4(fp)
 8000730:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8000734:	d0e5a517 	ldw	r3,-26988(gp)
 8000738:	e1ffff17 	ldw	r7,-4(fp)
 800073c:	01820034 	movhi	r6,2048
 8000740:	31826204 	addi	r6,r6,2440
 8000744:	180b883a 	mov	r5,r3
 8000748:	1009883a 	mov	r4,r2
 800074c:	80010cc0 	call	80010cc <alt_alarm_start>
 8000750:	1000040e 	bge	r2,zero,8000764 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8000754:	e0ffff17 	ldw	r3,-4(fp)
 8000758:	00a00034 	movhi	r2,32768
 800075c:	10bfffc4 	addi	r2,r2,-1
 8000760:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8000764:	0001883a 	nop
 8000768:	e037883a 	mov	sp,fp
 800076c:	dfc00117 	ldw	ra,4(sp)
 8000770:	df000017 	ldw	fp,0(sp)
 8000774:	dec00204 	addi	sp,sp,8
 8000778:	f800283a 	ret

0800077c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800077c:	defff804 	addi	sp,sp,-32
 8000780:	df000715 	stw	fp,28(sp)
 8000784:	df000704 	addi	fp,sp,28
 8000788:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800078c:	e0bff917 	ldw	r2,-28(fp)
 8000790:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 8000794:	e0bffd17 	ldw	r2,-12(fp)
 8000798:	10800017 	ldw	r2,0(r2)
 800079c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80007a0:	e0bffc17 	ldw	r2,-16(fp)
 80007a4:	10800104 	addi	r2,r2,4
 80007a8:	10800037 	ldwio	r2,0(r2)
 80007ac:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80007b0:	e0bffb17 	ldw	r2,-20(fp)
 80007b4:	1080c00c 	andi	r2,r2,768
 80007b8:	10006d26 	beq	r2,zero,8000970 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80007bc:	e0bffb17 	ldw	r2,-20(fp)
 80007c0:	1080400c 	andi	r2,r2,256
 80007c4:	10003526 	beq	r2,zero,800089c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80007c8:	00800074 	movhi	r2,1
 80007cc:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80007d0:	e0bffd17 	ldw	r2,-12(fp)
 80007d4:	10800a17 	ldw	r2,40(r2)
 80007d8:	10800044 	addi	r2,r2,1
 80007dc:	1081ffcc 	andi	r2,r2,2047
 80007e0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 80007e4:	e0bffd17 	ldw	r2,-12(fp)
 80007e8:	10800b17 	ldw	r2,44(r2)
 80007ec:	e0fffa17 	ldw	r3,-24(fp)
 80007f0:	18801526 	beq	r3,r2,8000848 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 80007f4:	e0bffc17 	ldw	r2,-16(fp)
 80007f8:	10800037 	ldwio	r2,0(r2)
 80007fc:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8000800:	e0bfff17 	ldw	r2,-4(fp)
 8000804:	10a0000c 	andi	r2,r2,32768
 8000808:	10001126 	beq	r2,zero,8000850 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800080c:	e0bffd17 	ldw	r2,-12(fp)
 8000810:	10800a17 	ldw	r2,40(r2)
 8000814:	e0ffff17 	ldw	r3,-4(fp)
 8000818:	1809883a 	mov	r4,r3
 800081c:	e0fffd17 	ldw	r3,-12(fp)
 8000820:	1885883a 	add	r2,r3,r2
 8000824:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000828:	e0bffd17 	ldw	r2,-12(fp)
 800082c:	10800a17 	ldw	r2,40(r2)
 8000830:	10800044 	addi	r2,r2,1
 8000834:	10c1ffcc 	andi	r3,r2,2047
 8000838:	e0bffd17 	ldw	r2,-12(fp)
 800083c:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 8000840:	0001883a 	nop
      {
 8000844:	003fe206 	br	80007d0 <altera_avalon_jtag_uart_irq+0x54>
          break;
 8000848:	0001883a 	nop
 800084c:	00000106 	br	8000854 <altera_avalon_jtag_uart_irq+0xd8>
          break;
 8000850:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8000854:	e0bfff17 	ldw	r2,-4(fp)
 8000858:	10bfffec 	andhi	r2,r2,65535
 800085c:	10000f26 	beq	r2,zero,800089c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8000860:	e0bffd17 	ldw	r2,-12(fp)
 8000864:	10c00817 	ldw	r3,32(r2)
 8000868:	00bfff84 	movi	r2,-2
 800086c:	1886703a 	and	r3,r3,r2
 8000870:	e0bffd17 	ldw	r2,-12(fp)
 8000874:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8000878:	e0bffc17 	ldw	r2,-16(fp)
 800087c:	10800104 	addi	r2,r2,4
 8000880:	1007883a 	mov	r3,r2
 8000884:	e0bffd17 	ldw	r2,-12(fp)
 8000888:	10800817 	ldw	r2,32(r2)
 800088c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8000890:	e0bffc17 	ldw	r2,-16(fp)
 8000894:	10800104 	addi	r2,r2,4
 8000898:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800089c:	e0bffb17 	ldw	r2,-20(fp)
 80008a0:	1080800c 	andi	r2,r2,512
 80008a4:	103fbe26 	beq	r2,zero,80007a0 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80008a8:	e0bffb17 	ldw	r2,-20(fp)
 80008ac:	1004d43a 	srli	r2,r2,16
 80008b0:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80008b4:	00001406 	br	8000908 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80008b8:	e0bffc17 	ldw	r2,-16(fp)
 80008bc:	e0fffd17 	ldw	r3,-12(fp)
 80008c0:	18c00d17 	ldw	r3,52(r3)
 80008c4:	e13ffd17 	ldw	r4,-12(fp)
 80008c8:	20c7883a 	add	r3,r4,r3
 80008cc:	18c20e03 	ldbu	r3,2104(r3)
 80008d0:	18c03fcc 	andi	r3,r3,255
 80008d4:	18c0201c 	xori	r3,r3,128
 80008d8:	18ffe004 	addi	r3,r3,-128
 80008dc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80008e0:	e0bffd17 	ldw	r2,-12(fp)
 80008e4:	10800d17 	ldw	r2,52(r2)
 80008e8:	10800044 	addi	r2,r2,1
 80008ec:	10c1ffcc 	andi	r3,r2,2047
 80008f0:	e0bffd17 	ldw	r2,-12(fp)
 80008f4:	10c00d15 	stw	r3,52(r2)
 80008f8:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 80008fc:	e0bffe17 	ldw	r2,-8(fp)
 8000900:	10bfffc4 	addi	r2,r2,-1
 8000904:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 8000908:	e0bffe17 	ldw	r2,-8(fp)
 800090c:	10000526 	beq	r2,zero,8000924 <altera_avalon_jtag_uart_irq+0x1a8>
 8000910:	e0bffd17 	ldw	r2,-12(fp)
 8000914:	10c00d17 	ldw	r3,52(r2)
 8000918:	e0bffd17 	ldw	r2,-12(fp)
 800091c:	10800c17 	ldw	r2,48(r2)
 8000920:	18bfe51e 	bne	r3,r2,80008b8 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
 8000924:	e0bffe17 	ldw	r2,-8(fp)
 8000928:	103f9d26 	beq	r2,zero,80007a0 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800092c:	e0bffd17 	ldw	r2,-12(fp)
 8000930:	10c00817 	ldw	r3,32(r2)
 8000934:	00bfff44 	movi	r2,-3
 8000938:	1886703a 	and	r3,r3,r2
 800093c:	e0bffd17 	ldw	r2,-12(fp)
 8000940:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8000944:	e0bffd17 	ldw	r2,-12(fp)
 8000948:	10800017 	ldw	r2,0(r2)
 800094c:	10800104 	addi	r2,r2,4
 8000950:	1007883a 	mov	r3,r2
 8000954:	e0bffd17 	ldw	r2,-12(fp)
 8000958:	10800817 	ldw	r2,32(r2)
 800095c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8000960:	e0bffc17 	ldw	r2,-16(fp)
 8000964:	10800104 	addi	r2,r2,4
 8000968:	10800037 	ldwio	r2,0(r2)
  {
 800096c:	003f8c06 	br	80007a0 <altera_avalon_jtag_uart_irq+0x24>
      break;
 8000970:	0001883a 	nop
      }
    }
  }
}
 8000974:	0001883a 	nop
 8000978:	e037883a 	mov	sp,fp
 800097c:	df000017 	ldw	fp,0(sp)
 8000980:	dec00104 	addi	sp,sp,4
 8000984:	f800283a 	ret

08000988 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8000988:	defffc04 	addi	sp,sp,-16
 800098c:	df000315 	stw	fp,12(sp)
 8000990:	df000304 	addi	fp,sp,12
 8000994:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8000998:	e0bffd17 	ldw	r2,-12(fp)
 800099c:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80009a0:	e0bfff17 	ldw	r2,-4(fp)
 80009a4:	10800017 	ldw	r2,0(r2)
 80009a8:	10800104 	addi	r2,r2,4
 80009ac:	10800037 	ldwio	r2,0(r2)
 80009b0:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80009b4:	e0bffe17 	ldw	r2,-8(fp)
 80009b8:	1081000c 	andi	r2,r2,1024
 80009bc:	10000b26 	beq	r2,zero,80009ec <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80009c0:	e0bfff17 	ldw	r2,-4(fp)
 80009c4:	10800017 	ldw	r2,0(r2)
 80009c8:	10800104 	addi	r2,r2,4
 80009cc:	1007883a 	mov	r3,r2
 80009d0:	e0bfff17 	ldw	r2,-4(fp)
 80009d4:	10800817 	ldw	r2,32(r2)
 80009d8:	10810014 	ori	r2,r2,1024
 80009dc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80009e0:	e0bfff17 	ldw	r2,-4(fp)
 80009e4:	10000915 	stw	zero,36(r2)
 80009e8:	00000a06 	br	8000a14 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 80009ec:	e0bfff17 	ldw	r2,-4(fp)
 80009f0:	10c00917 	ldw	r3,36(r2)
 80009f4:	00a00034 	movhi	r2,32768
 80009f8:	10bfff04 	addi	r2,r2,-4
 80009fc:	10c00536 	bltu	r2,r3,8000a14 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8000a00:	e0bfff17 	ldw	r2,-4(fp)
 8000a04:	10800917 	ldw	r2,36(r2)
 8000a08:	10c00044 	addi	r3,r2,1
 8000a0c:	e0bfff17 	ldw	r2,-4(fp)
 8000a10:	10c00915 	stw	r3,36(r2)
 8000a14:	d0a5a517 	ldw	r2,-26988(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8000a18:	e037883a 	mov	sp,fp
 8000a1c:	df000017 	ldw	fp,0(sp)
 8000a20:	dec00104 	addi	sp,sp,4
 8000a24:	f800283a 	ret

08000a28 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8000a28:	defffd04 	addi	sp,sp,-12
 8000a2c:	df000215 	stw	fp,8(sp)
 8000a30:	df000204 	addi	fp,sp,8
 8000a34:	e13fff15 	stw	r4,-4(fp)
 8000a38:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8000a3c:	00000506 	br	8000a54 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8000a40:	e0bffe17 	ldw	r2,-8(fp)
 8000a44:	1090000c 	andi	r2,r2,16384
 8000a48:	10000226 	beq	r2,zero,8000a54 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8000a4c:	00bffd44 	movi	r2,-11
 8000a50:	00000b06 	br	8000a80 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8000a54:	e0bfff17 	ldw	r2,-4(fp)
 8000a58:	10c00d17 	ldw	r3,52(r2)
 8000a5c:	e0bfff17 	ldw	r2,-4(fp)
 8000a60:	10800c17 	ldw	r2,48(r2)
 8000a64:	18800526 	beq	r3,r2,8000a7c <altera_avalon_jtag_uart_close+0x54>
 8000a68:	e0bfff17 	ldw	r2,-4(fp)
 8000a6c:	10c00917 	ldw	r3,36(r2)
 8000a70:	e0bfff17 	ldw	r2,-4(fp)
 8000a74:	10800117 	ldw	r2,4(r2)
 8000a78:	18bff136 	bltu	r3,r2,8000a40 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 8000a7c:	0005883a 	mov	r2,zero
}
 8000a80:	e037883a 	mov	sp,fp
 8000a84:	df000017 	ldw	fp,0(sp)
 8000a88:	dec00104 	addi	sp,sp,4
 8000a8c:	f800283a 	ret

08000a90 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8000a90:	defffa04 	addi	sp,sp,-24
 8000a94:	df000515 	stw	fp,20(sp)
 8000a98:	df000504 	addi	fp,sp,20
 8000a9c:	e13ffd15 	stw	r4,-12(fp)
 8000aa0:	e17ffc15 	stw	r5,-16(fp)
 8000aa4:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 8000aa8:	00bff9c4 	movi	r2,-25
 8000aac:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 8000ab0:	e0bffc17 	ldw	r2,-16(fp)
 8000ab4:	109a8060 	cmpeqi	r2,r2,27137
 8000ab8:	1000041e 	bne	r2,zero,8000acc <altera_avalon_jtag_uart_ioctl+0x3c>
 8000abc:	e0bffc17 	ldw	r2,-16(fp)
 8000ac0:	109a80a0 	cmpeqi	r2,r2,27138
 8000ac4:	1000181e 	bne	r2,zero,8000b28 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 8000ac8:	00002906 	br	8000b70 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 8000acc:	e0bffd17 	ldw	r2,-12(fp)
 8000ad0:	10c00117 	ldw	r3,4(r2)
 8000ad4:	00a00034 	movhi	r2,32768
 8000ad8:	10bfffc4 	addi	r2,r2,-1
 8000adc:	18802126 	beq	r3,r2,8000b64 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 8000ae0:	e0bffb17 	ldw	r2,-20(fp)
 8000ae4:	10800017 	ldw	r2,0(r2)
 8000ae8:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8000aec:	e0bffe17 	ldw	r2,-8(fp)
 8000af0:	10800090 	cmplti	r2,r2,2
 8000af4:	1000061e 	bne	r2,zero,8000b10 <altera_avalon_jtag_uart_ioctl+0x80>
 8000af8:	e0fffe17 	ldw	r3,-8(fp)
 8000afc:	00a00034 	movhi	r2,32768
 8000b00:	10bfffc4 	addi	r2,r2,-1
 8000b04:	18800226 	beq	r3,r2,8000b10 <altera_avalon_jtag_uart_ioctl+0x80>
 8000b08:	e0bffe17 	ldw	r2,-8(fp)
 8000b0c:	00000206 	br	8000b18 <altera_avalon_jtag_uart_ioctl+0x88>
 8000b10:	00a00034 	movhi	r2,32768
 8000b14:	10bfff84 	addi	r2,r2,-2
 8000b18:	e0fffd17 	ldw	r3,-12(fp)
 8000b1c:	18800115 	stw	r2,4(r3)
      rc = 0;
 8000b20:	e03fff15 	stw	zero,-4(fp)
    break;
 8000b24:	00000f06 	br	8000b64 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 8000b28:	e0bffd17 	ldw	r2,-12(fp)
 8000b2c:	10c00117 	ldw	r3,4(r2)
 8000b30:	00a00034 	movhi	r2,32768
 8000b34:	10bfffc4 	addi	r2,r2,-1
 8000b38:	18800c26 	beq	r3,r2,8000b6c <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8000b3c:	e0bffd17 	ldw	r2,-12(fp)
 8000b40:	10c00917 	ldw	r3,36(r2)
 8000b44:	e0bffd17 	ldw	r2,-12(fp)
 8000b48:	10800117 	ldw	r2,4(r2)
 8000b4c:	1885803a 	cmpltu	r2,r3,r2
 8000b50:	10c03fcc 	andi	r3,r2,255
 8000b54:	e0bffb17 	ldw	r2,-20(fp)
 8000b58:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8000b5c:	e03fff15 	stw	zero,-4(fp)
    break;
 8000b60:	00000206 	br	8000b6c <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 8000b64:	0001883a 	nop
 8000b68:	00000106 	br	8000b70 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 8000b6c:	0001883a 	nop
  }

  return rc;
 8000b70:	e0bfff17 	ldw	r2,-4(fp)
}
 8000b74:	e037883a 	mov	sp,fp
 8000b78:	df000017 	ldw	fp,0(sp)
 8000b7c:	dec00104 	addi	sp,sp,4
 8000b80:	f800283a 	ret

08000b84 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8000b84:	defff304 	addi	sp,sp,-52
 8000b88:	dfc00c15 	stw	ra,48(sp)
 8000b8c:	df000b15 	stw	fp,44(sp)
 8000b90:	df000b04 	addi	fp,sp,44
 8000b94:	e13ff815 	stw	r4,-32(fp)
 8000b98:	e17ff715 	stw	r5,-36(fp)
 8000b9c:	e1bff615 	stw	r6,-40(fp)
 8000ba0:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 8000ba4:	e0bff717 	ldw	r2,-36(fp)
 8000ba8:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8000bac:	00004706 	br	8000ccc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8000bb0:	e0bff817 	ldw	r2,-32(fp)
 8000bb4:	10800a17 	ldw	r2,40(r2)
 8000bb8:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 8000bbc:	e0bff817 	ldw	r2,-32(fp)
 8000bc0:	10800b17 	ldw	r2,44(r2)
 8000bc4:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 8000bc8:	e0fffd17 	ldw	r3,-12(fp)
 8000bcc:	e0bffc17 	ldw	r2,-16(fp)
 8000bd0:	18800536 	bltu	r3,r2,8000be8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8000bd4:	e0fffd17 	ldw	r3,-12(fp)
 8000bd8:	e0bffc17 	ldw	r2,-16(fp)
 8000bdc:	1885c83a 	sub	r2,r3,r2
 8000be0:	e0bffe15 	stw	r2,-8(fp)
 8000be4:	00000406 	br	8000bf8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8000be8:	00c20004 	movi	r3,2048
 8000bec:	e0bffc17 	ldw	r2,-16(fp)
 8000bf0:	1885c83a 	sub	r2,r3,r2
 8000bf4:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 8000bf8:	e0bffe17 	ldw	r2,-8(fp)
 8000bfc:	10001e26 	beq	r2,zero,8000c78 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8000c00:	e0fff617 	ldw	r3,-40(fp)
 8000c04:	e0bffe17 	ldw	r2,-8(fp)
 8000c08:	1880022e 	bgeu	r3,r2,8000c14 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8000c0c:	e0bff617 	ldw	r2,-40(fp)
 8000c10:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8000c14:	e0bff817 	ldw	r2,-32(fp)
 8000c18:	10c00e04 	addi	r3,r2,56
 8000c1c:	e0bffc17 	ldw	r2,-16(fp)
 8000c20:	1885883a 	add	r2,r3,r2
 8000c24:	e1bffe17 	ldw	r6,-8(fp)
 8000c28:	100b883a 	mov	r5,r2
 8000c2c:	e13fff17 	ldw	r4,-4(fp)
 8000c30:	80021780 	call	8002178 <memcpy>
      ptr   += n;
 8000c34:	e0ffff17 	ldw	r3,-4(fp)
 8000c38:	e0bffe17 	ldw	r2,-8(fp)
 8000c3c:	1885883a 	add	r2,r3,r2
 8000c40:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 8000c44:	e0fff617 	ldw	r3,-40(fp)
 8000c48:	e0bffe17 	ldw	r2,-8(fp)
 8000c4c:	1885c83a 	sub	r2,r3,r2
 8000c50:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000c54:	e0fffc17 	ldw	r3,-16(fp)
 8000c58:	e0bffe17 	ldw	r2,-8(fp)
 8000c5c:	1885883a 	add	r2,r3,r2
 8000c60:	10c1ffcc 	andi	r3,r2,2047
 8000c64:	e0bff817 	ldw	r2,-32(fp)
 8000c68:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8000c6c:	e0bff617 	ldw	r2,-40(fp)
 8000c70:	00bfcf16 	blt	zero,r2,8000bb0 <altera_avalon_jtag_uart_read+0x2c>
 8000c74:	00000106 	br	8000c7c <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 8000c78:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 8000c7c:	e0ffff17 	ldw	r3,-4(fp)
 8000c80:	e0bff717 	ldw	r2,-36(fp)
 8000c84:	1880141e 	bne	r3,r2,8000cd8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8000c88:	e0bff517 	ldw	r2,-44(fp)
 8000c8c:	1090000c 	andi	r2,r2,16384
 8000c90:	1000131e 	bne	r2,zero,8000ce0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8000c94:	0001883a 	nop
 8000c98:	e0bff817 	ldw	r2,-32(fp)
 8000c9c:	10800a17 	ldw	r2,40(r2)
 8000ca0:	e0fffd17 	ldw	r3,-12(fp)
 8000ca4:	1880051e 	bne	r3,r2,8000cbc <altera_avalon_jtag_uart_read+0x138>
 8000ca8:	e0bff817 	ldw	r2,-32(fp)
 8000cac:	10c00917 	ldw	r3,36(r2)
 8000cb0:	e0bff817 	ldw	r2,-32(fp)
 8000cb4:	10800117 	ldw	r2,4(r2)
 8000cb8:	18bff736 	bltu	r3,r2,8000c98 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8000cbc:	e0bff817 	ldw	r2,-32(fp)
 8000cc0:	10800a17 	ldw	r2,40(r2)
 8000cc4:	e0fffd17 	ldw	r3,-12(fp)
 8000cc8:	18800726 	beq	r3,r2,8000ce8 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 8000ccc:	e0bff617 	ldw	r2,-40(fp)
 8000cd0:	00bfb716 	blt	zero,r2,8000bb0 <altera_avalon_jtag_uart_read+0x2c>
 8000cd4:	00000506 	br	8000cec <altera_avalon_jtag_uart_read+0x168>
      break;
 8000cd8:	0001883a 	nop
 8000cdc:	00000306 	br	8000cec <altera_avalon_jtag_uart_read+0x168>
      break;
 8000ce0:	0001883a 	nop
 8000ce4:	00000106 	br	8000cec <altera_avalon_jtag_uart_read+0x168>
      break;
 8000ce8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8000cec:	e0ffff17 	ldw	r3,-4(fp)
 8000cf0:	e0bff717 	ldw	r2,-36(fp)
 8000cf4:	18801926 	beq	r3,r2,8000d5c <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 8000cf8:	0005303a 	rdctl	r2,status
 8000cfc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8000d00:	e0fff917 	ldw	r3,-28(fp)
 8000d04:	00bfff84 	movi	r2,-2
 8000d08:	1884703a 	and	r2,r3,r2
 8000d0c:	1001703a 	wrctl	status,r2
  return context;
 8000d10:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8000d14:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8000d18:	e0bff817 	ldw	r2,-32(fp)
 8000d1c:	10800817 	ldw	r2,32(r2)
 8000d20:	10c00054 	ori	r3,r2,1
 8000d24:	e0bff817 	ldw	r2,-32(fp)
 8000d28:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8000d2c:	e0bff817 	ldw	r2,-32(fp)
 8000d30:	10800017 	ldw	r2,0(r2)
 8000d34:	10800104 	addi	r2,r2,4
 8000d38:	1007883a 	mov	r3,r2
 8000d3c:	e0bff817 	ldw	r2,-32(fp)
 8000d40:	10800817 	ldw	r2,32(r2)
 8000d44:	18800035 	stwio	r2,0(r3)
 8000d48:	e0bffb17 	ldw	r2,-20(fp)
 8000d4c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8000d50:	e0bffa17 	ldw	r2,-24(fp)
 8000d54:	1001703a 	wrctl	status,r2
}
 8000d58:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8000d5c:	e0ffff17 	ldw	r3,-4(fp)
 8000d60:	e0bff717 	ldw	r2,-36(fp)
 8000d64:	18800426 	beq	r3,r2,8000d78 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 8000d68:	e0ffff17 	ldw	r3,-4(fp)
 8000d6c:	e0bff717 	ldw	r2,-36(fp)
 8000d70:	1885c83a 	sub	r2,r3,r2
 8000d74:	00000606 	br	8000d90 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 8000d78:	e0bff517 	ldw	r2,-44(fp)
 8000d7c:	1090000c 	andi	r2,r2,16384
 8000d80:	10000226 	beq	r2,zero,8000d8c <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 8000d84:	00bffd44 	movi	r2,-11
 8000d88:	00000106 	br	8000d90 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 8000d8c:	00bffec4 	movi	r2,-5
}
 8000d90:	e037883a 	mov	sp,fp
 8000d94:	dfc00117 	ldw	ra,4(sp)
 8000d98:	df000017 	ldw	fp,0(sp)
 8000d9c:	dec00204 	addi	sp,sp,8
 8000da0:	f800283a 	ret

08000da4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8000da4:	defff304 	addi	sp,sp,-52
 8000da8:	dfc00c15 	stw	ra,48(sp)
 8000dac:	df000b15 	stw	fp,44(sp)
 8000db0:	df000b04 	addi	fp,sp,44
 8000db4:	e13ff815 	stw	r4,-32(fp)
 8000db8:	e17ff715 	stw	r5,-36(fp)
 8000dbc:	e1bff615 	stw	r6,-40(fp)
 8000dc0:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8000dc4:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8000dc8:	e0bff717 	ldw	r2,-36(fp)
 8000dcc:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8000dd0:	00003706 	br	8000eb0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8000dd4:	e0bff817 	ldw	r2,-32(fp)
 8000dd8:	10800c17 	ldw	r2,48(r2)
 8000ddc:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 8000de0:	e0bff817 	ldw	r2,-32(fp)
 8000de4:	10800d17 	ldw	r2,52(r2)
 8000de8:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 8000dec:	e0fffc17 	ldw	r3,-16(fp)
 8000df0:	e0bfff17 	ldw	r2,-4(fp)
 8000df4:	1880062e 	bgeu	r3,r2,8000e10 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8000df8:	e0ffff17 	ldw	r3,-4(fp)
 8000dfc:	e0bffc17 	ldw	r2,-16(fp)
 8000e00:	1885c83a 	sub	r2,r3,r2
 8000e04:	10bfffc4 	addi	r2,r2,-1
 8000e08:	e0bffe15 	stw	r2,-8(fp)
 8000e0c:	00000b06 	br	8000e3c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8000e10:	e0bfff17 	ldw	r2,-4(fp)
 8000e14:	10000526 	beq	r2,zero,8000e2c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8000e18:	00c20004 	movi	r3,2048
 8000e1c:	e0bffc17 	ldw	r2,-16(fp)
 8000e20:	1885c83a 	sub	r2,r3,r2
 8000e24:	e0bffe15 	stw	r2,-8(fp)
 8000e28:	00000406 	br	8000e3c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8000e2c:	00c1ffc4 	movi	r3,2047
 8000e30:	e0bffc17 	ldw	r2,-16(fp)
 8000e34:	1885c83a 	sub	r2,r3,r2
 8000e38:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 8000e3c:	e0bffe17 	ldw	r2,-8(fp)
 8000e40:	10001e26 	beq	r2,zero,8000ebc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8000e44:	e0fff617 	ldw	r3,-40(fp)
 8000e48:	e0bffe17 	ldw	r2,-8(fp)
 8000e4c:	1880022e 	bgeu	r3,r2,8000e58 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8000e50:	e0bff617 	ldw	r2,-40(fp)
 8000e54:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8000e58:	e0bff817 	ldw	r2,-32(fp)
 8000e5c:	10c20e04 	addi	r3,r2,2104
 8000e60:	e0bffc17 	ldw	r2,-16(fp)
 8000e64:	1885883a 	add	r2,r3,r2
 8000e68:	e1bffe17 	ldw	r6,-8(fp)
 8000e6c:	e17ff717 	ldw	r5,-36(fp)
 8000e70:	1009883a 	mov	r4,r2
 8000e74:	80021780 	call	8002178 <memcpy>
      ptr   += n;
 8000e78:	e0fff717 	ldw	r3,-36(fp)
 8000e7c:	e0bffe17 	ldw	r2,-8(fp)
 8000e80:	1885883a 	add	r2,r3,r2
 8000e84:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 8000e88:	e0fff617 	ldw	r3,-40(fp)
 8000e8c:	e0bffe17 	ldw	r2,-8(fp)
 8000e90:	1885c83a 	sub	r2,r3,r2
 8000e94:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000e98:	e0fffc17 	ldw	r3,-16(fp)
 8000e9c:	e0bffe17 	ldw	r2,-8(fp)
 8000ea0:	1885883a 	add	r2,r3,r2
 8000ea4:	10c1ffcc 	andi	r3,r2,2047
 8000ea8:	e0bff817 	ldw	r2,-32(fp)
 8000eac:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 8000eb0:	e0bff617 	ldw	r2,-40(fp)
 8000eb4:	00bfc716 	blt	zero,r2,8000dd4 <altera_avalon_jtag_uart_write+0x30>
 8000eb8:	00000106 	br	8000ec0 <altera_avalon_jtag_uart_write+0x11c>
        break;
 8000ebc:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 8000ec0:	0005303a 	rdctl	r2,status
 8000ec4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8000ec8:	e0fff917 	ldw	r3,-28(fp)
 8000ecc:	00bfff84 	movi	r2,-2
 8000ed0:	1884703a 	and	r2,r3,r2
 8000ed4:	1001703a 	wrctl	status,r2
  return context;
 8000ed8:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8000edc:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8000ee0:	e0bff817 	ldw	r2,-32(fp)
 8000ee4:	10800817 	ldw	r2,32(r2)
 8000ee8:	10c00094 	ori	r3,r2,2
 8000eec:	e0bff817 	ldw	r2,-32(fp)
 8000ef0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8000ef4:	e0bff817 	ldw	r2,-32(fp)
 8000ef8:	10800017 	ldw	r2,0(r2)
 8000efc:	10800104 	addi	r2,r2,4
 8000f00:	1007883a 	mov	r3,r2
 8000f04:	e0bff817 	ldw	r2,-32(fp)
 8000f08:	10800817 	ldw	r2,32(r2)
 8000f0c:	18800035 	stwio	r2,0(r3)
 8000f10:	e0bffb17 	ldw	r2,-20(fp)
 8000f14:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8000f18:	e0bffa17 	ldw	r2,-24(fp)
 8000f1c:	1001703a 	wrctl	status,r2
}
 8000f20:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8000f24:	e0bff617 	ldw	r2,-40(fp)
 8000f28:	0080100e 	bge	zero,r2,8000f6c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 8000f2c:	e0bff517 	ldw	r2,-44(fp)
 8000f30:	1090000c 	andi	r2,r2,16384
 8000f34:	1000101e 	bne	r2,zero,8000f78 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8000f38:	0001883a 	nop
 8000f3c:	e0bff817 	ldw	r2,-32(fp)
 8000f40:	10800d17 	ldw	r2,52(r2)
 8000f44:	e0ffff17 	ldw	r3,-4(fp)
 8000f48:	1880051e 	bne	r3,r2,8000f60 <altera_avalon_jtag_uart_write+0x1bc>
 8000f4c:	e0bff817 	ldw	r2,-32(fp)
 8000f50:	10c00917 	ldw	r3,36(r2)
 8000f54:	e0bff817 	ldw	r2,-32(fp)
 8000f58:	10800117 	ldw	r2,4(r2)
 8000f5c:	18bff736 	bltu	r3,r2,8000f3c <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8000f60:	e0bff817 	ldw	r2,-32(fp)
 8000f64:	10800917 	ldw	r2,36(r2)
 8000f68:	1000051e 	bne	r2,zero,8000f80 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 8000f6c:	e0bff617 	ldw	r2,-40(fp)
 8000f70:	00bfcf16 	blt	zero,r2,8000eb0 <altera_avalon_jtag_uart_write+0x10c>
 8000f74:	00000306 	br	8000f84 <altera_avalon_jtag_uart_write+0x1e0>
        break;
 8000f78:	0001883a 	nop
 8000f7c:	00000106 	br	8000f84 <altera_avalon_jtag_uart_write+0x1e0>
         break;
 8000f80:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8000f84:	e0fff717 	ldw	r3,-36(fp)
 8000f88:	e0bffd17 	ldw	r2,-12(fp)
 8000f8c:	18800426 	beq	r3,r2,8000fa0 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 8000f90:	e0fff717 	ldw	r3,-36(fp)
 8000f94:	e0bffd17 	ldw	r2,-12(fp)
 8000f98:	1885c83a 	sub	r2,r3,r2
 8000f9c:	00000606 	br	8000fb8 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 8000fa0:	e0bff517 	ldw	r2,-44(fp)
 8000fa4:	1090000c 	andi	r2,r2,16384
 8000fa8:	10000226 	beq	r2,zero,8000fb4 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 8000fac:	00bffd44 	movi	r2,-11
 8000fb0:	00000106 	br	8000fb8 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8000fb4:	00bffec4 	movi	r2,-5
}
 8000fb8:	e037883a 	mov	sp,fp
 8000fbc:	dfc00117 	ldw	ra,4(sp)
 8000fc0:	df000017 	ldw	fp,0(sp)
 8000fc4:	dec00204 	addi	sp,sp,8
 8000fc8:	f800283a 	ret

08000fcc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8000fcc:	defffa04 	addi	sp,sp,-24
 8000fd0:	dfc00515 	stw	ra,20(sp)
 8000fd4:	df000415 	stw	fp,16(sp)
 8000fd8:	df000404 	addi	fp,sp,16
 8000fdc:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8000fe0:	0007883a 	mov	r3,zero
 8000fe4:	e0bffc17 	ldw	r2,-16(fp)
 8000fe8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8000fec:	e0bffc17 	ldw	r2,-16(fp)
 8000ff0:	10800104 	addi	r2,r2,4
 8000ff4:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
 8000ff8:	0005303a 	rdctl	r2,status
 8000ffc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8001000:	e0fffd17 	ldw	r3,-12(fp)
 8001004:	00bfff84 	movi	r2,-2
 8001008:	1884703a 	and	r2,r3,r2
 800100c:	1001703a 	wrctl	status,r2
  return context;
 8001010:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8001014:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
 8001018:	8001ca40 	call	8001ca4 <alt_tick>
 800101c:	e0bfff17 	ldw	r2,-4(fp)
 8001020:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 8001024:	e0bffe17 	ldw	r2,-8(fp)
 8001028:	1001703a 	wrctl	status,r2
}
 800102c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
 8001030:	0001883a 	nop
 8001034:	e037883a 	mov	sp,fp
 8001038:	dfc00117 	ldw	ra,4(sp)
 800103c:	df000017 	ldw	fp,0(sp)
 8001040:	dec00204 	addi	sp,sp,8
 8001044:	f800283a 	ret

08001048 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8001048:	defff804 	addi	sp,sp,-32
 800104c:	dfc00715 	stw	ra,28(sp)
 8001050:	df000615 	stw	fp,24(sp)
 8001054:	df000604 	addi	fp,sp,24
 8001058:	e13ffe15 	stw	r4,-8(fp)
 800105c:	e17ffd15 	stw	r5,-12(fp)
 8001060:	e1bffc15 	stw	r6,-16(fp)
 8001064:	e1fffb15 	stw	r7,-20(fp)
 8001068:	e0bffb17 	ldw	r2,-20(fp)
 800106c:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8001070:	d0a5a517 	ldw	r2,-26988(gp)
 8001074:	1000031e 	bne	r2,zero,8001084 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
 8001078:	e0bfff17 	ldw	r2,-4(fp)
 800107c:	d0a5a515 	stw	r2,-26988(gp)
    return 0;
 8001080:	00000106 	br	8001088 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
 8001084:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8001088:	e0bffe17 	ldw	r2,-8(fp)
 800108c:	10800104 	addi	r2,r2,4
 8001090:	00c001c4 	movi	r3,7
 8001094:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8001098:	d8000015 	stw	zero,0(sp)
 800109c:	e1fffe17 	ldw	r7,-8(fp)
 80010a0:	01820034 	movhi	r6,2048
 80010a4:	3183f304 	addi	r6,r6,4044
 80010a8:	e17ffc17 	ldw	r5,-16(fp)
 80010ac:	e13ffd17 	ldw	r4,-12(fp)
 80010b0:	80015300 	call	8001530 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 80010b4:	0001883a 	nop
 80010b8:	e037883a 	mov	sp,fp
 80010bc:	dfc00117 	ldw	ra,4(sp)
 80010c0:	df000017 	ldw	fp,0(sp)
 80010c4:	dec00204 	addi	sp,sp,8
 80010c8:	f800283a 	ret

080010cc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80010cc:	defff504 	addi	sp,sp,-44
 80010d0:	df000a15 	stw	fp,40(sp)
 80010d4:	df000a04 	addi	fp,sp,40
 80010d8:	e13ff915 	stw	r4,-28(fp)
 80010dc:	e17ff815 	stw	r5,-32(fp)
 80010e0:	e1bff715 	stw	r6,-36(fp)
 80010e4:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80010e8:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
 80010ec:	d0a5a517 	ldw	r2,-26988(gp)
  
  if (alt_ticks_per_second ())
 80010f0:	10003e26 	beq	r2,zero,80011ec <alt_alarm_start+0x120>
  {
    if (alarm)
 80010f4:	e0bff917 	ldw	r2,-28(fp)
 80010f8:	10003a26 	beq	r2,zero,80011e4 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
 80010fc:	e0bff917 	ldw	r2,-28(fp)
 8001100:	e0fff717 	ldw	r3,-36(fp)
 8001104:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8001108:	e0bff917 	ldw	r2,-28(fp)
 800110c:	e0fff617 	ldw	r3,-40(fp)
 8001110:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 8001114:	0005303a 	rdctl	r2,status
 8001118:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800111c:	e0fffd17 	ldw	r3,-12(fp)
 8001120:	00bfff84 	movi	r2,-2
 8001124:	1884703a 	and	r2,r3,r2
 8001128:	1001703a 	wrctl	status,r2
  return context;
 800112c:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 8001130:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001134:	d0a5a617 	ldw	r2,-26984(gp)
      
      current_nticks = alt_nticks();
 8001138:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800113c:	e0fff817 	ldw	r3,-32(fp)
 8001140:	e0bfff17 	ldw	r2,-4(fp)
 8001144:	1885883a 	add	r2,r3,r2
 8001148:	10c00044 	addi	r3,r2,1
 800114c:	e0bff917 	ldw	r2,-28(fp)
 8001150:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8001154:	e0bff917 	ldw	r2,-28(fp)
 8001158:	10c00217 	ldw	r3,8(r2)
 800115c:	e0bfff17 	ldw	r2,-4(fp)
 8001160:	1880042e 	bgeu	r3,r2,8001174 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8001164:	e0bff917 	ldw	r2,-28(fp)
 8001168:	00c00044 	movi	r3,1
 800116c:	10c00405 	stb	r3,16(r2)
 8001170:	00000206 	br	800117c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8001174:	e0bff917 	ldw	r2,-28(fp)
 8001178:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800117c:	e0bff917 	ldw	r2,-28(fp)
 8001180:	d0e00704 	addi	r3,gp,-32740
 8001184:	e0fffb15 	stw	r3,-20(fp)
 8001188:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800118c:	e0bffa17 	ldw	r2,-24(fp)
 8001190:	e0fffb17 	ldw	r3,-20(fp)
 8001194:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8001198:	e0bffb17 	ldw	r2,-20(fp)
 800119c:	10c00017 	ldw	r3,0(r2)
 80011a0:	e0bffa17 	ldw	r2,-24(fp)
 80011a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80011a8:	e0bffb17 	ldw	r2,-20(fp)
 80011ac:	10800017 	ldw	r2,0(r2)
 80011b0:	e0fffa17 	ldw	r3,-24(fp)
 80011b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80011b8:	e0bffb17 	ldw	r2,-20(fp)
 80011bc:	e0fffa17 	ldw	r3,-24(fp)
 80011c0:	10c00015 	stw	r3,0(r2)
}
 80011c4:	0001883a 	nop
 80011c8:	e0bffe17 	ldw	r2,-8(fp)
 80011cc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80011d0:	e0bffc17 	ldw	r2,-16(fp)
 80011d4:	1001703a 	wrctl	status,r2
}
 80011d8:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 80011dc:	0005883a 	mov	r2,zero
 80011e0:	00000306 	br	80011f0 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
 80011e4:	00bffa84 	movi	r2,-22
 80011e8:	00000106 	br	80011f0 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
 80011ec:	00bfde84 	movi	r2,-134
  }
}
 80011f0:	e037883a 	mov	sp,fp
 80011f4:	df000017 	ldw	fp,0(sp)
 80011f8:	dec00104 	addi	sp,sp,4
 80011fc:	f800283a 	ret

08001200 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8001200:	defffe04 	addi	sp,sp,-8
 8001204:	dfc00115 	stw	ra,4(sp)
 8001208:	df000015 	stw	fp,0(sp)
 800120c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8001210:	d0a00517 	ldw	r2,-32748(gp)
 8001214:	10000326 	beq	r2,zero,8001224 <alt_get_errno+0x24>
 8001218:	d0a00517 	ldw	r2,-32748(gp)
 800121c:	103ee83a 	callr	r2
 8001220:	00000106 	br	8001228 <alt_get_errno+0x28>
 8001224:	d0a5a804 	addi	r2,gp,-26976
}
 8001228:	e037883a 	mov	sp,fp
 800122c:	dfc00117 	ldw	ra,4(sp)
 8001230:	df000017 	ldw	fp,0(sp)
 8001234:	dec00204 	addi	sp,sp,8
 8001238:	f800283a 	ret

0800123c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800123c:	defffb04 	addi	sp,sp,-20
 8001240:	dfc00415 	stw	ra,16(sp)
 8001244:	df000315 	stw	fp,12(sp)
 8001248:	df000304 	addi	fp,sp,12
 800124c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8001250:	e0bffd17 	ldw	r2,-12(fp)
 8001254:	10000916 	blt	r2,zero,800127c <close+0x40>
 8001258:	e0fffd17 	ldw	r3,-12(fp)
 800125c:	1805883a 	mov	r2,r3
 8001260:	1085883a 	add	r2,r2,r2
 8001264:	10c5883a 	add	r2,r2,r3
 8001268:	100490ba 	slli	r2,r2,2
 800126c:	00c20034 	movhi	r3,2048
 8001270:	18cd6d04 	addi	r3,r3,13748
 8001274:	10c5883a 	add	r2,r2,r3
 8001278:	00000106 	br	8001280 <close+0x44>
 800127c:	0005883a 	mov	r2,zero
 8001280:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 8001284:	e0bfff17 	ldw	r2,-4(fp)
 8001288:	10001926 	beq	r2,zero,80012f0 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800128c:	e0bfff17 	ldw	r2,-4(fp)
 8001290:	10800017 	ldw	r2,0(r2)
 8001294:	10800417 	ldw	r2,16(r2)
 8001298:	10000626 	beq	r2,zero,80012b4 <close+0x78>
 800129c:	e0bfff17 	ldw	r2,-4(fp)
 80012a0:	10800017 	ldw	r2,0(r2)
 80012a4:	10800417 	ldw	r2,16(r2)
 80012a8:	e13fff17 	ldw	r4,-4(fp)
 80012ac:	103ee83a 	callr	r2
 80012b0:	00000106 	br	80012b8 <close+0x7c>
 80012b4:	0005883a 	mov	r2,zero
 80012b8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 80012bc:	e13ffd17 	ldw	r4,-12(fp)
 80012c0:	8001b900 	call	8001b90 <alt_release_fd>
    if (rval < 0)
 80012c4:	e0bffe17 	ldw	r2,-8(fp)
 80012c8:	1000070e 	bge	r2,zero,80012e8 <close+0xac>
    {
      ALT_ERRNO = -rval;
 80012cc:	80012000 	call	8001200 <alt_get_errno>
 80012d0:	1007883a 	mov	r3,r2
 80012d4:	e0bffe17 	ldw	r2,-8(fp)
 80012d8:	0085c83a 	sub	r2,zero,r2
 80012dc:	18800015 	stw	r2,0(r3)
      return -1;
 80012e0:	00bfffc4 	movi	r2,-1
 80012e4:	00000706 	br	8001304 <close+0xc8>
    }
    return 0;
 80012e8:	0005883a 	mov	r2,zero
 80012ec:	00000506 	br	8001304 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80012f0:	80012000 	call	8001200 <alt_get_errno>
 80012f4:	1007883a 	mov	r3,r2
 80012f8:	00801444 	movi	r2,81
 80012fc:	18800015 	stw	r2,0(r3)
    return -1;
 8001300:	00bfffc4 	movi	r2,-1
  }
}
 8001304:	e037883a 	mov	sp,fp
 8001308:	dfc00117 	ldw	ra,4(sp)
 800130c:	df000017 	ldw	fp,0(sp)
 8001310:	dec00204 	addi	sp,sp,8
 8001314:	f800283a 	ret

08001318 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8001318:	deffff04 	addi	sp,sp,-4
 800131c:	df000015 	stw	fp,0(sp)
 8001320:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8001324:	0001883a 	nop
 8001328:	e037883a 	mov	sp,fp
 800132c:	df000017 	ldw	fp,0(sp)
 8001330:	dec00104 	addi	sp,sp,4
 8001334:	f800283a 	ret

08001338 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8001338:	defffc04 	addi	sp,sp,-16
 800133c:	df000315 	stw	fp,12(sp)
 8001340:	df000304 	addi	fp,sp,12
 8001344:	e13fff15 	stw	r4,-4(fp)
 8001348:	e17ffe15 	stw	r5,-8(fp)
 800134c:	e1bffd15 	stw	r6,-12(fp)
  return len;
 8001350:	e0bffd17 	ldw	r2,-12(fp)
}
 8001354:	e037883a 	mov	sp,fp
 8001358:	df000017 	ldw	fp,0(sp)
 800135c:	dec00104 	addi	sp,sp,4
 8001360:	f800283a 	ret

08001364 <alt_get_errno>:
{
 8001364:	defffe04 	addi	sp,sp,-8
 8001368:	dfc00115 	stw	ra,4(sp)
 800136c:	df000015 	stw	fp,0(sp)
 8001370:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8001374:	d0a00517 	ldw	r2,-32748(gp)
 8001378:	10000326 	beq	r2,zero,8001388 <alt_get_errno+0x24>
 800137c:	d0a00517 	ldw	r2,-32748(gp)
 8001380:	103ee83a 	callr	r2
 8001384:	00000106 	br	800138c <alt_get_errno+0x28>
 8001388:	d0a5a804 	addi	r2,gp,-26976
}
 800138c:	e037883a 	mov	sp,fp
 8001390:	dfc00117 	ldw	ra,4(sp)
 8001394:	df000017 	ldw	fp,0(sp)
 8001398:	dec00204 	addi	sp,sp,8
 800139c:	f800283a 	ret

080013a0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80013a0:	defffa04 	addi	sp,sp,-24
 80013a4:	dfc00515 	stw	ra,20(sp)
 80013a8:	df000415 	stw	fp,16(sp)
 80013ac:	df000404 	addi	fp,sp,16
 80013b0:	e13ffd15 	stw	r4,-12(fp)
 80013b4:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80013b8:	e0bffd17 	ldw	r2,-12(fp)
 80013bc:	10000326 	beq	r2,zero,80013cc <alt_dev_llist_insert+0x2c>
 80013c0:	e0bffd17 	ldw	r2,-12(fp)
 80013c4:	10800217 	ldw	r2,8(r2)
 80013c8:	1000061e 	bne	r2,zero,80013e4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80013cc:	80013640 	call	8001364 <alt_get_errno>
 80013d0:	1007883a 	mov	r3,r2
 80013d4:	00800584 	movi	r2,22
 80013d8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80013dc:	00bffa84 	movi	r2,-22
 80013e0:	00001406 	br	8001434 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80013e4:	e0bffd17 	ldw	r2,-12(fp)
 80013e8:	e0fffc17 	ldw	r3,-16(fp)
 80013ec:	e0ffff15 	stw	r3,-4(fp)
 80013f0:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 80013f4:	e0bffe17 	ldw	r2,-8(fp)
 80013f8:	e0ffff17 	ldw	r3,-4(fp)
 80013fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8001400:	e0bfff17 	ldw	r2,-4(fp)
 8001404:	10c00017 	ldw	r3,0(r2)
 8001408:	e0bffe17 	ldw	r2,-8(fp)
 800140c:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 8001410:	e0bfff17 	ldw	r2,-4(fp)
 8001414:	10800017 	ldw	r2,0(r2)
 8001418:	e0fffe17 	ldw	r3,-8(fp)
 800141c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8001420:	e0bfff17 	ldw	r2,-4(fp)
 8001424:	e0fffe17 	ldw	r3,-8(fp)
 8001428:	10c00015 	stw	r3,0(r2)
}
 800142c:	0001883a 	nop

  return 0;  
 8001430:	0005883a 	mov	r2,zero
}
 8001434:	e037883a 	mov	sp,fp
 8001438:	dfc00117 	ldw	ra,4(sp)
 800143c:	df000017 	ldw	fp,0(sp)
 8001440:	dec00204 	addi	sp,sp,8
 8001444:	f800283a 	ret

08001448 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8001448:	defffd04 	addi	sp,sp,-12
 800144c:	dfc00215 	stw	ra,8(sp)
 8001450:	df000115 	stw	fp,4(sp)
 8001454:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8001458:	00820034 	movhi	r2,2048
 800145c:	10893d04 	addi	r2,r2,9460
 8001460:	e0bfff15 	stw	r2,-4(fp)
 8001464:	00000606 	br	8001480 <_do_ctors+0x38>
        (*ctor) (); 
 8001468:	e0bfff17 	ldw	r2,-4(fp)
 800146c:	10800017 	ldw	r2,0(r2)
 8001470:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8001474:	e0bfff17 	ldw	r2,-4(fp)
 8001478:	10bfff04 	addi	r2,r2,-4
 800147c:	e0bfff15 	stw	r2,-4(fp)
 8001480:	e0ffff17 	ldw	r3,-4(fp)
 8001484:	00820034 	movhi	r2,2048
 8001488:	10893e04 	addi	r2,r2,9464
 800148c:	18bff62e 	bgeu	r3,r2,8001468 <_do_ctors+0x20>
}
 8001490:	0001883a 	nop
 8001494:	0001883a 	nop
 8001498:	e037883a 	mov	sp,fp
 800149c:	dfc00117 	ldw	ra,4(sp)
 80014a0:	df000017 	ldw	fp,0(sp)
 80014a4:	dec00204 	addi	sp,sp,8
 80014a8:	f800283a 	ret

080014ac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80014ac:	defffd04 	addi	sp,sp,-12
 80014b0:	dfc00215 	stw	ra,8(sp)
 80014b4:	df000115 	stw	fp,4(sp)
 80014b8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80014bc:	00820034 	movhi	r2,2048
 80014c0:	10893d04 	addi	r2,r2,9460
 80014c4:	e0bfff15 	stw	r2,-4(fp)
 80014c8:	00000606 	br	80014e4 <_do_dtors+0x38>
        (*dtor) (); 
 80014cc:	e0bfff17 	ldw	r2,-4(fp)
 80014d0:	10800017 	ldw	r2,0(r2)
 80014d4:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80014d8:	e0bfff17 	ldw	r2,-4(fp)
 80014dc:	10bfff04 	addi	r2,r2,-4
 80014e0:	e0bfff15 	stw	r2,-4(fp)
 80014e4:	e0ffff17 	ldw	r3,-4(fp)
 80014e8:	00820034 	movhi	r2,2048
 80014ec:	10893e04 	addi	r2,r2,9464
 80014f0:	18bff62e 	bgeu	r3,r2,80014cc <_do_dtors+0x20>
}
 80014f4:	0001883a 	nop
 80014f8:	0001883a 	nop
 80014fc:	e037883a 	mov	sp,fp
 8001500:	dfc00117 	ldw	ra,4(sp)
 8001504:	df000017 	ldw	fp,0(sp)
 8001508:	dec00204 	addi	sp,sp,8
 800150c:	f800283a 	ret

08001510 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8001510:	deffff04 	addi	sp,sp,-4
 8001514:	df000015 	stw	fp,0(sp)
 8001518:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800151c:	0001883a 	nop
 8001520:	e037883a 	mov	sp,fp
 8001524:	df000017 	ldw	fp,0(sp)
 8001528:	dec00104 	addi	sp,sp,4
 800152c:	f800283a 	ret

08001530 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8001530:	defff904 	addi	sp,sp,-28
 8001534:	dfc00615 	stw	ra,24(sp)
 8001538:	df000515 	stw	fp,20(sp)
 800153c:	df000504 	addi	fp,sp,20
 8001540:	e13fff15 	stw	r4,-4(fp)
 8001544:	e17ffe15 	stw	r5,-8(fp)
 8001548:	e1bffd15 	stw	r6,-12(fp)
 800154c:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8001550:	e0800217 	ldw	r2,8(fp)
 8001554:	d8800015 	stw	r2,0(sp)
 8001558:	e1fffc17 	ldw	r7,-16(fp)
 800155c:	e1bffd17 	ldw	r6,-12(fp)
 8001560:	e17ffe17 	ldw	r5,-8(fp)
 8001564:	e13fff17 	ldw	r4,-4(fp)
 8001568:	80016e00 	call	80016e0 <alt_iic_isr_register>
}  
 800156c:	e037883a 	mov	sp,fp
 8001570:	dfc00117 	ldw	ra,4(sp)
 8001574:	df000017 	ldw	fp,0(sp)
 8001578:	dec00204 	addi	sp,sp,8
 800157c:	f800283a 	ret

08001580 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8001580:	defff904 	addi	sp,sp,-28
 8001584:	df000615 	stw	fp,24(sp)
 8001588:	df000604 	addi	fp,sp,24
 800158c:	e13ffb15 	stw	r4,-20(fp)
 8001590:	e17ffa15 	stw	r5,-24(fp)
 8001594:	e0bffa17 	ldw	r2,-24(fp)
 8001598:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 800159c:	0005303a 	rdctl	r2,status
 80015a0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80015a4:	e0fffe17 	ldw	r3,-8(fp)
 80015a8:	00bfff84 	movi	r2,-2
 80015ac:	1884703a 	and	r2,r3,r2
 80015b0:	1001703a 	wrctl	status,r2
  return context;
 80015b4:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80015b8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 80015bc:	00c00044 	movi	r3,1
 80015c0:	e0bfff17 	ldw	r2,-4(fp)
 80015c4:	1884983a 	sll	r2,r3,r2
 80015c8:	1007883a 	mov	r3,r2
 80015cc:	d0a5a417 	ldw	r2,-26992(gp)
 80015d0:	1884b03a 	or	r2,r3,r2
 80015d4:	d0a5a415 	stw	r2,-26992(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80015d8:	d0a5a417 	ldw	r2,-26992(gp)
 80015dc:	100170fa 	wrctl	ienable,r2
 80015e0:	e0bffd17 	ldw	r2,-12(fp)
 80015e4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80015e8:	e0bffc17 	ldw	r2,-16(fp)
 80015ec:	1001703a 	wrctl	status,r2
}
 80015f0:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 80015f4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 80015f8:	e037883a 	mov	sp,fp
 80015fc:	df000017 	ldw	fp,0(sp)
 8001600:	dec00104 	addi	sp,sp,4
 8001604:	f800283a 	ret

08001608 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8001608:	defff904 	addi	sp,sp,-28
 800160c:	df000615 	stw	fp,24(sp)
 8001610:	df000604 	addi	fp,sp,24
 8001614:	e13ffb15 	stw	r4,-20(fp)
 8001618:	e17ffa15 	stw	r5,-24(fp)
 800161c:	e0bffa17 	ldw	r2,-24(fp)
 8001620:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 8001624:	0005303a 	rdctl	r2,status
 8001628:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800162c:	e0fffe17 	ldw	r3,-8(fp)
 8001630:	00bfff84 	movi	r2,-2
 8001634:	1884703a 	and	r2,r3,r2
 8001638:	1001703a 	wrctl	status,r2
  return context;
 800163c:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 8001640:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 8001644:	00c00044 	movi	r3,1
 8001648:	e0bfff17 	ldw	r2,-4(fp)
 800164c:	1884983a 	sll	r2,r3,r2
 8001650:	0084303a 	nor	r2,zero,r2
 8001654:	1007883a 	mov	r3,r2
 8001658:	d0a5a417 	ldw	r2,-26992(gp)
 800165c:	1884703a 	and	r2,r3,r2
 8001660:	d0a5a415 	stw	r2,-26992(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8001664:	d0a5a417 	ldw	r2,-26992(gp)
 8001668:	100170fa 	wrctl	ienable,r2
 800166c:	e0bffd17 	ldw	r2,-12(fp)
 8001670:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8001674:	e0bffc17 	ldw	r2,-16(fp)
 8001678:	1001703a 	wrctl	status,r2
}
 800167c:	0001883a 	nop
  return 0;
 8001680:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8001684:	e037883a 	mov	sp,fp
 8001688:	df000017 	ldw	fp,0(sp)
 800168c:	dec00104 	addi	sp,sp,4
 8001690:	f800283a 	ret

08001694 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8001694:	defffc04 	addi	sp,sp,-16
 8001698:	df000315 	stw	fp,12(sp)
 800169c:	df000304 	addi	fp,sp,12
 80016a0:	e13ffe15 	stw	r4,-8(fp)
 80016a4:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80016a8:	000530fa 	rdctl	r2,ienable
 80016ac:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80016b0:	00c00044 	movi	r3,1
 80016b4:	e0bffd17 	ldw	r2,-12(fp)
 80016b8:	1884983a 	sll	r2,r3,r2
 80016bc:	1007883a 	mov	r3,r2
 80016c0:	e0bfff17 	ldw	r2,-4(fp)
 80016c4:	1884703a 	and	r2,r3,r2
 80016c8:	1004c03a 	cmpne	r2,r2,zero
 80016cc:	10803fcc 	andi	r2,r2,255
}
 80016d0:	e037883a 	mov	sp,fp
 80016d4:	df000017 	ldw	fp,0(sp)
 80016d8:	dec00104 	addi	sp,sp,4
 80016dc:	f800283a 	ret

080016e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80016e0:	defff504 	addi	sp,sp,-44
 80016e4:	dfc00a15 	stw	ra,40(sp)
 80016e8:	df000915 	stw	fp,36(sp)
 80016ec:	df000904 	addi	fp,sp,36
 80016f0:	e13ffa15 	stw	r4,-24(fp)
 80016f4:	e17ff915 	stw	r5,-28(fp)
 80016f8:	e1bff815 	stw	r6,-32(fp)
 80016fc:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 8001700:	00bffa84 	movi	r2,-22
 8001704:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8001708:	e0bff917 	ldw	r2,-28(fp)
 800170c:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8001710:	e0bffe17 	ldw	r2,-8(fp)
 8001714:	10800808 	cmpgei	r2,r2,32
 8001718:	1000251e 	bne	r2,zero,80017b0 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 800171c:	0005303a 	rdctl	r2,status
 8001720:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8001724:	e0fffc17 	ldw	r3,-16(fp)
 8001728:	00bfff84 	movi	r2,-2
 800172c:	1884703a 	and	r2,r3,r2
 8001730:	1001703a 	wrctl	status,r2
  return context;
 8001734:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8001738:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 800173c:	e0bffe17 	ldw	r2,-8(fp)
 8001740:	100890fa 	slli	r4,r2,3
 8001744:	e0fff817 	ldw	r3,-32(fp)
 8001748:	00820034 	movhi	r2,2048
 800174c:	2085883a 	add	r2,r4,r2
 8001750:	10d47f15 	stw	r3,20988(r2)
    alt_irq[id].context = isr_context;
 8001754:	e0bffe17 	ldw	r2,-8(fp)
 8001758:	100890fa 	slli	r4,r2,3
 800175c:	e0fff717 	ldw	r3,-36(fp)
 8001760:	00820034 	movhi	r2,2048
 8001764:	2085883a 	add	r2,r4,r2
 8001768:	10d48015 	stw	r3,20992(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800176c:	e0bff817 	ldw	r2,-32(fp)
 8001770:	10000526 	beq	r2,zero,8001788 <alt_iic_isr_register+0xa8>
 8001774:	e0bffe17 	ldw	r2,-8(fp)
 8001778:	100b883a 	mov	r5,r2
 800177c:	e13ffa17 	ldw	r4,-24(fp)
 8001780:	80015800 	call	8001580 <alt_ic_irq_enable>
 8001784:	00000406 	br	8001798 <alt_iic_isr_register+0xb8>
 8001788:	e0bffe17 	ldw	r2,-8(fp)
 800178c:	100b883a 	mov	r5,r2
 8001790:	e13ffa17 	ldw	r4,-24(fp)
 8001794:	80016080 	call	8001608 <alt_ic_irq_disable>
 8001798:	e0bfff15 	stw	r2,-4(fp)
 800179c:	e0bffd17 	ldw	r2,-12(fp)
 80017a0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 80017a4:	e0bffb17 	ldw	r2,-20(fp)
 80017a8:	1001703a 	wrctl	status,r2
}
 80017ac:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 80017b0:	e0bfff17 	ldw	r2,-4(fp)
}
 80017b4:	e037883a 	mov	sp,fp
 80017b8:	dfc00117 	ldw	ra,4(sp)
 80017bc:	df000017 	ldw	fp,0(sp)
 80017c0:	dec00204 	addi	sp,sp,8
 80017c4:	f800283a 	ret

080017c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80017c8:	defff904 	addi	sp,sp,-28
 80017cc:	dfc00615 	stw	ra,24(sp)
 80017d0:	df000515 	stw	fp,20(sp)
 80017d4:	df000504 	addi	fp,sp,20
 80017d8:	e13ffe15 	stw	r4,-8(fp)
 80017dc:	e17ffd15 	stw	r5,-12(fp)
 80017e0:	e1bffc15 	stw	r6,-16(fp)
 80017e4:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 80017e8:	e1bffb17 	ldw	r6,-20(fp)
 80017ec:	e17ffc17 	ldw	r5,-16(fp)
 80017f0:	e13ffd17 	ldw	r4,-12(fp)
 80017f4:	8001a300 	call	8001a30 <open>
 80017f8:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 80017fc:	e0bfff17 	ldw	r2,-4(fp)
 8001800:	10002016 	blt	r2,zero,8001884 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 8001804:	e0ffff17 	ldw	r3,-4(fp)
 8001808:	1805883a 	mov	r2,r3
 800180c:	1085883a 	add	r2,r2,r2
 8001810:	10c5883a 	add	r2,r2,r3
 8001814:	100490ba 	slli	r2,r2,2
 8001818:	00c20034 	movhi	r3,2048
 800181c:	10c7883a 	add	r3,r2,r3
 8001820:	18cd6d17 	ldw	r3,13748(r3)
 8001824:	e0bffe17 	ldw	r2,-8(fp)
 8001828:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800182c:	e0ffff17 	ldw	r3,-4(fp)
 8001830:	1805883a 	mov	r2,r3
 8001834:	1085883a 	add	r2,r2,r2
 8001838:	10c5883a 	add	r2,r2,r3
 800183c:	100490ba 	slli	r2,r2,2
 8001840:	00c20034 	movhi	r3,2048
 8001844:	10c7883a 	add	r3,r2,r3
 8001848:	18cd6e17 	ldw	r3,13752(r3)
 800184c:	e0bffe17 	ldw	r2,-8(fp)
 8001850:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8001854:	e0ffff17 	ldw	r3,-4(fp)
 8001858:	1805883a 	mov	r2,r3
 800185c:	1085883a 	add	r2,r2,r2
 8001860:	10c5883a 	add	r2,r2,r3
 8001864:	100490ba 	slli	r2,r2,2
 8001868:	00c20034 	movhi	r3,2048
 800186c:	10c7883a 	add	r3,r2,r3
 8001870:	18cd6f17 	ldw	r3,13756(r3)
 8001874:	e0bffe17 	ldw	r2,-8(fp)
 8001878:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800187c:	e13fff17 	ldw	r4,-4(fp)
 8001880:	8001b900 	call	8001b90 <alt_release_fd>
  }
} 
 8001884:	0001883a 	nop
 8001888:	e037883a 	mov	sp,fp
 800188c:	dfc00117 	ldw	ra,4(sp)
 8001890:	df000017 	ldw	fp,0(sp)
 8001894:	dec00204 	addi	sp,sp,8
 8001898:	f800283a 	ret

0800189c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800189c:	defffb04 	addi	sp,sp,-20
 80018a0:	dfc00415 	stw	ra,16(sp)
 80018a4:	df000315 	stw	fp,12(sp)
 80018a8:	df000304 	addi	fp,sp,12
 80018ac:	e13fff15 	stw	r4,-4(fp)
 80018b0:	e17ffe15 	stw	r5,-8(fp)
 80018b4:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80018b8:	01c07fc4 	movi	r7,511
 80018bc:	01800044 	movi	r6,1
 80018c0:	e17fff17 	ldw	r5,-4(fp)
 80018c4:	01020034 	movhi	r4,2048
 80018c8:	210d7004 	addi	r4,r4,13760
 80018cc:	80017c80 	call	80017c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80018d0:	01c07fc4 	movi	r7,511
 80018d4:	000d883a 	mov	r6,zero
 80018d8:	e17ffe17 	ldw	r5,-8(fp)
 80018dc:	01020034 	movhi	r4,2048
 80018e0:	210d6d04 	addi	r4,r4,13748
 80018e4:	80017c80 	call	80017c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80018e8:	01c07fc4 	movi	r7,511
 80018ec:	01800044 	movi	r6,1
 80018f0:	e17ffd17 	ldw	r5,-12(fp)
 80018f4:	01020034 	movhi	r4,2048
 80018f8:	210d7304 	addi	r4,r4,13772
 80018fc:	80017c80 	call	80017c8 <alt_open_fd>
}  
 8001900:	0001883a 	nop
 8001904:	e037883a 	mov	sp,fp
 8001908:	dfc00117 	ldw	ra,4(sp)
 800190c:	df000017 	ldw	fp,0(sp)
 8001910:	dec00204 	addi	sp,sp,8
 8001914:	f800283a 	ret

08001918 <alt_get_errno>:
{
 8001918:	defffe04 	addi	sp,sp,-8
 800191c:	dfc00115 	stw	ra,4(sp)
 8001920:	df000015 	stw	fp,0(sp)
 8001924:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8001928:	d0a00517 	ldw	r2,-32748(gp)
 800192c:	10000326 	beq	r2,zero,800193c <alt_get_errno+0x24>
 8001930:	d0a00517 	ldw	r2,-32748(gp)
 8001934:	103ee83a 	callr	r2
 8001938:	00000106 	br	8001940 <alt_get_errno+0x28>
 800193c:	d0a5a804 	addi	r2,gp,-26976
}
 8001940:	e037883a 	mov	sp,fp
 8001944:	dfc00117 	ldw	ra,4(sp)
 8001948:	df000017 	ldw	fp,0(sp)
 800194c:	dec00204 	addi	sp,sp,8
 8001950:	f800283a 	ret

08001954 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8001954:	defffd04 	addi	sp,sp,-12
 8001958:	df000215 	stw	fp,8(sp)
 800195c:	df000204 	addi	fp,sp,8
 8001960:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8001964:	e0bffe17 	ldw	r2,-8(fp)
 8001968:	10800217 	ldw	r2,8(r2)
 800196c:	10d00034 	orhi	r3,r2,16384
 8001970:	e0bffe17 	ldw	r2,-8(fp)
 8001974:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8001978:	e03fff15 	stw	zero,-4(fp)
 800197c:	00002306 	br	8001a0c <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8001980:	e0ffff17 	ldw	r3,-4(fp)
 8001984:	1805883a 	mov	r2,r3
 8001988:	1085883a 	add	r2,r2,r2
 800198c:	10c5883a 	add	r2,r2,r3
 8001990:	100490ba 	slli	r2,r2,2
 8001994:	00c20034 	movhi	r3,2048
 8001998:	10c7883a 	add	r3,r2,r3
 800199c:	18cd6d17 	ldw	r3,13748(r3)
 80019a0:	e0bffe17 	ldw	r2,-8(fp)
 80019a4:	10800017 	ldw	r2,0(r2)
 80019a8:	1880151e 	bne	r3,r2,8001a00 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80019ac:	e0ffff17 	ldw	r3,-4(fp)
 80019b0:	1805883a 	mov	r2,r3
 80019b4:	1085883a 	add	r2,r2,r2
 80019b8:	10c5883a 	add	r2,r2,r3
 80019bc:	100490ba 	slli	r2,r2,2
 80019c0:	00c20034 	movhi	r3,2048
 80019c4:	10c7883a 	add	r3,r2,r3
 80019c8:	188d6f17 	ldw	r2,13756(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 80019cc:	10000c0e 	bge	r2,zero,8001a00 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 80019d0:	e0ffff17 	ldw	r3,-4(fp)
 80019d4:	1805883a 	mov	r2,r3
 80019d8:	1085883a 	add	r2,r2,r2
 80019dc:	10c5883a 	add	r2,r2,r3
 80019e0:	100490ba 	slli	r2,r2,2
 80019e4:	00c20034 	movhi	r3,2048
 80019e8:	18cd6d04 	addi	r3,r3,13748
 80019ec:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80019f0:	e0fffe17 	ldw	r3,-8(fp)
 80019f4:	18800226 	beq	r3,r2,8001a00 <alt_file_locked+0xac>
    {
      return -EACCES;
 80019f8:	00bffcc4 	movi	r2,-13
 80019fc:	00000806 	br	8001a20 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 8001a00:	e0bfff17 	ldw	r2,-4(fp)
 8001a04:	10800044 	addi	r2,r2,1
 8001a08:	e0bfff15 	stw	r2,-4(fp)
 8001a0c:	d0a00417 	ldw	r2,-32752(gp)
 8001a10:	1007883a 	mov	r3,r2
 8001a14:	e0bfff17 	ldw	r2,-4(fp)
 8001a18:	18bfd92e 	bgeu	r3,r2,8001980 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8001a1c:	0005883a 	mov	r2,zero
}
 8001a20:	e037883a 	mov	sp,fp
 8001a24:	df000017 	ldw	fp,0(sp)
 8001a28:	dec00104 	addi	sp,sp,4
 8001a2c:	f800283a 	ret

08001a30 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8001a30:	defff604 	addi	sp,sp,-40
 8001a34:	dfc00915 	stw	ra,36(sp)
 8001a38:	df000815 	stw	fp,32(sp)
 8001a3c:	df000804 	addi	fp,sp,32
 8001a40:	e13ffa15 	stw	r4,-24(fp)
 8001a44:	e17ff915 	stw	r5,-28(fp)
 8001a48:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8001a4c:	00bfffc4 	movi	r2,-1
 8001a50:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 8001a54:	00bffb44 	movi	r2,-19
 8001a58:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 8001a5c:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8001a60:	d1600204 	addi	r5,gp,-32760
 8001a64:	e13ffa17 	ldw	r4,-24(fp)
 8001a68:	8001dd00 	call	8001dd0 <alt_find_dev>
 8001a6c:	e0bfff15 	stw	r2,-4(fp)
 8001a70:	e0bfff17 	ldw	r2,-4(fp)
 8001a74:	1000051e 	bne	r2,zero,8001a8c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8001a78:	e13ffa17 	ldw	r4,-24(fp)
 8001a7c:	8001e600 	call	8001e60 <alt_find_file>
 8001a80:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 8001a84:	00800044 	movi	r2,1
 8001a88:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8001a8c:	e0bfff17 	ldw	r2,-4(fp)
 8001a90:	10002c26 	beq	r2,zero,8001b44 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8001a94:	e13fff17 	ldw	r4,-4(fp)
 8001a98:	8001f680 	call	8001f68 <alt_get_fd>
 8001a9c:	e0bffe15 	stw	r2,-8(fp)
 8001aa0:	e0bffe17 	ldw	r2,-8(fp)
 8001aa4:	1000030e 	bge	r2,zero,8001ab4 <open+0x84>
    {
      status = index;
 8001aa8:	e0bffe17 	ldw	r2,-8(fp)
 8001aac:	e0bffd15 	stw	r2,-12(fp)
 8001ab0:	00002606 	br	8001b4c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 8001ab4:	e0fffe17 	ldw	r3,-8(fp)
 8001ab8:	1805883a 	mov	r2,r3
 8001abc:	1085883a 	add	r2,r2,r2
 8001ac0:	10c5883a 	add	r2,r2,r3
 8001ac4:	100490ba 	slli	r2,r2,2
 8001ac8:	00c20034 	movhi	r3,2048
 8001acc:	18cd6d04 	addi	r3,r3,13748
 8001ad0:	10c5883a 	add	r2,r2,r3
 8001ad4:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8001ad8:	e0fff917 	ldw	r3,-28(fp)
 8001adc:	00900034 	movhi	r2,16384
 8001ae0:	10bfffc4 	addi	r2,r2,-1
 8001ae4:	1886703a 	and	r3,r3,r2
 8001ae8:	e0bffb17 	ldw	r2,-20(fp)
 8001aec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8001af0:	e0bffc17 	ldw	r2,-16(fp)
 8001af4:	1000051e 	bne	r2,zero,8001b0c <open+0xdc>
 8001af8:	e13ffb17 	ldw	r4,-20(fp)
 8001afc:	80019540 	call	8001954 <alt_file_locked>
 8001b00:	e0bffd15 	stw	r2,-12(fp)
 8001b04:	e0bffd17 	ldw	r2,-12(fp)
 8001b08:	10001016 	blt	r2,zero,8001b4c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8001b0c:	e0bfff17 	ldw	r2,-4(fp)
 8001b10:	10800317 	ldw	r2,12(r2)
 8001b14:	10000826 	beq	r2,zero,8001b38 <open+0x108>
 8001b18:	e0bfff17 	ldw	r2,-4(fp)
 8001b1c:	10800317 	ldw	r2,12(r2)
 8001b20:	e1fff817 	ldw	r7,-32(fp)
 8001b24:	e1bff917 	ldw	r6,-28(fp)
 8001b28:	e17ffa17 	ldw	r5,-24(fp)
 8001b2c:	e13ffb17 	ldw	r4,-20(fp)
 8001b30:	103ee83a 	callr	r2
 8001b34:	00000106 	br	8001b3c <open+0x10c>
 8001b38:	0005883a 	mov	r2,zero
 8001b3c:	e0bffd15 	stw	r2,-12(fp)
 8001b40:	00000206 	br	8001b4c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8001b44:	00bffb44 	movi	r2,-19
 8001b48:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8001b4c:	e0bffd17 	ldw	r2,-12(fp)
 8001b50:	1000090e 	bge	r2,zero,8001b78 <open+0x148>
  {
    alt_release_fd (index);  
 8001b54:	e13ffe17 	ldw	r4,-8(fp)
 8001b58:	8001b900 	call	8001b90 <alt_release_fd>
    ALT_ERRNO = -status;
 8001b5c:	80019180 	call	8001918 <alt_get_errno>
 8001b60:	1007883a 	mov	r3,r2
 8001b64:	e0bffd17 	ldw	r2,-12(fp)
 8001b68:	0085c83a 	sub	r2,zero,r2
 8001b6c:	18800015 	stw	r2,0(r3)
    return -1;
 8001b70:	00bfffc4 	movi	r2,-1
 8001b74:	00000106 	br	8001b7c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 8001b78:	e0bffe17 	ldw	r2,-8(fp)
}
 8001b7c:	e037883a 	mov	sp,fp
 8001b80:	dfc00117 	ldw	ra,4(sp)
 8001b84:	df000017 	ldw	fp,0(sp)
 8001b88:	dec00204 	addi	sp,sp,8
 8001b8c:	f800283a 	ret

08001b90 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8001b90:	defffe04 	addi	sp,sp,-8
 8001b94:	df000115 	stw	fp,4(sp)
 8001b98:	df000104 	addi	fp,sp,4
 8001b9c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8001ba0:	e0bfff17 	ldw	r2,-4(fp)
 8001ba4:	108000d0 	cmplti	r2,r2,3
 8001ba8:	1000101e 	bne	r2,zero,8001bec <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 8001bac:	e0ffff17 	ldw	r3,-4(fp)
 8001bb0:	1805883a 	mov	r2,r3
 8001bb4:	1085883a 	add	r2,r2,r2
 8001bb8:	10c5883a 	add	r2,r2,r3
 8001bbc:	100490ba 	slli	r2,r2,2
 8001bc0:	00c20034 	movhi	r3,2048
 8001bc4:	10c7883a 	add	r3,r2,r3
 8001bc8:	180d6f15 	stw	zero,13756(r3)
    alt_fd_list[fd].dev      = 0;
 8001bcc:	e0ffff17 	ldw	r3,-4(fp)
 8001bd0:	1805883a 	mov	r2,r3
 8001bd4:	1085883a 	add	r2,r2,r2
 8001bd8:	10c5883a 	add	r2,r2,r3
 8001bdc:	100490ba 	slli	r2,r2,2
 8001be0:	00c20034 	movhi	r3,2048
 8001be4:	10c7883a 	add	r3,r2,r3
 8001be8:	180d6d15 	stw	zero,13748(r3)
  }
}
 8001bec:	0001883a 	nop
 8001bf0:	e037883a 	mov	sp,fp
 8001bf4:	df000017 	ldw	fp,0(sp)
 8001bf8:	dec00104 	addi	sp,sp,4
 8001bfc:	f800283a 	ret

08001c00 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8001c00:	defffa04 	addi	sp,sp,-24
 8001c04:	df000515 	stw	fp,20(sp)
 8001c08:	df000504 	addi	fp,sp,20
 8001c0c:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 8001c10:	0005303a 	rdctl	r2,status
 8001c14:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8001c18:	e0fffc17 	ldw	r3,-16(fp)
 8001c1c:	00bfff84 	movi	r2,-2
 8001c20:	1884703a 	and	r2,r3,r2
 8001c24:	1001703a 	wrctl	status,r2
  return context;
 8001c28:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8001c2c:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 8001c30:	e0bffb17 	ldw	r2,-20(fp)
 8001c34:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8001c38:	e0bffd17 	ldw	r2,-12(fp)
 8001c3c:	10800017 	ldw	r2,0(r2)
 8001c40:	e0fffd17 	ldw	r3,-12(fp)
 8001c44:	18c00117 	ldw	r3,4(r3)
 8001c48:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8001c4c:	e0bffd17 	ldw	r2,-12(fp)
 8001c50:	10800117 	ldw	r2,4(r2)
 8001c54:	e0fffd17 	ldw	r3,-12(fp)
 8001c58:	18c00017 	ldw	r3,0(r3)
 8001c5c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8001c60:	e0bffd17 	ldw	r2,-12(fp)
 8001c64:	e0fffd17 	ldw	r3,-12(fp)
 8001c68:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8001c6c:	e0bffd17 	ldw	r2,-12(fp)
 8001c70:	e0fffd17 	ldw	r3,-12(fp)
 8001c74:	10c00015 	stw	r3,0(r2)
} 
 8001c78:	0001883a 	nop
 8001c7c:	e0bfff17 	ldw	r2,-4(fp)
 8001c80:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 8001c84:	e0bffe17 	ldw	r2,-8(fp)
 8001c88:	1001703a 	wrctl	status,r2
}
 8001c8c:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 8001c90:	0001883a 	nop
 8001c94:	e037883a 	mov	sp,fp
 8001c98:	df000017 	ldw	fp,0(sp)
 8001c9c:	dec00104 	addi	sp,sp,4
 8001ca0:	f800283a 	ret

08001ca4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8001ca4:	defffb04 	addi	sp,sp,-20
 8001ca8:	dfc00415 	stw	ra,16(sp)
 8001cac:	df000315 	stw	fp,12(sp)
 8001cb0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8001cb4:	d0a00717 	ldw	r2,-32740(gp)
 8001cb8:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8001cbc:	d0a5a617 	ldw	r2,-26984(gp)
 8001cc0:	10800044 	addi	r2,r2,1
 8001cc4:	d0a5a615 	stw	r2,-26984(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8001cc8:	00002e06 	br	8001d84 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8001ccc:	e0bfff17 	ldw	r2,-4(fp)
 8001cd0:	10800017 	ldw	r2,0(r2)
 8001cd4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8001cd8:	e0bfff17 	ldw	r2,-4(fp)
 8001cdc:	10800403 	ldbu	r2,16(r2)
 8001ce0:	10803fcc 	andi	r2,r2,255
 8001ce4:	10000426 	beq	r2,zero,8001cf8 <alt_tick+0x54>
 8001ce8:	d0a5a617 	ldw	r2,-26984(gp)
 8001cec:	1000021e 	bne	r2,zero,8001cf8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8001cf0:	e0bfff17 	ldw	r2,-4(fp)
 8001cf4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8001cf8:	e0bfff17 	ldw	r2,-4(fp)
 8001cfc:	10800217 	ldw	r2,8(r2)
 8001d00:	d0e5a617 	ldw	r3,-26984(gp)
 8001d04:	18801d36 	bltu	r3,r2,8001d7c <alt_tick+0xd8>
 8001d08:	e0bfff17 	ldw	r2,-4(fp)
 8001d0c:	10800403 	ldbu	r2,16(r2)
 8001d10:	10803fcc 	andi	r2,r2,255
 8001d14:	1000191e 	bne	r2,zero,8001d7c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8001d18:	e0bfff17 	ldw	r2,-4(fp)
 8001d1c:	10800317 	ldw	r2,12(r2)
 8001d20:	e0ffff17 	ldw	r3,-4(fp)
 8001d24:	18c00517 	ldw	r3,20(r3)
 8001d28:	1809883a 	mov	r4,r3
 8001d2c:	103ee83a 	callr	r2
 8001d30:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8001d34:	e0bffd17 	ldw	r2,-12(fp)
 8001d38:	1000031e 	bne	r2,zero,8001d48 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8001d3c:	e13fff17 	ldw	r4,-4(fp)
 8001d40:	8001c000 	call	8001c00 <alt_alarm_stop>
 8001d44:	00000d06 	br	8001d7c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8001d48:	e0bfff17 	ldw	r2,-4(fp)
 8001d4c:	10c00217 	ldw	r3,8(r2)
 8001d50:	e0bffd17 	ldw	r2,-12(fp)
 8001d54:	1887883a 	add	r3,r3,r2
 8001d58:	e0bfff17 	ldw	r2,-4(fp)
 8001d5c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8001d60:	e0bfff17 	ldw	r2,-4(fp)
 8001d64:	10c00217 	ldw	r3,8(r2)
 8001d68:	d0a5a617 	ldw	r2,-26984(gp)
 8001d6c:	1880032e 	bgeu	r3,r2,8001d7c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8001d70:	e0bfff17 	ldw	r2,-4(fp)
 8001d74:	00c00044 	movi	r3,1
 8001d78:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8001d7c:	e0bffe17 	ldw	r2,-8(fp)
 8001d80:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 8001d84:	e0ffff17 	ldw	r3,-4(fp)
 8001d88:	d0a00704 	addi	r2,gp,-32740
 8001d8c:	18bfcf1e 	bne	r3,r2,8001ccc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8001d90:	0001883a 	nop
}
 8001d94:	0001883a 	nop
 8001d98:	e037883a 	mov	sp,fp
 8001d9c:	dfc00117 	ldw	ra,4(sp)
 8001da0:	df000017 	ldw	fp,0(sp)
 8001da4:	dec00204 	addi	sp,sp,8
 8001da8:	f800283a 	ret

08001dac <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8001dac:	deffff04 	addi	sp,sp,-4
 8001db0:	df000015 	stw	fp,0(sp)
 8001db4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8001db8:	000170fa 	wrctl	ienable,zero
}
 8001dbc:	0001883a 	nop
 8001dc0:	e037883a 	mov	sp,fp
 8001dc4:	df000017 	ldw	fp,0(sp)
 8001dc8:	dec00104 	addi	sp,sp,4
 8001dcc:	f800283a 	ret

08001dd0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8001dd0:	defffa04 	addi	sp,sp,-24
 8001dd4:	dfc00515 	stw	ra,20(sp)
 8001dd8:	df000415 	stw	fp,16(sp)
 8001ddc:	df000404 	addi	fp,sp,16
 8001de0:	e13ffd15 	stw	r4,-12(fp)
 8001de4:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8001de8:	e0bffc17 	ldw	r2,-16(fp)
 8001dec:	10800017 	ldw	r2,0(r2)
 8001df0:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8001df4:	e13ffd17 	ldw	r4,-12(fp)
 8001df8:	80022780 	call	8002278 <strlen>
 8001dfc:	10800044 	addi	r2,r2,1
 8001e00:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8001e04:	00000d06 	br	8001e3c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8001e08:	e0bfff17 	ldw	r2,-4(fp)
 8001e0c:	10800217 	ldw	r2,8(r2)
 8001e10:	e0fffe17 	ldw	r3,-8(fp)
 8001e14:	180d883a 	mov	r6,r3
 8001e18:	e17ffd17 	ldw	r5,-12(fp)
 8001e1c:	1009883a 	mov	r4,r2
 8001e20:	80021000 	call	8002100 <memcmp>
 8001e24:	1000021e 	bne	r2,zero,8001e30 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8001e28:	e0bfff17 	ldw	r2,-4(fp)
 8001e2c:	00000706 	br	8001e4c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8001e30:	e0bfff17 	ldw	r2,-4(fp)
 8001e34:	10800017 	ldw	r2,0(r2)
 8001e38:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 8001e3c:	e0ffff17 	ldw	r3,-4(fp)
 8001e40:	e0bffc17 	ldw	r2,-16(fp)
 8001e44:	18bff01e 	bne	r3,r2,8001e08 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 8001e48:	0005883a 	mov	r2,zero
}
 8001e4c:	e037883a 	mov	sp,fp
 8001e50:	dfc00117 	ldw	ra,4(sp)
 8001e54:	df000017 	ldw	fp,0(sp)
 8001e58:	dec00204 	addi	sp,sp,8
 8001e5c:	f800283a 	ret

08001e60 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8001e60:	defffb04 	addi	sp,sp,-20
 8001e64:	dfc00415 	stw	ra,16(sp)
 8001e68:	df000315 	stw	fp,12(sp)
 8001e6c:	df000304 	addi	fp,sp,12
 8001e70:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8001e74:	d0a00017 	ldw	r2,-32768(gp)
 8001e78:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8001e7c:	00003106 	br	8001f44 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8001e80:	e0bfff17 	ldw	r2,-4(fp)
 8001e84:	10800217 	ldw	r2,8(r2)
 8001e88:	1009883a 	mov	r4,r2
 8001e8c:	80022780 	call	8002278 <strlen>
 8001e90:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8001e94:	e0bfff17 	ldw	r2,-4(fp)
 8001e98:	10c00217 	ldw	r3,8(r2)
 8001e9c:	e0bffe17 	ldw	r2,-8(fp)
 8001ea0:	10bfffc4 	addi	r2,r2,-1
 8001ea4:	1885883a 	add	r2,r3,r2
 8001ea8:	10800003 	ldbu	r2,0(r2)
 8001eac:	10803fcc 	andi	r2,r2,255
 8001eb0:	1080201c 	xori	r2,r2,128
 8001eb4:	10bfe004 	addi	r2,r2,-128
 8001eb8:	10800bd8 	cmpnei	r2,r2,47
 8001ebc:	1000031e 	bne	r2,zero,8001ecc <alt_find_file+0x6c>
    {
      len -= 1;
 8001ec0:	e0bffe17 	ldw	r2,-8(fp)
 8001ec4:	10bfffc4 	addi	r2,r2,-1
 8001ec8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8001ecc:	e0bffe17 	ldw	r2,-8(fp)
 8001ed0:	e0fffd17 	ldw	r3,-12(fp)
 8001ed4:	1885883a 	add	r2,r3,r2
 8001ed8:	10800003 	ldbu	r2,0(r2)
 8001edc:	10803fcc 	andi	r2,r2,255
 8001ee0:	1080201c 	xori	r2,r2,128
 8001ee4:	10bfe004 	addi	r2,r2,-128
 8001ee8:	10800be0 	cmpeqi	r2,r2,47
 8001eec:	1000081e 	bne	r2,zero,8001f10 <alt_find_file+0xb0>
 8001ef0:	e0bffe17 	ldw	r2,-8(fp)
 8001ef4:	e0fffd17 	ldw	r3,-12(fp)
 8001ef8:	1885883a 	add	r2,r3,r2
 8001efc:	10800003 	ldbu	r2,0(r2)
 8001f00:	10803fcc 	andi	r2,r2,255
 8001f04:	1080201c 	xori	r2,r2,128
 8001f08:	10bfe004 	addi	r2,r2,-128
 8001f0c:	10000a1e 	bne	r2,zero,8001f38 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8001f10:	e0bfff17 	ldw	r2,-4(fp)
 8001f14:	10800217 	ldw	r2,8(r2)
 8001f18:	e0fffe17 	ldw	r3,-8(fp)
 8001f1c:	180d883a 	mov	r6,r3
 8001f20:	e17ffd17 	ldw	r5,-12(fp)
 8001f24:	1009883a 	mov	r4,r2
 8001f28:	80021000 	call	8002100 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 8001f2c:	1000021e 	bne	r2,zero,8001f38 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 8001f30:	e0bfff17 	ldw	r2,-4(fp)
 8001f34:	00000706 	br	8001f54 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8001f38:	e0bfff17 	ldw	r2,-4(fp)
 8001f3c:	10800017 	ldw	r2,0(r2)
 8001f40:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 8001f44:	e0ffff17 	ldw	r3,-4(fp)
 8001f48:	d0a00004 	addi	r2,gp,-32768
 8001f4c:	18bfcc1e 	bne	r3,r2,8001e80 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 8001f50:	0005883a 	mov	r2,zero
}
 8001f54:	e037883a 	mov	sp,fp
 8001f58:	dfc00117 	ldw	ra,4(sp)
 8001f5c:	df000017 	ldw	fp,0(sp)
 8001f60:	dec00204 	addi	sp,sp,8
 8001f64:	f800283a 	ret

08001f68 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8001f68:	defffc04 	addi	sp,sp,-16
 8001f6c:	df000315 	stw	fp,12(sp)
 8001f70:	df000304 	addi	fp,sp,12
 8001f74:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 8001f78:	00bffa04 	movi	r2,-24
 8001f7c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8001f80:	e03fff15 	stw	zero,-4(fp)
 8001f84:	00001d06 	br	8001ffc <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 8001f88:	e0ffff17 	ldw	r3,-4(fp)
 8001f8c:	1805883a 	mov	r2,r3
 8001f90:	1085883a 	add	r2,r2,r2
 8001f94:	10c5883a 	add	r2,r2,r3
 8001f98:	100490ba 	slli	r2,r2,2
 8001f9c:	00c20034 	movhi	r3,2048
 8001fa0:	10c7883a 	add	r3,r2,r3
 8001fa4:	188d6d17 	ldw	r2,13748(r3)
 8001fa8:	1000111e 	bne	r2,zero,8001ff0 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 8001fac:	e0ffff17 	ldw	r3,-4(fp)
 8001fb0:	1805883a 	mov	r2,r3
 8001fb4:	1085883a 	add	r2,r2,r2
 8001fb8:	10c5883a 	add	r2,r2,r3
 8001fbc:	100490ba 	slli	r2,r2,2
 8001fc0:	e13ffd17 	ldw	r4,-12(fp)
 8001fc4:	00c20034 	movhi	r3,2048
 8001fc8:	10c7883a 	add	r3,r2,r3
 8001fcc:	190d6d15 	stw	r4,13748(r3)
      if (i > alt_max_fd)
 8001fd0:	d0e00417 	ldw	r3,-32752(gp)
 8001fd4:	e0bfff17 	ldw	r2,-4(fp)
 8001fd8:	1880020e 	bge	r3,r2,8001fe4 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 8001fdc:	e0bfff17 	ldw	r2,-4(fp)
 8001fe0:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
 8001fe4:	e0bfff17 	ldw	r2,-4(fp)
 8001fe8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8001fec:	00000706 	br	800200c <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 8001ff0:	e0bfff17 	ldw	r2,-4(fp)
 8001ff4:	10800044 	addi	r2,r2,1
 8001ff8:	e0bfff15 	stw	r2,-4(fp)
 8001ffc:	e0bfff17 	ldw	r2,-4(fp)
 8002000:	10800810 	cmplti	r2,r2,32
 8002004:	103fe01e 	bne	r2,zero,8001f88 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 8002008:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800200c:	e0bffe17 	ldw	r2,-8(fp)
}
 8002010:	e037883a 	mov	sp,fp
 8002014:	df000017 	ldw	fp,0(sp)
 8002018:	dec00104 	addi	sp,sp,4
 800201c:	f800283a 	ret

08002020 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8002020:	defffe04 	addi	sp,sp,-8
 8002024:	df000115 	stw	fp,4(sp)
 8002028:	df000104 	addi	fp,sp,4
 800202c:	e13fff15 	stw	r4,-4(fp)
 8002030:	e0bfff17 	ldw	r2,-4(fp)
 8002034:	10bffe84 	addi	r2,r2,-6
 8002038:	10c00428 	cmpgeui	r3,r2,16
 800203c:	1800191e 	bne	r3,zero,80020a4 <alt_exception_cause_generated_bad_addr+0x84>
 8002040:	100690ba 	slli	r3,r2,2
 8002044:	00820034 	movhi	r2,2048
 8002048:	1885883a 	add	r2,r3,r2
 800204c:	10881517 	ldw	r2,8276(r2)
 8002050:	1000683a 	jmp	r2
 8002054:	08002094 	ori	zero,at,130
 8002058:	08002094 	ori	zero,at,130
 800205c:	080020a4 	muli	zero,at,130
 8002060:	080020a4 	muli	zero,at,130
 8002064:	080020a4 	muli	zero,at,130
 8002068:	08002094 	ori	zero,at,130
 800206c:	0800209c 	xori	zero,at,130
 8002070:	080020a4 	muli	zero,at,130
 8002074:	08002094 	ori	zero,at,130
 8002078:	08002094 	ori	zero,at,130
 800207c:	080020a4 	muli	zero,at,130
 8002080:	08002094 	ori	zero,at,130
 8002084:	0800209c 	xori	zero,at,130
 8002088:	080020a4 	muli	zero,at,130
 800208c:	080020a4 	muli	zero,at,130
 8002090:	08002094 	ori	zero,at,130
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8002094:	00800044 	movi	r2,1
 8002098:	00000306 	br	80020a8 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 800209c:	0005883a 	mov	r2,zero
 80020a0:	00000106 	br	80020a8 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 80020a4:	0005883a 	mov	r2,zero
  }
}
 80020a8:	e037883a 	mov	sp,fp
 80020ac:	df000017 	ldw	fp,0(sp)
 80020b0:	dec00104 	addi	sp,sp,4
 80020b4:	f800283a 	ret

080020b8 <atexit>:
 80020b8:	200b883a 	mov	r5,r4
 80020bc:	000f883a 	mov	r7,zero
 80020c0:	000d883a 	mov	r6,zero
 80020c4:	0009883a 	mov	r4,zero
 80020c8:	80023101 	jmpi	8002310 <__register_exitproc>

080020cc <exit>:
 80020cc:	defffe04 	addi	sp,sp,-8
 80020d0:	000b883a 	mov	r5,zero
 80020d4:	dc000015 	stw	r16,0(sp)
 80020d8:	dfc00115 	stw	ra,4(sp)
 80020dc:	2021883a 	mov	r16,r4
 80020e0:	80023a00 	call	80023a0 <__call_exitprocs>
 80020e4:	00820034 	movhi	r2,2048
 80020e8:	110edf17 	ldw	r4,15228(r2)
 80020ec:	20800f17 	ldw	r2,60(r4)
 80020f0:	10000126 	beq	r2,zero,80020f8 <exit+0x2c>
 80020f4:	103ee83a 	callr	r2
 80020f8:	8009883a 	mov	r4,r16
 80020fc:	80024c00 	call	80024c0 <_exit>

08002100 <memcmp>:
 8002100:	30800130 	cmpltui	r2,r6,4
 8002104:	10000b1e 	bne	r2,zero,8002134 <memcmp+0x34>
 8002108:	2144b03a 	or	r2,r4,r5
 800210c:	108000cc 	andi	r2,r2,3
 8002110:	1000171e 	bne	r2,zero,8002170 <memcmp+0x70>
 8002114:	20c00017 	ldw	r3,0(r4)
 8002118:	28800017 	ldw	r2,0(r5)
 800211c:	1880141e 	bne	r3,r2,8002170 <memcmp+0x70>
 8002120:	31bfff04 	addi	r6,r6,-4
 8002124:	30800128 	cmpgeui	r2,r6,4
 8002128:	21000104 	addi	r4,r4,4
 800212c:	29400104 	addi	r5,r5,4
 8002130:	103ff81e 	bne	r2,zero,8002114 <memcmp+0x14>
 8002134:	30bfffc4 	addi	r2,r6,-1
 8002138:	30000b26 	beq	r6,zero,8002168 <memcmp+0x68>
 800213c:	11800044 	addi	r6,r2,1
 8002140:	218d883a 	add	r6,r4,r6
 8002144:	00000106 	br	800214c <memcmp+0x4c>
 8002148:	21800726 	beq	r4,r6,8002168 <memcmp+0x68>
 800214c:	20800003 	ldbu	r2,0(r4)
 8002150:	28c00003 	ldbu	r3,0(r5)
 8002154:	21000044 	addi	r4,r4,1
 8002158:	29400044 	addi	r5,r5,1
 800215c:	10fffa26 	beq	r2,r3,8002148 <memcmp+0x48>
 8002160:	10c5c83a 	sub	r2,r2,r3
 8002164:	f800283a 	ret
 8002168:	0005883a 	mov	r2,zero
 800216c:	f800283a 	ret
 8002170:	30bfffc4 	addi	r2,r6,-1
 8002174:	003ff106 	br	800213c <memcmp+0x3c>

08002178 <memcpy>:
 8002178:	30c00430 	cmpltui	r3,r6,16
 800217c:	2005883a 	mov	r2,r4
 8002180:	18002d1e 	bne	r3,zero,8002238 <memcpy+0xc0>
 8002184:	2906b03a 	or	r3,r5,r4
 8002188:	18c000cc 	andi	r3,r3,3
 800218c:	1800351e 	bne	r3,zero,8002264 <memcpy+0xec>
 8002190:	32fffc04 	addi	r11,r6,-16
 8002194:	5816d13a 	srli	r11,r11,4
 8002198:	280f883a 	mov	r7,r5
 800219c:	2007883a 	mov	r3,r4
 80021a0:	5ac00044 	addi	r11,r11,1
 80021a4:	5816913a 	slli	r11,r11,4
 80021a8:	22d5883a 	add	r10,r4,r11
 80021ac:	39000117 	ldw	r4,4(r7)
 80021b0:	3a400017 	ldw	r9,0(r7)
 80021b4:	3a000217 	ldw	r8,8(r7)
 80021b8:	19000115 	stw	r4,4(r3)
 80021bc:	39000317 	ldw	r4,12(r7)
 80021c0:	1a400015 	stw	r9,0(r3)
 80021c4:	1a000215 	stw	r8,8(r3)
 80021c8:	19000315 	stw	r4,12(r3)
 80021cc:	18c00404 	addi	r3,r3,16
 80021d0:	39c00404 	addi	r7,r7,16
 80021d4:	50fff51e 	bne	r10,r3,80021ac <memcpy+0x34>
 80021d8:	3100030c 	andi	r4,r6,12
 80021dc:	2acb883a 	add	r5,r5,r11
 80021e0:	320003cc 	andi	r8,r6,15
 80021e4:	20002226 	beq	r4,zero,8002270 <memcpy+0xf8>
 80021e8:	280f883a 	mov	r7,r5
 80021ec:	1813883a 	mov	r9,r3
 80021f0:	39c00104 	addi	r7,r7,4
 80021f4:	3abfff17 	ldw	r10,-4(r7)
 80021f8:	41c9c83a 	sub	r4,r8,r7
 80021fc:	2909883a 	add	r4,r5,r4
 8002200:	4a800015 	stw	r10,0(r9)
 8002204:	21000128 	cmpgeui	r4,r4,4
 8002208:	4a400104 	addi	r9,r9,4
 800220c:	203ff81e 	bne	r4,zero,80021f0 <memcpy+0x78>
 8002210:	413fff04 	addi	r4,r8,-4
 8002214:	2008d0ba 	srli	r4,r4,2
 8002218:	318000cc 	andi	r6,r6,3
 800221c:	31ffffc4 	addi	r7,r6,-1
 8002220:	21000044 	addi	r4,r4,1
 8002224:	200890ba 	slli	r4,r4,2
 8002228:	1907883a 	add	r3,r3,r4
 800222c:	290b883a 	add	r5,r5,r4
 8002230:	3000041e 	bne	r6,zero,8002244 <memcpy+0xcc>
 8002234:	f800283a 	ret
 8002238:	2007883a 	mov	r3,r4
 800223c:	31ffffc4 	addi	r7,r6,-1
 8002240:	303ffc26 	beq	r6,zero,8002234 <memcpy+0xbc>
 8002244:	39c00044 	addi	r7,r7,1
 8002248:	19cf883a 	add	r7,r3,r7
 800224c:	29800003 	ldbu	r6,0(r5)
 8002250:	18c00044 	addi	r3,r3,1
 8002254:	29400044 	addi	r5,r5,1
 8002258:	19bfffc5 	stb	r6,-1(r3)
 800225c:	38fffb1e 	bne	r7,r3,800224c <memcpy+0xd4>
 8002260:	f800283a 	ret
 8002264:	31ffffc4 	addi	r7,r6,-1
 8002268:	2007883a 	mov	r3,r4
 800226c:	003ff506 	br	8002244 <memcpy+0xcc>
 8002270:	400d883a 	mov	r6,r8
 8002274:	003ff106 	br	800223c <memcpy+0xc4>

08002278 <strlen>:
 8002278:	208000cc 	andi	r2,r4,3
 800227c:	10000926 	beq	r2,zero,80022a4 <strlen+0x2c>
 8002280:	2005883a 	mov	r2,r4
 8002284:	00000306 	br	8002294 <strlen+0x1c>
 8002288:	10800044 	addi	r2,r2,1
 800228c:	10c000cc 	andi	r3,r2,3
 8002290:	18000526 	beq	r3,zero,80022a8 <strlen+0x30>
 8002294:	10c00007 	ldb	r3,0(r2)
 8002298:	183ffb1e 	bne	r3,zero,8002288 <strlen+0x10>
 800229c:	1105c83a 	sub	r2,r2,r4
 80022a0:	f800283a 	ret
 80022a4:	2005883a 	mov	r2,r4
 80022a8:	11400017 	ldw	r5,0(r2)
 80022ac:	01ffbff4 	movhi	r7,65279
 80022b0:	39ffbfc4 	addi	r7,r7,-257
 80022b4:	29c7883a 	add	r3,r5,r7
 80022b8:	01a02074 	movhi	r6,32897
 80022bc:	014a303a 	nor	r5,zero,r5
 80022c0:	1946703a 	and	r3,r3,r5
 80022c4:	31a02004 	addi	r6,r6,-32640
 80022c8:	1986703a 	and	r3,r3,r6
 80022cc:	1800071e 	bne	r3,zero,80022ec <strlen+0x74>
 80022d0:	11400117 	ldw	r5,4(r2)
 80022d4:	10800104 	addi	r2,r2,4
 80022d8:	29c7883a 	add	r3,r5,r7
 80022dc:	014a303a 	nor	r5,zero,r5
 80022e0:	1946703a 	and	r3,r3,r5
 80022e4:	1986703a 	and	r3,r3,r6
 80022e8:	183ff926 	beq	r3,zero,80022d0 <strlen+0x58>
 80022ec:	10c00007 	ldb	r3,0(r2)
 80022f0:	183fea26 	beq	r3,zero,800229c <strlen+0x24>
 80022f4:	10c00047 	ldb	r3,1(r2)
 80022f8:	10800044 	addi	r2,r2,1
 80022fc:	183fe726 	beq	r3,zero,800229c <strlen+0x24>
 8002300:	10c00047 	ldb	r3,1(r2)
 8002304:	10800044 	addi	r2,r2,1
 8002308:	183ffa1e 	bne	r3,zero,80022f4 <strlen+0x7c>
 800230c:	003fe306 	br	800229c <strlen+0x24>

08002310 <__register_exitproc>:
 8002310:	00820034 	movhi	r2,2048
 8002314:	10cedf17 	ldw	r3,15228(r2)
 8002318:	18805217 	ldw	r2,328(r3)
 800231c:	10001726 	beq	r2,zero,800237c <__register_exitproc+0x6c>
 8002320:	10c00117 	ldw	r3,4(r2)
 8002324:	1a000808 	cmpgei	r8,r3,32
 8002328:	40001b1e 	bne	r8,zero,8002398 <__register_exitproc+0x88>
 800232c:	20000b26 	beq	r4,zero,800235c <__register_exitproc+0x4c>
 8002330:	181090ba 	slli	r8,r3,2
 8002334:	02400044 	movi	r9,1
 8002338:	48d2983a 	sll	r9,r9,r3
 800233c:	1211883a 	add	r8,r2,r8
 8002340:	41802215 	stw	r6,136(r8)
 8002344:	11806217 	ldw	r6,392(r2)
 8002348:	21000098 	cmpnei	r4,r4,2
 800234c:	324cb03a 	or	r6,r6,r9
 8002350:	11806215 	stw	r6,392(r2)
 8002354:	41c04215 	stw	r7,264(r8)
 8002358:	20000b26 	beq	r4,zero,8002388 <__register_exitproc+0x78>
 800235c:	19000084 	addi	r4,r3,2
 8002360:	200890ba 	slli	r4,r4,2
 8002364:	18c00044 	addi	r3,r3,1
 8002368:	10c00115 	stw	r3,4(r2)
 800236c:	1105883a 	add	r2,r2,r4
 8002370:	11400015 	stw	r5,0(r2)
 8002374:	0005883a 	mov	r2,zero
 8002378:	f800283a 	ret
 800237c:	18805304 	addi	r2,r3,332
 8002380:	18805215 	stw	r2,328(r3)
 8002384:	003fe606 	br	8002320 <__register_exitproc+0x10>
 8002388:	11006317 	ldw	r4,396(r2)
 800238c:	2252b03a 	or	r9,r4,r9
 8002390:	12406315 	stw	r9,396(r2)
 8002394:	003ff106 	br	800235c <__register_exitproc+0x4c>
 8002398:	00bfffc4 	movi	r2,-1
 800239c:	f800283a 	ret

080023a0 <__call_exitprocs>:
 80023a0:	defff704 	addi	sp,sp,-36
 80023a4:	00820034 	movhi	r2,2048
 80023a8:	dcc00315 	stw	r19,12(sp)
 80023ac:	14cedf17 	ldw	r19,15228(r2)
 80023b0:	dc800215 	stw	r18,8(sp)
 80023b4:	dfc00815 	stw	ra,32(sp)
 80023b8:	9c805217 	ldw	r18,328(r19)
 80023bc:	ddc00715 	stw	r23,28(sp)
 80023c0:	dd800615 	stw	r22,24(sp)
 80023c4:	dd400515 	stw	r21,20(sp)
 80023c8:	dd000415 	stw	r20,16(sp)
 80023cc:	dc400115 	stw	r17,4(sp)
 80023d0:	dc000015 	stw	r16,0(sp)
 80023d4:	90001026 	beq	r18,zero,8002418 <__call_exitprocs+0x78>
 80023d8:	202b883a 	mov	r21,r4
 80023dc:	282d883a 	mov	r22,r5
 80023e0:	05000044 	movi	r20,1
 80023e4:	94000117 	ldw	r16,4(r18)
 80023e8:	847fffc4 	addi	r17,r16,-1
 80023ec:	88000a16 	blt	r17,zero,8002418 <__call_exitprocs+0x78>
 80023f0:	84000044 	addi	r16,r16,1
 80023f4:	802090ba 	slli	r16,r16,2
 80023f8:	9421883a 	add	r16,r18,r16
 80023fc:	b0001126 	beq	r22,zero,8002444 <__call_exitprocs+0xa4>
 8002400:	80804017 	ldw	r2,256(r16)
 8002404:	15800f26 	beq	r2,r22,8002444 <__call_exitprocs+0xa4>
 8002408:	8c7fffc4 	addi	r17,r17,-1
 800240c:	88bfffd8 	cmpnei	r2,r17,-1
 8002410:	843fff04 	addi	r16,r16,-4
 8002414:	103ff91e 	bne	r2,zero,80023fc <__call_exitprocs+0x5c>
 8002418:	dfc00817 	ldw	ra,32(sp)
 800241c:	ddc00717 	ldw	r23,28(sp)
 8002420:	dd800617 	ldw	r22,24(sp)
 8002424:	dd400517 	ldw	r21,20(sp)
 8002428:	dd000417 	ldw	r20,16(sp)
 800242c:	dcc00317 	ldw	r19,12(sp)
 8002430:	dc800217 	ldw	r18,8(sp)
 8002434:	dc400117 	ldw	r17,4(sp)
 8002438:	dc000017 	ldw	r16,0(sp)
 800243c:	dec00904 	addi	sp,sp,36
 8002440:	f800283a 	ret
 8002444:	90800117 	ldw	r2,4(r18)
 8002448:	81800017 	ldw	r6,0(r16)
 800244c:	10bfffc4 	addi	r2,r2,-1
 8002450:	14401726 	beq	r2,r17,80024b0 <__call_exitprocs+0x110>
 8002454:	80000015 	stw	zero,0(r16)
 8002458:	303feb26 	beq	r6,zero,8002408 <__call_exitprocs+0x68>
 800245c:	a446983a 	sll	r3,r20,r17
 8002460:	90806217 	ldw	r2,392(r18)
 8002464:	95c00117 	ldw	r23,4(r18)
 8002468:	1884703a 	and	r2,r3,r2
 800246c:	1000081e 	bne	r2,zero,8002490 <__call_exitprocs+0xf0>
 8002470:	303ee83a 	callr	r6
 8002474:	90c00117 	ldw	r3,4(r18)
 8002478:	98805217 	ldw	r2,328(r19)
 800247c:	1dc0011e 	bne	r3,r23,8002484 <__call_exitprocs+0xe4>
 8002480:	90bfe126 	beq	r18,r2,8002408 <__call_exitprocs+0x68>
 8002484:	103fe426 	beq	r2,zero,8002418 <__call_exitprocs+0x78>
 8002488:	1025883a 	mov	r18,r2
 800248c:	003fd506 	br	80023e4 <__call_exitprocs+0x44>
 8002490:	90806317 	ldw	r2,396(r18)
 8002494:	81002017 	ldw	r4,128(r16)
 8002498:	1886703a 	and	r3,r3,r2
 800249c:	1800061e 	bne	r3,zero,80024b8 <__call_exitprocs+0x118>
 80024a0:	200b883a 	mov	r5,r4
 80024a4:	a809883a 	mov	r4,r21
 80024a8:	303ee83a 	callr	r6
 80024ac:	003ff106 	br	8002474 <__call_exitprocs+0xd4>
 80024b0:	94400115 	stw	r17,4(r18)
 80024b4:	003fe806 	br	8002458 <__call_exitprocs+0xb8>
 80024b8:	303ee83a 	callr	r6
 80024bc:	003fed06 	br	8002474 <__call_exitprocs+0xd4>

080024c0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80024c0:	defffd04 	addi	sp,sp,-12
 80024c4:	df000215 	stw	fp,8(sp)
 80024c8:	df000204 	addi	fp,sp,8
 80024cc:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80024d0:	0001883a 	nop
 80024d4:	e0bffe17 	ldw	r2,-8(fp)
 80024d8:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80024dc:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80024e0:	10000226 	beq	r2,zero,80024ec <_exit+0x2c>
    ALT_SIM_FAIL();
 80024e4:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 80024e8:	00000106 	br	80024f0 <_exit+0x30>
    ALT_SIM_PASS();
 80024ec:	002af0b0 	cmpltui	zero,zero,43970
}
 80024f0:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80024f4:	003fff06 	br	80024f4 <_exit+0x34>
