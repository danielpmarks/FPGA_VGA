
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000224

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0001335c memsz 0x0001335c flags r-x
    LOAD off    0x0001437c vaddr 0x0801337c paddr 0x08014f94 align 2**12
         filesz 0x00001c18 memsz 0x00001c18 flags rw-
    LOAD off    0x00016bac vaddr 0x08016bac paddr 0x08016bac align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001282c  08000224  08000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000092c  08012a50  08012a50  00013a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c18  0801337c  08014f94  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  08016bac  08016bac  00016bac  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00015f94  2**0
                  CONTENTS
  7 .sdram        00000000  08016e8c  08016e8c  00015f94  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  00015f94  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001170  00000000  00000000  00015fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   000310a6  00000000  00000000  00017138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000c1f0  00000000  00000000  000481de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00018241  00000000  00000000  000543ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00002bdc  00000000  00000000  0006c610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00004832  00000000  00000000  0006f1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0001e5ef  00000000  00000000  00073a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_alt_sim_info 00000040  00000000  00000000  00092010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000024a8  00000000  00000000  00092050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .thread_model 00000003  00000000  00000000  00098050  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00098053  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0009805f  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00098060  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00098061  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00098065  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00098069  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0009806d  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00098078  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00098083  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0009808e  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000026  00000000  00000000  00098097  2**0
                  CONTENTS, READONLY
 30 .jdi          00004f2c  00000000  00000000  000980bd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000224 l    d  .text	00000000 .text
08012a50 l    d  .rodata	00000000 .rodata
0801337c l    d  .rwdata	00000000 .rwdata
08016bac l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08016e8c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/danie/OneDrive/Desktop/Lab6.2/software/usb_kb_bsp//obj/HAL/src/crt0.o
0800025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 main.c
08014f4c l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 transfer.c
08016bbc l     O .bss	00000004 usb_delay.1
08016bc0 l     O .bss	00000001 tmp_addr.0
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08004f94 l     F .text	000000c0 __sbprintf
08012d7c l     O .rodata	00000010 blanks.1
08012d6c l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
080051b8 l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08006e2c l     F .text	00000008 __fp_lock
08006e40 l     F .text	00000008 __fp_unlock
08006e48 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
080133ac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08012e30 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800a4c4 l     F .text	000000f4 __sprint_r.part.0
0800b930 l     F .text	000000c0 __sbprintf
08012f64 l     O .rodata	00000010 blanks.1
08012f54 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
0800bd48 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800fe7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800ff94 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800fff8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
08010110 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
080101fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08010364 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08010450 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08010630 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08014f84 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08010a78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08010bb8 l     F .text	00000034 alt_dev_reg
08013eec l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08010eb0 l     F .text	0000020c altera_avalon_jtag_uart_irq
080110bc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
080118fc l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08011ca8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0801210c l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0801225c l     F .text	0000003c alt_get_errno
08012298 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08016bf0 g     O .bss	00000004 alt_instruction_exception_handler
08002ce8 g     F .text	00000018 putchar
08009ad0 g     F .text	00000070 _mprec_log10
08009bbc g     F .text	00000060 __any_on
0800c1a0 g     F .text	00000058 _isatty_r
08012e3c g     O .rodata	00000028 __mprec_tinytens
0801056c g     F .text	0000007c alt_main
08014f50 g     O .rwdata	00000008 ctrl_xfers
08002d00 g     F .text	000000cc _puts_r
08016d8c g     O .bss	00000100 alt_irq
0800c2ec g     F .text	00000064 _lseek_r
08002230 g     F .text	00000658 USB_Task
08014f94 g       *ABS*	00000000 __flash_rwdata_start
0800e95c g     F .text	00000080 .hidden __eqdf2
08016e8c g       *ABS*	00000000 __alt_heap_start
0800caf4 g     F .text	00000060 _kill_r
08002ca8 g     F .text	00000038 printf
0800c4c0 g     F .text	0000006c _wcrtomb_r
08000ae4 g     F .text	0000008c kbdPoll
0800c664 g     F .text	00000098 _signal_r
0800a460 g     F .text	0000005c __sseek
08007190 g     F .text	00000010 __sinit
0800b9f0 g     F .text	00000148 __swbuf_r
0800c1f8 g     F .text	00000074 _setlocale_r
08006fb0 g     F .text	00000078 __sfmoreglue
0801060c g     F .text	00000024 __malloc_unlock
08001390 g     F .text	000001e8 GetDriverandReport
08008810 g     F .text	0000012c memmove
0800717c g     F .text	00000014 _cleanup
08008a2c g     F .text	000000a4 _Balloc
08000c50 g     F .text	00000090 MAXreg_wr
0801337c g     O .rwdata	00000030 ClientDriverTable
0800e9dc g     F .text	000000e8 .hidden __gtdf2
080124d4 g     F .text	00000024 altera_nios2_gen2_irq_init
08002888 g     F .text	0000002c MSDProbe
08000000 g     F .entry	0000000c __reset
08007bf8 g     F .text	00000008 __localeconv_l
08001d34 g     F .text	000000ec XferCtrlData
08000020 g       *ABS*	00000000 __flash_exceptions_start
08016cf4 g     O .bss	00000010 hid_ep
0800c140 g     F .text	00000060 _fstat_r
08016bd0 g     O .bss	00000004 errno
0800a3d8 g     F .text	00000008 __seofread
08016bdc g     O .bss	00000004 alt_argv
0801cf4c g       *ABS*	00000000 _gp
08010a48 g     F .text	00000030 usleep
08000e3c g     F .text	00000080 MAXreg_rd
080100f0 g     F .text	00000020 getpid
08013d6c g     O .rwdata	00000180 alt_fd_list
08000a28 g     F .text	00000038 HID_init
08002ce0 g     F .text	00000008 _putchar_r
080124f8 g     F .text	00000090 alt_find_dev
08008710 g     F .text	00000100 memcpy
08006e34 g     F .text	0000000c _cleanup_r
0800fce0 g     F .text	000000b8 .hidden __floatsidf
080121e0 g     F .text	0000007c alt_io_redirect
0800eac4 g     F .text	000000e8 .hidden __ltdf2
08012a50 g       *ABS*	00000000 __DTOR_END__
08002dcc g     F .text	00000010 puts
08012748 g     F .text	00000098 alt_exception_cause_generated_bad_addr
08009a2c g     F .text	000000a4 __ratio
0800b914 g     F .text	0000001c __vfiprintf_internal
080112b8 g     F .text	00000220 altera_avalon_jtag_uart_read
08002c78 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08002b90 g     F .text	00000064 .hidden __udivsi3
0801014c g     F .text	000000b0 isatty
0800c6fc g     F .text	000000c4 _raise_r
0800bc0c g     F .text	00000064 __assert_func
08012e8c g     O .rodata	000000c8 __mprec_tens
08016bcc g     O .bss	00000004 __malloc_top_pad
0800cb54 g     F .text	00000004 _getpid_r
08014f58 g     O .rwdata	00000001 usb_task_state
08007c00 g     F .text	0000000c _localeconv_r
08008e9c g     F .text	000000b0 __i2b
080075f0 g     F .text	000004c8 __sfvwrite_r
0800c7c0 g     F .text	000000bc __sigtramp_r
0800a32c g     F .text	00000058 _sbrk_r
0800c3a0 g     F .text	00000064 _read_r
080011a0 g     F .text	00000094 MAX3421E_init
08001834 g     F .text	00000030 setKeycode
08014f7c g     O .rwdata	00000004 alt_max_fd
0800be08 g     F .text	00000070 _fclose_r
08006da8 g     F .text	00000084 fflush
08016bc8 g     O .bss	00000004 __malloc_max_sbrked_mem
0800d73c g     F .text	000008f0 .hidden __adddf3
080097c0 g     F .text	00000108 __b2d
0800d178 g     F .text	000005c4 .hidden __umoddi3
0801048c g     F .text	000000e0 lseek
08014f5c g     O .rwdata	00000004 _global_impure_ptr
08009dc8 g     F .text	00000564 _realloc_r
08016e8c g       *ABS*	00000000 __bss_end
08012024 g     F .text	000000e8 alt_iic_isr_register
08010940 g     F .text	00000108 alt_tick
0800cb58 g     F .text	00000620 .hidden __udivdi3
0800c0a4 g     F .text	00000024 _fputwc_r
08012e64 g     O .rodata	00000028 __mprec_bigtens
08008c50 g     F .text	00000138 __s2b
0800c5f0 g     F .text	00000018 abort
0800fd98 g     F .text	00000090 .hidden __floatunsidf
080094e0 g     F .text	00000058 __mcmp
080071b0 g     F .text	00000014 __fp_lock_all
08011fd8 g     F .text	0000004c alt_ic_irq_enabled
0801089c g     F .text	000000a4 alt_alarm_stop
08016bec g     O .bss	00000004 alt_irq_active
08002958 g     F .text	0000002c DummyProbe
080000fc g     F .exceptions	000000c8 alt_irq_handler
08013d44 g     O .rwdata	00000028 alt_dev_null
08000a60 g     F .text	00000084 mousePoll
08000ff0 g     F .text	00000024 Vbus_power
08011c88 g     F .text	00000020 alt_dcache_flush_all
08008d88 g     F .text	00000064 __hi0bits
0800fc60 g     F .text	00000080 .hidden __fixdfsi
08014f94 g       *ABS*	00000000 __ram_rwdata_end
08014f74 g     O .rwdata	00000008 alt_dev_list
08010ab4 g     F .text	00000104 write
08009c1c g     F .text	000000cc _putc_r
0801337c g       *ABS*	00000000 __ram_rodata_end
08016bb8 g     O .bss	00000001 usb_error
08010034 g     F .text	000000bc fstat
08010238 g     F .text	0000012c kill
0800eac4 g     F .text	000000e8 .hidden __ledf2
08009210 g     F .text	00000148 __pow5mult
0800a5d0 g     F .text	00001344 ___vfiprintf_internal_r
08002bf4 g     F .text	0000005c .hidden __umodsi3
08016e8c g       *ABS*	00000000 end
08010df0 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
08001ea0 g     F .text	00000180 XferDispatchPkt
08012a50 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08011978 g     F .text	00000084 alt_avalon_timer_sc_init
0800fe28 g     F .text	00000054 .hidden __clzsi2
080114d8 g     F .text	00000228 altera_avalon_jtag_uart_write
080071a0 g     F .text	00000004 __sfp_lock_acquire
08008640 g     F .text	000000d0 memchr
08002e74 g     F .text	00002104 ___vfprintf_internal_r
0800135c g     F .text	00000034 MaxGpxHandler
080072f4 g     F .text	000002fc _free_r
080130c8 g     O .rodata	00000180 _ctype_b
0800c26c g     F .text	0000000c __locale_mb_cur_max
08012930 g     F .text	00000120 __call_exitprocs
08014f64 g     O .rwdata	00000004 __malloc_sbrk_base
08000224 g     F .text	0000003c _start
08016be4 g     O .bss	00000004 _alt_tick_rate
08000ebc g     F .text	00000098 MAXbytes_rd
08009358 g     F .text	00000188 __lshift
08011700 g     F .text	000001fc alt_avalon_spi_command
08016be8 g     O .bss	00000004 _alt_nticks
0800c938 g     F .text	000000a0 signal
0801066c g     F .text	00000108 read
08010c28 g     F .text	00000064 alt_sys_init
08016d1c g     O .bss	00000048 devtable
080128a0 g     F .text	00000090 __register_exitproc
08000644 g     F .text	000003e4 HIDKProbe
08016d04 g     O .bss	00000018 msd_ep
08008f4c g     F .text	000002c4 __multiply
0801115c g     F .text	00000068 altera_avalon_jtag_uart_close
080021a8 g     F .text	00000088 USB_init
08002c50 g     F .text	00000028 .hidden __mulsi3
08016bf4 g     O .bss	00000100 bigbuf
0801337c g       *ABS*	00000000 __ram_rwdata_start
08012a50 g       *ABS*	00000000 __ram_rodata_start
08016d64 g     O .bss	00000028 __malloc_current_mallinfo
08016bb9 g     O .bss	00000001 last_usb_task_state
080098c8 g     F .text	00000164 __d2b
08016bb0 g     O .bss	00000008 dev0ep
080015b4 g     F .text	00000040 clearLED
08010c8c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08012690 g     F .text	000000b8 alt_get_fd
08011b30 g     F .text	00000158 alt_busy_sleep
080028b4 g     F .text	0000003c MSDEventHandler
0800bbb4 g     F .text	00000058 _close_r
08012828 g     F .text	00000078 memcmp
08010d4c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08016e8c g       *ABS*	00000000 __alt_stack_base
08010d9c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08005054 g     F .text	00000164 __swsetup_r
0800e02c g     F .text	00000930 .hidden __divdf3
08007028 g     F .text	00000154 __sfp
08009b40 g     F .text	0000007c __copybits
080137d0 g     O .rwdata	00000408 __malloc_av_
080071ac g     F .text	00000004 __sinit_lock_release
0800291c g     F .text	0000003c CDCEventHandler
0800ebac g     F .text	000007ac .hidden __muldf3
08002984 g     F .text	0000003c DummyEventHandler
0800a384 g     F .text	00000054 __sread
08012588 g     F .text	00000108 alt_find_file
08011ce4 g     F .text	000000a8 alt_dev_llist_insert
080105e8 g     F .text	00000024 __malloc_lock
080107e4 g     F .text	000000b8 sbrk
08006d48 g     F .text	00000060 _fflush_r
0800bc84 g     F .text	000000c4 _calloc_r
08016bac g       *ABS*	00000000 __bss_start
08001014 g     F .text	0000018c MAX_busprobe
08016bac g     O .bss	00000002 hid_device
0800893c g     F .text	000000f0 memset
08001864 g     F .text	0000037c main
08001234 g     F .text	0000005c MAX3421E_Task
08016be0 g     O .bss	00000004 alt_envp
08016bc4 g     O .bss	00000004 __malloc_max_total_mem
08010cec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800bb38 g     F .text	00000018 __swbuf
08002a18 g     F .text	00000084 ConvUTF8ToStr
0800a4bc g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800be78 g     F .text	00000070 fclose
080053d8 g     F .text	00001748 _dtoa_r
08007e60 g     F .text	000007e0 _malloc_r
0800c5c0 g     F .text	00000030 __ascii_wctomb
08014f80 g     O .rwdata	00000004 alt_errno
0800bee8 g     F .text	00000020 _fiprintf_r
0800c9d8 g     F .text	00000060 _init_signal
08007ab8 g     F .text	00000098 _fwalk
0800c350 g     F .text	0000000c _mbtowc_r
08009ce8 g     F .text	000000e0 putc
08002a9c g     F .text	00000080 .hidden __divsi3
08002020 g     F .text	00000188 XferInTransfer
08001704 g     F .text	00000130 printSignedHex1
080071d8 g     F .text	0000011c _malloc_trim_r
08012a50 g       *ABS*	00000000 __CTOR_END__
080029e0 g     F .text	00000038 GetDevtable
0800c404 g     F .text	000000b8 strcmp
08012a50 g       *ABS*	00000000 __flash_rodata_start
08012a50 g       *ABS*	00000000 __DTOR_LIST__
08001e20 g     F .text	00000080 XferCtrlND
0800e95c g     F .text	00000080 .hidden __nedf2
08000f54 g     F .text	0000009c MAX3421E_reset
08010bec g     F .text	0000003c alt_irq_init
08010774 g     F .text	00000070 alt_release_fd
08013248 g     O .rodata	00000100 .hidden __clz_tab
08016bd4 g     O .bss	00000004 _PathLocale
080127e0 g     F .text	00000014 atexit
0800bb50 g     F .text	00000064 _write_r
0800c278 g     F .text	00000074 setlocale
08014f60 g     O .rwdata	00000004 _impure_ptr
08016bd8 g     O .bss	00000004 alt_argc
08006b20 g     F .text	00000228 __sflush_r
08011df0 g     F .text	00000064 _do_dtors
08000ce0 g     F .text	0000015c MAXbytes_wr
08000020 g       .exceptions	00000000 alt_irq_entry
0800c35c g     F .text	00000044 __ascii_mbtowc
08009764 g     F .text	0000005c __ulp
080071c4 g     F .text	00000014 __fp_unlock_all
08014f6c g     O .rwdata	00000008 alt_fs_list
080028f0 g     F .text	0000002c CDCProbe
08000020 g       *ABS*	00000000 __ram_exceptions_start
08007c0c g     F .text	0000000c localeconv
08001578 g     F .text	0000003c setLED
080029c0 g     F .text	00000020 GetUsbTaskState
08007dc8 g     F .text	00000098 __swhatbuf_r
08011e74 g     F .text	00000050 alt_ic_isr_register
08012b98 g     O .rodata	00000010 devclasses
08014f94 g       *ABS*	00000000 _edata
08000bac g     F .text	0000003c HIDKEventHandler
08016e8c g       *ABS*	00000000 _end
08001290 g     F .text	000000cc MaxIntHandler
0800bf40 g     F .text	00000164 __fputwc
08000224 g       *ABS*	00000000 __ram_exceptions_end
080111c4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
08000be8 g     F .text	00000040 SPI_init
08011f4c g     F .text	0000008c alt_ic_irq_disable
0800a3e0 g     F .text	00000080 __swrite
08014f68 g     O .rwdata	00000004 __malloc_trim_threshold
080127f4 g     F .text	00000034 exit
0800bf08 g     F .text	00000038 fiprintf
0800c4bc g     F .text	00000004 _vfiprintf_r
08007b50 g     F .text	000000a8 _fwalk_reent
08009538 g     F .text	0000022c __mdiff
08002b1c g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
080071a4 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08012fc4 g     O .rodata	00000101 _ctype_
0800fc0c g     F .text	00000054 .hidden __unorddf2
08000b70 g     F .text	0000003c HIDMEventHandler
0800ffc0 g     F .text	00000038 _exit
080119fc g     F .text	00000134 alt_alarm_start
080015f4 g     F .text	00000110 printSignedHex0
08007c18 g     F .text	000001b0 __smakebuf_r
08002ddc g     F .text	00000098 strlen
0800c608 g     F .text	0000005c _init_signal_r
08012374 g     F .text	00000160 open
0800e9dc g     F .text	000000e8 .hidden __gedf2
0800bc70 g     F .text	00000014 __assert
0800a5b8 g     F .text	00000018 __sprint_r
08011e54 g     F .text	00000020 alt_icache_flush_all
08014f90 g     O .rwdata	00000004 alt_priority_mask
08011ec4 g     F .text	00000088 alt_ic_irq_enable
08004f78 g     F .text	0000001c __vfprintf_internal
08000260 g     F .text	000003e4 HIDMProbe
0800c5b4 g     F .text	0000000c _wctomb_r
08000c28 g     F .text	00000028 SPI_wr
0800f358 g     F .text	000008b4 .hidden __subdf3
08008dec g     F .text	000000b0 __lo0bits
08014f88 g     O .rwdata	00000008 alt_alarm_list
08011d8c g     F .text	00000064 _do_ctors
0800ca38 g     F .text	000000bc __sigtramp
0800c52c g     F .text	00000088 wcrtomb
0800feb8 g     F .text	000000dc close
08013bd8 g     O .rwdata	0000016c __global_locale
080103cc g     F .text	00000084 alt_load
0800c0c8 g     F .text	00000078 fputwc
0800c87c g     F .text	000000bc raise
080071a8 g     F .text	00000004 __sinit_lock_acquire
08001be0 g     F .text	00000154 XferCtrlReq
08008af4 g     F .text	0000015c __multadd
08008ad0 g     F .text	00000024 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408914 	ori	at,at,548
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001c40 	call	80001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0ffff17 	ldw	r3,-4(fp)
 8000130:	e0bffe17 	ldw	r2,-8(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001126 	beq	r2,zero,8000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	e0bffd17 	ldw	r2,-12(fp)
 8000140:	100690fa 	slli	r3,r2,3
 8000144:	00820074 	movhi	r2,2049
 8000148:	1885883a 	add	r2,r3,r2
 800014c:	10db6317 	ldw	r3,28044(r2)
 8000150:	e0bffd17 	ldw	r2,-12(fp)
 8000154:	100890fa 	slli	r4,r2,3
 8000158:	00820074 	movhi	r2,2049
 800015c:	2085883a 	add	r2,r4,r2
 8000160:	109b6417 	ldw	r2,28048(r2)
 8000164:	1009883a 	mov	r4,r2
 8000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 800016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 8000170:	0005313a 	rdctl	r2,ipending
 8000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 8000178:	e0bffb17 	ldw	r2,-20(fp)
 800017c:	00000706 	br	800019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 8000180:	e0bffe17 	ldw	r2,-8(fp)
 8000184:	1085883a 	add	r2,r2,r2
 8000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 800018c:	e0bffd17 	ldw	r2,-12(fp)
 8000190:	10800044 	addi	r2,r2,1
 8000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 8000198:	003fe406 	br	800012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 800019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 80001a0:	e0bfff17 	ldw	r2,-4(fp)
 80001a4:	103fde1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a8:	0001883a 	nop
}
 80001ac:	0001883a 	nop
 80001b0:	e037883a 	mov	sp,fp
 80001b4:	dfc00117 	ldw	ra,4(sp)
 80001b8:	df000017 	ldw	fp,0(sp)
 80001bc:	dec00204 	addi	sp,sp,8
 80001c0:	f800283a 	ret

080001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001c4:	defffb04 	addi	sp,sp,-20
 80001c8:	dfc00415 	stw	ra,16(sp)
 80001cc:	df000315 	stw	fp,12(sp)
 80001d0:	df000304 	addi	fp,sp,12
 80001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001d8:	00bfffc4 	movi	r2,-1
 80001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 80001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001e4:	d0a72917 	ldw	r2,-25436(gp)
 80001e8:	10000726 	beq	r2,zero,8000208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001ec:	d0a72917 	ldw	r2,-25436(gp)
 80001f0:	e0ffff17 	ldw	r3,-4(fp)
 80001f4:	e1bffe17 	ldw	r6,-8(fp)
 80001f8:	e17ffd17 	ldw	r5,-12(fp)
 80001fc:	1809883a 	mov	r4,r3
 8000200:	103ee83a 	callr	r2
 8000204:	00000206 	br	8000210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800020c:	0005883a 	mov	r2,zero
}
 8000210:	e037883a 	mov	sp,fp
 8000214:	dfc00117 	ldw	ra,4(sp)
 8000218:	df000017 	ldw	fp,0(sp)
 800021c:	dec00204 	addi	sp,sp,8
 8000220:	f800283a 	ret

Disassembly of section .text:

08000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000224:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800022c:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000230:	d6b3d314 	ori	gp,gp,53068
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000234:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000238:	109aeb14 	ori	r2,r2,27564

    movhi r3, %hi(__bss_end)
 800023c:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 8000240:	18dba314 	ori	r3,r3,28300

    beq r2, r3, 1f
 8000244:	10c00326 	beq	r2,r3,8000254 <_start+0x30>

0:
    stw zero, (r2)
 8000248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000250:	10fffd36 	bltu	r2,r3,8000248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000254:	80103cc0 	call	80103cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000258:	801056c0 	call	801056c <alt_main>

0800025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800025c:	003fff06 	br	800025c <alt_after_alt_main>

08000260 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 8000260:	defff204 	addi	sp,sp,-56
 8000264:	dfc00d15 	stw	ra,52(sp)
 8000268:	df000c15 	stw	fp,48(sp)
 800026c:	df000c04 	addi	fp,sp,48
 8000270:	2005883a 	mov	r2,r4
 8000274:	e17ff915 	stw	r5,-28(fp)
 8000278:	e0bffa05 	stb	r2,-24(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 800027c:	00820074 	movhi	r2,2049
 8000280:	109afd04 	addi	r2,r2,27636
 8000284:	e0bffe15 	stw	r2,-8(fp)
	BYTE* byte_ptr = bigbuf;
 8000288:	00820074 	movhi	r2,2049
 800028c:	109afd04 	addi	r2,r2,27636
 8000290:	e0bffd15 	stw	r2,-12(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 8000294:	e0fffa03 	ldbu	r3,-24(fp)
 8000298:	00820074 	movhi	r2,2049
 800029c:	109afd04 	addi	r2,r2,27636
 80002a0:	d8800415 	stw	r2,16(sp)
 80002a4:	00800244 	movi	r2,9
 80002a8:	d8800315 	stw	r2,12(sp)
 80002ac:	d8000215 	stw	zero,8(sp)
 80002b0:	00800084 	movi	r2,2
 80002b4:	d8800115 	stw	r2,4(sp)
 80002b8:	d8000015 	stw	zero,0(sp)
 80002bc:	01c00184 	movi	r7,6
 80002c0:	01802004 	movi	r6,128
 80002c4:	000b883a 	mov	r5,zero
 80002c8:	1809883a 	mov	r4,r3
 80002cc:	8001be00 	call	8001be0 <XferCtrlReq>
 80002d0:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling
 80002d4:	e0bffcc3 	ldbu	r2,-13(fp)
 80002d8:	10000226 	beq	r2,zero,80002e4 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 80002dc:	0005883a 	mov	r2,zero
 80002e0:	0000d306 	br	8000630 <HIDMProbe+0x3d0>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 80002e4:	e0bffe17 	ldw	r2,-8(fp)
 80002e8:	1080008b 	ldhu	r2,2(r2)
 80002ec:	10bfffcc 	andi	r2,r2,65535
 80002f0:	10804070 	cmpltui	r2,r2,257
 80002f4:	1000031e 	bne	r2,zero,8000304 <HIDMProbe+0xa4>
		total_length = 256;
 80002f8:	00804004 	movi	r2,256
 80002fc:	e0bfff8d 	sth	r2,-2(fp)
 8000300:	00000306 	br	8000310 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8000304:	e0bffe17 	ldw	r2,-8(fp)
 8000308:	1080008b 	ldhu	r2,2(r2)
 800030c:	e0bfff8d 	sth	r2,-2(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8000310:	e13ffa03 	ldbu	r4,-24(fp)
 8000314:	e0ffff8b 	ldhu	r3,-2(fp)
 8000318:	00820074 	movhi	r2,2049
 800031c:	109afd04 	addi	r2,r2,27636
 8000320:	d8800415 	stw	r2,16(sp)
 8000324:	d8c00315 	stw	r3,12(sp)
 8000328:	d8000215 	stw	zero,8(sp)
 800032c:	00800084 	movi	r2,2
 8000330:	d8800115 	stw	r2,4(sp)
 8000334:	d8000015 	stw	zero,0(sp)
 8000338:	01c00184 	movi	r7,6
 800033c:	01802004 	movi	r6,128
 8000340:	000b883a 	mov	r5,zero
 8000344:	8001be00 	call	8001be0 <XferCtrlReq>
 8000348:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling
 800034c:	e0bffcc3 	ldbu	r2,-13(fp)
 8000350:	10000226 	beq	r2,zero,800035c <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 8000354:	0005883a 	mov	r2,zero
 8000358:	0000b506 	br	8000630 <HIDMProbe+0x3d0>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 800035c:	e0bffe17 	ldw	r2,-8(fp)
 8000360:	10800143 	ldbu	r2,5(r2)
 8000364:	e0bffc85 	stb	r2,-14(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 8000368:	0000aa06 	br	8000614 <HIDMProbe+0x3b4>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 800036c:	e0bffe17 	ldw	r2,-8(fp)
 8000370:	10800043 	ldbu	r2,1(r2)
 8000374:	10803fcc 	andi	r2,r2,255
 8000378:	10800120 	cmpeqi	r2,r2,4
 800037c:	1000091e 	bne	r2,zero,80003a4 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000380:	e0bffe17 	ldw	r2,-8(fp)
 8000384:	10800003 	ldbu	r2,0(r2)
 8000388:	10803fcc 	andi	r2,r2,255
 800038c:	e0fffd17 	ldw	r3,-12(fp)
 8000390:	1885883a 	add	r2,r3,r2
 8000394:	e0bffd15 	stw	r2,-12(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 8000398:	e0bffd17 	ldw	r2,-12(fp)
 800039c:	e0bffe15 	stw	r2,-8(fp)
 80003a0:	00009c06 	br	8000614 <HIDMProbe+0x3b4>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 80003a4:	e0bffe17 	ldw	r2,-8(fp)
 80003a8:	10800143 	ldbu	r2,5(r2)
 80003ac:	e0bffc45 	stb	r2,-15(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 80003b0:	e0bffe17 	ldw	r2,-8(fp)
 80003b4:	10800183 	ldbu	r2,6(r2)
 80003b8:	e0bffc05 	stb	r2,-16(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 80003bc:	e0bffe17 	ldw	r2,-8(fp)
 80003c0:	108001c3 	ldbu	r2,7(r2)
 80003c4:	e0bffbc5 	stb	r2,-17(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 80003c8:	e0bffc43 	ldbu	r2,-15(fp)
 80003cc:	108000d8 	cmpnei	r2,r2,3
 80003d0:	10008e1e 	bne	r2,zero,800060c <HIDMProbe+0x3ac>
 80003d4:	e0bffc03 	ldbu	r2,-16(fp)
 80003d8:	10800058 	cmpnei	r2,r2,1
 80003dc:	10008b1e 	bne	r2,zero,800060c <HIDMProbe+0x3ac>
					&& protocol == HID_PROTOCOL_MOUSE) {
 80003e0:	e0bffbc3 	ldbu	r2,-17(fp)
 80003e4:	10800098 	cmpnei	r2,r2,2
 80003e8:	1000881e 	bne	r2,zero,800060c <HIDMProbe+0x3ac>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 80003ec:	e0bffa03 	ldbu	r2,-24(fp)
 80003f0:	100890fa 	slli	r4,r2,3
 80003f4:	00c00084 	movi	r3,2
 80003f8:	00820074 	movhi	r2,2049
 80003fc:	2085883a 	add	r2,r4,r2
 8000400:	10db4805 	stb	r3,27936(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 8000404:	e0bffa03 	ldbu	r2,-24(fp)
 8000408:	100690fa 	slli	r3,r2,3
 800040c:	00820074 	movhi	r2,2049
 8000410:	1885883a 	add	r2,r3,r2
 8000414:	109b4717 	ldw	r2,27932(r2)
 8000418:	1080008b 	ldhu	r2,2(r2)
 800041c:	e0bffb85 	stb	r2,-18(fp)
				HID_init();                         //initialize data structures
 8000420:	8000a280 	call	8000a28 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8000424:	e0bffa03 	ldbu	r2,-24(fp)
 8000428:	100890fa 	slli	r4,r2,3
 800042c:	00c20074 	movhi	r3,2049
 8000430:	18db3d04 	addi	r3,r3,27892
 8000434:	00820074 	movhi	r2,2049
 8000438:	2085883a 	add	r2,r4,r2
 800043c:	10db4715 	stw	r3,27932(r2)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 8000440:	e0bffa03 	ldbu	r2,-24(fp)
 8000444:	100690fa 	slli	r3,r2,3
 8000448:	00820074 	movhi	r2,2049
 800044c:	1885883a 	add	r2,r3,r2
 8000450:	109b4717 	ldw	r2,27932(r2)
 8000454:	e0fffb83 	ldbu	r3,-18(fp)
 8000458:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 800045c:	e0bffe17 	ldw	r2,-8(fp)
 8000460:	10800083 	ldbu	r2,2(r2)
				hid_device.interface =
 8000464:	d0a71845 	stb	r2,-25503(gp)
				hid_device.addr = addr;
 8000468:	e0bffa03 	ldbu	r2,-24(fp)
 800046c:	d0a71805 	stb	r2,-25504(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000470:	e0bffe17 	ldw	r2,-8(fp)
 8000474:	10800003 	ldbu	r2,0(r2)
 8000478:	10803fcc 	andi	r2,r2,255
 800047c:	e0fffd17 	ldw	r3,-12(fp)
 8000480:	1885883a 	add	r2,r3,r2
 8000484:	e0bffd15 	stw	r2,-12(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 8000488:	e0bffd17 	ldw	r2,-12(fp)
 800048c:	e0bffe15 	stw	r2,-8(fp)
				while (byte_ptr < bigbuf + total_length) {
 8000490:	00005706 	br	80005f0 <HIDMProbe+0x390>
					if (data_ptr->descr.config.bDescriptorType
 8000494:	e0bffe17 	ldw	r2,-8(fp)
 8000498:	10800043 	ldbu	r2,1(r2)
 800049c:	10803fcc 	andi	r2,r2,255
 80004a0:	10800160 	cmpeqi	r2,r2,5
 80004a4:	1000091e 	bne	r2,zero,80004cc <HIDMProbe+0x26c>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 80004a8:	e0bffe17 	ldw	r2,-8(fp)
 80004ac:	10800003 	ldbu	r2,0(r2)
 80004b0:	10803fcc 	andi	r2,r2,255
 80004b4:	e0fffd17 	ldw	r3,-12(fp)
 80004b8:	1885883a 	add	r2,r3,r2
 80004bc:	e0bffd15 	stw	r2,-12(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 80004c0:	e0bffd17 	ldw	r2,-12(fp)
 80004c4:	e0bffe15 	stw	r2,-8(fp)
 80004c8:	00004906 	br	80005f0 <HIDMProbe+0x390>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 80004cc:	e0bffa03 	ldbu	r2,-24(fp)
 80004d0:	100690fa 	slli	r3,r2,3
 80004d4:	00820074 	movhi	r2,2049
 80004d8:	1885883a 	add	r2,r3,r2
 80004dc:	109b4717 	ldw	r2,27932(r2)
 80004e0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 80004e4:	e0fffe17 	ldw	r3,-8(fp)
 80004e8:	18c00083 	ldbu	r3,2(r3)
						devtable[addr].epinfo[1].epAddr =
 80004ec:	10c00005 	stb	r3,0(r2)
						devtable[addr].epinfo[1].Attr =
 80004f0:	e0bffa03 	ldbu	r2,-24(fp)
 80004f4:	100690fa 	slli	r3,r2,3
 80004f8:	00820074 	movhi	r2,2049
 80004fc:	1885883a 	add	r2,r3,r2
 8000500:	109b4717 	ldw	r2,27932(r2)
 8000504:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8000508:	e0fffe17 	ldw	r3,-8(fp)
 800050c:	18c000c3 	ldbu	r3,3(r3)
						devtable[addr].epinfo[1].Attr =
 8000510:	10c00045 	stb	r3,1(r2)
						devtable[addr].epinfo[1].MaxPktSize =
 8000514:	e0bffa03 	ldbu	r2,-24(fp)
 8000518:	100690fa 	slli	r3,r2,3
 800051c:	00820074 	movhi	r2,2049
 8000520:	1885883a 	add	r2,r3,r2
 8000524:	109b4717 	ldw	r2,27932(r2)
 8000528:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 800052c:	e0fffe17 	ldw	r3,-8(fp)
 8000530:	18c0010b 	ldhu	r3,4(r3)
						devtable[addr].epinfo[1].MaxPktSize =
 8000534:	10c0008d 	sth	r3,2(r2)
						devtable[addr].epinfo[1].Interval =
 8000538:	e0bffa03 	ldbu	r2,-24(fp)
 800053c:	100690fa 	slli	r3,r2,3
 8000540:	00820074 	movhi	r2,2049
 8000544:	1885883a 	add	r2,r3,r2
 8000548:	109b4717 	ldw	r2,27932(r2)
 800054c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 8000550:	e0fffe17 	ldw	r3,-8(fp)
 8000554:	18c00183 	ldbu	r3,6(r3)
						devtable[addr].epinfo[1].Interval =
 8000558:	10c00105 	stb	r3,4(r2)
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 800055c:	e0fffa03 	ldbu	r3,-24(fp)
 8000560:	e0bffc83 	ldbu	r2,-14(fp)
 8000564:	d8000415 	stw	zero,16(sp)
 8000568:	d8000315 	stw	zero,12(sp)
 800056c:	d8000215 	stw	zero,8(sp)
 8000570:	d8000115 	stw	zero,4(sp)
 8000574:	d8800015 	stw	r2,0(sp)
 8000578:	01c00244 	movi	r7,9
 800057c:	000d883a 	mov	r6,zero
 8000580:	000b883a 	mov	r5,zero
 8000584:	1809883a 	mov	r4,r3
 8000588:	8001be00 	call	8001be0 <XferCtrlReq>
 800058c:	e0bffcc5 	stb	r2,-13(fp)
						if (rcode) {   //error handling
 8000590:	e0bffcc3 	ldbu	r2,-13(fp)
 8000594:	10000226 	beq	r2,zero,80005a0 <HIDMProbe+0x340>
							return (FALSE);
 8000598:	0005883a 	mov	r2,zero
 800059c:	00002406 	br	8000630 <HIDMProbe+0x3d0>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 80005a0:	e0fffa03 	ldbu	r3,-24(fp)
 80005a4:	d0a71843 	ldbu	r2,-25503(gp)
 80005a8:	10803fcc 	andi	r2,r2,255
 80005ac:	d8000415 	stw	zero,16(sp)
 80005b0:	d8000315 	stw	zero,12(sp)
 80005b4:	d8800215 	stw	r2,8(sp)
 80005b8:	d8000115 	stw	zero,4(sp)
 80005bc:	d8000015 	stw	zero,0(sp)
 80005c0:	01c002c4 	movi	r7,11
 80005c4:	01800844 	movi	r6,33
 80005c8:	000b883a 	mov	r5,zero
 80005cc:	1809883a 	mov	r4,r3
 80005d0:	8001be00 	call	8001be0 <XferCtrlReq>
 80005d4:	e0bffcc5 	stb	r2,-13(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 80005d8:	e0bffcc3 	ldbu	r2,-13(fp)
 80005dc:	10000226 	beq	r2,zero,80005e8 <HIDMProbe+0x388>
							return (FALSE);
 80005e0:	0005883a 	mov	r2,zero
 80005e4:	00001206 	br	8000630 <HIDMProbe+0x3d0>
						} else {
							return (TRUE);
 80005e8:	00800044 	movi	r2,1
 80005ec:	00001006 	br	8000630 <HIDMProbe+0x3d0>
				while (byte_ptr < bigbuf + total_length) {
 80005f0:	e0ffff8b 	ldhu	r3,-2(fp)
 80005f4:	00820074 	movhi	r2,2049
 80005f8:	109afd04 	addi	r2,r2,27636
 80005fc:	1885883a 	add	r2,r3,r2
 8000600:	e0fffd17 	ldw	r3,-12(fp)
 8000604:	18bfa336 	bltu	r3,r2,8000494 <HIDMProbe+0x234>
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8000608:	00000206 	br	8000614 <HIDMProbe+0x3b4>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 800060c:	0005883a 	mov	r2,zero
 8000610:	00000706 	br	8000630 <HIDMProbe+0x3d0>
	while (byte_ptr < bigbuf + total_length) {
 8000614:	e0ffff8b 	ldhu	r3,-2(fp)
 8000618:	00820074 	movhi	r2,2049
 800061c:	109afd04 	addi	r2,r2,27636
 8000620:	1885883a 	add	r2,r3,r2
 8000624:	e0fffd17 	ldw	r3,-12(fp)
 8000628:	18bf5036 	bltu	r3,r2,800036c <HIDMProbe+0x10c>
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 800062c:	0005883a 	mov	r2,zero
}
 8000630:	e037883a 	mov	sp,fp
 8000634:	dfc00117 	ldw	ra,4(sp)
 8000638:	df000017 	ldw	fp,0(sp)
 800063c:	dec00204 	addi	sp,sp,8
 8000640:	f800283a 	ret

08000644 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 8000644:	defff204 	addi	sp,sp,-56
 8000648:	dfc00d15 	stw	ra,52(sp)
 800064c:	df000c15 	stw	fp,48(sp)
 8000650:	df000c04 	addi	fp,sp,48
 8000654:	2005883a 	mov	r2,r4
 8000658:	e17ff915 	stw	r5,-28(fp)
 800065c:	e0bffa05 	stb	r2,-24(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 8000660:	00820074 	movhi	r2,2049
 8000664:	109afd04 	addi	r2,r2,27636
 8000668:	e0bffe15 	stw	r2,-8(fp)
	BYTE* byte_ptr = bigbuf;
 800066c:	00820074 	movhi	r2,2049
 8000670:	109afd04 	addi	r2,r2,27636
 8000674:	e0bffd15 	stw	r2,-12(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 8000678:	e0fffa03 	ldbu	r3,-24(fp)
 800067c:	00820074 	movhi	r2,2049
 8000680:	109afd04 	addi	r2,r2,27636
 8000684:	d8800415 	stw	r2,16(sp)
 8000688:	00800244 	movi	r2,9
 800068c:	d8800315 	stw	r2,12(sp)
 8000690:	d8000215 	stw	zero,8(sp)
 8000694:	00800084 	movi	r2,2
 8000698:	d8800115 	stw	r2,4(sp)
 800069c:	d8000015 	stw	zero,0(sp)
 80006a0:	01c00184 	movi	r7,6
 80006a4:	01802004 	movi	r6,128
 80006a8:	000b883a 	mov	r5,zero
 80006ac:	1809883a 	mov	r4,r3
 80006b0:	8001be00 	call	8001be0 <XferCtrlReq>
 80006b4:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling           
 80006b8:	e0bffcc3 	ldbu	r2,-13(fp)
 80006bc:	10000226 	beq	r2,zero,80006c8 <HIDKProbe+0x84>
		return (FALSE);
 80006c0:	0005883a 	mov	r2,zero
 80006c4:	0000d306 	br	8000a14 <HIDKProbe+0x3d0>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 80006c8:	e0bffe17 	ldw	r2,-8(fp)
 80006cc:	1080008b 	ldhu	r2,2(r2)
 80006d0:	10bfffcc 	andi	r2,r2,65535
 80006d4:	10804070 	cmpltui	r2,r2,257
 80006d8:	1000031e 	bne	r2,zero,80006e8 <HIDKProbe+0xa4>
		total_length = 256;
 80006dc:	00804004 	movi	r2,256
 80006e0:	e0bfff8d 	sth	r2,-2(fp)
 80006e4:	00000306 	br	80006f4 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 80006e8:	e0bffe17 	ldw	r2,-8(fp)
 80006ec:	1080008b 	ldhu	r2,2(r2)
 80006f0:	e0bfff8d 	sth	r2,-2(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 80006f4:	e13ffa03 	ldbu	r4,-24(fp)
 80006f8:	e0ffff8b 	ldhu	r3,-2(fp)
 80006fc:	00820074 	movhi	r2,2049
 8000700:	109afd04 	addi	r2,r2,27636
 8000704:	d8800415 	stw	r2,16(sp)
 8000708:	d8c00315 	stw	r3,12(sp)
 800070c:	d8000215 	stw	zero,8(sp)
 8000710:	00800084 	movi	r2,2
 8000714:	d8800115 	stw	r2,4(sp)
 8000718:	d8000015 	stw	zero,0(sp)
 800071c:	01c00184 	movi	r7,6
 8000720:	01802004 	movi	r6,128
 8000724:	000b883a 	mov	r5,zero
 8000728:	8001be00 	call	8001be0 <XferCtrlReq>
 800072c:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling
 8000730:	e0bffcc3 	ldbu	r2,-13(fp)
 8000734:	10000226 	beq	r2,zero,8000740 <HIDKProbe+0xfc>
		return (FALSE);
 8000738:	0005883a 	mov	r2,zero
 800073c:	0000b506 	br	8000a14 <HIDKProbe+0x3d0>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 8000740:	e0bffe17 	ldw	r2,-8(fp)
 8000744:	10800143 	ldbu	r2,5(r2)
 8000748:	e0bffc85 	stb	r2,-14(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 800074c:	0000aa06 	br	80009f8 <HIDKProbe+0x3b4>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 8000750:	e0bffe17 	ldw	r2,-8(fp)
 8000754:	10800043 	ldbu	r2,1(r2)
 8000758:	10803fcc 	andi	r2,r2,255
 800075c:	10800120 	cmpeqi	r2,r2,4
 8000760:	1000091e 	bne	r2,zero,8000788 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000764:	e0bffe17 	ldw	r2,-8(fp)
 8000768:	10800003 	ldbu	r2,0(r2)
 800076c:	10803fcc 	andi	r2,r2,255
 8000770:	e0fffd17 	ldw	r3,-12(fp)
 8000774:	1885883a 	add	r2,r3,r2
 8000778:	e0bffd15 	stw	r2,-12(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 800077c:	e0bffd17 	ldw	r2,-12(fp)
 8000780:	e0bffe15 	stw	r2,-8(fp)
 8000784:	00009c06 	br	80009f8 <HIDKProbe+0x3b4>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 8000788:	e0bffe17 	ldw	r2,-8(fp)
 800078c:	10800143 	ldbu	r2,5(r2)
 8000790:	e0bffc45 	stb	r2,-15(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 8000794:	e0bffe17 	ldw	r2,-8(fp)
 8000798:	10800183 	ldbu	r2,6(r2)
 800079c:	e0bffc05 	stb	r2,-16(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 80007a0:	e0bffe17 	ldw	r2,-8(fp)
 80007a4:	108001c3 	ldbu	r2,7(r2)
 80007a8:	e0bffbc5 	stb	r2,-17(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 80007ac:	e0bffc43 	ldbu	r2,-15(fp)
 80007b0:	108000d8 	cmpnei	r2,r2,3
 80007b4:	10008e1e 	bne	r2,zero,80009f0 <HIDKProbe+0x3ac>
 80007b8:	e0bffc03 	ldbu	r2,-16(fp)
 80007bc:	10800058 	cmpnei	r2,r2,1
 80007c0:	10008b1e 	bne	r2,zero,80009f0 <HIDKProbe+0x3ac>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 80007c4:	e0bffbc3 	ldbu	r2,-17(fp)
 80007c8:	10800058 	cmpnei	r2,r2,1
 80007cc:	1000881e 	bne	r2,zero,80009f0 <HIDKProbe+0x3ac>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 80007d0:	e0bffa03 	ldbu	r2,-24(fp)
 80007d4:	100890fa 	slli	r4,r2,3
 80007d8:	00c00044 	movi	r3,1
 80007dc:	00820074 	movhi	r2,2049
 80007e0:	2085883a 	add	r2,r4,r2
 80007e4:	10db4805 	stb	r3,27936(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 80007e8:	e0bffa03 	ldbu	r2,-24(fp)
 80007ec:	100690fa 	slli	r3,r2,3
 80007f0:	00820074 	movhi	r2,2049
 80007f4:	1885883a 	add	r2,r3,r2
 80007f8:	109b4717 	ldw	r2,27932(r2)
 80007fc:	1080008b 	ldhu	r2,2(r2)
 8000800:	e0bffb85 	stb	r2,-18(fp)
				HID_init();                         //initialize data structures
 8000804:	8000a280 	call	8000a28 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8000808:	e0bffa03 	ldbu	r2,-24(fp)
 800080c:	100890fa 	slli	r4,r2,3
 8000810:	00c20074 	movhi	r3,2049
 8000814:	18db3d04 	addi	r3,r3,27892
 8000818:	00820074 	movhi	r2,2049
 800081c:	2085883a 	add	r2,r4,r2
 8000820:	10db4715 	stw	r3,27932(r2)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 8000824:	e0bffa03 	ldbu	r2,-24(fp)
 8000828:	100690fa 	slli	r3,r2,3
 800082c:	00820074 	movhi	r2,2049
 8000830:	1885883a 	add	r2,r3,r2
 8000834:	109b4717 	ldw	r2,27932(r2)
 8000838:	e0fffb83 	ldbu	r3,-18(fp)
 800083c:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 8000840:	e0bffe17 	ldw	r2,-8(fp)
 8000844:	10800083 	ldbu	r2,2(r2)
				hid_device.interface =
 8000848:	d0a71845 	stb	r2,-25503(gp)
				hid_device.addr = addr;                        //fill in address
 800084c:	e0bffa03 	ldbu	r2,-24(fp)
 8000850:	d0a71805 	stb	r2,-25504(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 8000854:	e0bffe17 	ldw	r2,-8(fp)
 8000858:	10800003 	ldbu	r2,0(r2)
 800085c:	10803fcc 	andi	r2,r2,255
 8000860:	e0fffd17 	ldw	r3,-12(fp)
 8000864:	1885883a 	add	r2,r3,r2
 8000868:	e0bffd15 	stw	r2,-12(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 800086c:	e0bffd17 	ldw	r2,-12(fp)
 8000870:	e0bffe15 	stw	r2,-8(fp)
				while (byte_ptr < bigbuf + total_length) {
 8000874:	00005706 	br	80009d4 <HIDKProbe+0x390>
					if (data_ptr->descr.config.bDescriptorType
 8000878:	e0bffe17 	ldw	r2,-8(fp)
 800087c:	10800043 	ldbu	r2,1(r2)
 8000880:	10803fcc 	andi	r2,r2,255
 8000884:	10800160 	cmpeqi	r2,r2,5
 8000888:	1000091e 	bne	r2,zero,80008b0 <HIDKProbe+0x26c>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 800088c:	e0bffe17 	ldw	r2,-8(fp)
 8000890:	10800003 	ldbu	r2,0(r2)
 8000894:	10803fcc 	andi	r2,r2,255
 8000898:	e0fffd17 	ldw	r3,-12(fp)
 800089c:	1885883a 	add	r2,r3,r2
 80008a0:	e0bffd15 	stw	r2,-12(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 80008a4:	e0bffd17 	ldw	r2,-12(fp)
 80008a8:	e0bffe15 	stw	r2,-8(fp)
 80008ac:	00004906 	br	80009d4 <HIDKProbe+0x390>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 80008b0:	e0bffa03 	ldbu	r2,-24(fp)
 80008b4:	100690fa 	slli	r3,r2,3
 80008b8:	00820074 	movhi	r2,2049
 80008bc:	1885883a 	add	r2,r3,r2
 80008c0:	109b4717 	ldw	r2,27932(r2)
 80008c4:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 80008c8:	e0fffe17 	ldw	r3,-8(fp)
 80008cc:	18c00083 	ldbu	r3,2(r3)
						devtable[addr].epinfo[1].epAddr =
 80008d0:	10c00005 	stb	r3,0(r2)
						devtable[addr].epinfo[1].Attr =
 80008d4:	e0bffa03 	ldbu	r2,-24(fp)
 80008d8:	100690fa 	slli	r3,r2,3
 80008dc:	00820074 	movhi	r2,2049
 80008e0:	1885883a 	add	r2,r3,r2
 80008e4:	109b4717 	ldw	r2,27932(r2)
 80008e8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 80008ec:	e0fffe17 	ldw	r3,-8(fp)
 80008f0:	18c000c3 	ldbu	r3,3(r3)
						devtable[addr].epinfo[1].Attr =
 80008f4:	10c00045 	stb	r3,1(r2)
						devtable[addr].epinfo[1].MaxPktSize =
 80008f8:	e0bffa03 	ldbu	r2,-24(fp)
 80008fc:	100690fa 	slli	r3,r2,3
 8000900:	00820074 	movhi	r2,2049
 8000904:	1885883a 	add	r2,r3,r2
 8000908:	109b4717 	ldw	r2,27932(r2)
 800090c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 8000910:	e0fffe17 	ldw	r3,-8(fp)
 8000914:	18c0010b 	ldhu	r3,4(r3)
						devtable[addr].epinfo[1].MaxPktSize =
 8000918:	10c0008d 	sth	r3,2(r2)
						devtable[addr].epinfo[1].Interval =
 800091c:	e0bffa03 	ldbu	r2,-24(fp)
 8000920:	100690fa 	slli	r3,r2,3
 8000924:	00820074 	movhi	r2,2049
 8000928:	1885883a 	add	r2,r3,r2
 800092c:	109b4717 	ldw	r2,27932(r2)
 8000930:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 8000934:	e0fffe17 	ldw	r3,-8(fp)
 8000938:	18c00183 	ldbu	r3,6(r3)
						devtable[addr].epinfo[1].Interval =
 800093c:	10c00105 	stb	r3,4(r2)
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 8000940:	e0fffa03 	ldbu	r3,-24(fp)
 8000944:	e0bffc83 	ldbu	r2,-14(fp)
 8000948:	d8000415 	stw	zero,16(sp)
 800094c:	d8000315 	stw	zero,12(sp)
 8000950:	d8000215 	stw	zero,8(sp)
 8000954:	d8000115 	stw	zero,4(sp)
 8000958:	d8800015 	stw	r2,0(sp)
 800095c:	01c00244 	movi	r7,9
 8000960:	000d883a 	mov	r6,zero
 8000964:	000b883a 	mov	r5,zero
 8000968:	1809883a 	mov	r4,r3
 800096c:	8001be00 	call	8001be0 <XferCtrlReq>
 8000970:	e0bffcc5 	stb	r2,-13(fp)
						if (rcode) {   //error handling
 8000974:	e0bffcc3 	ldbu	r2,-13(fp)
 8000978:	10000226 	beq	r2,zero,8000984 <HIDKProbe+0x340>
							return (FALSE);
 800097c:	0005883a 	mov	r2,zero
 8000980:	00002406 	br	8000a14 <HIDKProbe+0x3d0>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 8000984:	e0fffa03 	ldbu	r3,-24(fp)
 8000988:	d0a71843 	ldbu	r2,-25503(gp)
 800098c:	10803fcc 	andi	r2,r2,255
 8000990:	d8000415 	stw	zero,16(sp)
 8000994:	d8000315 	stw	zero,12(sp)
 8000998:	d8800215 	stw	r2,8(sp)
 800099c:	d8000115 	stw	zero,4(sp)
 80009a0:	d8000015 	stw	zero,0(sp)
 80009a4:	01c002c4 	movi	r7,11
 80009a8:	01800844 	movi	r6,33
 80009ac:	000b883a 	mov	r5,zero
 80009b0:	1809883a 	mov	r4,r3
 80009b4:	8001be00 	call	8001be0 <XferCtrlReq>
 80009b8:	e0bffcc5 	stb	r2,-13(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 80009bc:	e0bffcc3 	ldbu	r2,-13(fp)
 80009c0:	10000226 	beq	r2,zero,80009cc <HIDKProbe+0x388>
							return (FALSE);
 80009c4:	0005883a 	mov	r2,zero
 80009c8:	00001206 	br	8000a14 <HIDKProbe+0x3d0>
						} else {
							return (TRUE);
 80009cc:	00800044 	movi	r2,1
 80009d0:	00001006 	br	8000a14 <HIDKProbe+0x3d0>
				while (byte_ptr < bigbuf + total_length) {
 80009d4:	e0ffff8b 	ldhu	r3,-2(fp)
 80009d8:	00820074 	movhi	r2,2049
 80009dc:	109afd04 	addi	r2,r2,27636
 80009e0:	1885883a 	add	r2,r3,r2
 80009e4:	e0fffd17 	ldw	r3,-12(fp)
 80009e8:	18bfa336 	bltu	r3,r2,8000878 <HIDKProbe+0x234>
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 80009ec:	00000206 	br	80009f8 <HIDKProbe+0x3b4>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 80009f0:	0005883a 	mov	r2,zero
 80009f4:	00000706 	br	8000a14 <HIDKProbe+0x3d0>
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 80009f8:	e0ffff8b 	ldhu	r3,-2(fp)
 80009fc:	00820074 	movhi	r2,2049
 8000a00:	109afd04 	addi	r2,r2,27636
 8000a04:	1885883a 	add	r2,r3,r2
 8000a08:	e0fffd17 	ldw	r3,-12(fp)
 8000a0c:	18bf5036 	bltu	r3,r2,8000750 <HIDKProbe+0x10c>
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 8000a10:	0005883a 	mov	r2,zero
}
 8000a14:	e037883a 	mov	sp,fp
 8000a18:	dfc00117 	ldw	ra,4(sp)
 8000a1c:	df000017 	ldw	fp,0(sp)
 8000a20:	dec00204 	addi	sp,sp,8
 8000a24:	f800283a 	ret

08000a28 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 8000a28:	deffff04 	addi	sp,sp,-4
 8000a2c:	df000015 	stw	fp,0(sp)
 8000a30:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 8000a34:	00c01004 	movi	r3,64
 8000a38:	00820074 	movhi	r2,2049
 8000a3c:	10db4045 	stb	r3,27905(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 8000a40:	00c00404 	movi	r3,16
 8000a44:	00820074 	movhi	r2,2049
 8000a48:	10db4085 	stb	r3,27906(r2)
}
 8000a4c:	0001883a 	nop
 8000a50:	e037883a 	mov	sp,fp
 8000a54:	df000017 	ldw	fp,0(sp)
 8000a58:	dec00104 	addi	sp,sp,4
 8000a5c:	f800283a 	ret

08000a60 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 8000a60:	defffb04 	addi	sp,sp,-20
 8000a64:	dfc00415 	stw	ra,16(sp)
 8000a68:	df000315 	stw	fp,12(sp)
 8000a6c:	df000304 	addi	fp,sp,12
 8000a70:	e13ffe15 	stw	r4,-8(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8000a74:	d0a71803 	ldbu	r2,-25504(gp)
 8000a78:	10803fcc 	andi	r2,r2,255
 8000a7c:	100b883a 	mov	r5,r2
 8000a80:	01003804 	movi	r4,224
 8000a84:	8000c500 	call	8000c50 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8000a88:	d0a71803 	ldbu	r2,-25504(gp)
 8000a8c:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8000a90:	d0a71803 	ldbu	r2,-25504(gp)
 8000a94:	10803fcc 	andi	r2,r2,255
 8000a98:	100690fa 	slli	r3,r2,3
 8000a9c:	00820074 	movhi	r2,2049
 8000aa0:	1885883a 	add	r2,r3,r2
 8000aa4:	109b4717 	ldw	r2,27932(r2)
 8000aa8:	10800204 	addi	r2,r2,8
 8000aac:	1080008b 	ldhu	r2,2(r2)
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8000ab0:	10803fcc 	andi	r2,r2,255
 8000ab4:	d8800015 	stw	r2,0(sp)
 8000ab8:	e1fffe17 	ldw	r7,-8(fp)
 8000abc:	01800204 	movi	r6,8
 8000ac0:	01400044 	movi	r5,1
 8000ac4:	80020200 	call	8002020 <XferInTransfer>
 8000ac8:	e0bfffc5 	stb	r2,-1(fp)
	return (rcode);
 8000acc:	e0bfffc3 	ldbu	r2,-1(fp)
}
 8000ad0:	e037883a 	mov	sp,fp
 8000ad4:	dfc00117 	ldw	ra,4(sp)
 8000ad8:	df000017 	ldw	fp,0(sp)
 8000adc:	dec00204 	addi	sp,sp,8
 8000ae0:	f800283a 	ret

08000ae4 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 8000ae4:	defffb04 	addi	sp,sp,-20
 8000ae8:	dfc00415 	stw	ra,16(sp)
 8000aec:	df000315 	stw	fp,12(sp)
 8000af0:	df000304 	addi	fp,sp,12
 8000af4:	e13ffe15 	stw	r4,-8(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8000af8:	d0a71803 	ldbu	r2,-25504(gp)
 8000afc:	10803fcc 	andi	r2,r2,255
 8000b00:	100b883a 	mov	r5,r2
 8000b04:	01003804 	movi	r4,224
 8000b08:	8000c500 	call	8000c50 <MAXreg_wr>
	usleep(1000);
 8000b0c:	0100fa04 	movi	r4,1000
 8000b10:	8010a480 	call	8010a48 <usleep>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8000b14:	d0a71803 	ldbu	r2,-25504(gp)
 8000b18:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8000b1c:	d0a71803 	ldbu	r2,-25504(gp)
 8000b20:	10803fcc 	andi	r2,r2,255
 8000b24:	100690fa 	slli	r3,r2,3
 8000b28:	00820074 	movhi	r2,2049
 8000b2c:	1885883a 	add	r2,r3,r2
 8000b30:	109b4717 	ldw	r2,27932(r2)
 8000b34:	10800204 	addi	r2,r2,8
 8000b38:	1080008b 	ldhu	r2,2(r2)
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8000b3c:	10803fcc 	andi	r2,r2,255
 8000b40:	d8800015 	stw	r2,0(sp)
 8000b44:	e1fffe17 	ldw	r7,-8(fp)
 8000b48:	01800204 	movi	r6,8
 8000b4c:	01400044 	movi	r5,1
 8000b50:	80020200 	call	8002020 <XferInTransfer>
 8000b54:	e0bfffc5 	stb	r2,-1(fp)
	return (rcode);
 8000b58:	e0bfffc3 	ldbu	r2,-1(fp)
}
 8000b5c:	e037883a 	mov	sp,fp
 8000b60:	dfc00117 	ldw	ra,4(sp)
 8000b64:	df000017 	ldw	fp,0(sp)
 8000b68:	dec00204 	addi	sp,sp,8
 8000b6c:	f800283a 	ret

08000b70 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8000b70:	defffb04 	addi	sp,sp,-20
 8000b74:	df000415 	stw	fp,16(sp)
 8000b78:	df000404 	addi	fp,sp,16
 8000b7c:	2005883a 	mov	r2,r4
 8000b80:	2807883a 	mov	r3,r5
 8000b84:	e1bffd15 	stw	r6,-12(fp)
 8000b88:	e1fffc15 	stw	r7,-16(fp)
 8000b8c:	e0bfff05 	stb	r2,-4(fp)
 8000b90:	1805883a 	mov	r2,r3
 8000b94:	e0bffe05 	stb	r2,-8(fp)
	return (FALSE);
 8000b98:	0005883a 	mov	r2,zero
}
 8000b9c:	e037883a 	mov	sp,fp
 8000ba0:	df000017 	ldw	fp,0(sp)
 8000ba4:	dec00104 	addi	sp,sp,4
 8000ba8:	f800283a 	ret

08000bac <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8000bac:	defffb04 	addi	sp,sp,-20
 8000bb0:	df000415 	stw	fp,16(sp)
 8000bb4:	df000404 	addi	fp,sp,16
 8000bb8:	2005883a 	mov	r2,r4
 8000bbc:	2807883a 	mov	r3,r5
 8000bc0:	e1bffd15 	stw	r6,-12(fp)
 8000bc4:	e1fffc15 	stw	r7,-16(fp)
 8000bc8:	e0bfff05 	stb	r2,-4(fp)
 8000bcc:	1805883a 	mov	r2,r3
 8000bd0:	e0bffe05 	stb	r2,-8(fp)
	return (FALSE);
 8000bd4:	0005883a 	mov	r2,zero
}
 8000bd8:	e037883a 	mov	sp,fp
 8000bdc:	df000017 	ldw	fp,0(sp)
 8000be0:	dec00104 	addi	sp,sp,4
 8000be4:	f800283a 	ret

08000be8 <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 8000be8:	defffc04 	addi	sp,sp,-16
 8000bec:	df000315 	stw	fp,12(sp)
 8000bf0:	df000304 	addi	fp,sp,12
 8000bf4:	2005883a 	mov	r2,r4
 8000bf8:	2809883a 	mov	r4,r5
 8000bfc:	3007883a 	mov	r3,r6
 8000c00:	e0bfff05 	stb	r2,-4(fp)
 8000c04:	2005883a 	mov	r2,r4
 8000c08:	e0bffe05 	stb	r2,-8(fp)
 8000c0c:	1805883a 	mov	r2,r3
 8000c10:	e0bffd05 	stb	r2,-12(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 8000c14:	0001883a 	nop
 8000c18:	e037883a 	mov	sp,fp
 8000c1c:	df000017 	ldw	fp,0(sp)
 8000c20:	dec00104 	addi	sp,sp,4
 8000c24:	f800283a 	ret

08000c28 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 8000c28:	defffe04 	addi	sp,sp,-8
 8000c2c:	df000115 	stw	fp,4(sp)
 8000c30:	df000104 	addi	fp,sp,4
 8000c34:	2005883a 	mov	r2,r4
 8000c38:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
 8000c3c:	0001883a 	nop
 8000c40:	e037883a 	mov	sp,fp
 8000c44:	df000017 	ldw	fp,0(sp)
 8000c48:	dec00104 	addi	sp,sp,4
 8000c4c:	f800283a 	ret

08000c50 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 8000c50:	defff704 	addi	sp,sp,-36
 8000c54:	dfc00815 	stw	ra,32(sp)
 8000c58:	df000715 	stw	fp,28(sp)
 8000c5c:	df000704 	addi	fp,sp,28
 8000c60:	2005883a 	mov	r2,r4
 8000c64:	2807883a 	mov	r3,r5
 8000c68:	e0bffd05 	stb	r2,-12(fp)
 8000c6c:	1805883a 	mov	r2,r3
 8000c70:	e0bffc05 	stb	r2,-16(fp)
	//psuedocode:

	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	int return_code;
	alt_u8 wdata[2];
	wdata[0] = (alt_u8)reg + 2;
 8000c74:	e0bffd03 	ldbu	r2,-12(fp)
 8000c78:	10800084 	addi	r2,r2,2
 8000c7c:	e0bffe85 	stb	r2,-6(fp)
	wdata[1] = (alt_u8)val;
 8000c80:	e0bffc03 	ldbu	r2,-16(fp)
 8000c84:	e0bffec5 	stb	r2,-5(fp)
	//printf("Val: %c\n",val);

	//write reg + 2 via SPI
	return_code = alt_avalon_spi_command(SPI_MASTER_BASE, 0, (alt_u32)2, wdata, (alt_u32)0, NULL, 0);
 8000c88:	e0bffe84 	addi	r2,fp,-6
 8000c8c:	d8000215 	stw	zero,8(sp)
 8000c90:	d8000115 	stw	zero,4(sp)
 8000c94:	d8000015 	stw	zero,0(sp)
 8000c98:	100f883a 	mov	r7,r2
 8000c9c:	01800084 	movi	r6,2
 8000ca0:	000b883a 	mov	r5,zero
 8000ca4:	01003004 	movi	r4,192
 8000ca8:	80117000 	call	8011700 <alt_avalon_spi_command>
 8000cac:	e0bfff15 	stw	r2,-4(fp)

	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	if (return_code < 0){
 8000cb0:	e0bfff17 	ldw	r2,-4(fp)
 8000cb4:	1000040e 	bge	r2,zero,8000cc8 <MAXreg_wr+0x78>
		printf("SPI Write Error. Return Code = %d", return_code);
 8000cb8:	e17fff17 	ldw	r5,-4(fp)
 8000cbc:	01020074 	movhi	r4,2049
 8000cc0:	210a9404 	addi	r4,r4,10832
 8000cc4:	8002ca80 	call	8002ca8 <printf>
	}

	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
}
 8000cc8:	0001883a 	nop
 8000ccc:	e037883a 	mov	sp,fp
 8000cd0:	dfc00117 	ldw	ra,4(sp)
 8000cd4:	df000017 	ldw	fp,0(sp)
 8000cd8:	dec00204 	addi	sp,sp,8
 8000cdc:	f800283a 	ret

08000ce0 <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 8000ce0:	defff304 	addi	sp,sp,-52
 8000ce4:	dfc00c15 	stw	ra,48(sp)
 8000ce8:	df000b15 	stw	fp,44(sp)
 8000cec:	dc000a15 	stw	r16,40(sp)
 8000cf0:	df000b04 	addi	fp,sp,44
 8000cf4:	e1bff815 	stw	r6,-32(fp)
 8000cf8:	e13ffa05 	stb	r4,-24(fp)
 8000cfc:	2809883a 	mov	r4,r5
 8000d00:	e13ff905 	stb	r4,-28(fp)
 8000d04:	d809883a 	mov	r4,sp
 8000d08:	2021883a 	mov	r16,r4
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)

	alt_u8 wdata[1+nbytes];
 8000d0c:	e13ff903 	ldbu	r4,-28(fp)
 8000d10:	21000044 	addi	r4,r4,1
 8000d14:	217fffc4 	addi	r5,r4,-1
 8000d18:	e17ffd15 	stw	r5,-12(fp)
 8000d1c:	200b883a 	mov	r5,r4
 8000d20:	2819883a 	mov	r12,r5
 8000d24:	001b883a 	mov	r13,zero
 8000d28:	600ad77a 	srli	r5,r12,29
 8000d2c:	681290fa 	slli	r9,r13,3
 8000d30:	2a52b03a 	or	r9,r5,r9
 8000d34:	601090fa 	slli	r8,r12,3
 8000d38:	200b883a 	mov	r5,r4
 8000d3c:	2815883a 	mov	r10,r5
 8000d40:	0017883a 	mov	r11,zero
 8000d44:	500ad77a 	srli	r5,r10,29
 8000d48:	580690fa 	slli	r3,r11,3
 8000d4c:	28c6b03a 	or	r3,r5,r3
 8000d50:	500490fa 	slli	r2,r10,3
 8000d54:	2005883a 	mov	r2,r4
 8000d58:	108000c4 	addi	r2,r2,3
 8000d5c:	1004d0ba 	srli	r2,r2,2
 8000d60:	100490ba 	slli	r2,r2,2
 8000d64:	d8b7c83a 	sub	sp,sp,r2
 8000d68:	d8800304 	addi	r2,sp,12
 8000d6c:	1005883a 	mov	r2,r2
 8000d70:	e0bffc15 	stw	r2,-16(fp)
	wdata[0] = reg+2;
 8000d74:	e0bffa03 	ldbu	r2,-24(fp)
 8000d78:	10800084 	addi	r2,r2,2
 8000d7c:	1007883a 	mov	r3,r2
 8000d80:	e0bffc17 	ldw	r2,-16(fp)
 8000d84:	10c00005 	stb	r3,0(r2)
	int i;
	for(i = 1; i <= nbytes; i++){
 8000d88:	00800044 	movi	r2,1
 8000d8c:	e0bffe15 	stw	r2,-8(fp)
 8000d90:	00000c06 	br	8000dc4 <MAXbytes_wr+0xe4>
		wdata[i] = data[i-1];
 8000d94:	e0bffe17 	ldw	r2,-8(fp)
 8000d98:	10bfffc4 	addi	r2,r2,-1
 8000d9c:	e0fff817 	ldw	r3,-32(fp)
 8000da0:	1885883a 	add	r2,r3,r2
 8000da4:	10c00003 	ldbu	r3,0(r2)
 8000da8:	e13ffc17 	ldw	r4,-16(fp)
 8000dac:	e0bffe17 	ldw	r2,-8(fp)
 8000db0:	2085883a 	add	r2,r4,r2
 8000db4:	10c00005 	stb	r3,0(r2)
	for(i = 1; i <= nbytes; i++){
 8000db8:	e0bffe17 	ldw	r2,-8(fp)
 8000dbc:	10800044 	addi	r2,r2,1
 8000dc0:	e0bffe15 	stw	r2,-8(fp)
 8000dc4:	e0fff903 	ldbu	r3,-28(fp)
 8000dc8:	e0bffe17 	ldw	r2,-8(fp)
 8000dcc:	18bff10e 	bge	r3,r2,8000d94 <MAXbytes_wr+0xb4>
	}
	int return_code = alt_avalon_spi_command(SPI_MASTER_BASE, 0, 1 + nbytes, wdata, 0, NULL,0);
 8000dd0:	e0bff903 	ldbu	r2,-28(fp)
 8000dd4:	10800044 	addi	r2,r2,1
 8000dd8:	d8000215 	stw	zero,8(sp)
 8000ddc:	d8000115 	stw	zero,4(sp)
 8000de0:	d8000015 	stw	zero,0(sp)
 8000de4:	e1fffc17 	ldw	r7,-16(fp)
 8000de8:	100d883a 	mov	r6,r2
 8000dec:	000b883a 	mov	r5,zero
 8000df0:	01003004 	movi	r4,192
 8000df4:	80117000 	call	8011700 <alt_avalon_spi_command>
 8000df8:	e0bffb15 	stw	r2,-20(fp)
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error

	if (return_code < 0) {
 8000dfc:	e0bffb17 	ldw	r2,-20(fp)
 8000e00:	1000040e 	bge	r2,zero,8000e14 <MAXbytes_wr+0x134>
		printf("Bytes write failed. Return Code = %d", return_code);
 8000e04:	e17ffb17 	ldw	r5,-20(fp)
 8000e08:	01020074 	movhi	r4,2049
 8000e0c:	210a9d04 	addi	r4,r4,10868
 8000e10:	8002ca80 	call	8002ca8 <printf>
	}
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	return data + nbytes;
 8000e14:	e0bff903 	ldbu	r2,-28(fp)
 8000e18:	e0fff817 	ldw	r3,-32(fp)
 8000e1c:	1885883a 	add	r2,r3,r2
 8000e20:	8037883a 	mov	sp,r16
}
 8000e24:	e6ffff04 	addi	sp,fp,-4
 8000e28:	dfc00217 	ldw	ra,8(sp)
 8000e2c:	df000117 	ldw	fp,4(sp)
 8000e30:	dc000017 	ldw	r16,0(sp)
 8000e34:	dec00304 	addi	sp,sp,12
 8000e38:	f800283a 	ret

08000e3c <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 8000e3c:	defff804 	addi	sp,sp,-32
 8000e40:	dfc00715 	stw	ra,28(sp)
 8000e44:	df000615 	stw	fp,24(sp)
 8000e48:	df000604 	addi	fp,sp,24
 8000e4c:	2005883a 	mov	r2,r4
 8000e50:	e0bffd05 	stb	r2,-12(fp)
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	alt_u8 wdata[1];
	alt_u8 rdata[1];
	wdata[0] = reg;
 8000e54:	e0bffd03 	ldbu	r2,-12(fp)
 8000e58:	e0bffec5 	stb	r2,-5(fp)
	//printf("Register: %d ", reg);
	//write reg via SPI
	//read val via SPI
	int return_code = alt_avalon_spi_command(SPI_MASTER_BASE, 0, (alt_u32)1, wdata, (alt_u32)1, rdata,0);
 8000e5c:	e0fffec4 	addi	r3,fp,-5
 8000e60:	d8000215 	stw	zero,8(sp)
 8000e64:	e0bffe84 	addi	r2,fp,-6
 8000e68:	d8800115 	stw	r2,4(sp)
 8000e6c:	00800044 	movi	r2,1
 8000e70:	d8800015 	stw	r2,0(sp)
 8000e74:	180f883a 	mov	r7,r3
 8000e78:	01800044 	movi	r6,1
 8000e7c:	000b883a 	mov	r5,zero
 8000e80:	01003004 	movi	r4,192
 8000e84:	80117000 	call	8011700 <alt_avalon_spi_command>
 8000e88:	e0bfff15 	stw	r2,-4(fp)
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	if(return_code < 0) {
 8000e8c:	e0bfff17 	ldw	r2,-4(fp)
 8000e90:	1000040e 	bge	r2,zero,8000ea4 <MAXreg_rd+0x68>
		printf("Byte read failed. Return code = %d", return_code);
 8000e94:	e17fff17 	ldw	r5,-4(fp)
 8000e98:	01020074 	movhi	r4,2049
 8000e9c:	210aa704 	addi	r4,r4,10908
 8000ea0:	8002ca80 	call	8002ca8 <printf>
	}
	//printf("%c",rdata[0]);
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val
	return rdata[0];
 8000ea4:	e0bffe83 	ldbu	r2,-6(fp)
}
 8000ea8:	e037883a 	mov	sp,fp
 8000eac:	dfc00117 	ldw	ra,4(sp)
 8000eb0:	df000017 	ldw	fp,0(sp)
 8000eb4:	dec00204 	addi	sp,sp,8
 8000eb8:	f800283a 	ret

08000ebc <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 8000ebc:	defff604 	addi	sp,sp,-40
 8000ec0:	dfc00915 	stw	ra,36(sp)
 8000ec4:	df000815 	stw	fp,32(sp)
 8000ec8:	df000804 	addi	fp,sp,32
 8000ecc:	2005883a 	mov	r2,r4
 8000ed0:	2807883a 	mov	r3,r5
 8000ed4:	e1bffb15 	stw	r6,-20(fp)
 8000ed8:	e0bffd05 	stb	r2,-12(fp)
 8000edc:	1805883a 	mov	r2,r3
 8000ee0:	e0bffc05 	stb	r2,-16(fp)
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg via SPI
	//read data[n] from SPI, where n goes from 0 to nbytes-1
	alt_u8 rdata[1];
	rdata[0] = reg;
 8000ee4:	e0bffd03 	ldbu	r2,-12(fp)
 8000ee8:	e0bffec5 	stb	r2,-5(fp)
	int return_code = alt_avalon_spi_command(SPI_MASTER_BASE, 0, 1, rdata, nbytes, data,0);
 8000eec:	e0bffc03 	ldbu	r2,-16(fp)
 8000ef0:	e13ffec4 	addi	r4,fp,-5
 8000ef4:	d8000215 	stw	zero,8(sp)
 8000ef8:	e0fffb17 	ldw	r3,-20(fp)
 8000efc:	d8c00115 	stw	r3,4(sp)
 8000f00:	d8800015 	stw	r2,0(sp)
 8000f04:	200f883a 	mov	r7,r4
 8000f08:	01800044 	movi	r6,1
 8000f0c:	000b883a 	mov	r5,zero
 8000f10:	01003004 	movi	r4,192
 8000f14:	80117000 	call	8011700 <alt_avalon_spi_command>
 8000f18:	e0bfff15 	stw	r2,-4(fp)
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	if(return_code < 0){
 8000f1c:	e0bfff17 	ldw	r2,-4(fp)
 8000f20:	1000040e 	bge	r2,zero,8000f34 <MAXbytes_rd+0x78>
		printf("Read multiple bytes failed. Return code = %d", return_code);
 8000f24:	e17fff17 	ldw	r5,-4(fp)
 8000f28:	01020074 	movhi	r4,2049
 8000f2c:	210ab004 	addi	r4,r4,10944
 8000f30:	8002ca80 	call	8002ca8 <printf>
	}
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	return data+nbytes;
 8000f34:	e0bffc03 	ldbu	r2,-16(fp)
 8000f38:	e0fffb17 	ldw	r3,-20(fp)
 8000f3c:	1885883a 	add	r2,r3,r2
}
 8000f40:	e037883a 	mov	sp,fp
 8000f44:	dfc00117 	ldw	ra,4(sp)
 8000f48:	df000017 	ldw	fp,0(sp)
 8000f4c:	dec00204 	addi	sp,sp,8
 8000f50:	f800283a 	ret

08000f54 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 8000f54:	defffd04 	addi	sp,sp,-12
 8000f58:	dfc00215 	stw	ra,8(sp)
 8000f5c:	df000115 	stw	fp,4(sp)
 8000f60:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 8000f64:	0005883a 	mov	r2,zero
 8000f68:	00806035 	stwio	r2,384(zero)
	usleep(1000000);
 8000f6c:	010003f4 	movhi	r4,15
 8000f70:	21109004 	addi	r4,r4,16960
 8000f74:	8010a480 	call	8010a48 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 8000f78:	00800044 	movi	r2,1
 8000f7c:	00806035 	stwio	r2,384(zero)
	BYTE tmp = 0;
 8000f80:	e03fffc5 	stb	zero,-1(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 8000f84:	01400804 	movi	r5,32
 8000f88:	01001e04 	movi	r4,120
 8000f8c:	8000c500 	call	8000c50 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 8000f90:	000b883a 	mov	r5,zero
 8000f94:	01001e04 	movi	r4,120
 8000f98:	8000c500 	call	8000c50 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 8000f9c:	00000806 	br	8000fc0 <MAX3421E_reset+0x6c>
		tmp++;                                      //timeout after 256 attempts
 8000fa0:	e0bfffc3 	ldbu	r2,-1(fp)
 8000fa4:	10800044 	addi	r2,r2,1
 8000fa8:	e0bfffc5 	stb	r2,-1(fp)
		if (tmp == 0) {
 8000fac:	e0bfffc3 	ldbu	r2,-1(fp)
 8000fb0:	1000031e 	bne	r2,zero,8000fc0 <MAX3421E_reset+0x6c>
			printf("reset timeout!");
 8000fb4:	01020074 	movhi	r4,2049
 8000fb8:	210abc04 	addi	r4,r4,10992
 8000fbc:	8002ca80 	call	8002ca8 <printf>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 8000fc0:	01001a04 	movi	r4,104
 8000fc4:	8000e3c0 	call	8000e3c <MAXreg_rd>
 8000fc8:	10803fcc 	andi	r2,r2,255
 8000fcc:	1080004c 	andi	r2,r2,1
 8000fd0:	103ff326 	beq	r2,zero,8000fa0 <MAX3421E_reset+0x4c>
		}
	}
}
 8000fd4:	0001883a 	nop
 8000fd8:	0001883a 	nop
 8000fdc:	e037883a 	mov	sp,fp
 8000fe0:	dfc00117 	ldw	ra,4(sp)
 8000fe4:	df000017 	ldw	fp,0(sp)
 8000fe8:	dec00204 	addi	sp,sp,8
 8000fec:	f800283a 	ret

08000ff0 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 8000ff0:	defffe04 	addi	sp,sp,-8
 8000ff4:	df000115 	stw	fp,4(sp)
 8000ff8:	df000104 	addi	fp,sp,4
 8000ffc:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 8001000:	00800044 	movi	r2,1
}
 8001004:	e037883a 	mov	sp,fp
 8001008:	df000017 	ldw	fp,0(sp)
 800100c:	dec00104 	addi	sp,sp,4
 8001010:	f800283a 	ret

08001014 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 8001014:	defffd04 	addi	sp,sp,-12
 8001018:	dfc00215 	stw	ra,8(sp)
 800101c:	df000115 	stw	fp,4(sp)
 8001020:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 8001024:	01003e04 	movi	r4,248
 8001028:	8000e3c0 	call	8000e3c <MAXreg_rd>
 800102c:	e0bfffc5 	stb	r2,-1(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 8001030:	e0ffffc3 	ldbu	r3,-1(fp)
 8001034:	00bff004 	movi	r2,-64
 8001038:	1884703a 	and	r2,r3,r2
 800103c:	e0bfffc5 	stb	r2,-1(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 8001040:	e0bfffc3 	ldbu	r2,-1(fp)
 8001044:	10c03020 	cmpeqi	r3,r2,192
 8001048:	18003c1e 	bne	r3,zero,800113c <MAX_busprobe+0x128>
 800104c:	10c03048 	cmpgei	r3,r2,193
 8001050:	18004d1e 	bne	r3,zero,8001188 <MAX_busprobe+0x174>
 8001054:	10c02020 	cmpeqi	r3,r2,128
 8001058:	1800061e 	bne	r3,zero,8001074 <MAX_busprobe+0x60>
 800105c:	10c02048 	cmpgei	r3,r2,129
 8001060:	1800491e 	bne	r3,zero,8001188 <MAX_busprobe+0x174>
 8001064:	10003826 	beq	r2,zero,8001148 <MAX_busprobe+0x134>
 8001068:	10801020 	cmpeqi	r2,r2,64
 800106c:	10001a1e 	bne	r2,zero,80010d8 <MAX_busprobe+0xc4>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 8001070:	00004506 	br	8001188 <MAX_busprobe+0x174>
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 8001074:	d0a00303 	ldbu	r2,-32756(gp)
 8001078:	10803fcc 	andi	r2,r2,255
 800107c:	108004e0 	cmpeqi	r2,r2,19
 8001080:	10003e1e 	bne	r2,zero,800117c <MAX_busprobe+0x168>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 8001084:	01003604 	movi	r4,216
 8001088:	8000e3c0 	call	8000e3c <MAXreg_rd>
 800108c:	10803fcc 	andi	r2,r2,255
 8001090:	1080008c 	andi	r2,r2,2
 8001094:	1000071e 	bne	r2,zero,80010b4 <MAX_busprobe+0xa0>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 8001098:	01403244 	movi	r5,201
 800109c:	01003604 	movi	r4,216
 80010a0:	8000c500 	call	8000c50 <MAXreg_wr>
				printf("Starting in full speed\n");
 80010a4:	01020074 	movhi	r4,2049
 80010a8:	210ac004 	addi	r4,r4,11008
 80010ac:	8002dcc0 	call	8002dcc <puts>
 80010b0:	00000606 	br	80010cc <MAX_busprobe+0xb8>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 80010b4:	014032c4 	movi	r5,203
 80010b8:	01003604 	movi	r4,216
 80010bc:	8000c500 	call	8000c50 <MAXreg_wr>
				printf("Starting in low speed\n");
 80010c0:	01020074 	movhi	r4,2049
 80010c4:	210ac604 	addi	r4,r4,11032
 80010c8:	8002dcc0 	call	8002dcc <puts>
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 80010cc:	00800404 	movi	r2,16
 80010d0:	d0a00305 	stb	r2,-32756(gp)
		break;
 80010d4:	00002906 	br	800117c <MAX_busprobe+0x168>
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 80010d8:	d0a00303 	ldbu	r2,-32756(gp)
 80010dc:	10803fcc 	andi	r2,r2,255
 80010e0:	108004e0 	cmpeqi	r2,r2,19
 80010e4:	1000271e 	bne	r2,zero,8001184 <MAX_busprobe+0x170>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 80010e8:	01003604 	movi	r4,216
 80010ec:	8000e3c0 	call	8000e3c <MAXreg_rd>
 80010f0:	10803fcc 	andi	r2,r2,255
 80010f4:	1080008c 	andi	r2,r2,2
 80010f8:	1000071e 	bne	r2,zero,8001118 <MAX_busprobe+0x104>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 80010fc:	014032c4 	movi	r5,203
 8001100:	01003604 	movi	r4,216
 8001104:	8000c500 	call	8000c50 <MAXreg_wr>
				printf("Starting in low speed\n");
 8001108:	01020074 	movhi	r4,2049
 800110c:	210ac604 	addi	r4,r4,11032
 8001110:	8002dcc0 	call	8002dcc <puts>
 8001114:	00000606 	br	8001130 <MAX_busprobe+0x11c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 8001118:	01403244 	movi	r5,201
 800111c:	01003604 	movi	r4,216
 8001120:	8000c500 	call	8000c50 <MAXreg_wr>
				printf("Starting in full speed\n");
 8001124:	01020074 	movhi	r4,2049
 8001128:	210ac004 	addi	r4,r4,11008
 800112c:	8002dcc0 	call	8002dcc <puts>
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 8001130:	00800404 	movi	r2,16
 8001134:	d0a00305 	stb	r2,-32756(gp)
		break;
 8001138:	00001206 	br	8001184 <MAX_busprobe+0x170>
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 800113c:	00800104 	movi	r2,4
 8001140:	d0a00305 	stb	r2,-32756(gp)
		break;
 8001144:	00001006 	br	8001188 <MAX_busprobe+0x174>
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 8001148:	d0a00303 	ldbu	r2,-32756(gp)
 800114c:	10803fcc 	andi	r2,r2,255
 8001150:	10803c0c 	andi	r2,r2,240
 8001154:	10000326 	beq	r2,zero,8001164 <MAX_busprobe+0x150>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 8001158:	00800044 	movi	r2,1
 800115c:	d0a00305 	stb	r2,-32756(gp)
		break;
 8001160:	00000906 	br	8001188 <MAX_busprobe+0x174>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 8001164:	01403244 	movi	r5,201
 8001168:	01003604 	movi	r4,216
 800116c:	8000c500 	call	8000c50 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 8001170:	008000c4 	movi	r2,3
 8001174:	d0a00305 	stb	r2,-32756(gp)
		break;
 8001178:	00000306 	br	8001188 <MAX_busprobe+0x174>
		break;
 800117c:	0001883a 	nop
 8001180:	00000106 	br	8001188 <MAX_busprobe+0x174>
		break;
 8001184:	0001883a 	nop
}
 8001188:	0001883a 	nop
 800118c:	e037883a 	mov	sp,fp
 8001190:	dfc00117 	ldw	ra,4(sp)
 8001194:	df000017 	ldw	fp,0(sp)
 8001198:	dec00204 	addi	sp,sp,8
 800119c:	f800283a 	ret

080011a0 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 80011a0:	defffe04 	addi	sp,sp,-8
 80011a4:	dfc00115 	stw	ra,4(sp)
 80011a8:	df000015 	stw	fp,0(sp)
 80011ac:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 80011b0:	01400684 	movi	r5,26
 80011b4:	01002204 	movi	r4,136
 80011b8:	8000c500 	call	8000c50 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 80011bc:	8000f540 	call	8000f54 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 80011c0:	0009883a 	mov	r4,zero
 80011c4:	8000ff00 	call	8000ff0 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 80011c8:	01402004 	movi	r5,128
 80011cc:	01002e04 	movi	r4,184
 80011d0:	8000c500 	call	8000c50 <MAXreg_wr>
	Vbus_power( ON);
 80011d4:	01000044 	movi	r4,1
 80011d8:	8000ff00 	call	8000ff0 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 80011dc:	01403444 	movi	r5,209
 80011e0:	01003604 	movi	r4,216
 80011e4:	8000c500 	call	8000c50 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 80011e8:	01400804 	movi	r5,32
 80011ec:	01003404 	movi	r4,208
 80011f0:	8000c500 	call	8000c50 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 80011f4:	01400104 	movi	r5,4
 80011f8:	01003a04 	movi	r4,232
 80011fc:	8000c500 	call	8000c50 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 8001200:	80010140 	call	8001014 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 8001204:	01400804 	movi	r5,32
 8001208:	01003204 	movi	r4,200
 800120c:	8000c500 	call	8000c50 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 8001210:	01400044 	movi	r5,1
 8001214:	01002004 	movi	r4,128
 8001218:	8000c500 	call	8000c50 <MAXreg_wr>
}
 800121c:	0001883a 	nop
 8001220:	e037883a 	mov	sp,fp
 8001224:	dfc00117 	ldw	ra,4(sp)
 8001228:	df000017 	ldw	fp,0(sp)
 800122c:	dec00204 	addi	sp,sp,8
 8001230:	f800283a 	ret

08001234 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 8001234:	defffe04 	addi	sp,sp,-8
 8001238:	dfc00115 	stw	ra,4(sp)
 800123c:	df000015 	stw	fp,0(sp)
 8001240:	d839883a 	mov	fp,sp
	//BYTE reg = 18 << 2;

	//printf("%d ", MAXreg_rd(reg));
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 8001244:	00806837 	ldwio	r2,416(zero)
 8001248:	1000041e 	bne	r2,zero,800125c <MAX3421E_Task+0x28>
		printf("MAX interrupt\n\r");
 800124c:	01020074 	movhi	r4,2049
 8001250:	210acc04 	addi	r4,r4,11056
 8001254:	8002ca80 	call	8002ca8 <printf>
		MaxIntHandler();
 8001258:	80012900 	call	8001290 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 800125c:	00806437 	ldwio	r2,400(zero)
 8001260:	10800058 	cmpnei	r2,r2,1
 8001264:	1000041e 	bne	r2,zero,8001278 <MAX3421E_Task+0x44>
		printf("GPX interrupt\n\r");
 8001268:	01020074 	movhi	r4,2049
 800126c:	210ad004 	addi	r4,r4,11072
 8001270:	8002ca80 	call	8002ca8 <printf>
		MaxGpxHandler();
 8001274:	800135c0 	call	800135c <MaxGpxHandler>
	}
}
 8001278:	0001883a 	nop
 800127c:	e037883a 	mov	sp,fp
 8001280:	dfc00117 	ldw	ra,4(sp)
 8001284:	df000017 	ldw	fp,0(sp)
 8001288:	dec00204 	addi	sp,sp,8
 800128c:	f800283a 	ret

08001290 <MaxIntHandler>:

void MaxIntHandler(void) {
 8001290:	defffd04 	addi	sp,sp,-12
 8001294:	dfc00215 	stw	ra,8(sp)
 8001298:	df000115 	stw	fp,4(sp)
 800129c:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 80012a0:	e03fffc5 	stb	zero,-1(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 80012a4:	01003204 	movi	r4,200
 80012a8:	8000e3c0 	call	8000e3c <MAXreg_rd>
 80012ac:	e0bfff85 	stb	r2,-2(fp)
	printf("IRQ: %x\n", HIRQ);
 80012b0:	e0bfff83 	ldbu	r2,-2(fp)
 80012b4:	100b883a 	mov	r5,r2
 80012b8:	01020074 	movhi	r4,2049
 80012bc:	210ad404 	addi	r4,r4,11088
 80012c0:	8002ca80 	call	8002ca8 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 80012c4:	e0bfff83 	ldbu	r2,-2(fp)
 80012c8:	1080100c 	andi	r2,r2,64
 80012cc:	10000326 	beq	r2,zero,80012dc <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 80012d0:	e0bfffc3 	ldbu	r2,-1(fp)
 80012d4:	10801014 	ori	r2,r2,64
 80012d8:	e0bfffc5 	stb	r2,-1(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 80012dc:	e0bfff83 	ldbu	r2,-2(fp)
 80012e0:	1080080c 	andi	r2,r2,32
 80012e4:	10000426 	beq	r2,zero,80012f8 <MaxIntHandler+0x68>
		MAX_busprobe();
 80012e8:	80010140 	call	8001014 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 80012ec:	e0bfffc3 	ldbu	r2,-1(fp)
 80012f0:	10800814 	ori	r2,r2,32
 80012f4:	e0bfffc5 	stb	r2,-1(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 80012f8:	e0bfff83 	ldbu	r2,-2(fp)
 80012fc:	1080020c 	andi	r2,r2,8
 8001300:	10000326 	beq	r2,zero,8001310 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 8001304:	000b883a 	mov	r5,zero
 8001308:	01000e04 	movi	r4,56
 800130c:	8000c500 	call	8000c50 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 8001310:	e0bfff83 	ldbu	r2,-2(fp)
 8001314:	1080004c 	andi	r2,r2,1
 8001318:	10000626 	beq	r2,zero,8001334 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 800131c:	d0a00303 	ldbu	r2,-32756(gp)
 8001320:	10800044 	addi	r2,r2,1
 8001324:	d0a00305 	stb	r2,-32756(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 8001328:	e0bfffc3 	ldbu	r2,-1(fp)
 800132c:	10800054 	ori	r2,r2,1
 8001330:	e0bfffc5 	stb	r2,-1(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 8001334:	e0bfffc3 	ldbu	r2,-1(fp)
 8001338:	100b883a 	mov	r5,r2
 800133c:	01003204 	movi	r4,200
 8001340:	8000c500 	call	8000c50 <MAXreg_wr>
}
 8001344:	0001883a 	nop
 8001348:	e037883a 	mov	sp,fp
 800134c:	dfc00117 	ldw	ra,4(sp)
 8001350:	df000017 	ldw	fp,0(sp)
 8001354:	dec00204 	addi	sp,sp,8
 8001358:	f800283a 	ret

0800135c <MaxGpxHandler>:

void MaxGpxHandler(void) {
 800135c:	defffd04 	addi	sp,sp,-12
 8001360:	dfc00215 	stw	ra,8(sp)
 8001364:	df000115 	stw	fp,4(sp)
 8001368:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 800136c:	01002c04 	movi	r4,176
 8001370:	8000e3c0 	call	8000e3c <MAXreg_rd>
 8001374:	e0bfffc5 	stb	r2,-1(fp)
}
 8001378:	0001883a 	nop
 800137c:	e037883a 	mov	sp,fp
 8001380:	dfc00117 	ldw	ra,4(sp)
 8001384:	df000017 	ldw	fp,0(sp)
 8001388:	dec00204 	addi	sp,sp,8
 800138c:	f800283a 	ret

08001390 <GetDriverandReport>:
extern HID_DEVICE hid_device;

static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

BYTE GetDriverandReport() {
 8001390:	defff604 	addi	sp,sp,-40
 8001394:	dfc00915 	stw	ra,36(sp)
 8001398:	df000815 	stw	fp,32(sp)
 800139c:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 80013a0:	00bfffc4 	movi	r2,-1
 80013a4:	e0bfff85 	stb	r2,-2(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 80013a8:	01020074 	movhi	r4,2049
 80013ac:	210aea04 	addi	r4,r4,11176
 80013b0:	8002dcc0 	call	8002dcc <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 80013b4:	00800044 	movi	r2,1
 80013b8:	e0bfffc5 	stb	r2,-1(fp)
 80013bc:	00001d06 	br	8001434 <GetDriverandReport+0xa4>
		tpl_ptr = GetDevtable(i);
 80013c0:	e0bfffc3 	ldbu	r2,-1(fp)
 80013c4:	1009883a 	mov	r4,r2
 80013c8:	80029e00 	call	80029e0 <GetDevtable>
 80013cc:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 80013d0:	e0bffe17 	ldw	r2,-8(fp)
 80013d4:	10800017 	ldw	r2,0(r2)
 80013d8:	10001326 	beq	r2,zero,8001428 <GetDriverandReport+0x98>
			printf("Device: %d", i);
 80013dc:	e0bfffc3 	ldbu	r2,-1(fp)
 80013e0:	100b883a 	mov	r5,r2
 80013e4:	01020074 	movhi	r4,2049
 80013e8:	210af304 	addi	r4,r4,11212
 80013ec:	8002ca80 	call	8002ca8 <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
 80013f0:	e0bffe17 	ldw	r2,-8(fp)
 80013f4:	10800103 	ldbu	r2,4(r2)
 80013f8:	10803fcc 	andi	r2,r2,255
 80013fc:	100690ba 	slli	r3,r2,2
 8001400:	00820074 	movhi	r2,2049
 8001404:	1885883a 	add	r2,r3,r2
 8001408:	108ae617 	ldw	r2,11160(r2)
 800140c:	100b883a 	mov	r5,r2
 8001410:	01020074 	movhi	r4,2049
 8001414:	210af604 	addi	r4,r4,11224
 8001418:	8002ca80 	call	8002ca8 <printf>
			device = tpl_ptr->devclass;
 800141c:	e0bffe17 	ldw	r2,-8(fp)
 8001420:	10800103 	ldbu	r2,4(r2)
 8001424:	e0bfff85 	stb	r2,-2(fp)
	for (i = 1; i < USB_NUMDEVICES; i++) {
 8001428:	e0bfffc3 	ldbu	r2,-1(fp)
 800142c:	10800044 	addi	r2,r2,1
 8001430:	e0bfffc5 	stb	r2,-1(fp)
 8001434:	e0bfffc3 	ldbu	r2,-1(fp)
 8001438:	10800230 	cmpltui	r2,r2,8
 800143c:	103fe01e 	bne	r2,zero,80013c0 <GetDriverandReport+0x30>
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 8001440:	d0a00003 	ldbu	r2,-32768(gp)
 8001444:	11003fcc 	andi	r4,r2,255
 8001448:	d0a71843 	ldbu	r2,-25503(gp)
 800144c:	10803fcc 	andi	r2,r2,255
 8001450:	e0fffdc4 	addi	r3,fp,-9
 8001454:	d8c00415 	stw	r3,16(sp)
 8001458:	00c00044 	movi	r3,1
 800145c:	d8c00315 	stw	r3,12(sp)
 8001460:	d8800215 	stw	r2,8(sp)
 8001464:	d8000115 	stw	zero,4(sp)
 8001468:	d8000015 	stw	zero,0(sp)
 800146c:	01c00084 	movi	r7,2
 8001470:	01802844 	movi	r6,161
 8001474:	000b883a 	mov	r5,zero
 8001478:	8001be00 	call	8001be0 <XferCtrlReq>
 800147c:	e0bfff45 	stb	r2,-3(fp)
	if (rcode) {   //error handling
 8001480:	e0bfff43 	ldbu	r2,-3(fp)
 8001484:	10000926 	beq	r2,zero,80014ac <GetDriverandReport+0x11c>
		printf("GetIdle Error. Error code: ");
 8001488:	01020074 	movhi	r4,2049
 800148c:	210af804 	addi	r4,r4,11232
 8001490:	8002ca80 	call	8002ca8 <printf>
		printf("%x \n", rcode);
 8001494:	e0bfff43 	ldbu	r2,-3(fp)
 8001498:	100b883a 	mov	r5,r2
 800149c:	01020074 	movhi	r4,2049
 80014a0:	210aff04 	addi	r4,r4,11260
 80014a4:	8002ca80 	call	8002ca8 <printf>
 80014a8:	00000906 	br	80014d0 <GetDriverandReport+0x140>
	} else {
		printf("Update rate: ");
 80014ac:	01020074 	movhi	r4,2049
 80014b0:	210b0104 	addi	r4,r4,11268
 80014b4:	8002ca80 	call	8002ca8 <printf>
		printf("%x \n", tmpbyte);
 80014b8:	e0bffdc3 	ldbu	r2,-9(fp)
 80014bc:	10803fcc 	andi	r2,r2,255
 80014c0:	100b883a 	mov	r5,r2
 80014c4:	01020074 	movhi	r4,2049
 80014c8:	210aff04 	addi	r4,r4,11260
 80014cc:	8002ca80 	call	8002ca8 <printf>
	}
	printf("Protocol: ");
 80014d0:	01020074 	movhi	r4,2049
 80014d4:	210b0504 	addi	r4,r4,11284
 80014d8:	8002ca80 	call	8002ca8 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 80014dc:	d0a00003 	ldbu	r2,-32768(gp)
 80014e0:	11003fcc 	andi	r4,r2,255
 80014e4:	d0a71843 	ldbu	r2,-25503(gp)
 80014e8:	10803fcc 	andi	r2,r2,255
 80014ec:	e0fffdc4 	addi	r3,fp,-9
 80014f0:	d8c00415 	stw	r3,16(sp)
 80014f4:	00c00044 	movi	r3,1
 80014f8:	d8c00315 	stw	r3,12(sp)
 80014fc:	d8800215 	stw	r2,8(sp)
 8001500:	d8000115 	stw	zero,4(sp)
 8001504:	d8000015 	stw	zero,0(sp)
 8001508:	01c000c4 	movi	r7,3
 800150c:	01802844 	movi	r6,161
 8001510:	000b883a 	mov	r5,zero
 8001514:	8001be00 	call	8001be0 <XferCtrlReq>
 8001518:	e0bfff45 	stb	r2,-3(fp)
	if (rcode) {   //error handling
 800151c:	e0bfff43 	ldbu	r2,-3(fp)
 8001520:	10000926 	beq	r2,zero,8001548 <GetDriverandReport+0x1b8>
		printf("GetProto Error. Error code ");
 8001524:	01020074 	movhi	r4,2049
 8001528:	210b0804 	addi	r4,r4,11296
 800152c:	8002ca80 	call	8002ca8 <printf>
		printf("%x \n", rcode);
 8001530:	e0bfff43 	ldbu	r2,-3(fp)
 8001534:	100b883a 	mov	r5,r2
 8001538:	01020074 	movhi	r4,2049
 800153c:	210aff04 	addi	r4,r4,11260
 8001540:	8002ca80 	call	8002ca8 <printf>
 8001544:	00000606 	br	8001560 <GetDriverandReport+0x1d0>
	} else {
		printf("%d \n", tmpbyte);
 8001548:	e0bffdc3 	ldbu	r2,-9(fp)
 800154c:	10803fcc 	andi	r2,r2,255
 8001550:	100b883a 	mov	r5,r2
 8001554:	01020074 	movhi	r4,2049
 8001558:	210b0f04 	addi	r4,r4,11324
 800155c:	8002ca80 	call	8002ca8 <printf>
	}
	return device;
 8001560:	e0bfff83 	ldbu	r2,-2(fp)
}
 8001564:	e037883a 	mov	sp,fp
 8001568:	dfc00117 	ldw	ra,4(sp)
 800156c:	df000017 	ldw	fp,0(sp)
 8001570:	dec00204 	addi	sp,sp,8
 8001574:	f800283a 	ret

08001578 <setLED>:

void setLED(int LED) {
 8001578:	defffe04 	addi	sp,sp,-8
 800157c:	df000115 	stw	fp,4(sp)
 8001580:	df000104 	addi	fp,sp,4
 8001584:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 8001588:	00c05837 	ldwio	r3,352(zero)
 800158c:	01000044 	movi	r4,1
 8001590:	e0bfff17 	ldw	r2,-4(fp)
 8001594:	2084983a 	sll	r2,r4,r2
 8001598:	1884b03a 	or	r2,r3,r2
 800159c:	00805835 	stwio	r2,352(zero)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 80015a0:	0001883a 	nop
 80015a4:	e037883a 	mov	sp,fp
 80015a8:	df000017 	ldw	fp,0(sp)
 80015ac:	dec00104 	addi	sp,sp,4
 80015b0:	f800283a 	ret

080015b4 <clearLED>:

void clearLED(int LED) {
 80015b4:	defffe04 	addi	sp,sp,-8
 80015b8:	df000115 	stw	fp,4(sp)
 80015bc:	df000104 	addi	fp,sp,4
 80015c0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 80015c4:	00c05837 	ldwio	r3,352(zero)
 80015c8:	01000044 	movi	r4,1
 80015cc:	e0bfff17 	ldw	r2,-4(fp)
 80015d0:	2084983a 	sll	r2,r4,r2
 80015d4:	0084303a 	nor	r2,zero,r2
 80015d8:	1884703a 	and	r2,r3,r2
 80015dc:	00805835 	stwio	r2,352(zero)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
 80015e0:	0001883a 	nop
 80015e4:	e037883a 	mov	sp,fp
 80015e8:	df000017 	ldw	fp,0(sp)
 80015ec:	dec00104 	addi	sp,sp,4
 80015f0:	f800283a 	ret

080015f4 <printSignedHex0>:

void printSignedHex0(signed char value) {
 80015f4:	defffc04 	addi	sp,sp,-16
 80015f8:	dfc00315 	stw	ra,12(sp)
 80015fc:	df000215 	stw	fp,8(sp)
 8001600:	df000204 	addi	fp,sp,8
 8001604:	2005883a 	mov	r2,r4
 8001608:	e0bffe05 	stb	r2,-8(fp)
	BYTE tens = 0;
 800160c:	e03fffc5 	stb	zero,-1(fp)
	BYTE ones = 0;
 8001610:	e03fff85 	stb	zero,-2(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 8001614:	00805c37 	ldwio	r2,368(zero)
 8001618:	e0bfff0d 	sth	r2,-4(fp)
	if (value < 0) {
 800161c:	e0bffe07 	ldb	r2,-8(fp)
 8001620:	1000060e 	bge	r2,zero,800163c <printSignedHex0+0x48>
		setLED(11);
 8001624:	010002c4 	movi	r4,11
 8001628:	80015780 	call	8001578 <setLED>
		value = -value;
 800162c:	e0bffe03 	ldbu	r2,-8(fp)
 8001630:	0085c83a 	sub	r2,zero,r2
 8001634:	e0bffe05 	stb	r2,-8(fp)
 8001638:	00000206 	br	8001644 <printSignedHex0+0x50>
	} else {
		clearLED(11);
 800163c:	010002c4 	movi	r4,11
 8001640:	80015b40 	call	80015b4 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 8001644:	e0bffe03 	ldbu	r2,-8(fp)
 8001648:	108018c4 	addi	r2,r2,99
 800164c:	10803fcc 	andi	r2,r2,255
 8001650:	108031f0 	cmpltui	r2,r2,199
 8001654:	1000031e 	bne	r2,zero,8001664 <printSignedHex0+0x70>
		setLED(13);
 8001658:	01000344 	movi	r4,13
 800165c:	80015780 	call	8001578 <setLED>
 8001660:	00000206 	br	800166c <printSignedHex0+0x78>
	else
		clearLED(13);
 8001664:	01000344 	movi	r4,13
 8001668:	80015b40 	call	80015b4 <clearLED>

	value = value % 100;
 800166c:	e0bffe07 	ldb	r2,-8(fp)
 8001670:	01401904 	movi	r5,100
 8001674:	1009883a 	mov	r4,r2
 8001678:	8002b1c0 	call	8002b1c <__modsi3>
 800167c:	e0bffe05 	stb	r2,-8(fp)
	tens = value / 10;
 8001680:	e0bffe07 	ldb	r2,-8(fp)
 8001684:	01400284 	movi	r5,10
 8001688:	1009883a 	mov	r4,r2
 800168c:	8002a9c0 	call	8002a9c <__divsi3>
 8001690:	e0bfffc5 	stb	r2,-1(fp)
	ones = value % 10;
 8001694:	e0bffe07 	ldb	r2,-8(fp)
 8001698:	01400284 	movi	r5,10
 800169c:	1009883a 	mov	r4,r2
 80016a0:	8002b1c0 	call	8002b1c <__modsi3>
 80016a4:	e0bfff85 	stb	r2,-2(fp)

	pio_val &= 0x00FF;
 80016a8:	e0bfff0b 	ldhu	r2,-4(fp)
 80016ac:	10803fcc 	andi	r2,r2,255
 80016b0:	e0bfff0d 	sth	r2,-4(fp)
	pio_val |= (tens << 12);
 80016b4:	e0bfffc3 	ldbu	r2,-1(fp)
 80016b8:	1004933a 	slli	r2,r2,12
 80016bc:	1007883a 	mov	r3,r2
 80016c0:	e0bfff0b 	ldhu	r2,-4(fp)
 80016c4:	1884b03a 	or	r2,r3,r2
 80016c8:	e0bfff0d 	sth	r2,-4(fp)
	pio_val |= (ones << 8);
 80016cc:	e0bfff83 	ldbu	r2,-2(fp)
 80016d0:	1004923a 	slli	r2,r2,8
 80016d4:	1007883a 	mov	r3,r2
 80016d8:	e0bfff0b 	ldhu	r2,-4(fp)
 80016dc:	1884b03a 	or	r2,r3,r2
 80016e0:	e0bfff0d 	sth	r2,-4(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 80016e4:	e0bfff0b 	ldhu	r2,-4(fp)
 80016e8:	00805c35 	stwio	r2,368(zero)
}
 80016ec:	0001883a 	nop
 80016f0:	e037883a 	mov	sp,fp
 80016f4:	dfc00117 	ldw	ra,4(sp)
 80016f8:	df000017 	ldw	fp,0(sp)
 80016fc:	dec00204 	addi	sp,sp,8
 8001700:	f800283a 	ret

08001704 <printSignedHex1>:

void printSignedHex1(signed char value) {
 8001704:	defffb04 	addi	sp,sp,-20
 8001708:	dfc00415 	stw	ra,16(sp)
 800170c:	df000315 	stw	fp,12(sp)
 8001710:	df000304 	addi	fp,sp,12
 8001714:	2005883a 	mov	r2,r4
 8001718:	e0bffd05 	stb	r2,-12(fp)
	BYTE tens = 0;
 800171c:	e03fffc5 	stb	zero,-1(fp)
	BYTE ones = 0;
 8001720:	e03fff85 	stb	zero,-2(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 8001724:	00805c37 	ldwio	r2,368(zero)
 8001728:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
 800172c:	e0bffd07 	ldb	r2,-12(fp)
 8001730:	1000060e 	bge	r2,zero,800174c <printSignedHex1+0x48>
		setLED(10);
 8001734:	01000284 	movi	r4,10
 8001738:	80015780 	call	8001578 <setLED>
		value = -value;
 800173c:	e0bffd03 	ldbu	r2,-12(fp)
 8001740:	0085c83a 	sub	r2,zero,r2
 8001744:	e0bffd05 	stb	r2,-12(fp)
 8001748:	00000206 	br	8001754 <printSignedHex1+0x50>
	} else {
		clearLED(10);
 800174c:	01000284 	movi	r4,10
 8001750:	80015b40 	call	80015b4 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 8001754:	e0bffd03 	ldbu	r2,-12(fp)
 8001758:	108018c4 	addi	r2,r2,99
 800175c:	10803fcc 	andi	r2,r2,255
 8001760:	108031f0 	cmpltui	r2,r2,199
 8001764:	1000031e 	bne	r2,zero,8001774 <printSignedHex1+0x70>
		setLED(12);
 8001768:	01000304 	movi	r4,12
 800176c:	80015780 	call	8001578 <setLED>
 8001770:	00000206 	br	800177c <printSignedHex1+0x78>
	else
		clearLED(12);
 8001774:	01000304 	movi	r4,12
 8001778:	80015b40 	call	80015b4 <clearLED>

	value = value % 100;
 800177c:	e0bffd07 	ldb	r2,-12(fp)
 8001780:	01401904 	movi	r5,100
 8001784:	1009883a 	mov	r4,r2
 8001788:	8002b1c0 	call	8002b1c <__modsi3>
 800178c:	e0bffd05 	stb	r2,-12(fp)
	tens = value / 10;
 8001790:	e0bffd07 	ldb	r2,-12(fp)
 8001794:	01400284 	movi	r5,10
 8001798:	1009883a 	mov	r4,r2
 800179c:	8002a9c0 	call	8002a9c <__divsi3>
 80017a0:	e0bfffc5 	stb	r2,-1(fp)
	ones = value % 10;
 80017a4:	e0bffd07 	ldb	r2,-12(fp)
 80017a8:	01400284 	movi	r5,10
 80017ac:	1009883a 	mov	r4,r2
 80017b0:	8002b1c0 	call	8002b1c <__modsi3>
 80017b4:	e0bfff85 	stb	r2,-2(fp)
	tens = value / 10;
 80017b8:	e0bffd07 	ldb	r2,-12(fp)
 80017bc:	01400284 	movi	r5,10
 80017c0:	1009883a 	mov	r4,r2
 80017c4:	8002a9c0 	call	8002a9c <__divsi3>
 80017c8:	e0bfffc5 	stb	r2,-1(fp)
	ones = value % 10;
 80017cc:	e0bffd07 	ldb	r2,-12(fp)
 80017d0:	01400284 	movi	r5,10
 80017d4:	1009883a 	mov	r4,r2
 80017d8:	8002b1c0 	call	8002b1c <__modsi3>
 80017dc:	e0bfff85 	stb	r2,-2(fp)

	pio_val &= 0xFF00;
 80017e0:	e0bffe17 	ldw	r2,-8(fp)
 80017e4:	10bfc00c 	andi	r2,r2,65280
 80017e8:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 80017ec:	e0bfffc3 	ldbu	r2,-1(fp)
 80017f0:	1004913a 	slli	r2,r2,4
 80017f4:	1007883a 	mov	r3,r2
 80017f8:	e0bffe17 	ldw	r2,-8(fp)
 80017fc:	10c4b03a 	or	r2,r2,r3
 8001800:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 8001804:	e0bfff83 	ldbu	r2,-2(fp)
 8001808:	e0fffe17 	ldw	r3,-8(fp)
 800180c:	1884b03a 	or	r2,r3,r2
 8001810:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 8001814:	e0bffe17 	ldw	r2,-8(fp)
 8001818:	00805c35 	stwio	r2,368(zero)
}
 800181c:	0001883a 	nop
 8001820:	e037883a 	mov	sp,fp
 8001824:	dfc00117 	ldw	ra,4(sp)
 8001828:	df000017 	ldw	fp,0(sp)
 800182c:	dec00204 	addi	sp,sp,8
 8001830:	f800283a 	ret

08001834 <setKeycode>:

void setKeycode(WORD keycode)
{
 8001834:	defffe04 	addi	sp,sp,-8
 8001838:	df000115 	stw	fp,4(sp)
 800183c:	df000104 	addi	fp,sp,4
 8001840:	2005883a 	mov	r2,r4
 8001844:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, keycode);
 8001848:	e0bfff0b 	ldhu	r2,-4(fp)
 800184c:	00806c35 	stwio	r2,432(zero)
}
 8001850:	0001883a 	nop
 8001854:	e037883a 	mov	sp,fp
 8001858:	df000017 	ldw	fp,0(sp)
 800185c:	dec00104 	addi	sp,sp,4
 8001860:	f800283a 	ret

08001864 <main>:
int main() {
 8001864:	defff704 	addi	sp,sp,-36
 8001868:	dfc00815 	stw	ra,32(sp)
 800186c:	df000715 	stw	fp,28(sp)
 8001870:	df000704 	addi	fp,sp,28
	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
 8001874:	e03fffc5 	stb	zero,-1(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
 8001878:	e03fff85 	stb	zero,-2(fp)
	BYTE device;
	WORD keycode;

	printf("initializing MAX3421E...\n");
 800187c:	01020074 	movhi	r4,2049
 8001880:	210b1104 	addi	r4,r4,11332
 8001884:	8002dcc0 	call	8002dcc <puts>
	MAX3421E_init();
 8001888:	80011a00 	call	80011a0 <MAX3421E_init>
	printf("initializing USB...\n");
 800188c:	01020074 	movhi	r4,2049
 8001890:	210b1804 	addi	r4,r4,11360
 8001894:	8002dcc0 	call	8002dcc <puts>
	USB_init();
 8001898:	80021a80 	call	80021a8 <USB_init>
	while (1) {
		printf(".");
 800189c:	01000b84 	movi	r4,46
 80018a0:	8002ce80 	call	8002ce8 <putchar>


		MAX3421E_Task();
 80018a4:	80012340 	call	8001234 <MAX3421E_Task>
		usleep(1000);
 80018a8:	0100fa04 	movi	r4,1000
 80018ac:	8010a480 	call	8010a48 <usleep>
		USB_Task();
 80018b0:	80022300 	call	8002230 <USB_Task>
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
 80018b4:	80029c00 	call	80029c0 <GetUsbTaskState>
 80018b8:	10803fcc 	andi	r2,r2,255
 80018bc:	10801018 	cmpnei	r2,r2,64
 80018c0:	1000a31e 	bne	r2,zero,8001b50 <main+0x2ec>
			printf("Running");
 80018c4:	01020074 	movhi	r4,2049
 80018c8:	210b1d04 	addi	r4,r4,11380
 80018cc:	8002ca80 	call	8002ca8 <printf>
			if (!runningdebugflag) {
 80018d0:	e0bfffc3 	ldbu	r2,-1(fp)
 80018d4:	1000071e 	bne	r2,zero,80018f4 <main+0x90>
				runningdebugflag = 1;
 80018d8:	00800044 	movi	r2,1
 80018dc:	e0bfffc5 	stb	r2,-1(fp)
				setLED(9);
 80018e0:	01000244 	movi	r4,9
 80018e4:	80015780 	call	8001578 <setLED>
				device = GetDriverandReport();
 80018e8:	80013900 	call	8001390 <GetDriverandReport>
 80018ec:	e0bfff45 	stb	r2,-3(fp)
 80018f0:	003fea06 	br	800189c <main+0x38>
			} else if (device == 1) {
 80018f4:	e0bfff43 	ldbu	r2,-3(fp)
 80018f8:	10800058 	cmpnei	r2,r2,1
 80018fc:	1000381e 	bne	r2,zero,80019e0 <main+0x17c>
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
 8001900:	e0bff9c4 	addi	r2,fp,-25
 8001904:	1009883a 	mov	r4,r2
 8001908:	8000ae40 	call	8000ae4 <kbdPoll>
 800190c:	e0bffdc5 	stb	r2,-9(fp)
				if (rcode == hrNAK) {
 8001910:	e0bffdc3 	ldbu	r2,-9(fp)
 8001914:	10800118 	cmpnei	r2,r2,4
 8001918:	1000ad26 	beq	r2,zero,8001bd0 <main+0x36c>
					continue; //NAK means no new data
				} else if (rcode) {
 800191c:	e0bffdc3 	ldbu	r2,-9(fp)
 8001920:	10000926 	beq	r2,zero,8001948 <main+0xe4>
					printf("Rcode: ");
 8001924:	01020074 	movhi	r4,2049
 8001928:	210b1f04 	addi	r4,r4,11388
 800192c:	8002ca80 	call	8002ca8 <printf>
					printf("%x \n", rcode);
 8001930:	e0bffdc3 	ldbu	r2,-9(fp)
 8001934:	100b883a 	mov	r5,r2
 8001938:	01020074 	movhi	r4,2049
 800193c:	210aff04 	addi	r4,r4,11260
 8001940:	8002ca80 	call	8002ca8 <printf>
					continue;
 8001944:	0000a506 	br	8001bdc <main+0x378>
				}
				printf("keycodes: ");
 8001948:	01020074 	movhi	r4,2049
 800194c:	210b2104 	addi	r4,r4,11396
 8001950:	8002ca80 	call	8002ca8 <printf>
				for (int i = 0; i < 6; i++) {
 8001954:	e03ffe15 	stw	zero,-8(fp)
 8001958:	00000b06 	br	8001988 <main+0x124>
					printf("%x ", kbdbuf.keycode[i]);
 800195c:	e0bffe17 	ldw	r2,-8(fp)
 8001960:	e085883a 	add	r2,fp,r2
 8001964:	10bffa43 	ldbu	r2,-23(r2)
 8001968:	10803fcc 	andi	r2,r2,255
 800196c:	100b883a 	mov	r5,r2
 8001970:	01020074 	movhi	r4,2049
 8001974:	210b2404 	addi	r4,r4,11408
 8001978:	8002ca80 	call	8002ca8 <printf>
				for (int i = 0; i < 6; i++) {
 800197c:	e0bffe17 	ldw	r2,-8(fp)
 8001980:	10800044 	addi	r2,r2,1
 8001984:	e0bffe15 	stw	r2,-8(fp)
 8001988:	e0bffe17 	ldw	r2,-8(fp)
 800198c:	10800190 	cmplti	r2,r2,6
 8001990:	103ff21e 	bne	r2,zero,800195c <main+0xf8>
				}
				setKeycode(kbdbuf.keycode[0]);
 8001994:	e0bffa43 	ldbu	r2,-23(fp)
 8001998:	10803fcc 	andi	r2,r2,255
 800199c:	1009883a 	mov	r4,r2
 80019a0:	80018340 	call	8001834 <setKeycode>
				printSignedHex0(kbdbuf.keycode[0]);
 80019a4:	e0bffa43 	ldbu	r2,-23(fp)
 80019a8:	10803fcc 	andi	r2,r2,255
 80019ac:	1080201c 	xori	r2,r2,128
 80019b0:	10bfe004 	addi	r2,r2,-128
 80019b4:	1009883a 	mov	r4,r2
 80019b8:	80015f40 	call	80015f4 <printSignedHex0>
				printSignedHex1(kbdbuf.keycode[1]);
 80019bc:	e0bffa83 	ldbu	r2,-22(fp)
 80019c0:	10803fcc 	andi	r2,r2,255
 80019c4:	1080201c 	xori	r2,r2,128
 80019c8:	10bfe004 	addi	r2,r2,-128
 80019cc:	1009883a 	mov	r4,r2
 80019d0:	80017040 	call	8001704 <printSignedHex1>
				printf("\n");
 80019d4:	01000284 	movi	r4,10
 80019d8:	8002ce80 	call	8002ce8 <putchar>
 80019dc:	003faf06 	br	800189c <main+0x38>
			}

			else if (device == 2) {
 80019e0:	e0bfff43 	ldbu	r2,-3(fp)
 80019e4:	10800098 	cmpnei	r2,r2,2
 80019e8:	103fac1e 	bne	r2,zero,800189c <main+0x38>
				rcode = mousePoll(&buf);
 80019ec:	e0bffbc4 	addi	r2,fp,-17
 80019f0:	1009883a 	mov	r4,r2
 80019f4:	8000a600 	call	8000a60 <mousePoll>
 80019f8:	e0bffdc5 	stb	r2,-9(fp)
				if (rcode == hrNAK) {
 80019fc:	e0bffdc3 	ldbu	r2,-9(fp)
 8001a00:	10800118 	cmpnei	r2,r2,4
 8001a04:	10007426 	beq	r2,zero,8001bd8 <main+0x374>
					//NAK means no new data
					continue;
				} else if (rcode) {
 8001a08:	e0bffdc3 	ldbu	r2,-9(fp)
 8001a0c:	10000926 	beq	r2,zero,8001a34 <main+0x1d0>
					printf("Rcode: ");
 8001a10:	01020074 	movhi	r4,2049
 8001a14:	210b1f04 	addi	r4,r4,11388
 8001a18:	8002ca80 	call	8002ca8 <printf>
					printf("%x \n", rcode);
 8001a1c:	e0bffdc3 	ldbu	r2,-9(fp)
 8001a20:	100b883a 	mov	r5,r2
 8001a24:	01020074 	movhi	r4,2049
 8001a28:	210aff04 	addi	r4,r4,11260
 8001a2c:	8002ca80 	call	8002ca8 <printf>
					continue;
 8001a30:	00006a06 	br	8001bdc <main+0x378>
				}
				printf("X displacement: ");
 8001a34:	01020074 	movhi	r4,2049
 8001a38:	210b2504 	addi	r4,r4,11412
 8001a3c:	8002ca80 	call	8002ca8 <printf>
				printf("%d ", (signed char) buf.Xdispl);
 8001a40:	e0bffc03 	ldbu	r2,-16(fp)
 8001a44:	10803fcc 	andi	r2,r2,255
 8001a48:	1080201c 	xori	r2,r2,128
 8001a4c:	10bfe004 	addi	r2,r2,-128
 8001a50:	100b883a 	mov	r5,r2
 8001a54:	01020074 	movhi	r4,2049
 8001a58:	210b2a04 	addi	r4,r4,11432
 8001a5c:	8002ca80 	call	8002ca8 <printf>
				printSignedHex0((signed char) buf.Xdispl);
 8001a60:	e0bffc03 	ldbu	r2,-16(fp)
 8001a64:	10803fcc 	andi	r2,r2,255
 8001a68:	1080201c 	xori	r2,r2,128
 8001a6c:	10bfe004 	addi	r2,r2,-128
 8001a70:	1009883a 	mov	r4,r2
 8001a74:	80015f40 	call	80015f4 <printSignedHex0>
				printf("Y displacement: ");
 8001a78:	01020074 	movhi	r4,2049
 8001a7c:	210b2b04 	addi	r4,r4,11436
 8001a80:	8002ca80 	call	8002ca8 <printf>
				printf("%d ", (signed char) buf.Ydispl);
 8001a84:	e0bffc43 	ldbu	r2,-15(fp)
 8001a88:	10803fcc 	andi	r2,r2,255
 8001a8c:	1080201c 	xori	r2,r2,128
 8001a90:	10bfe004 	addi	r2,r2,-128
 8001a94:	100b883a 	mov	r5,r2
 8001a98:	01020074 	movhi	r4,2049
 8001a9c:	210b2a04 	addi	r4,r4,11432
 8001aa0:	8002ca80 	call	8002ca8 <printf>
				printSignedHex1((signed char) buf.Ydispl);
 8001aa4:	e0bffc43 	ldbu	r2,-15(fp)
 8001aa8:	10803fcc 	andi	r2,r2,255
 8001aac:	1080201c 	xori	r2,r2,128
 8001ab0:	10bfe004 	addi	r2,r2,-128
 8001ab4:	1009883a 	mov	r4,r2
 8001ab8:	80017040 	call	8001704 <printSignedHex1>
				printf("Buttons: ");
 8001abc:	01020074 	movhi	r4,2049
 8001ac0:	210b3004 	addi	r4,r4,11456
 8001ac4:	8002ca80 	call	8002ca8 <printf>
				printf("%x\n", buf.button);
 8001ac8:	e0bffbc3 	ldbu	r2,-17(fp)
 8001acc:	10803fcc 	andi	r2,r2,255
 8001ad0:	100b883a 	mov	r5,r2
 8001ad4:	01020074 	movhi	r4,2049
 8001ad8:	210b3304 	addi	r4,r4,11468
 8001adc:	8002ca80 	call	8002ca8 <printf>
				if (buf.button & 0x04)
 8001ae0:	e0bffbc3 	ldbu	r2,-17(fp)
 8001ae4:	10803fcc 	andi	r2,r2,255
 8001ae8:	1080010c 	andi	r2,r2,4
 8001aec:	10000326 	beq	r2,zero,8001afc <main+0x298>
					setLED(2);
 8001af0:	01000084 	movi	r4,2
 8001af4:	80015780 	call	8001578 <setLED>
 8001af8:	00000206 	br	8001b04 <main+0x2a0>
				else
					clearLED(2);
 8001afc:	01000084 	movi	r4,2
 8001b00:	80015b40 	call	80015b4 <clearLED>
				if (buf.button & 0x02)
 8001b04:	e0bffbc3 	ldbu	r2,-17(fp)
 8001b08:	10803fcc 	andi	r2,r2,255
 8001b0c:	1080008c 	andi	r2,r2,2
 8001b10:	10000326 	beq	r2,zero,8001b20 <main+0x2bc>
					setLED(1);
 8001b14:	01000044 	movi	r4,1
 8001b18:	80015780 	call	8001578 <setLED>
 8001b1c:	00000206 	br	8001b28 <main+0x2c4>
				else
					clearLED(1);
 8001b20:	01000044 	movi	r4,1
 8001b24:	80015b40 	call	80015b4 <clearLED>
				if (buf.button & 0x01)
 8001b28:	e0bffbc3 	ldbu	r2,-17(fp)
 8001b2c:	10803fcc 	andi	r2,r2,255
 8001b30:	1080004c 	andi	r2,r2,1
 8001b34:	10000326 	beq	r2,zero,8001b44 <main+0x2e0>
					setLED(0);
 8001b38:	0009883a 	mov	r4,zero
 8001b3c:	80015780 	call	8001578 <setLED>
 8001b40:	003f5606 	br	800189c <main+0x38>
				else
					clearLED(0);
 8001b44:	0009883a 	mov	r4,zero
 8001b48:	80015b40 	call	80015b4 <clearLED>
 8001b4c:	003f5306 	br	800189c <main+0x38>
			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
 8001b50:	80029c00 	call	80029c0 <GetUsbTaskState>
 8001b54:	10803fcc 	andi	r2,r2,255
 8001b58:	10803fd8 	cmpnei	r2,r2,255
 8001b5c:	10000a1e 	bne	r2,zero,8001b88 <main+0x324>
			if (!errorflag) {
 8001b60:	e0bfff83 	ldbu	r2,-2(fp)
 8001b64:	103f4d1e 	bne	r2,zero,800189c <main+0x38>
				errorflag = 1;
 8001b68:	00800044 	movi	r2,1
 8001b6c:	e0bfff85 	stb	r2,-2(fp)
				clearLED(9);
 8001b70:	01000244 	movi	r4,9
 8001b74:	80015b40 	call	80015b4 <clearLED>
				printf("USB Error State\n");
 8001b78:	01020074 	movhi	r4,2049
 8001b7c:	210b3404 	addi	r4,r4,11472
 8001b80:	8002dcc0 	call	8002dcc <puts>
 8001b84:	003f4506 	br	800189c <main+0x38>
				//print out string descriptor here
			}
		} else //not in USB running state
		{

			printf("USB task state: ");
 8001b88:	01020074 	movhi	r4,2049
 8001b8c:	210b3804 	addi	r4,r4,11488
 8001b90:	8002ca80 	call	8002ca8 <printf>
			printf("%x\n", GetUsbTaskState());
 8001b94:	80029c00 	call	80029c0 <GetUsbTaskState>
 8001b98:	10803fcc 	andi	r2,r2,255
 8001b9c:	100b883a 	mov	r5,r2
 8001ba0:	01020074 	movhi	r4,2049
 8001ba4:	210b3304 	addi	r4,r4,11468
 8001ba8:	8002ca80 	call	8002ca8 <printf>
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
 8001bac:	e0bfffc3 	ldbu	r2,-1(fp)
 8001bb0:	10000326 	beq	r2,zero,8001bc0 <main+0x35c>
				runningdebugflag = 0;
 8001bb4:	e03fffc5 	stb	zero,-1(fp)
				MAX3421E_init();
 8001bb8:	80011a00 	call	80011a0 <MAX3421E_init>
				USB_init();
 8001bbc:	80021a80 	call	80021a8 <USB_init>
			}
			errorflag = 0;
 8001bc0:	e03fff85 	stb	zero,-2(fp)
			clearLED(9);
 8001bc4:	01000244 	movi	r4,9
 8001bc8:	80015b40 	call	80015b4 <clearLED>
 8001bcc:	003f3306 	br	800189c <main+0x38>
					continue; //NAK means no new data
 8001bd0:	0001883a 	nop
 8001bd4:	003f3106 	br	800189c <main+0x38>
					continue;
 8001bd8:	0001883a 	nop
	while (1) {
 8001bdc:	003f2f06 	br	800189c <main+0x38>

08001be0 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 8001be0:	defff104 	addi	sp,sp,-60
 8001be4:	dfc00e15 	stw	ra,56(sp)
 8001be8:	df000d15 	stw	fp,52(sp)
 8001bec:	df000d04 	addi	fp,sp,52
 8001bf0:	2015883a 	mov	r10,r4
 8001bf4:	2813883a 	mov	r9,r5
 8001bf8:	3011883a 	mov	r8,r6
 8001bfc:	e1400217 	ldw	r5,8(fp)
 8001c00:	e1000317 	ldw	r4,12(fp)
 8001c04:	e0c00417 	ldw	r3,16(fp)
 8001c08:	e0800517 	ldw	r2,20(fp)
 8001c0c:	500d883a 	mov	r6,r10
 8001c10:	e1bffb05 	stb	r6,-20(fp)
 8001c14:	480d883a 	mov	r6,r9
 8001c18:	e1bffa05 	stb	r6,-24(fp)
 8001c1c:	400d883a 	mov	r6,r8
 8001c20:	e1bff905 	stb	r6,-28(fp)
 8001c24:	380d883a 	mov	r6,r7
 8001c28:	e1bff805 	stb	r6,-32(fp)
 8001c2c:	e17ff705 	stb	r5,-36(fp)
 8001c30:	e13ff605 	stb	r4,-40(fp)
 8001c34:	e0fff50d 	sth	r3,-44(fp)
 8001c38:	e0bff40d 	sth	r2,-48(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 8001c3c:	e03fff15 	stw	zero,-4(fp)
 BYTE datastage = 1; //request data stage present or absent
 8001c40:	00800044 	movi	r2,1
 8001c44:	e0bffec5 	stb	r2,-5(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 8001c48:	e0800617 	ldw	r2,24(fp)
 8001c4c:	1000011e 	bne	r2,zero,8001c54 <XferCtrlReq+0x74>
        datastage = 0;
 8001c50:	e03ffec5 	stb	zero,-5(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 8001c54:	e0bffb03 	ldbu	r2,-20(fp)
 8001c58:	100b883a 	mov	r5,r2
 8001c5c:	01003804 	movi	r4,224
 8001c60:	8000c500 	call	8000c50 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 8001c64:	e0bff903 	ldbu	r2,-28(fp)
 8001c68:	10803fcc 	andi	r2,r2,255
 8001c6c:	1080201c 	xori	r2,r2,128
 8001c70:	10bfe004 	addi	r2,r2,-128
 8001c74:	1000020e 	bge	r2,zero,8001c80 <XferCtrlReq+0xa0>
        direction = TRUE;                   		//determine request direction
 8001c78:	00800044 	movi	r2,1
 8001c7c:	e0bfff15 	stw	r2,-4(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8001c80:	e0bff903 	ldbu	r2,-28(fp)
 8001c84:	e0bffc85 	stb	r2,-14(fp)
    setup_pkt.bRequest = bRequest;
 8001c88:	e0bff803 	ldbu	r2,-32(fp)
 8001c8c:	e0bffcc5 	stb	r2,-13(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 8001c90:	e0bff703 	ldbu	r2,-36(fp)
 8001c94:	e0bffd05 	stb	r2,-12(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 8001c98:	e0bff603 	ldbu	r2,-40(fp)
 8001c9c:	e0bffd45 	stb	r2,-11(fp)
    setup_pkt.wIndex = wInd;
 8001ca0:	e0bff50b 	ldhu	r2,-44(fp)
 8001ca4:	e0bffd8d 	sth	r2,-10(fp)
    setup_pkt.wLength = nbytes;
 8001ca8:	e0bff40b 	ldhu	r2,-48(fp)
 8001cac:	e0bffe0d 	sth	r2,-8(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 8001cb0:	e0bffc84 	addi	r2,fp,-14
 8001cb4:	100d883a 	mov	r6,r2
 8001cb8:	01400204 	movi	r5,8
 8001cbc:	01000804 	movi	r4,32
 8001cc0:	8000ce00 	call	8000ce0 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 8001cc4:	e0bffa03 	ldbu	r2,-24(fp)
 8001cc8:	100b883a 	mov	r5,r2
 8001ccc:	01000404 	movi	r4,16
 8001cd0:	8001ea00 	call	8001ea0 <XferDispatchPkt>
 8001cd4:	e0bffe85 	stb	r2,-6(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 8001cd8:	e0bffe83 	ldbu	r2,-6(fp)
 8001cdc:	10000226 	beq	r2,zero,8001ce8 <XferCtrlReq+0x108>
        return( rcode );
 8001ce0:	e0bffe83 	ldbu	r2,-6(fp)
 8001ce4:	00000e06 	br	8001d20 <XferCtrlReq+0x140>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 8001ce8:	e0bffec3 	ldbu	r2,-5(fp)
 8001cec:	100690ba 	slli	r3,r2,2
 8001cf0:	d0a00104 	addi	r2,gp,-32764
 8001cf4:	1885883a 	add	r2,r3,r2
 8001cf8:	10800017 	ldw	r2,0(r2)
 8001cfc:	e13ffb03 	ldbu	r4,-20(fp)
 8001d00:	e17ffa03 	ldbu	r5,-24(fp)
 8001d04:	e1bff40b 	ldhu	r6,-48(fp)
 8001d08:	e0ffff17 	ldw	r3,-4(fp)
 8001d0c:	d8c00015 	stw	r3,0(sp)
 8001d10:	e1c00617 	ldw	r7,24(fp)
 8001d14:	103ee83a 	callr	r2
 8001d18:	e0bffe85 	stb	r2,-6(fp)
    return( rcode );
 8001d1c:	e0bffe83 	ldbu	r2,-6(fp)
}
 8001d20:	e037883a 	mov	sp,fp
 8001d24:	dfc00117 	ldw	ra,4(sp)
 8001d28:	df000017 	ldw	fp,0(sp)
 8001d2c:	dec00204 	addi	sp,sp,8
 8001d30:	f800283a 	ret

08001d34 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8001d34:	defff804 	addi	sp,sp,-32
 8001d38:	dfc00715 	stw	ra,28(sp)
 8001d3c:	df000615 	stw	fp,24(sp)
 8001d40:	df000604 	addi	fp,sp,24
 8001d44:	2005883a 	mov	r2,r4
 8001d48:	2809883a 	mov	r4,r5
 8001d4c:	3007883a 	mov	r3,r6
 8001d50:	e1fffb15 	stw	r7,-20(fp)
 8001d54:	e0bffe05 	stb	r2,-8(fp)
 8001d58:	2005883a 	mov	r2,r4
 8001d5c:	e0bffd05 	stb	r2,-12(fp)
 8001d60:	1805883a 	mov	r2,r3
 8001d64:	e0bffc0d 	sth	r2,-16(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 8001d68:	e0800217 	ldw	r2,8(fp)
 8001d6c:	10002626 	beq	r2,zero,8001e08 <XferCtrlData+0xd4>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8001d70:	e0bffe03 	ldbu	r2,-8(fp)
 8001d74:	100690fa 	slli	r3,r2,3
 8001d78:	00820074 	movhi	r2,2049
 8001d7c:	1885883a 	add	r2,r3,r2
 8001d80:	10db4717 	ldw	r3,27932(r2)
 8001d84:	e0bffd03 	ldbu	r2,-12(fp)
 8001d88:	100490fa 	slli	r2,r2,3
 8001d8c:	1885883a 	add	r2,r3,r2
 8001d90:	00c00804 	movi	r3,32
 8001d94:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 8001d98:	e13ffe03 	ldbu	r4,-8(fp)
 8001d9c:	e17ffd03 	ldbu	r5,-12(fp)
 8001da0:	e1bffc0b 	ldhu	r6,-16(fp)
 8001da4:	e0bffe03 	ldbu	r2,-8(fp)
 8001da8:	100690fa 	slli	r3,r2,3
 8001dac:	00820074 	movhi	r2,2049
 8001db0:	1885883a 	add	r2,r3,r2
 8001db4:	10db4717 	ldw	r3,27932(r2)
 8001db8:	e0bffd03 	ldbu	r2,-12(fp)
 8001dbc:	100490fa 	slli	r2,r2,3
 8001dc0:	1885883a 	add	r2,r3,r2
 8001dc4:	1080008b 	ldhu	r2,2(r2)
 8001dc8:	10803fcc 	andi	r2,r2,255
 8001dcc:	d8800015 	stw	r2,0(sp)
 8001dd0:	e1fffb17 	ldw	r7,-20(fp)
 8001dd4:	80020200 	call	8002020 <XferInTransfer>
 8001dd8:	e0bfffc5 	stb	r2,-1(fp)
        if( rcode ) {
 8001ddc:	e0bfffc3 	ldbu	r2,-1(fp)
 8001de0:	10000226 	beq	r2,zero,8001dec <XferCtrlData+0xb8>
        return( rcode );
 8001de4:	e0bfffc3 	ldbu	r2,-1(fp)
 8001de8:	00000806 	br	8001e0c <XferCtrlData+0xd8>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8001dec:	e0bffd03 	ldbu	r2,-12(fp)
 8001df0:	100b883a 	mov	r5,r2
 8001df4:	01002804 	movi	r4,160
 8001df8:	8001ea00 	call	8001ea0 <XferDispatchPkt>
 8001dfc:	e0bfffc5 	stb	r2,-1(fp)
        return( rcode );
 8001e00:	e0bfffc3 	ldbu	r2,-1(fp)
 8001e04:	00000106 	br	8001e0c <XferCtrlData+0xd8>
    }
    else {              //OUT not implemented
        return( 0xff );
 8001e08:	00bfffc4 	movi	r2,-1
    }
}
 8001e0c:	e037883a 	mov	sp,fp
 8001e10:	dfc00117 	ldw	ra,4(sp)
 8001e14:	df000017 	ldw	fp,0(sp)
 8001e18:	dec00204 	addi	sp,sp,8
 8001e1c:	f800283a 	ret

08001e20 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8001e20:	defff904 	addi	sp,sp,-28
 8001e24:	dfc00615 	stw	ra,24(sp)
 8001e28:	df000515 	stw	fp,20(sp)
 8001e2c:	df000504 	addi	fp,sp,20
 8001e30:	2005883a 	mov	r2,r4
 8001e34:	2809883a 	mov	r4,r5
 8001e38:	3007883a 	mov	r3,r6
 8001e3c:	e1fffb15 	stw	r7,-20(fp)
 8001e40:	e0bffe05 	stb	r2,-8(fp)
 8001e44:	2005883a 	mov	r2,r4
 8001e48:	e0bffd05 	stb	r2,-12(fp)
 8001e4c:	1805883a 	mov	r2,r3
 8001e50:	e0bffc0d 	sth	r2,-16(fp)
  BYTE rcode;
    if( direction ) { //GET
 8001e54:	e0800217 	ldw	r2,8(fp)
 8001e58:	10000626 	beq	r2,zero,8001e74 <XferCtrlND+0x54>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8001e5c:	e0bffd03 	ldbu	r2,-12(fp)
 8001e60:	100b883a 	mov	r5,r2
 8001e64:	01002804 	movi	r4,160
 8001e68:	8001ea00 	call	8001ea0 <XferDispatchPkt>
 8001e6c:	e0bfffc5 	stb	r2,-1(fp)
 8001e70:	00000506 	br	8001e88 <XferCtrlND+0x68>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 8001e74:	e0bffd03 	ldbu	r2,-12(fp)
 8001e78:	100b883a 	mov	r5,r2
 8001e7c:	01002004 	movi	r4,128
 8001e80:	8001ea00 	call	8001ea0 <XferDispatchPkt>
 8001e84:	e0bfffc5 	stb	r2,-1(fp)
    }
    return( rcode );
 8001e88:	e0bfffc3 	ldbu	r2,-1(fp)
}
 8001e8c:	e037883a 	mov	sp,fp
 8001e90:	dfc00117 	ldw	ra,4(sp)
 8001e94:	df000017 	ldw	fp,0(sp)
 8001e98:	dec00204 	addi	sp,sp,8
 8001e9c:	f800283a 	ret

08001ea0 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 8001ea0:	defff904 	addi	sp,sp,-28
 8001ea4:	dfc00615 	stw	ra,24(sp)
 8001ea8:	df000515 	stw	fp,20(sp)
 8001eac:	df000504 	addi	fp,sp,20
 8001eb0:	2005883a 	mov	r2,r4
 8001eb4:	2807883a 	mov	r3,r5
 8001eb8:	e0bffc05 	stb	r2,-16(fp)
 8001ebc:	1805883a 	mov	r2,r3
 8001ec0:	e0bffb05 	stb	r2,-20(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001ec4:	d0a72717 	ldw	r2,-25444(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 8001ec8:	0140fa04 	movi	r5,1000
 8001ecc:	1009883a 	mov	r4,r2
 8001ed0:	8002c500 	call	8002c50 <__mulsi3>
 8001ed4:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
 8001ed8:	d0a72617 	ldw	r2,-25448(gp)
 8001edc:	100b883a 	mov	r5,r2
 8001ee0:	1809883a 	mov	r4,r3
 8001ee4:	8002b900 	call	8002b90 <__udivsi3>
 8001ee8:	1084e204 	addi	r2,r2,5000
 8001eec:	e0bffe15 	stw	r2,-8(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 8001ef0:	e03fff85 	stb	zero,-2(fp)
 BYTE nak_count = 0;
 8001ef4:	e03fff45 	stb	zero,-3(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 8001ef8:	e0fffc03 	ldbu	r3,-16(fp)
 8001efc:	e0bffb03 	ldbu	r2,-20(fp)
 8001f00:	1884b03a 	or	r2,r3,r2
 8001f04:	10803fcc 	andi	r2,r2,255
 8001f08:	100b883a 	mov	r5,r2
 8001f0c:	01003c04 	movi	r4,240
 8001f10:	8000c500 	call	8000c50 <MAXreg_wr>
        rcode = 0xff;
 8001f14:	00bfffc4 	movi	r2,-1
 8001f18:	e0bfffc5 	stb	r2,-1(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8001f1c:	00000d06 	br	8001f54 <XferDispatchPkt+0xb4>
            tmpdata = MAXreg_rd( rHIRQ );
 8001f20:	01003204 	movi	r4,200
 8001f24:	8000e3c0 	call	8000e3c <MAXreg_rd>
 8001f28:	e0bffdc5 	stb	r2,-9(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 8001f2c:	e0bffdc3 	ldbu	r2,-9(fp)
 8001f30:	10803fcc 	andi	r2,r2,255
 8001f34:	1080201c 	xori	r2,r2,128
 8001f38:	10bfe004 	addi	r2,r2,-128
 8001f3c:	1000050e 	bge	r2,zero,8001f54 <XferDispatchPkt+0xb4>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 8001f40:	01402004 	movi	r5,128
 8001f44:	01003204 	movi	r4,200
 8001f48:	8000c500 	call	8000c50 <MAXreg_wr>
                rcode = 0x00;
 8001f4c:	e03fffc5 	stb	zero,-1(fp)
                break;
 8001f50:	00000c06 	br	8001f84 <XferDispatchPkt+0xe4>
  return _alt_nticks;
 8001f54:	d0a72717 	ldw	r2,-25444(gp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8001f58:	0140fa04 	movi	r5,1000
 8001f5c:	1009883a 	mov	r4,r2
 8001f60:	8002c500 	call	8002c50 <__mulsi3>
 8001f64:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
 8001f68:	d0a72617 	ldw	r2,-25448(gp)
 8001f6c:	100b883a 	mov	r5,r2
 8001f70:	1809883a 	mov	r4,r3
 8001f74:	8002b900 	call	8002b90 <__udivsi3>
 8001f78:	1007883a 	mov	r3,r2
 8001f7c:	e0bffe17 	ldw	r2,-8(fp)
 8001f80:	18bfe736 	bltu	r3,r2,8001f20 <XferDispatchPkt+0x80>
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 8001f84:	e0bfffc3 	ldbu	r2,-1(fp)
 8001f88:	10000226 	beq	r2,zero,8001f94 <XferDispatchPkt+0xf4>
            return( rcode );
 8001f8c:	e0bfffc3 	ldbu	r2,-1(fp)
 8001f90:	00001e06 	br	800200c <XferDispatchPkt+0x16c>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 8001f94:	01003e04 	movi	r4,248
 8001f98:	8000e3c0 	call	8000e3c <MAXreg_rd>
 8001f9c:	108003cc 	andi	r2,r2,15
 8001fa0:	e0bfffc5 	stb	r2,-1(fp)
        if( rcode == hrNAK ) {
 8001fa4:	e0bfffc3 	ldbu	r2,-1(fp)
 8001fa8:	10800118 	cmpnei	r2,r2,4
 8001fac:	1000071e 	bne	r2,zero,8001fcc <XferDispatchPkt+0x12c>
            nak_count++;
 8001fb0:	e0bfff43 	ldbu	r2,-3(fp)
 8001fb4:	10800044 	addi	r2,r2,1
 8001fb8:	e0bfff45 	stb	r2,-3(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 8001fbc:	e0bfff43 	ldbu	r2,-3(fp)
 8001fc0:	10803218 	cmpnei	r2,r2,200
 8001fc4:	10000b1e 	bne	r2,zero,8001ff4 <XferDispatchPkt+0x154>
                break;
 8001fc8:	00000f06 	br	8002008 <XferDispatchPkt+0x168>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 8001fcc:	e0bfffc3 	ldbu	r2,-1(fp)
 8001fd0:	10800398 	cmpnei	r2,r2,14
 8001fd4:	1000091e 	bne	r2,zero,8001ffc <XferDispatchPkt+0x15c>
            retry_count++;
 8001fd8:	e0bfff83 	ldbu	r2,-2(fp)
 8001fdc:	10800044 	addi	r2,r2,1
 8001fe0:	e0bfff85 	stb	r2,-2(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 8001fe4:	e0bfff87 	ldb	r2,-2(fp)
 8001fe8:	108000d8 	cmpnei	r2,r2,3
 8001fec:	10000526 	beq	r2,zero,8002004 <XferDispatchPkt+0x164>
                break;
            }
            else {
                continue;
 8001ff0:	00000106 	br	8001ff8 <XferDispatchPkt+0x158>
                continue;
 8001ff4:	0001883a 	nop
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 8001ff8:	003fbf06 	br	8001ef8 <XferDispatchPkt+0x58>
            }
        }
        else break;
 8001ffc:	0001883a 	nop
 8002000:	00000106 	br	8002008 <XferDispatchPkt+0x168>
                break;
 8002004:	0001883a 	nop
    }//while( 1 )
    return( rcode );
 8002008:	e0bfffc3 	ldbu	r2,-1(fp)
}
 800200c:	e037883a 	mov	sp,fp
 8002010:	dfc00117 	ldw	ra,4(sp)
 8002014:	df000017 	ldw	fp,0(sp)
 8002018:	dec00204 	addi	sp,sp,8
 800201c:	f800283a 	ret

08002020 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 8002020:	defff804 	addi	sp,sp,-32
 8002024:	dfc00715 	stw	ra,28(sp)
 8002028:	df000615 	stw	fp,24(sp)
 800202c:	df000604 	addi	fp,sp,24
 8002030:	2007883a 	mov	r3,r4
 8002034:	3009883a 	mov	r4,r6
 8002038:	e1fffb15 	stw	r7,-20(fp)
 800203c:	e0800217 	ldw	r2,8(fp)
 8002040:	e0fffe05 	stb	r3,-8(fp)
 8002044:	2807883a 	mov	r3,r5
 8002048:	e0fffd05 	stb	r3,-12(fp)
 800204c:	2007883a 	mov	r3,r4
 8002050:	e0fffc0d 	sth	r3,-16(fp)
 8002054:	e0bffa05 	stb	r2,-24(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 8002058:	e03fff8d 	sth	zero,-2(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 800205c:	e0bffe03 	ldbu	r2,-8(fp)
 8002060:	100690fa 	slli	r3,r2,3
 8002064:	00820074 	movhi	r2,2049
 8002068:	1885883a 	add	r2,r3,r2
 800206c:	10db4717 	ldw	r3,27932(r2)
 8002070:	e0bffd03 	ldbu	r2,-12(fp)
 8002074:	100490fa 	slli	r2,r2,3
 8002078:	1885883a 	add	r2,r3,r2
 800207c:	10800183 	ldbu	r2,6(r2)
 8002080:	10803fcc 	andi	r2,r2,255
 8002084:	100b883a 	mov	r5,r2
 8002088:	01003a04 	movi	r4,232
 800208c:	8000c500 	call	8000c50 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8002090:	e0bffd03 	ldbu	r2,-12(fp)
 8002094:	100b883a 	mov	r5,r2
 8002098:	0009883a 	mov	r4,zero
 800209c:	8001ea00 	call	8001ea0 <XferDispatchPkt>
 80020a0:	e0bfff45 	stb	r2,-3(fp)
        if( rcode ) {
 80020a4:	e0bfff43 	ldbu	r2,-3(fp)
 80020a8:	10000226 	beq	r2,zero,80020b4 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 80020ac:	e0bfff43 	ldbu	r2,-3(fp)
 80020b0:	00003806 	br	8002194 <XferInTransfer+0x174>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 80020b4:	01003204 	movi	r4,200
 80020b8:	8000e3c0 	call	8000e3c <MAXreg_rd>
 80020bc:	10803fcc 	andi	r2,r2,255
 80020c0:	1080010c 	andi	r2,r2,4
 80020c4:	1000021e 	bne	r2,zero,80020d0 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 80020c8:	00bffc04 	movi	r2,-16
 80020cc:	00003106 	br	8002194 <XferInTransfer+0x174>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 80020d0:	01000c04 	movi	r4,48
 80020d4:	8000e3c0 	call	8000e3c <MAXreg_rd>
 80020d8:	e0bfff05 	stb	r2,-4(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 80020dc:	e0bfff03 	ldbu	r2,-4(fp)
 80020e0:	e1bffb17 	ldw	r6,-20(fp)
 80020e4:	100b883a 	mov	r5,r2
 80020e8:	01000204 	movi	r4,8
 80020ec:	8000ebc0 	call	8000ebc <MAXbytes_rd>
 80020f0:	e0bffb15 	stw	r2,-20(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 80020f4:	01400104 	movi	r5,4
 80020f8:	01003204 	movi	r4,200
 80020fc:	8000c500 	call	8000c50 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 8002100:	e0bfff03 	ldbu	r2,-4(fp)
 8002104:	e0ffff8b 	ldhu	r3,-2(fp)
 8002108:	1885883a 	add	r2,r3,r2
 800210c:	e0bfff8d 	sth	r2,-2(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 8002110:	e0ffff03 	ldbu	r3,-4(fp)
 8002114:	e0bffa03 	ldbu	r2,-24(fp)
 8002118:	18800336 	bltu	r3,r2,8002128 <XferInTransfer+0x108>
 800211c:	e0ffff8b 	ldhu	r3,-2(fp)
 8002120:	e0bffc0b 	ldhu	r2,-16(fp)
 8002124:	18bfda36 	bltu	r3,r2,8002090 <XferInTransfer+0x70>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 8002128:	01003e04 	movi	r4,248
 800212c:	8000e3c0 	call	8000e3c <MAXreg_rd>
 8002130:	10803fcc 	andi	r2,r2,255
 8002134:	1080040c 	andi	r2,r2,16
 8002138:	10000b26 	beq	r2,zero,8002168 <XferInTransfer+0x148>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 800213c:	e0bffe03 	ldbu	r2,-8(fp)
 8002140:	100690fa 	slli	r3,r2,3
 8002144:	00820074 	movhi	r2,2049
 8002148:	1885883a 	add	r2,r3,r2
 800214c:	10db4717 	ldw	r3,27932(r2)
 8002150:	e0bffd03 	ldbu	r2,-12(fp)
 8002154:	100490fa 	slli	r2,r2,3
 8002158:	1885883a 	add	r2,r3,r2
 800215c:	00c00804 	movi	r3,32
 8002160:	10c00185 	stb	r3,6(r2)
 8002164:	00000a06 	br	8002190 <XferInTransfer+0x170>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 8002168:	e0bffe03 	ldbu	r2,-8(fp)
 800216c:	100690fa 	slli	r3,r2,3
 8002170:	00820074 	movhi	r2,2049
 8002174:	1885883a 	add	r2,r3,r2
 8002178:	10db4717 	ldw	r3,27932(r2)
 800217c:	e0bffd03 	ldbu	r2,-12(fp)
 8002180:	100490fa 	slli	r2,r2,3
 8002184:	1885883a 	add	r2,r3,r2
 8002188:	00c00404 	movi	r3,16
 800218c:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 8002190:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 8002194:	e037883a 	mov	sp,fp
 8002198:	dfc00117 	ldw	ra,4(sp)
 800219c:	df000017 	ldw	fp,0(sp)
 80021a0:	dec00204 	addi	sp,sp,8
 80021a4:	f800283a 	ret

080021a8 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 80021a8:	defffe04 	addi	sp,sp,-8
 80021ac:	df000115 	stw	fp,4(sp)
 80021b0:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 80021b4:	e03fffc5 	stb	zero,-1(fp)
 80021b8:	00000d06 	br	80021f0 <USB_init+0x48>
        devtable[ i ].epinfo = NULL;       //clear device table
 80021bc:	e0bfffc3 	ldbu	r2,-1(fp)
 80021c0:	100690fa 	slli	r3,r2,3
 80021c4:	00820074 	movhi	r2,2049
 80021c8:	1885883a 	add	r2,r3,r2
 80021cc:	101b4715 	stw	zero,27932(r2)
        devtable[ i ].devclass = 0;
 80021d0:	e0bfffc3 	ldbu	r2,-1(fp)
 80021d4:	100690fa 	slli	r3,r2,3
 80021d8:	00820074 	movhi	r2,2049
 80021dc:	1885883a 	add	r2,r3,r2
 80021e0:	101b4805 	stb	zero,27936(r2)
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 80021e4:	e0bfffc3 	ldbu	r2,-1(fp)
 80021e8:	10800044 	addi	r2,r2,1
 80021ec:	e0bfffc5 	stb	r2,-1(fp)
 80021f0:	e0bfffc3 	ldbu	r2,-1(fp)
 80021f4:	10800270 	cmpltui	r2,r2,9
 80021f8:	103ff01e 	bne	r2,zero,80021bc <USB_init+0x14>
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 80021fc:	d0e71904 	addi	r3,gp,-25500
 8002200:	00820074 	movhi	r2,2049
 8002204:	10db4715 	stw	r3,27932(r2)
    dev0ep.MaxPktSize = 0;
 8002208:	d027198d 	sth	zero,-25498(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 800220c:	00801004 	movi	r2,64
 8002210:	d0a71a45 	stb	r2,-25495(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 8002214:	00800404 	movi	r2,16
 8002218:	d0a71a85 	stb	r2,-25494(gp)
}
 800221c:	0001883a 	nop
 8002220:	e037883a 	mov	sp,fp
 8002224:	df000017 	ldw	fp,0(sp)
 8002228:	dec00104 	addi	sp,sp,4
 800222c:	f800283a 	ret

08002230 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 8002230:	deffb204 	addi	sp,sp,-312
 8002234:	dfc04d15 	stw	ra,308(sp)
 8002238:	df004c15 	stw	fp,304(sp)
 800223c:	dc004b15 	stw	r16,300(sp)
 8002240:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8002244:	d0a00303 	ldbu	r2,-32756(gp)
 8002248:	10803fcc 	andi	r2,r2,255
 800224c:	10803c0c 	andi	r2,r2,240
 8002250:	10c03fe0 	cmpeqi	r3,r2,255
 8002254:	1801781e 	bne	r3,zero,8002838 <USB_Task+0x608>
 8002258:	10c04008 	cmpgei	r3,r2,256
 800225c:	1801781e 	bne	r3,zero,8002840 <USB_Task+0x610>
 8002260:	10c01020 	cmpeqi	r3,r2,64
 8002264:	1801781e 	bne	r3,zero,8002848 <USB_Task+0x618>
 8002268:	10c01048 	cmpgei	r3,r2,65
 800226c:	1801741e 	bne	r3,zero,8002840 <USB_Task+0x610>
 8002270:	10c00c20 	cmpeqi	r3,r2,48
 8002274:	1801491e 	bne	r3,zero,800279c <USB_Task+0x56c>
 8002278:	10c00c48 	cmpgei	r3,r2,49
 800227c:	1801701e 	bne	r3,zero,8002840 <USB_Task+0x610>
 8002280:	10c00820 	cmpeqi	r3,r2,32
 8002284:	18010a1e 	bne	r3,zero,80026b0 <USB_Task+0x480>
 8002288:	10c00848 	cmpgei	r3,r2,33
 800228c:	18016c1e 	bne	r3,zero,8002840 <USB_Task+0x610>
 8002290:	10000326 	beq	r2,zero,80022a0 <USB_Task+0x70>
 8002294:	10800420 	cmpeqi	r2,r2,16
 8002298:	1000161e 	bne	r2,zero,80022f4 <USB_Task+0xc4>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 800229c:	00016806 	br	8002840 <USB_Task+0x610>
            switch( usb_task_state ) {
 80022a0:	d0a00303 	ldbu	r2,-32756(gp)
 80022a4:	10803fcc 	andi	r2,r2,255
 80022a8:	10c00120 	cmpeqi	r3,r2,4
 80022ac:	18000f1e 	bne	r3,zero,80022ec <USB_Task+0xbc>
 80022b0:	10c00148 	cmpgei	r3,r2,5
 80022b4:	1801661e 	bne	r3,zero,8002850 <USB_Task+0x620>
 80022b8:	10c00060 	cmpeqi	r3,r2,1
 80022bc:	1800031e 	bne	r3,zero,80022cc <USB_Task+0x9c>
 80022c0:	108000e0 	cmpeqi	r2,r2,3
 80022c4:	1000051e 	bne	r2,zero,80022dc <USB_Task+0xac>
            break;//( USB_STATE_DETACHED ):
 80022c8:	00016106 	br	8002850 <USB_Task+0x620>
                    USB_init();
 80022cc:	80021a80 	call	80021a8 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 80022d0:	008000c4 	movi	r2,3
 80022d4:	d0a00305 	stb	r2,-32756(gp)
                    break;
 80022d8:	00000506 	br	80022f0 <USB_Task+0xc0>
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 80022dc:	01400104 	movi	r5,4
 80022e0:	01003a04 	movi	r4,232
 80022e4:	8000c500 	call	8000c50 <MAXreg_wr>
                    break;
 80022e8:	00000106 	br	80022f0 <USB_Task+0xc0>
                    break;
 80022ec:	0001883a 	nop
            break;//( USB_STATE_DETACHED ):
 80022f0:	00015706 	br	8002850 <USB_Task+0x620>
            switch( usb_task_state ) {
 80022f4:	d0a00303 	ldbu	r2,-32756(gp)
 80022f8:	10803fcc 	andi	r2,r2,255
 80022fc:	10bffc04 	addi	r2,r2,-16
 8002300:	10c001a8 	cmpgeui	r3,r2,6
 8002304:	1801541e 	bne	r3,zero,8002858 <USB_Task+0x628>
 8002308:	100690ba 	slli	r3,r2,2
 800230c:	00820034 	movhi	r2,2048
 8002310:	1885883a 	add	r2,r3,r2
 8002314:	1088c717 	ldw	r2,8988(r2)
 8002318:	1000683a 	jmp	r2
 800231c:	08002334 	orhi	zero,at,140
 8002320:	0800236c 	andhi	zero,at,141
 8002324:	080023a8 	cmpgeui	zero,at,142
 8002328:	080023cc 	andi	zero,at,143
 800232c:	0800240c 	andi	zero,at,144
 8002330:	08002420 	cmpeqi	zero,at,144
  return _alt_nticks;
 8002334:	d0a72717 	ldw	r2,-25444(gp)
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 8002338:	0140fa04 	movi	r5,1000
 800233c:	1009883a 	mov	r4,r2
 8002340:	8002c500 	call	8002c50 <__mulsi3>
 8002344:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
 8002348:	d0a72617 	ldw	r2,-25448(gp)
 800234c:	100b883a 	mov	r5,r2
 8002350:	1809883a 	mov	r4,r3
 8002354:	8002b900 	call	8002b90 <__udivsi3>
 8002358:	10803204 	addi	r2,r2,200
 800235c:	d0a71c15 	stw	r2,-25488(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8002360:	00800444 	movi	r2,17
 8002364:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_STATE_ATTACHED )
 8002368:	0000d006 	br	80026ac <USB_Task+0x47c>
  return _alt_nticks;
 800236c:	d0a72717 	ldw	r2,-25444(gp)
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 8002370:	0140fa04 	movi	r5,1000
 8002374:	1009883a 	mov	r4,r2
 8002378:	8002c500 	call	8002c50 <__mulsi3>
 800237c:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
 8002380:	d0a72617 	ldw	r2,-25448(gp)
 8002384:	100b883a 	mov	r5,r2
 8002388:	1809883a 	mov	r4,r3
 800238c:	8002b900 	call	8002b90 <__udivsi3>
 8002390:	1007883a 	mov	r3,r2
 8002394:	d0a71c17 	ldw	r2,-25488(gp)
 8002398:	10c0c12e 	bgeu	r2,r3,80026a0 <USB_Task+0x470>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 800239c:	00800484 	movi	r2,18
 80023a0:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 80023a4:	0000be06 	br	80026a0 <USB_Task+0x470>
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 80023a8:	01400044 	movi	r5,1
 80023ac:	01003204 	movi	r4,200
 80023b0:	8000c500 	call	8000c50 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 80023b4:	01400044 	movi	r5,1
 80023b8:	01003a04 	movi	r4,232
 80023bc:	8000c500 	call	8000c50 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 80023c0:	008004c4 	movi	r2,19
 80023c4:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 80023c8:	0000b806 	br	80026ac <USB_Task+0x47c>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 80023cc:	01003a04 	movi	r4,232
 80023d0:	8000e3c0 	call	8000e3c <MAXreg_rd>
 80023d4:	10803fcc 	andi	r2,r2,255
 80023d8:	1080004c 	andi	r2,r2,1
 80023dc:	1000b21e 	bne	r2,zero,80026a8 <USB_Task+0x478>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 80023e0:	01003604 	movi	r4,216
 80023e4:	8000e3c0 	call	8000e3c <MAXreg_rd>
 80023e8:	10800214 	ori	r2,r2,8
 80023ec:	e0bffe45 	stb	r2,-7(fp)
                        MAXreg_wr( rMODE, tmpdata );
 80023f0:	e0bffe43 	ldbu	r2,-7(fp)
 80023f4:	100b883a 	mov	r5,r2
 80023f8:	01003604 	movi	r4,216
 80023fc:	8000c500 	call	8000c50 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 8002400:	00800504 	movi	r2,20
 8002404:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8002408:	0000a706 	br	80026a8 <USB_Task+0x478>
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 800240c:	01003204 	movi	r4,200
 8002410:	8000e3c0 	call	8000e3c <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 8002414:	00800544 	movi	r2,21
 8002418:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 800241c:	0000a306 	br	80026ac <USB_Task+0x47c>
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 8002420:	00820074 	movhi	r2,2049
 8002424:	109b4717 	ldw	r2,27932(r2)
 8002428:	00c00204 	movi	r3,8
 800242c:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 8002430:	e0bff984 	addi	r2,fp,-26
 8002434:	d8800415 	stw	r2,16(sp)
 8002438:	00800204 	movi	r2,8
 800243c:	d8800315 	stw	r2,12(sp)
 8002440:	d8000215 	stw	zero,8(sp)
 8002444:	00800044 	movi	r2,1
 8002448:	d8800115 	stw	r2,4(sp)
 800244c:	d8000015 	stw	zero,0(sp)
 8002450:	01c00184 	movi	r7,6
 8002454:	01802004 	movi	r6,128
 8002458:	000b883a 	mov	r5,zero
 800245c:	0009883a 	mov	r4,zero
 8002460:	8001be00 	call	8001be0 <XferCtrlReq>
 8002464:	e0bffe85 	stb	r2,-6(fp)
                    if( rcode == 0 ) {
 8002468:	e0bffe83 	ldbu	r2,-6(fp)
 800246c:	1000851e 	bne	r2,zero,8002684 <USB_Task+0x454>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 8002470:	e0fffb43 	ldbu	r3,-19(fp)
 8002474:	00820074 	movhi	r2,2049
 8002478:	109b4717 	ldw	r2,27932(r2)
 800247c:	18c03fcc 	andi	r3,r3,255
 8002480:	10c0008d 	sth	r3,2(r2)
                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 8002484:	e0bff983 	ldbu	r2,-26(fp)
 8002488:	10803fcc 	andi	r2,r2,255
 800248c:	e0fff984 	addi	r3,fp,-26
 8002490:	d8c00415 	stw	r3,16(sp)
 8002494:	d8800315 	stw	r2,12(sp)
 8002498:	d8000215 	stw	zero,8(sp)
 800249c:	00800044 	movi	r2,1
 80024a0:	d8800115 	stw	r2,4(sp)
 80024a4:	d8000015 	stw	zero,0(sp)
 80024a8:	01c00184 	movi	r7,6
 80024ac:	01802004 	movi	r6,128
 80024b0:	000b883a 	mov	r5,zero
 80024b4:	0009883a 	mov	r4,zero
 80024b8:	8001be00 	call	8001be0 <XferCtrlReq>
 80024bc:	e0bffe85 	stb	r2,-6(fp)
                        if (buf.iManufacturer != 0)
 80024c0:	e0bffd03 	ldbu	r2,-12(fp)
 80024c4:	10803fcc 	andi	r2,r2,255
 80024c8:	10003426 	beq	r2,zero,800259c <USB_Task+0x36c>
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 80024cc:	e0bffd03 	ldbu	r2,-12(fp)
 80024d0:	10803fcc 	andi	r2,r2,255
 80024d4:	e0ffb984 	addi	r3,fp,-282
 80024d8:	d8c00415 	stw	r3,16(sp)
 80024dc:	00c00084 	movi	r3,2
 80024e0:	d8c00315 	stw	r3,12(sp)
 80024e4:	00c10244 	movi	r3,1033
 80024e8:	d8c00215 	stw	r3,8(sp)
 80024ec:	00c000c4 	movi	r3,3
 80024f0:	d8c00115 	stw	r3,4(sp)
 80024f4:	d8800015 	stw	r2,0(sp)
 80024f8:	01c00184 	movi	r7,6
 80024fc:	01802004 	movi	r6,128
 8002500:	000b883a 	mov	r5,zero
 8002504:	0009883a 	mov	r4,zero
 8002508:	8001be00 	call	8001be0 <XferCtrlReq>
 800250c:	e0bffe85 	stb	r2,-6(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8002510:	e0bffd03 	ldbu	r2,-12(fp)
 8002514:	10803fcc 	andi	r2,r2,255
 8002518:	e0ffb983 	ldbu	r3,-282(fp)
 800251c:	18c03fcc 	andi	r3,r3,255
 8002520:	e13fb984 	addi	r4,fp,-282
 8002524:	d9000415 	stw	r4,16(sp)
 8002528:	d8c00315 	stw	r3,12(sp)
 800252c:	00c10244 	movi	r3,1033
 8002530:	d8c00215 	stw	r3,8(sp)
 8002534:	00c000c4 	movi	r3,3
 8002538:	d8c00115 	stw	r3,4(sp)
 800253c:	d8800015 	stw	r2,0(sp)
 8002540:	01c00184 	movi	r7,6
 8002544:	01802004 	movi	r6,128
 8002548:	000b883a 	mov	r5,zero
 800254c:	0009883a 	mov	r4,zero
 8002550:	8001be00 	call	8001be0 <XferCtrlReq>
 8002554:	e0bffe85 	stb	r2,-6(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 8002558:	e0bffd03 	ldbu	r2,-12(fp)
 800255c:	14003fcc 	andi	r16,r2,255
 8002560:	e0bfb983 	ldbu	r2,-282(fp)
 8002564:	10803fcc 	andi	r2,r2,255
 8002568:	1004d07a 	srli	r2,r2,1
 800256c:	10bfffc4 	addi	r2,r2,-1
 8002570:	10c03fcc 	andi	r3,r2,255
 8002574:	e0bfb984 	addi	r2,fp,-282
 8002578:	10800084 	addi	r2,r2,2
 800257c:	180b883a 	mov	r5,r3
 8002580:	1009883a 	mov	r4,r2
 8002584:	8002a180 	call	8002a18 <ConvUTF8ToStr>
 8002588:	100d883a 	mov	r6,r2
 800258c:	800b883a 	mov	r5,r16
 8002590:	01020074 	movhi	r4,2049
 8002594:	210b3d04 	addi	r4,r4,11508
 8002598:	8002ca80 	call	8002ca8 <printf>
                		if (buf.iProduct != 0)
 800259c:	e0bffd43 	ldbu	r2,-11(fp)
 80025a0:	10803fcc 	andi	r2,r2,255
 80025a4:	10003426 	beq	r2,zero,8002678 <USB_Task+0x448>
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 80025a8:	e0bffd43 	ldbu	r2,-11(fp)
 80025ac:	10803fcc 	andi	r2,r2,255
 80025b0:	e0ffb984 	addi	r3,fp,-282
 80025b4:	d8c00415 	stw	r3,16(sp)
 80025b8:	00c00084 	movi	r3,2
 80025bc:	d8c00315 	stw	r3,12(sp)
 80025c0:	00c10244 	movi	r3,1033
 80025c4:	d8c00215 	stw	r3,8(sp)
 80025c8:	00c000c4 	movi	r3,3
 80025cc:	d8c00115 	stw	r3,4(sp)
 80025d0:	d8800015 	stw	r2,0(sp)
 80025d4:	01c00184 	movi	r7,6
 80025d8:	01802004 	movi	r6,128
 80025dc:	000b883a 	mov	r5,zero
 80025e0:	0009883a 	mov	r4,zero
 80025e4:	8001be00 	call	8001be0 <XferCtrlReq>
 80025e8:	e0bffe85 	stb	r2,-6(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 80025ec:	e0bffd43 	ldbu	r2,-11(fp)
 80025f0:	10803fcc 	andi	r2,r2,255
 80025f4:	e0ffb983 	ldbu	r3,-282(fp)
 80025f8:	18c03fcc 	andi	r3,r3,255
 80025fc:	e13fb984 	addi	r4,fp,-282
 8002600:	d9000415 	stw	r4,16(sp)
 8002604:	d8c00315 	stw	r3,12(sp)
 8002608:	00c10244 	movi	r3,1033
 800260c:	d8c00215 	stw	r3,8(sp)
 8002610:	00c000c4 	movi	r3,3
 8002614:	d8c00115 	stw	r3,4(sp)
 8002618:	d8800015 	stw	r2,0(sp)
 800261c:	01c00184 	movi	r7,6
 8002620:	01802004 	movi	r6,128
 8002624:	000b883a 	mov	r5,zero
 8002628:	0009883a 	mov	r4,zero
 800262c:	8001be00 	call	8001be0 <XferCtrlReq>
 8002630:	e0bffe85 	stb	r2,-6(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 8002634:	e0bffd43 	ldbu	r2,-11(fp)
 8002638:	14003fcc 	andi	r16,r2,255
 800263c:	e0bfb983 	ldbu	r2,-282(fp)
 8002640:	10803fcc 	andi	r2,r2,255
 8002644:	1004d07a 	srli	r2,r2,1
 8002648:	10bfffc4 	addi	r2,r2,-1
 800264c:	10c03fcc 	andi	r3,r2,255
 8002650:	e0bfb984 	addi	r2,fp,-282
 8002654:	10800084 	addi	r2,r2,2
 8002658:	180b883a 	mov	r5,r3
 800265c:	1009883a 	mov	r4,r2
 8002660:	8002a180 	call	8002a18 <ConvUTF8ToStr>
 8002664:	100d883a 	mov	r6,r2
 8002668:	800b883a 	mov	r5,r16
 800266c:	01020074 	movhi	r4,2049
 8002670:	210b4304 	addi	r4,r4,11532
 8002674:	8002ca80 	call	8002ca8 <printf>
                        usb_task_state = USB_STATE_ADDRESSING;
 8002678:	00800804 	movi	r2,32
 800267c:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 8002680:	00000a06 	br	80026ac <USB_Task+0x47c>
                        usb_error = rcode;
 8002684:	e0bffe83 	ldbu	r2,-6(fp)
 8002688:	d0a71b05 	stb	r2,-25492(gp)
                        last_usb_task_state = usb_task_state;
 800268c:	d0a00303 	ldbu	r2,-32756(gp)
 8002690:	d0a71b45 	stb	r2,-25491(gp)
                        usb_task_state = USB_STATE_ERROR;
 8002694:	00bfffc4 	movi	r2,-1
 8002698:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 800269c:	00000306 	br	80026ac <USB_Task+0x47c>
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 80026a0:	0001883a 	nop
 80026a4:	00006c06 	br	8002858 <USB_Task+0x628>
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 80026a8:	0001883a 	nop
            break;//case ( USB_STATE_ATTACHED )
 80026ac:	00006a06 	br	8002858 <USB_Task+0x628>
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 80026b0:	00800044 	movi	r2,1
 80026b4:	e0bffec5 	stb	r2,-5(fp)
 80026b8:	00002a06 	br	8002764 <USB_Task+0x534>
                if( devtable[ i ].epinfo == NULL ) {
 80026bc:	e0bffec3 	ldbu	r2,-5(fp)
 80026c0:	100690fa 	slli	r3,r2,3
 80026c4:	00820074 	movhi	r2,2049
 80026c8:	1885883a 	add	r2,r3,r2
 80026cc:	109b4717 	ldw	r2,27932(r2)
 80026d0:	1000211e 	bne	r2,zero,8002758 <USB_Task+0x528>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 80026d4:	e0bffec3 	ldbu	r2,-5(fp)
 80026d8:	00c20074 	movhi	r3,2049
 80026dc:	18db4717 	ldw	r3,27932(r3)
 80026e0:	100890fa 	slli	r4,r2,3
 80026e4:	00820074 	movhi	r2,2049
 80026e8:	2085883a 	add	r2,r4,r2
 80026ec:	10db4715 	stw	r3,27932(r2)
                    rcode = XferSetAddr( 0, 0, i );
 80026f0:	e0bffec3 	ldbu	r2,-5(fp)
 80026f4:	d8000415 	stw	zero,16(sp)
 80026f8:	d8000315 	stw	zero,12(sp)
 80026fc:	d8000215 	stw	zero,8(sp)
 8002700:	d8000115 	stw	zero,4(sp)
 8002704:	d8800015 	stw	r2,0(sp)
 8002708:	01c00144 	movi	r7,5
 800270c:	000d883a 	mov	r6,zero
 8002710:	000b883a 	mov	r5,zero
 8002714:	0009883a 	mov	r4,zero
 8002718:	8001be00 	call	8001be0 <XferCtrlReq>
 800271c:	e0bffe85 	stb	r2,-6(fp)
                    if( rcode == 0 ) {
 8002720:	e0bffe83 	ldbu	r2,-6(fp)
 8002724:	1000051e 	bne	r2,zero,800273c <USB_Task+0x50c>
                        tmp_addr = i;
 8002728:	e0bffec3 	ldbu	r2,-5(fp)
 800272c:	d0a71d05 	stb	r2,-25484(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 8002730:	00800c04 	movi	r2,48
 8002734:	d0a00305 	stb	r2,-32756(gp)
                    break;  //break if address assigned or error occurred during address assignment attempt
 8002738:	00000d06 	br	8002770 <USB_Task+0x540>
                        usb_error = rcode;          //set address error
 800273c:	e0bffe83 	ldbu	r2,-6(fp)
 8002740:	d0a71b05 	stb	r2,-25492(gp)
                        last_usb_task_state = usb_task_state;
 8002744:	d0a00303 	ldbu	r2,-32756(gp)
 8002748:	d0a71b45 	stb	r2,-25491(gp)
                        usb_task_state = USB_STATE_ERROR;
 800274c:	00bfffc4 	movi	r2,-1
 8002750:	d0a00305 	stb	r2,-32756(gp)
                    break;  //break if address assigned or error occurred during address assignment attempt
 8002754:	00000606 	br	8002770 <USB_Task+0x540>
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 8002758:	e0bffec3 	ldbu	r2,-5(fp)
 800275c:	10800044 	addi	r2,r2,1
 8002760:	e0bffec5 	stb	r2,-5(fp)
 8002764:	e0bffec3 	ldbu	r2,-5(fp)
 8002768:	10800230 	cmpltui	r2,r2,8
 800276c:	103fd31e 	bne	r2,zero,80026bc <USB_Task+0x48c>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 8002770:	d0a00303 	ldbu	r2,-32756(gp)
 8002774:	10803fcc 	andi	r2,r2,255
 8002778:	10800818 	cmpnei	r2,r2,32
 800277c:	1000381e 	bne	r2,zero,8002860 <USB_Task+0x630>
                usb_error = 0xfe;
 8002780:	00bfff84 	movi	r2,-2
 8002784:	d0a71b05 	stb	r2,-25492(gp)
                last_usb_task_state = usb_task_state;
 8002788:	d0a00303 	ldbu	r2,-32756(gp)
 800278c:	d0a71b45 	stb	r2,-25491(gp)
                usb_task_state = USB_STATE_ERROR;
 8002790:	00bfffc4 	movi	r2,-1
 8002794:	d0a00305 	stb	r2,-32756(gp)
            break;//case ( USB_STATE_ADDRESSING )
 8002798:	00003106 	br	8002860 <USB_Task+0x630>
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 800279c:	e03ffec5 	stb	zero,-5(fp)
 80027a0:	00001706 	br	8002800 <USB_Task+0x5d0>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 80027a4:	e0fffec3 	ldbu	r3,-5(fp)
 80027a8:	1805883a 	mov	r2,r3
 80027ac:	1085883a 	add	r2,r2,r2
 80027b0:	10c5883a 	add	r2,r2,r3
 80027b4:	100490ba 	slli	r2,r2,2
 80027b8:	00c20074 	movhi	r3,2049
 80027bc:	10c7883a 	add	r3,r2,r3
 80027c0:	188cdf17 	ldw	r2,13180(r3)
 80027c4:	d0e71d03 	ldbu	r3,-25484(gp)
 80027c8:	18c03fcc 	andi	r3,r3,255
 80027cc:	000b883a 	mov	r5,zero
 80027d0:	1809883a 	mov	r4,r3
 80027d4:	103ee83a 	callr	r2
 80027d8:	e0bffe85 	stb	r2,-6(fp)
                if( rcode == TRUE ) {
 80027dc:	e0bffe83 	ldbu	r2,-6(fp)
 80027e0:	10800058 	cmpnei	r2,r2,1
 80027e4:	1000031e 	bne	r2,zero,80027f4 <USB_Task+0x5c4>
			        usb_task_state = USB_STATE_RUNNING;
 80027e8:	00801004 	movi	r2,64
 80027ec:	d0a00305 	stb	r2,-32756(gp)
                    break;
 80027f0:	00000606 	br	800280c <USB_Task+0x5dc>
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 80027f4:	e0bffec3 	ldbu	r2,-5(fp)
 80027f8:	10800044 	addi	r2,r2,1
 80027fc:	e0bffec5 	stb	r2,-5(fp)
 8002800:	e0bffec3 	ldbu	r2,-5(fp)
 8002804:	10800130 	cmpltui	r2,r2,4
 8002808:	103fe61e 	bne	r2,zero,80027a4 <USB_Task+0x574>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 800280c:	d0a00303 	ldbu	r2,-32756(gp)
 8002810:	10803fcc 	andi	r2,r2,255
 8002814:	10800c18 	cmpnei	r2,r2,48
 8002818:	1000131e 	bne	r2,zero,8002868 <USB_Task+0x638>
                usb_error = 0xfd;
 800281c:	00bfff44 	movi	r2,-3
 8002820:	d0a71b05 	stb	r2,-25492(gp)
                last_usb_task_state = usb_task_state;
 8002824:	d0a00303 	ldbu	r2,-32756(gp)
 8002828:	d0a71b45 	stb	r2,-25491(gp)
                usb_task_state = USB_STATE_ERROR;
 800282c:	00bfffc4 	movi	r2,-1
 8002830:	d0a00305 	stb	r2,-32756(gp)
            break;//( USB_STATE_CONFIGURING )
 8002834:	00000c06 	br	8002868 <USB_Task+0x638>
            break;//( USB_STATE_ERROR )
 8002838:	0001883a 	nop
 800283c:	00000b06 	br	800286c <USB_Task+0x63c>
            break;
 8002840:	0001883a 	nop
 8002844:	00000906 	br	800286c <USB_Task+0x63c>
            break;//( USB_STATE_RUNNING )
 8002848:	0001883a 	nop
 800284c:	00000706 	br	800286c <USB_Task+0x63c>
            break;//( USB_STATE_DETACHED ):
 8002850:	0001883a 	nop
 8002854:	00000506 	br	800286c <USB_Task+0x63c>
            break;//case ( USB_STATE_ATTACHED )
 8002858:	0001883a 	nop
 800285c:	00000306 	br	800286c <USB_Task+0x63c>
            break;//case ( USB_STATE_ADDRESSING )
 8002860:	0001883a 	nop
 8002864:	00000106 	br	800286c <USB_Task+0x63c>
            break;//( USB_STATE_CONFIGURING )
 8002868:	0001883a 	nop
    }//switch( usb_task_state & STATE_MASK )
}
 800286c:	0001883a 	nop
 8002870:	e6ffff04 	addi	sp,fp,-4
 8002874:	dfc00217 	ldw	ra,8(sp)
 8002878:	df000117 	ldw	fp,4(sp)
 800287c:	dc000017 	ldw	r16,0(sp)
 8002880:	dec00304 	addi	sp,sp,12
 8002884:	f800283a 	ret

08002888 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 8002888:	defffd04 	addi	sp,sp,-12
 800288c:	df000215 	stw	fp,8(sp)
 8002890:	df000204 	addi	fp,sp,8
 8002894:	2005883a 	mov	r2,r4
 8002898:	e17ffe15 	stw	r5,-8(fp)
 800289c:	e0bfff05 	stb	r2,-4(fp)
    return( FALSE );
 80028a0:	0005883a 	mov	r2,zero
}
 80028a4:	e037883a 	mov	sp,fp
 80028a8:	df000017 	ldw	fp,0(sp)
 80028ac:	dec00104 	addi	sp,sp,4
 80028b0:	f800283a 	ret

080028b4 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 80028b4:	defffb04 	addi	sp,sp,-20
 80028b8:	df000415 	stw	fp,16(sp)
 80028bc:	df000404 	addi	fp,sp,16
 80028c0:	2005883a 	mov	r2,r4
 80028c4:	2807883a 	mov	r3,r5
 80028c8:	e1bffd15 	stw	r6,-12(fp)
 80028cc:	e1fffc15 	stw	r7,-16(fp)
 80028d0:	e0bfff05 	stb	r2,-4(fp)
 80028d4:	1805883a 	mov	r2,r3
 80028d8:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 80028dc:	0005883a 	mov	r2,zero

}
 80028e0:	e037883a 	mov	sp,fp
 80028e4:	df000017 	ldw	fp,0(sp)
 80028e8:	dec00104 	addi	sp,sp,4
 80028ec:	f800283a 	ret

080028f0 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 80028f0:	defffd04 	addi	sp,sp,-12
 80028f4:	df000215 	stw	fp,8(sp)
 80028f8:	df000204 	addi	fp,sp,8
 80028fc:	2005883a 	mov	r2,r4
 8002900:	e17ffe15 	stw	r5,-8(fp)
 8002904:	e0bfff05 	stb	r2,-4(fp)

	return( FALSE );
 8002908:	0005883a 	mov	r2,zero

}
 800290c:	e037883a 	mov	sp,fp
 8002910:	df000017 	ldw	fp,0(sp)
 8002914:	dec00104 	addi	sp,sp,4
 8002918:	f800283a 	ret

0800291c <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 800291c:	defffb04 	addi	sp,sp,-20
 8002920:	df000415 	stw	fp,16(sp)
 8002924:	df000404 	addi	fp,sp,16
 8002928:	2005883a 	mov	r2,r4
 800292c:	2807883a 	mov	r3,r5
 8002930:	e1bffd15 	stw	r6,-12(fp)
 8002934:	e1fffc15 	stw	r7,-16(fp)
 8002938:	e0bfff05 	stb	r2,-4(fp)
 800293c:	1805883a 	mov	r2,r3
 8002940:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 8002944:	0005883a 	mov	r2,zero
}
 8002948:	e037883a 	mov	sp,fp
 800294c:	df000017 	ldw	fp,0(sp)
 8002950:	dec00104 	addi	sp,sp,4
 8002954:	f800283a 	ret

08002958 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 8002958:	defffd04 	addi	sp,sp,-12
 800295c:	df000215 	stw	fp,8(sp)
 8002960:	df000204 	addi	fp,sp,8
 8002964:	2005883a 	mov	r2,r4
 8002968:	e17ffe15 	stw	r5,-8(fp)
 800296c:	e0bfff05 	stb	r2,-4(fp)
	return( FALSE );
 8002970:	0005883a 	mov	r2,zero
}
 8002974:	e037883a 	mov	sp,fp
 8002978:	df000017 	ldw	fp,0(sp)
 800297c:	dec00104 	addi	sp,sp,4
 8002980:	f800283a 	ret

08002984 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8002984:	defffb04 	addi	sp,sp,-20
 8002988:	df000415 	stw	fp,16(sp)
 800298c:	df000404 	addi	fp,sp,16
 8002990:	2005883a 	mov	r2,r4
 8002994:	2807883a 	mov	r3,r5
 8002998:	e1bffd15 	stw	r6,-12(fp)
 800299c:	e1fffc15 	stw	r7,-16(fp)
 80029a0:	e0bfff05 	stb	r2,-4(fp)
 80029a4:	1805883a 	mov	r2,r3
 80029a8:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 80029ac:	0005883a 	mov	r2,zero
}
 80029b0:	e037883a 	mov	sp,fp
 80029b4:	df000017 	ldw	fp,0(sp)
 80029b8:	dec00104 	addi	sp,sp,4
 80029bc:	f800283a 	ret

080029c0 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 80029c0:	deffff04 	addi	sp,sp,-4
 80029c4:	df000015 	stw	fp,0(sp)
 80029c8:	d839883a 	mov	fp,sp
    return( usb_task_state );
 80029cc:	d0a00303 	ldbu	r2,-32756(gp)
}
 80029d0:	e037883a 	mov	sp,fp
 80029d4:	df000017 	ldw	fp,0(sp)
 80029d8:	dec00104 	addi	sp,sp,4
 80029dc:	f800283a 	ret

080029e0 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 80029e0:	defffe04 	addi	sp,sp,-8
 80029e4:	df000115 	stw	fp,4(sp)
 80029e8:	df000104 	addi	fp,sp,4
 80029ec:	2005883a 	mov	r2,r4
 80029f0:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 80029f4:	e0bfff03 	ldbu	r2,-4(fp)
 80029f8:	100690fa 	slli	r3,r2,3
 80029fc:	00820074 	movhi	r2,2049
 8002a00:	109b4704 	addi	r2,r2,27932
 8002a04:	1885883a 	add	r2,r3,r2
}
 8002a08:	e037883a 	mov	sp,fp
 8002a0c:	df000017 	ldw	fp,0(sp)
 8002a10:	dec00104 	addi	sp,sp,4
 8002a14:	f800283a 	ret

08002a18 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 8002a18:	defffc04 	addi	sp,sp,-16
 8002a1c:	df000315 	stw	fp,12(sp)
 8002a20:	df000304 	addi	fp,sp,12
 8002a24:	e13ffe15 	stw	r4,-8(fp)
 8002a28:	2805883a 	mov	r2,r5
 8002a2c:	e0bffd05 	stb	r2,-12(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 8002a30:	e03fffc5 	stb	zero,-1(fp)
 8002a34:	00000d06 	br	8002a6c <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 8002a38:	e0bfffc3 	ldbu	r2,-1(fp)
 8002a3c:	1085883a 	add	r2,r2,r2
 8002a40:	1007883a 	mov	r3,r2
 8002a44:	e0bffe17 	ldw	r2,-8(fp)
 8002a48:	10c7883a 	add	r3,r2,r3
 8002a4c:	e0bfffc3 	ldbu	r2,-1(fp)
 8002a50:	e13ffe17 	ldw	r4,-8(fp)
 8002a54:	2085883a 	add	r2,r4,r2
 8002a58:	18c00003 	ldbu	r3,0(r3)
 8002a5c:	10c00005 	stb	r3,0(r2)
	for (i = 0; i < length; i++)
 8002a60:	e0bfffc3 	ldbu	r2,-1(fp)
 8002a64:	10800044 	addi	r2,r2,1
 8002a68:	e0bfffc5 	stb	r2,-1(fp)
 8002a6c:	e0ffffc3 	ldbu	r3,-1(fp)
 8002a70:	e0bffd03 	ldbu	r2,-12(fp)
 8002a74:	18bff036 	bltu	r3,r2,8002a38 <ConvUTF8ToStr+0x20>
	}
	utf8[length] = 0x00;
 8002a78:	e0bffd03 	ldbu	r2,-12(fp)
 8002a7c:	e0fffe17 	ldw	r3,-8(fp)
 8002a80:	1885883a 	add	r2,r3,r2
 8002a84:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 8002a88:	e0bffe17 	ldw	r2,-8(fp)
}
 8002a8c:	e037883a 	mov	sp,fp
 8002a90:	df000017 	ldw	fp,0(sp)
 8002a94:	dec00104 	addi	sp,sp,4
 8002a98:	f800283a 	ret

08002a9c <__divsi3>:
 8002a9c:	20001a16 	blt	r4,zero,8002b08 <__divsi3+0x6c>
 8002aa0:	000f883a 	mov	r7,zero
 8002aa4:	2800020e 	bge	r5,zero,8002ab0 <__divsi3+0x14>
 8002aa8:	014bc83a 	sub	r5,zero,r5
 8002aac:	39c0005c 	xori	r7,r7,1
 8002ab0:	200d883a 	mov	r6,r4
 8002ab4:	00c00044 	movi	r3,1
 8002ab8:	2900092e 	bgeu	r5,r4,8002ae0 <__divsi3+0x44>
 8002abc:	00800804 	movi	r2,32
 8002ac0:	00c00044 	movi	r3,1
 8002ac4:	00000106 	br	8002acc <__divsi3+0x30>
 8002ac8:	10001226 	beq	r2,zero,8002b14 <__divsi3+0x78>
 8002acc:	294b883a 	add	r5,r5,r5
 8002ad0:	10bfffc4 	addi	r2,r2,-1
 8002ad4:	18c7883a 	add	r3,r3,r3
 8002ad8:	293ffb36 	bltu	r5,r4,8002ac8 <__divsi3+0x2c>
 8002adc:	18000d26 	beq	r3,zero,8002b14 <__divsi3+0x78>
 8002ae0:	0005883a 	mov	r2,zero
 8002ae4:	31400236 	bltu	r6,r5,8002af0 <__divsi3+0x54>
 8002ae8:	314dc83a 	sub	r6,r6,r5
 8002aec:	10c4b03a 	or	r2,r2,r3
 8002af0:	1806d07a 	srli	r3,r3,1
 8002af4:	280ad07a 	srli	r5,r5,1
 8002af8:	183ffa1e 	bne	r3,zero,8002ae4 <__divsi3+0x48>
 8002afc:	38000126 	beq	r7,zero,8002b04 <__divsi3+0x68>
 8002b00:	0085c83a 	sub	r2,zero,r2
 8002b04:	f800283a 	ret
 8002b08:	0109c83a 	sub	r4,zero,r4
 8002b0c:	01c00044 	movi	r7,1
 8002b10:	003fe406 	br	8002aa4 <__divsi3+0x8>
 8002b14:	0005883a 	mov	r2,zero
 8002b18:	003ff806 	br	8002afc <__divsi3+0x60>

08002b1c <__modsi3>:
 8002b1c:	20001916 	blt	r4,zero,8002b84 <__modsi3+0x68>
 8002b20:	000f883a 	mov	r7,zero
 8002b24:	2005883a 	mov	r2,r4
 8002b28:	2800010e 	bge	r5,zero,8002b30 <__modsi3+0x14>
 8002b2c:	014bc83a 	sub	r5,zero,r5
 8002b30:	00c00044 	movi	r3,1
 8002b34:	2900092e 	bgeu	r5,r4,8002b5c <__modsi3+0x40>
 8002b38:	01800804 	movi	r6,32
 8002b3c:	00c00044 	movi	r3,1
 8002b40:	00000106 	br	8002b48 <__modsi3+0x2c>
 8002b44:	30000d26 	beq	r6,zero,8002b7c <__modsi3+0x60>
 8002b48:	294b883a 	add	r5,r5,r5
 8002b4c:	31bfffc4 	addi	r6,r6,-1
 8002b50:	18c7883a 	add	r3,r3,r3
 8002b54:	293ffb36 	bltu	r5,r4,8002b44 <__modsi3+0x28>
 8002b58:	18000826 	beq	r3,zero,8002b7c <__modsi3+0x60>
 8002b5c:	1806d07a 	srli	r3,r3,1
 8002b60:	11400136 	bltu	r2,r5,8002b68 <__modsi3+0x4c>
 8002b64:	1145c83a 	sub	r2,r2,r5
 8002b68:	280ad07a 	srli	r5,r5,1
 8002b6c:	183ffb1e 	bne	r3,zero,8002b5c <__modsi3+0x40>
 8002b70:	38000126 	beq	r7,zero,8002b78 <__modsi3+0x5c>
 8002b74:	0085c83a 	sub	r2,zero,r2
 8002b78:	f800283a 	ret
 8002b7c:	2005883a 	mov	r2,r4
 8002b80:	003ffb06 	br	8002b70 <__modsi3+0x54>
 8002b84:	0109c83a 	sub	r4,zero,r4
 8002b88:	01c00044 	movi	r7,1
 8002b8c:	003fe506 	br	8002b24 <__modsi3+0x8>

08002b90 <__udivsi3>:
 8002b90:	200d883a 	mov	r6,r4
 8002b94:	2900152e 	bgeu	r5,r4,8002bec <__udivsi3+0x5c>
 8002b98:	28001416 	blt	r5,zero,8002bec <__udivsi3+0x5c>
 8002b9c:	00800804 	movi	r2,32
 8002ba0:	00c00044 	movi	r3,1
 8002ba4:	00000206 	br	8002bb0 <__udivsi3+0x20>
 8002ba8:	10000e26 	beq	r2,zero,8002be4 <__udivsi3+0x54>
 8002bac:	28000516 	blt	r5,zero,8002bc4 <__udivsi3+0x34>
 8002bb0:	294b883a 	add	r5,r5,r5
 8002bb4:	10bfffc4 	addi	r2,r2,-1
 8002bb8:	18c7883a 	add	r3,r3,r3
 8002bbc:	293ffa36 	bltu	r5,r4,8002ba8 <__udivsi3+0x18>
 8002bc0:	18000826 	beq	r3,zero,8002be4 <__udivsi3+0x54>
 8002bc4:	0005883a 	mov	r2,zero
 8002bc8:	31400236 	bltu	r6,r5,8002bd4 <__udivsi3+0x44>
 8002bcc:	314dc83a 	sub	r6,r6,r5
 8002bd0:	10c4b03a 	or	r2,r2,r3
 8002bd4:	1806d07a 	srli	r3,r3,1
 8002bd8:	280ad07a 	srli	r5,r5,1
 8002bdc:	183ffa1e 	bne	r3,zero,8002bc8 <__udivsi3+0x38>
 8002be0:	f800283a 	ret
 8002be4:	0005883a 	mov	r2,zero
 8002be8:	f800283a 	ret
 8002bec:	00c00044 	movi	r3,1
 8002bf0:	003ff406 	br	8002bc4 <__udivsi3+0x34>

08002bf4 <__umodsi3>:
 8002bf4:	2005883a 	mov	r2,r4
 8002bf8:	2900132e 	bgeu	r5,r4,8002c48 <__umodsi3+0x54>
 8002bfc:	28001216 	blt	r5,zero,8002c48 <__umodsi3+0x54>
 8002c00:	01800804 	movi	r6,32
 8002c04:	00c00044 	movi	r3,1
 8002c08:	00000206 	br	8002c14 <__umodsi3+0x20>
 8002c0c:	30000c26 	beq	r6,zero,8002c40 <__umodsi3+0x4c>
 8002c10:	28000516 	blt	r5,zero,8002c28 <__umodsi3+0x34>
 8002c14:	294b883a 	add	r5,r5,r5
 8002c18:	31bfffc4 	addi	r6,r6,-1
 8002c1c:	18c7883a 	add	r3,r3,r3
 8002c20:	293ffa36 	bltu	r5,r4,8002c0c <__umodsi3+0x18>
 8002c24:	18000626 	beq	r3,zero,8002c40 <__umodsi3+0x4c>
 8002c28:	1806d07a 	srli	r3,r3,1
 8002c2c:	11400136 	bltu	r2,r5,8002c34 <__umodsi3+0x40>
 8002c30:	1145c83a 	sub	r2,r2,r5
 8002c34:	280ad07a 	srli	r5,r5,1
 8002c38:	183ffb1e 	bne	r3,zero,8002c28 <__umodsi3+0x34>
 8002c3c:	f800283a 	ret
 8002c40:	2005883a 	mov	r2,r4
 8002c44:	f800283a 	ret
 8002c48:	00c00044 	movi	r3,1
 8002c4c:	003ff606 	br	8002c28 <__umodsi3+0x34>

08002c50 <__mulsi3>:
 8002c50:	0005883a 	mov	r2,zero
 8002c54:	20000726 	beq	r4,zero,8002c74 <__mulsi3+0x24>
 8002c58:	20c0004c 	andi	r3,r4,1
 8002c5c:	2008d07a 	srli	r4,r4,1
 8002c60:	18000126 	beq	r3,zero,8002c68 <__mulsi3+0x18>
 8002c64:	1145883a 	add	r2,r2,r5
 8002c68:	294b883a 	add	r5,r5,r5
 8002c6c:	203ffa1e 	bne	r4,zero,8002c58 <__mulsi3+0x8>
 8002c70:	f800283a 	ret
 8002c74:	f800283a 	ret

08002c78 <_printf_r>:
 8002c78:	defffd04 	addi	sp,sp,-12
 8002c7c:	2805883a 	mov	r2,r5
 8002c80:	dfc00015 	stw	ra,0(sp)
 8002c84:	d9800115 	stw	r6,4(sp)
 8002c88:	d9c00215 	stw	r7,8(sp)
 8002c8c:	21400217 	ldw	r5,8(r4)
 8002c90:	d9c00104 	addi	r7,sp,4
 8002c94:	100d883a 	mov	r6,r2
 8002c98:	8002e740 	call	8002e74 <___vfprintf_internal_r>
 8002c9c:	dfc00017 	ldw	ra,0(sp)
 8002ca0:	dec00304 	addi	sp,sp,12
 8002ca4:	f800283a 	ret

08002ca8 <printf>:
 8002ca8:	defffc04 	addi	sp,sp,-16
 8002cac:	dfc00015 	stw	ra,0(sp)
 8002cb0:	d9400115 	stw	r5,4(sp)
 8002cb4:	d9800215 	stw	r6,8(sp)
 8002cb8:	d9c00315 	stw	r7,12(sp)
 8002cbc:	00820074 	movhi	r2,2049
 8002cc0:	1093d817 	ldw	r2,20320(r2)
 8002cc4:	200b883a 	mov	r5,r4
 8002cc8:	d9800104 	addi	r6,sp,4
 8002ccc:	11000217 	ldw	r4,8(r2)
 8002cd0:	8004f780 	call	8004f78 <__vfprintf_internal>
 8002cd4:	dfc00017 	ldw	ra,0(sp)
 8002cd8:	dec00404 	addi	sp,sp,16
 8002cdc:	f800283a 	ret

08002ce0 <_putchar_r>:
 8002ce0:	21800217 	ldw	r6,8(r4)
 8002ce4:	8009c1c1 	jmpi	8009c1c <_putc_r>

08002ce8 <putchar>:
 8002ce8:	00820074 	movhi	r2,2049
 8002cec:	1093d817 	ldw	r2,20320(r2)
 8002cf0:	200b883a 	mov	r5,r4
 8002cf4:	11800217 	ldw	r6,8(r2)
 8002cf8:	1009883a 	mov	r4,r2
 8002cfc:	8009c1c1 	jmpi	8009c1c <_putc_r>

08002d00 <_puts_r>:
 8002d00:	defff504 	addi	sp,sp,-44
 8002d04:	dc000815 	stw	r16,32(sp)
 8002d08:	2021883a 	mov	r16,r4
 8002d0c:	2809883a 	mov	r4,r5
 8002d10:	dc400915 	stw	r17,36(sp)
 8002d14:	dfc00a15 	stw	ra,40(sp)
 8002d18:	2823883a 	mov	r17,r5
 8002d1c:	8002ddc0 	call	8002ddc <strlen>
 8002d20:	11000044 	addi	r4,r2,1
 8002d24:	d8800515 	stw	r2,20(sp)
 8002d28:	00800044 	movi	r2,1
 8002d2c:	00c20074 	movhi	r3,2049
 8002d30:	d8800715 	stw	r2,28(sp)
 8002d34:	d8800404 	addi	r2,sp,16
 8002d38:	18cb4904 	addi	r3,r3,11556
 8002d3c:	d8800115 	stw	r2,4(sp)
 8002d40:	00800084 	movi	r2,2
 8002d44:	dc400415 	stw	r17,16(sp)
 8002d48:	d8c00615 	stw	r3,24(sp)
 8002d4c:	d9000315 	stw	r4,12(sp)
 8002d50:	d8800215 	stw	r2,8(sp)
 8002d54:	81400217 	ldw	r5,8(r16)
 8002d58:	80000226 	beq	r16,zero,8002d64 <_puts_r+0x64>
 8002d5c:	80800e17 	ldw	r2,56(r16)
 8002d60:	10001326 	beq	r2,zero,8002db0 <_puts_r+0xb0>
 8002d64:	2880030b 	ldhu	r2,12(r5)
 8002d68:	10c8000c 	andi	r3,r2,8192
 8002d6c:	1800061e 	bne	r3,zero,8002d88 <_puts_r+0x88>
 8002d70:	28c01917 	ldw	r3,100(r5)
 8002d74:	0137ffc4 	movi	r4,-8193
 8002d78:	10880014 	ori	r2,r2,8192
 8002d7c:	1906703a 	and	r3,r3,r4
 8002d80:	2880030d 	sth	r2,12(r5)
 8002d84:	28c01915 	stw	r3,100(r5)
 8002d88:	d9800104 	addi	r6,sp,4
 8002d8c:	8009883a 	mov	r4,r16
 8002d90:	80075f00 	call	80075f0 <__sfvwrite_r>
 8002d94:	10000b1e 	bne	r2,zero,8002dc4 <_puts_r+0xc4>
 8002d98:	00800284 	movi	r2,10
 8002d9c:	dfc00a17 	ldw	ra,40(sp)
 8002da0:	dc400917 	ldw	r17,36(sp)
 8002da4:	dc000817 	ldw	r16,32(sp)
 8002da8:	dec00b04 	addi	sp,sp,44
 8002dac:	f800283a 	ret
 8002db0:	8009883a 	mov	r4,r16
 8002db4:	d9400015 	stw	r5,0(sp)
 8002db8:	80071900 	call	8007190 <__sinit>
 8002dbc:	d9400017 	ldw	r5,0(sp)
 8002dc0:	003fe806 	br	8002d64 <_puts_r+0x64>
 8002dc4:	00bfffc4 	movi	r2,-1
 8002dc8:	003ff406 	br	8002d9c <_puts_r+0x9c>

08002dcc <puts>:
 8002dcc:	00820074 	movhi	r2,2049
 8002dd0:	200b883a 	mov	r5,r4
 8002dd4:	1113d817 	ldw	r4,20320(r2)
 8002dd8:	8002d001 	jmpi	8002d00 <_puts_r>

08002ddc <strlen>:
 8002ddc:	208000cc 	andi	r2,r4,3
 8002de0:	10000926 	beq	r2,zero,8002e08 <strlen+0x2c>
 8002de4:	2005883a 	mov	r2,r4
 8002de8:	00000306 	br	8002df8 <strlen+0x1c>
 8002dec:	10800044 	addi	r2,r2,1
 8002df0:	10c000cc 	andi	r3,r2,3
 8002df4:	18000526 	beq	r3,zero,8002e0c <strlen+0x30>
 8002df8:	10c00007 	ldb	r3,0(r2)
 8002dfc:	183ffb1e 	bne	r3,zero,8002dec <strlen+0x10>
 8002e00:	1105c83a 	sub	r2,r2,r4
 8002e04:	f800283a 	ret
 8002e08:	2005883a 	mov	r2,r4
 8002e0c:	11400017 	ldw	r5,0(r2)
 8002e10:	01ffbff4 	movhi	r7,65279
 8002e14:	39ffbfc4 	addi	r7,r7,-257
 8002e18:	29c7883a 	add	r3,r5,r7
 8002e1c:	01a02074 	movhi	r6,32897
 8002e20:	014a303a 	nor	r5,zero,r5
 8002e24:	1946703a 	and	r3,r3,r5
 8002e28:	31a02004 	addi	r6,r6,-32640
 8002e2c:	1986703a 	and	r3,r3,r6
 8002e30:	1800071e 	bne	r3,zero,8002e50 <strlen+0x74>
 8002e34:	11400117 	ldw	r5,4(r2)
 8002e38:	10800104 	addi	r2,r2,4
 8002e3c:	29c7883a 	add	r3,r5,r7
 8002e40:	014a303a 	nor	r5,zero,r5
 8002e44:	1946703a 	and	r3,r3,r5
 8002e48:	1986703a 	and	r3,r3,r6
 8002e4c:	183ff926 	beq	r3,zero,8002e34 <strlen+0x58>
 8002e50:	10c00007 	ldb	r3,0(r2)
 8002e54:	183fea26 	beq	r3,zero,8002e00 <strlen+0x24>
 8002e58:	10c00047 	ldb	r3,1(r2)
 8002e5c:	10800044 	addi	r2,r2,1
 8002e60:	183fe726 	beq	r3,zero,8002e00 <strlen+0x24>
 8002e64:	10c00047 	ldb	r3,1(r2)
 8002e68:	10800044 	addi	r2,r2,1
 8002e6c:	183ffa1e 	bne	r3,zero,8002e58 <strlen+0x7c>
 8002e70:	003fe306 	br	8002e00 <strlen+0x24>

08002e74 <___vfprintf_internal_r>:
 8002e74:	deffbf04 	addi	sp,sp,-260
 8002e78:	dfc04015 	stw	ra,256(sp)
 8002e7c:	dd803d15 	stw	r22,244(sp)
 8002e80:	dcc03a15 	stw	r19,232(sp)
 8002e84:	dc803915 	stw	r18,228(sp)
 8002e88:	2027883a 	mov	r19,r4
 8002e8c:	2825883a 	mov	r18,r5
 8002e90:	302d883a 	mov	r22,r6
 8002e94:	d9c00615 	stw	r7,24(sp)
 8002e98:	df003f15 	stw	fp,252(sp)
 8002e9c:	ddc03e15 	stw	r23,248(sp)
 8002ea0:	dd403c15 	stw	r21,240(sp)
 8002ea4:	dd003b15 	stw	r20,236(sp)
 8002ea8:	dc403815 	stw	r17,224(sp)
 8002eac:	dc003715 	stw	r16,220(sp)
 8002eb0:	8007c000 	call	8007c00 <_localeconv_r>
 8002eb4:	10800017 	ldw	r2,0(r2)
 8002eb8:	1009883a 	mov	r4,r2
 8002ebc:	d8800d15 	stw	r2,52(sp)
 8002ec0:	8002ddc0 	call	8002ddc <strlen>
 8002ec4:	d8800b15 	stw	r2,44(sp)
 8002ec8:	98000226 	beq	r19,zero,8002ed4 <___vfprintf_internal_r+0x60>
 8002ecc:	98800e17 	ldw	r2,56(r19)
 8002ed0:	1001e026 	beq	r2,zero,8003654 <___vfprintf_internal_r+0x7e0>
 8002ed4:	9080030b 	ldhu	r2,12(r18)
 8002ed8:	10c8000c 	andi	r3,r2,8192
 8002edc:	1800061e 	bne	r3,zero,8002ef8 <___vfprintf_internal_r+0x84>
 8002ee0:	90c01917 	ldw	r3,100(r18)
 8002ee4:	0137ffc4 	movi	r4,-8193
 8002ee8:	10880014 	ori	r2,r2,8192
 8002eec:	1906703a 	and	r3,r3,r4
 8002ef0:	9080030d 	sth	r2,12(r18)
 8002ef4:	90c01915 	stw	r3,100(r18)
 8002ef8:	10c0020c 	andi	r3,r2,8
 8002efc:	1800fc26 	beq	r3,zero,80032f0 <___vfprintf_internal_r+0x47c>
 8002f00:	90c00417 	ldw	r3,16(r18)
 8002f04:	1800fa26 	beq	r3,zero,80032f0 <___vfprintf_internal_r+0x47c>
 8002f08:	1080068c 	andi	r2,r2,26
 8002f0c:	10800298 	cmpnei	r2,r2,10
 8002f10:	1000ff26 	beq	r2,zero,8003310 <___vfprintf_internal_r+0x49c>
 8002f14:	d8802704 	addi	r2,sp,156
 8002f18:	b02f883a 	mov	r23,r22
 8002f1c:	d8801a15 	stw	r2,104(sp)
 8002f20:	d8001c15 	stw	zero,112(sp)
 8002f24:	d8001b15 	stw	zero,108(sp)
 8002f28:	d8000815 	stw	zero,32(sp)
 8002f2c:	d8000915 	stw	zero,36(sp)
 8002f30:	d8000a15 	stw	zero,40(sp)
 8002f34:	d8000c15 	stw	zero,48(sp)
 8002f38:	d8001015 	stw	zero,64(sp)
 8002f3c:	d8000515 	stw	zero,20(sp)
 8002f40:	102d883a 	mov	r22,r2
 8002f44:	b8800007 	ldb	r2,0(r23)
 8002f48:	1000d726 	beq	r2,zero,80032a8 <___vfprintf_internal_r+0x434>
 8002f4c:	b821883a 	mov	r16,r23
 8002f50:	00000306 	br	8002f60 <___vfprintf_internal_r+0xec>
 8002f54:	80800047 	ldb	r2,1(r16)
 8002f58:	84000044 	addi	r16,r16,1
 8002f5c:	10012226 	beq	r2,zero,80033e8 <___vfprintf_internal_r+0x574>
 8002f60:	10800958 	cmpnei	r2,r2,37
 8002f64:	103ffb1e 	bne	r2,zero,8002f54 <___vfprintf_internal_r+0xe0>
 8002f68:	85e3c83a 	sub	r17,r16,r23
 8002f6c:	85c1201e 	bne	r16,r23,80033f0 <___vfprintf_internal_r+0x57c>
 8002f70:	80800003 	ldbu	r2,0(r16)
 8002f74:	10803fcc 	andi	r2,r2,255
 8002f78:	1080201c 	xori	r2,r2,128
 8002f7c:	10bfe004 	addi	r2,r2,-128
 8002f80:	1000c926 	beq	r2,zero,80032a8 <___vfprintf_internal_r+0x434>
 8002f84:	82c00047 	ldb	r11,1(r16)
 8002f88:	85c00044 	addi	r23,r16,1
 8002f8c:	d8001345 	stb	zero,77(sp)
 8002f90:	0009883a 	mov	r4,zero
 8002f94:	000b883a 	mov	r5,zero
 8002f98:	023fffc4 	movi	r8,-1
 8002f9c:	0021883a 	mov	r16,zero
 8002fa0:	0019883a 	mov	r12,zero
 8002fa4:	bdc00044 	addi	r23,r23,1
 8002fa8:	5839883a 	mov	fp,r11
 8002fac:	e0bff804 	addi	r2,fp,-32
 8002fb0:	10c01668 	cmpgeui	r3,r2,89
 8002fb4:	18006c1e 	bne	r3,zero,8003168 <___vfprintf_internal_r+0x2f4>
 8002fb8:	100490ba 	slli	r2,r2,2
 8002fbc:	00c20034 	movhi	r3,2048
 8002fc0:	10c7883a 	add	r3,r2,r3
 8002fc4:	188bf317 	ldw	r2,12236(r3)
 8002fc8:	1000683a 	jmp	r2
 8002fcc:	0800391c 	xori	zero,at,228
 8002fd0:	08003168 	cmpgeui	zero,at,197
 8002fd4:	08003168 	cmpgeui	zero,at,197
 8002fd8:	08003910 	cmplti	zero,at,228
 8002fdc:	08003168 	cmpgeui	zero,at,197
 8002fe0:	08003168 	cmpgeui	zero,at,197
 8002fe4:	08003168 	cmpgeui	zero,at,197
 8002fe8:	08003168 	cmpgeui	zero,at,197
 8002fec:	08003168 	cmpgeui	zero,at,197
 8002ff0:	08003168 	cmpgeui	zero,at,197
 8002ff4:	080038e8 	cmpgeui	zero,at,227
 8002ff8:	080038d8 	cmpnei	zero,at,227
 8002ffc:	08003168 	cmpgeui	zero,at,197
 8003000:	080038c0 	call	80038c <__alt_mem_onchip_memory2_0+0x80038c>
 8003004:	08003874 	orhi	zero,at,225
 8003008:	08003168 	cmpgeui	zero,at,197
 800300c:	08003868 	cmpgeui	zero,at,225
 8003010:	08003130 	cmpltui	zero,at,196
 8003014:	08003130 	cmpltui	zero,at,196
 8003018:	08003130 	cmpltui	zero,at,196
 800301c:	08003130 	cmpltui	zero,at,196
 8003020:	08003130 	cmpltui	zero,at,196
 8003024:	08003130 	cmpltui	zero,at,196
 8003028:	08003130 	cmpltui	zero,at,196
 800302c:	08003130 	cmpltui	zero,at,196
 8003030:	08003130 	cmpltui	zero,at,196
 8003034:	08003168 	cmpgeui	zero,at,197
 8003038:	08003168 	cmpgeui	zero,at,197
 800303c:	08003168 	cmpgeui	zero,at,197
 8003040:	08003168 	cmpgeui	zero,at,197
 8003044:	08003168 	cmpgeui	zero,at,197
 8003048:	08003168 	cmpgeui	zero,at,197
 800304c:	08003168 	cmpgeui	zero,at,197
 8003050:	08003168 	cmpgeui	zero,at,197
 8003054:	08003168 	cmpgeui	zero,at,197
 8003058:	08003168 	cmpgeui	zero,at,197
 800305c:	08003780 	call	800378 <__alt_mem_onchip_memory2_0+0x800378>
 8003060:	0800344c 	andi	zero,at,209
 8003064:	08003168 	cmpgeui	zero,at,197
 8003068:	0800344c 	andi	zero,at,209
 800306c:	08003168 	cmpgeui	zero,at,197
 8003070:	08003168 	cmpgeui	zero,at,197
 8003074:	08003168 	cmpgeui	zero,at,197
 8003078:	08003168 	cmpgeui	zero,at,197
 800307c:	08003774 	orhi	zero,at,221
 8003080:	08003168 	cmpgeui	zero,at,197
 8003084:	08003168 	cmpgeui	zero,at,197
 8003088:	08003380 	call	800338 <__alt_mem_onchip_memory2_0+0x800338>
 800308c:	08003168 	cmpgeui	zero,at,197
 8003090:	08003168 	cmpgeui	zero,at,197
 8003094:	08003168 	cmpgeui	zero,at,197
 8003098:	08003168 	cmpgeui	zero,at,197
 800309c:	08003168 	cmpgeui	zero,at,197
 80030a0:	08003358 	cmpnei	zero,at,205
 80030a4:	08003168 	cmpgeui	zero,at,197
 80030a8:	08003168 	cmpgeui	zero,at,197
 80030ac:	0800372c 	andhi	zero,at,220
 80030b0:	08003168 	cmpgeui	zero,at,197
 80030b4:	08003168 	cmpgeui	zero,at,197
 80030b8:	08003168 	cmpgeui	zero,at,197
 80030bc:	08003168 	cmpgeui	zero,at,197
 80030c0:	08003168 	cmpgeui	zero,at,197
 80030c4:	08003168 	cmpgeui	zero,at,197
 80030c8:	08003168 	cmpgeui	zero,at,197
 80030cc:	08003168 	cmpgeui	zero,at,197
 80030d0:	08003168 	cmpgeui	zero,at,197
 80030d4:	08003168 	cmpgeui	zero,at,197
 80030d8:	08003704 	addi	zero,at,220
 80030dc:	08003660 	cmpeqi	zero,at,217
 80030e0:	0800344c 	andi	zero,at,209
 80030e4:	0800344c 	andi	zero,at,209
 80030e8:	0800344c 	andi	zero,at,209
 80030ec:	080036f8 	rdprs	zero,at,219
 80030f0:	08003660 	cmpeqi	zero,at,217
 80030f4:	08003168 	cmpgeui	zero,at,197
 80030f8:	08003168 	cmpgeui	zero,at,197
 80030fc:	08003a70 	cmpltui	zero,at,233
 8003100:	08003168 	cmpgeui	zero,at,197
 8003104:	08003a34 	orhi	zero,at,232
 8003108:	08003384 	addi	zero,at,206
 800310c:	080039f4 	orhi	zero,at,231
 8003110:	080039e8 	cmpgeui	zero,at,231
 8003114:	08003168 	cmpgeui	zero,at,197
 8003118:	08003990 	cmplti	zero,at,230
 800311c:	08003168 	cmpgeui	zero,at,197
 8003120:	0800335c 	xori	zero,at,205
 8003124:	08003168 	cmpgeui	zero,at,197
 8003128:	08003168 	cmpgeui	zero,at,197
 800312c:	08003948 	cmpgei	zero,at,229
 8003130:	0021883a 	mov	r16,zero
 8003134:	e0fff404 	addi	r3,fp,-48
 8003138:	800490ba 	slli	r2,r16,2
 800313c:	bf000007 	ldb	fp,0(r23)
 8003140:	bdc00044 	addi	r23,r23,1
 8003144:	1421883a 	add	r16,r2,r16
 8003148:	8421883a 	add	r16,r16,r16
 800314c:	1c21883a 	add	r16,r3,r16
 8003150:	e0fff404 	addi	r3,fp,-48
 8003154:	188002b0 	cmpltui	r2,r3,10
 8003158:	103ff71e 	bne	r2,zero,8003138 <___vfprintf_internal_r+0x2c4>
 800315c:	e0bff804 	addi	r2,fp,-32
 8003160:	10c01668 	cmpgeui	r3,r2,89
 8003164:	183f9426 	beq	r3,zero,8002fb8 <___vfprintf_internal_r+0x144>
 8003168:	21003fcc 	andi	r4,r4,255
 800316c:	2006871e 	bne	r4,zero,8004b8c <___vfprintf_internal_r+0x1d18>
 8003170:	e0004d26 	beq	fp,zero,80032a8 <___vfprintf_internal_r+0x434>
 8003174:	df001d05 	stb	fp,116(sp)
 8003178:	d8001345 	stb	zero,77(sp)
 800317c:	05000044 	movi	r20,1
 8003180:	05400044 	movi	r21,1
 8003184:	dc401d04 	addi	r17,sp,116
 8003188:	db000415 	stw	r12,16(sp)
 800318c:	0011883a 	mov	r8,zero
 8003190:	d8000715 	stw	zero,28(sp)
 8003194:	d8800417 	ldw	r2,16(sp)
 8003198:	1380008c 	andi	r14,r2,2
 800319c:	70000126 	beq	r14,zero,80031a4 <___vfprintf_internal_r+0x330>
 80031a0:	a5000084 	addi	r20,r20,2
 80031a4:	d8800417 	ldw	r2,16(sp)
 80031a8:	d8c01c17 	ldw	r3,112(sp)
 80031ac:	1340210c 	andi	r13,r2,132
 80031b0:	6800021e 	bne	r13,zero,80031bc <___vfprintf_internal_r+0x348>
 80031b4:	850fc83a 	sub	r7,r16,r20
 80031b8:	01c34516 	blt	zero,r7,8003ed0 <___vfprintf_internal_r+0x105c>
 80031bc:	d8801347 	ldb	r2,77(sp)
 80031c0:	10000c26 	beq	r2,zero,80031f4 <___vfprintf_internal_r+0x380>
 80031c4:	d8801b17 	ldw	r2,108(sp)
 80031c8:	d9001344 	addi	r4,sp,77
 80031cc:	18c00044 	addi	r3,r3,1
 80031d0:	10800044 	addi	r2,r2,1
 80031d4:	b1000015 	stw	r4,0(r22)
 80031d8:	01000044 	movi	r4,1
 80031dc:	d8801b15 	stw	r2,108(sp)
 80031e0:	b1000115 	stw	r4,4(r22)
 80031e4:	d8c01c15 	stw	r3,112(sp)
 80031e8:	10800208 	cmpgei	r2,r2,8
 80031ec:	1003791e 	bne	r2,zero,8003fd4 <___vfprintf_internal_r+0x1160>
 80031f0:	b5800204 	addi	r22,r22,8
 80031f4:	70000c26 	beq	r14,zero,8003228 <___vfprintf_internal_r+0x3b4>
 80031f8:	d8801b17 	ldw	r2,108(sp)
 80031fc:	d9001384 	addi	r4,sp,78
 8003200:	18c00084 	addi	r3,r3,2
 8003204:	10800044 	addi	r2,r2,1
 8003208:	b1000015 	stw	r4,0(r22)
 800320c:	01000084 	movi	r4,2
 8003210:	d8801b15 	stw	r2,108(sp)
 8003214:	b1000115 	stw	r4,4(r22)
 8003218:	d8c01c15 	stw	r3,112(sp)
 800321c:	10800208 	cmpgei	r2,r2,8
 8003220:	10037a1e 	bne	r2,zero,800400c <___vfprintf_internal_r+0x1198>
 8003224:	b5800204 	addi	r22,r22,8
 8003228:	6b402018 	cmpnei	r13,r13,128
 800322c:	68025b26 	beq	r13,zero,8003b9c <___vfprintf_internal_r+0xd28>
 8003230:	4551c83a 	sub	r8,r8,r21
 8003234:	02029316 	blt	zero,r8,8003c84 <___vfprintf_internal_r+0xe10>
 8003238:	d8800417 	ldw	r2,16(sp)
 800323c:	1080400c 	andi	r2,r2,256
 8003240:	1002101e 	bne	r2,zero,8003a84 <___vfprintf_internal_r+0xc10>
 8003244:	d8801b17 	ldw	r2,108(sp)
 8003248:	1d47883a 	add	r3,r3,r21
 800324c:	b4400015 	stw	r17,0(r22)
 8003250:	10800044 	addi	r2,r2,1
 8003254:	b5400115 	stw	r21,4(r22)
 8003258:	d8801b15 	stw	r2,108(sp)
 800325c:	d8c01c15 	stw	r3,112(sp)
 8003260:	10800208 	cmpgei	r2,r2,8
 8003264:	1003101e 	bne	r2,zero,8003ea8 <___vfprintf_internal_r+0x1034>
 8003268:	b5800204 	addi	r22,r22,8
 800326c:	d8800417 	ldw	r2,16(sp)
 8003270:	1440010c 	andi	r17,r2,4
 8003274:	88000226 	beq	r17,zero,8003280 <___vfprintf_internal_r+0x40c>
 8003278:	8523c83a 	sub	r17,r16,r20
 800327c:	0440c616 	blt	zero,r17,8003598 <___vfprintf_internal_r+0x724>
 8003280:	8500010e 	bge	r16,r20,8003288 <___vfprintf_internal_r+0x414>
 8003284:	a021883a 	mov	r16,r20
 8003288:	d8800517 	ldw	r2,20(sp)
 800328c:	1405883a 	add	r2,r2,r16
 8003290:	d8800515 	stw	r2,20(sp)
 8003294:	1802c21e 	bne	r3,zero,8003da0 <___vfprintf_internal_r+0xf2c>
 8003298:	b8800007 	ldb	r2,0(r23)
 800329c:	d8001b15 	stw	zero,108(sp)
 80032a0:	dd802704 	addi	r22,sp,156
 80032a4:	103f291e 	bne	r2,zero,8002f4c <___vfprintf_internal_r+0xd8>
 80032a8:	d8801c17 	ldw	r2,112(sp)
 80032ac:	1006391e 	bne	r2,zero,8004b94 <___vfprintf_internal_r+0x1d20>
 80032b0:	9080030b 	ldhu	r2,12(r18)
 80032b4:	1080100c 	andi	r2,r2,64
 80032b8:	1006cf1e 	bne	r2,zero,8004df8 <___vfprintf_internal_r+0x1f84>
 80032bc:	d8800517 	ldw	r2,20(sp)
 80032c0:	dfc04017 	ldw	ra,256(sp)
 80032c4:	df003f17 	ldw	fp,252(sp)
 80032c8:	ddc03e17 	ldw	r23,248(sp)
 80032cc:	dd803d17 	ldw	r22,244(sp)
 80032d0:	dd403c17 	ldw	r21,240(sp)
 80032d4:	dd003b17 	ldw	r20,236(sp)
 80032d8:	dcc03a17 	ldw	r19,232(sp)
 80032dc:	dc803917 	ldw	r18,228(sp)
 80032e0:	dc403817 	ldw	r17,224(sp)
 80032e4:	dc003717 	ldw	r16,220(sp)
 80032e8:	dec04104 	addi	sp,sp,260
 80032ec:	f800283a 	ret
 80032f0:	900b883a 	mov	r5,r18
 80032f4:	9809883a 	mov	r4,r19
 80032f8:	80050540 	call	8005054 <__swsetup_r>
 80032fc:	1006be1e 	bne	r2,zero,8004df8 <___vfprintf_internal_r+0x1f84>
 8003300:	9080030b 	ldhu	r2,12(r18)
 8003304:	1080068c 	andi	r2,r2,26
 8003308:	10800298 	cmpnei	r2,r2,10
 800330c:	103f011e 	bne	r2,zero,8002f14 <___vfprintf_internal_r+0xa0>
 8003310:	9080038f 	ldh	r2,14(r18)
 8003314:	103eff16 	blt	r2,zero,8002f14 <___vfprintf_internal_r+0xa0>
 8003318:	d9c00617 	ldw	r7,24(sp)
 800331c:	b00d883a 	mov	r6,r22
 8003320:	900b883a 	mov	r5,r18
 8003324:	9809883a 	mov	r4,r19
 8003328:	dfc04017 	ldw	ra,256(sp)
 800332c:	df003f17 	ldw	fp,252(sp)
 8003330:	ddc03e17 	ldw	r23,248(sp)
 8003334:	dd803d17 	ldw	r22,244(sp)
 8003338:	dd403c17 	ldw	r21,240(sp)
 800333c:	dd003b17 	ldw	r20,236(sp)
 8003340:	dcc03a17 	ldw	r19,232(sp)
 8003344:	dc803917 	ldw	r18,228(sp)
 8003348:	dc403817 	ldw	r17,224(sp)
 800334c:	dc003717 	ldw	r16,220(sp)
 8003350:	dec04104 	addi	sp,sp,260
 8003354:	8004f941 	jmpi	8004f94 <__sbprintf>
 8003358:	63000414 	ori	r12,r12,16
 800335c:	6080080c 	andi	r2,r12,32
 8003360:	10008126 	beq	r2,zero,8003568 <___vfprintf_internal_r+0x6f4>
 8003364:	d8c00617 	ldw	r3,24(sp)
 8003368:	00800044 	movi	r2,1
 800336c:	1d000017 	ldw	r20,0(r3)
 8003370:	1d400117 	ldw	r21,4(r3)
 8003374:	18c00204 	addi	r3,r3,8
 8003378:	d8c00615 	stw	r3,24(sp)
 800337c:	00000906 	br	80033a4 <___vfprintf_internal_r+0x530>
 8003380:	63000414 	ori	r12,r12,16
 8003384:	6080080c 	andi	r2,r12,32
 8003388:	10006b26 	beq	r2,zero,8003538 <___vfprintf_internal_r+0x6c4>
 800338c:	d8c00617 	ldw	r3,24(sp)
 8003390:	0005883a 	mov	r2,zero
 8003394:	1d000017 	ldw	r20,0(r3)
 8003398:	1d400117 	ldw	r21,4(r3)
 800339c:	18c00204 	addi	r3,r3,8
 80033a0:	d8c00615 	stw	r3,24(sp)
 80033a4:	d8001345 	stb	zero,77(sp)
 80033a8:	40ffffe0 	cmpeqi	r3,r8,-1
 80033ac:	001b883a 	mov	r13,zero
 80033b0:	18010e1e 	bne	r3,zero,80037ec <___vfprintf_internal_r+0x978>
 80033b4:	047fdfc4 	movi	r17,-129
 80033b8:	6448703a 	and	r4,r12,r17
 80033bc:	a546b03a 	or	r3,r20,r21
 80033c0:	d9000415 	stw	r4,16(sp)
 80033c4:	1802c01e 	bne	r3,zero,8003ec8 <___vfprintf_internal_r+0x1054>
 80033c8:	40025f1e 	bne	r8,zero,8003d48 <___vfprintf_internal_r+0xed4>
 80033cc:	1003751e 	bne	r2,zero,80041a4 <___vfprintf_internal_r+0x1330>
 80033d0:	6540004c 	andi	r21,r12,1
 80033d4:	a803b026 	beq	r21,zero,8004298 <___vfprintf_internal_r+0x1424>
 80033d8:	00800c04 	movi	r2,48
 80033dc:	d88026c5 	stb	r2,155(sp)
 80033e0:	dc4026c4 	addi	r17,sp,155
 80033e4:	0000ba06 	br	80036d0 <___vfprintf_internal_r+0x85c>
 80033e8:	85e3c83a 	sub	r17,r16,r23
 80033ec:	85ffae26 	beq	r16,r23,80032a8 <___vfprintf_internal_r+0x434>
 80033f0:	d8c01c17 	ldw	r3,112(sp)
 80033f4:	d8801b17 	ldw	r2,108(sp)
 80033f8:	b5c00015 	stw	r23,0(r22)
 80033fc:	1c47883a 	add	r3,r3,r17
 8003400:	10800044 	addi	r2,r2,1
 8003404:	d8801b15 	stw	r2,108(sp)
 8003408:	b4400115 	stw	r17,4(r22)
 800340c:	d8c01c15 	stw	r3,112(sp)
 8003410:	10800208 	cmpgei	r2,r2,8
 8003414:	1000061e 	bne	r2,zero,8003430 <___vfprintf_internal_r+0x5bc>
 8003418:	b5800204 	addi	r22,r22,8
 800341c:	d8c00517 	ldw	r3,20(sp)
 8003420:	80800003 	ldbu	r2,0(r16)
 8003424:	1c47883a 	add	r3,r3,r17
 8003428:	d8c00515 	stw	r3,20(sp)
 800342c:	003ed106 	br	8002f74 <___vfprintf_internal_r+0x100>
 8003430:	d9801a04 	addi	r6,sp,104
 8003434:	900b883a 	mov	r5,r18
 8003438:	9809883a 	mov	r4,r19
 800343c:	800a5b80 	call	800a5b8 <__sprint_r>
 8003440:	103f9b1e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8003444:	dd802704 	addi	r22,sp,156
 8003448:	003ff406 	br	800341c <___vfprintf_internal_r+0x5a8>
 800344c:	21003fcc 	andi	r4,r4,255
 8003450:	2006671e 	bne	r4,zero,8004df0 <___vfprintf_internal_r+0x1f7c>
 8003454:	d8c00617 	ldw	r3,24(sp)
 8003458:	6080020c 	andi	r2,r12,8
 800345c:	19000204 	addi	r4,r3,8
 8003460:	d9000e15 	stw	r4,56(sp)
 8003464:	1003a71e 	bne	r2,zero,8004304 <___vfprintf_internal_r+0x1490>
 8003468:	d8800617 	ldw	r2,24(sp)
 800346c:	10c00017 	ldw	r3,0(r2)
 8003470:	10800117 	ldw	r2,4(r2)
 8003474:	d8c00915 	stw	r3,36(sp)
 8003478:	d8800a15 	stw	r2,40(sp)
 800347c:	dd400a17 	ldw	r21,40(sp)
 8003480:	dd000917 	ldw	r20,36(sp)
 8003484:	00a00034 	movhi	r2,32768
 8003488:	10bfffc4 	addi	r2,r2,-1
 800348c:	a8a2703a 	and	r17,r21,r2
 8003490:	01dffc34 	movhi	r7,32752
 8003494:	01bfffc4 	movi	r6,-1
 8003498:	39ffffc4 	addi	r7,r7,-1
 800349c:	a009883a 	mov	r4,r20
 80034a0:	880b883a 	mov	r5,r17
 80034a4:	da000615 	stw	r8,24(sp)
 80034a8:	db000415 	stw	r12,16(sp)
 80034ac:	800fc0c0 	call	800fc0c <__unorddf2>
 80034b0:	db000417 	ldw	r12,16(sp)
 80034b4:	da000617 	ldw	r8,24(sp)
 80034b8:	1004641e 	bne	r2,zero,800464c <___vfprintf_internal_r+0x17d8>
 80034bc:	01dffc34 	movhi	r7,32752
 80034c0:	01bfffc4 	movi	r6,-1
 80034c4:	39ffffc4 	addi	r7,r7,-1
 80034c8:	a009883a 	mov	r4,r20
 80034cc:	880b883a 	mov	r5,r17
 80034d0:	800eac40 	call	800eac4 <__ledf2>
 80034d4:	db000417 	ldw	r12,16(sp)
 80034d8:	da000617 	ldw	r8,24(sp)
 80034dc:	00845b0e 	bge	zero,r2,800464c <___vfprintf_internal_r+0x17d8>
 80034e0:	000d883a 	mov	r6,zero
 80034e4:	000f883a 	mov	r7,zero
 80034e8:	a009883a 	mov	r4,r20
 80034ec:	a80b883a 	mov	r5,r21
 80034f0:	800eac40 	call	800eac4 <__ledf2>
 80034f4:	db000417 	ldw	r12,16(sp)
 80034f8:	10059116 	blt	r2,zero,8004b40 <___vfprintf_internal_r+0x1ccc>
 80034fc:	db401343 	ldbu	r13,77(sp)
 8003500:	e0801210 	cmplti	r2,fp,72
 8003504:	1005391e 	bne	r2,zero,80049ec <___vfprintf_internal_r+0x1b78>
 8003508:	04420074 	movhi	r17,2049
 800350c:	8c4b4b04 	addi	r17,r17,11564
 8003510:	00bfdfc4 	movi	r2,-129
 8003514:	6084703a 	and	r2,r12,r2
 8003518:	d8800415 	stw	r2,16(sp)
 800351c:	d8800e17 	ldw	r2,56(sp)
 8003520:	050000c4 	movi	r20,3
 8003524:	054000c4 	movi	r21,3
 8003528:	d8800615 	stw	r2,24(sp)
 800352c:	0011883a 	mov	r8,zero
 8003530:	d8000715 	stw	zero,28(sp)
 8003534:	00006a06 	br	80036e0 <___vfprintf_internal_r+0x86c>
 8003538:	d9000617 	ldw	r4,24(sp)
 800353c:	6080040c 	andi	r2,r12,16
 8003540:	20c00104 	addi	r3,r4,4
 8003544:	10036a1e 	bne	r2,zero,80042f0 <___vfprintf_internal_r+0x147c>
 8003548:	6080100c 	andi	r2,r12,64
 800354c:	10052126 	beq	r2,zero,80049d4 <___vfprintf_internal_r+0x1b60>
 8003550:	d8800617 	ldw	r2,24(sp)
 8003554:	002b883a 	mov	r21,zero
 8003558:	d8c00615 	stw	r3,24(sp)
 800355c:	1500000b 	ldhu	r20,0(r2)
 8003560:	0005883a 	mov	r2,zero
 8003564:	003f8f06 	br	80033a4 <___vfprintf_internal_r+0x530>
 8003568:	d9000617 	ldw	r4,24(sp)
 800356c:	6080040c 	andi	r2,r12,16
 8003570:	20c00104 	addi	r3,r4,4
 8003574:	1003501e 	bne	r2,zero,80042b8 <___vfprintf_internal_r+0x1444>
 8003578:	6080100c 	andi	r2,r12,64
 800357c:	10055926 	beq	r2,zero,8004ae4 <___vfprintf_internal_r+0x1c70>
 8003580:	d8800617 	ldw	r2,24(sp)
 8003584:	002b883a 	mov	r21,zero
 8003588:	d8c00615 	stw	r3,24(sp)
 800358c:	1500000b 	ldhu	r20,0(r2)
 8003590:	00800044 	movi	r2,1
 8003594:	003f8306 	br	80033a4 <___vfprintf_internal_r+0x530>
 8003598:	03020074 	movhi	r12,2049
 800359c:	89000450 	cmplti	r4,r17,17
 80035a0:	d8801b17 	ldw	r2,108(sp)
 80035a4:	630b5f04 	addi	r12,r12,11644
 80035a8:	20001b1e 	bne	r4,zero,8003618 <___vfprintf_internal_r+0x7a4>
 80035ac:	05400404 	movi	r21,16
 80035b0:	6039883a 	mov	fp,r12
 80035b4:	00000406 	br	80035c8 <___vfprintf_internal_r+0x754>
 80035b8:	8c7ffc04 	addi	r17,r17,-16
 80035bc:	89000448 	cmpgei	r4,r17,17
 80035c0:	b5800204 	addi	r22,r22,8
 80035c4:	20001326 	beq	r4,zero,8003614 <___vfprintf_internal_r+0x7a0>
 80035c8:	10800044 	addi	r2,r2,1
 80035cc:	18c00404 	addi	r3,r3,16
 80035d0:	b7000015 	stw	fp,0(r22)
 80035d4:	b5400115 	stw	r21,4(r22)
 80035d8:	d8c01c15 	stw	r3,112(sp)
 80035dc:	d8801b15 	stw	r2,108(sp)
 80035e0:	11000208 	cmpgei	r4,r2,8
 80035e4:	203ff426 	beq	r4,zero,80035b8 <___vfprintf_internal_r+0x744>
 80035e8:	d9801a04 	addi	r6,sp,104
 80035ec:	900b883a 	mov	r5,r18
 80035f0:	9809883a 	mov	r4,r19
 80035f4:	800a5b80 	call	800a5b8 <__sprint_r>
 80035f8:	103f2d1e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 80035fc:	8c7ffc04 	addi	r17,r17,-16
 8003600:	89000448 	cmpgei	r4,r17,17
 8003604:	d8c01c17 	ldw	r3,112(sp)
 8003608:	d8801b17 	ldw	r2,108(sp)
 800360c:	dd802704 	addi	r22,sp,156
 8003610:	203fed1e 	bne	r4,zero,80035c8 <___vfprintf_internal_r+0x754>
 8003614:	e019883a 	mov	r12,fp
 8003618:	10800044 	addi	r2,r2,1
 800361c:	1c47883a 	add	r3,r3,r17
 8003620:	d8801b15 	stw	r2,108(sp)
 8003624:	b3000015 	stw	r12,0(r22)
 8003628:	b4400115 	stw	r17,4(r22)
 800362c:	d8c01c15 	stw	r3,112(sp)
 8003630:	10800210 	cmplti	r2,r2,8
 8003634:	103f121e 	bne	r2,zero,8003280 <___vfprintf_internal_r+0x40c>
 8003638:	d9801a04 	addi	r6,sp,104
 800363c:	900b883a 	mov	r5,r18
 8003640:	9809883a 	mov	r4,r19
 8003644:	800a5b80 	call	800a5b8 <__sprint_r>
 8003648:	103f191e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 800364c:	d8c01c17 	ldw	r3,112(sp)
 8003650:	003f0b06 	br	8003280 <___vfprintf_internal_r+0x40c>
 8003654:	9809883a 	mov	r4,r19
 8003658:	80071900 	call	8007190 <__sinit>
 800365c:	003e1d06 	br	8002ed4 <___vfprintf_internal_r+0x60>
 8003660:	21003fcc 	andi	r4,r4,255
 8003664:	2005de1e 	bne	r4,zero,8004de0 <___vfprintf_internal_r+0x1f6c>
 8003668:	6080080c 	andi	r2,r12,32
 800366c:	10004926 	beq	r2,zero,8003794 <___vfprintf_internal_r+0x920>
 8003670:	d8c00617 	ldw	r3,24(sp)
 8003674:	18800117 	ldw	r2,4(r3)
 8003678:	1d000017 	ldw	r20,0(r3)
 800367c:	18c00204 	addi	r3,r3,8
 8003680:	d8c00615 	stw	r3,24(sp)
 8003684:	102b883a 	mov	r21,r2
 8003688:	10004e16 	blt	r2,zero,80037c4 <___vfprintf_internal_r+0x950>
 800368c:	40bfffd8 	cmpnei	r2,r8,-1
 8003690:	db401343 	ldbu	r13,77(sp)
 8003694:	10000626 	beq	r2,zero,80036b0 <___vfprintf_internal_r+0x83c>
 8003698:	047fdfc4 	movi	r17,-129
 800369c:	6446703a 	and	r3,r12,r17
 80036a0:	a544b03a 	or	r2,r20,r21
 80036a4:	d8c00415 	stw	r3,16(sp)
 80036a8:	1002bd26 	beq	r2,zero,80041a0 <___vfprintf_internal_r+0x132c>
 80036ac:	db000417 	ldw	r12,16(sp)
 80036b0:	a803701e 	bne	r21,zero,8004474 <___vfprintf_internal_r+0x1600>
 80036b4:	a08002a8 	cmpgeui	r2,r20,10
 80036b8:	10036e1e 	bne	r2,zero,8004474 <___vfprintf_internal_r+0x1600>
 80036bc:	a5000c04 	addi	r20,r20,48
 80036c0:	dd0026c5 	stb	r20,155(sp)
 80036c4:	db000415 	stw	r12,16(sp)
 80036c8:	05400044 	movi	r21,1
 80036cc:	dc4026c4 	addi	r17,sp,155
 80036d0:	4029883a 	mov	r20,r8
 80036d4:	4540010e 	bge	r8,r21,80036dc <___vfprintf_internal_r+0x868>
 80036d8:	a829883a 	mov	r20,r21
 80036dc:	d8000715 	stw	zero,28(sp)
 80036e0:	6b403fcc 	andi	r13,r13,255
 80036e4:	6b40201c 	xori	r13,r13,128
 80036e8:	6b7fe004 	addi	r13,r13,-128
 80036ec:	683ea926 	beq	r13,zero,8003194 <___vfprintf_internal_r+0x320>
 80036f0:	a5000044 	addi	r20,r20,1
 80036f4:	003ea706 	br	8003194 <___vfprintf_internal_r+0x320>
 80036f8:	bac00007 	ldb	r11,0(r23)
 80036fc:	63001014 	ori	r12,r12,64
 8003700:	003e2806 	br	8002fa4 <___vfprintf_internal_r+0x130>
 8003704:	d8c00617 	ldw	r3,24(sp)
 8003708:	d8001345 	stb	zero,77(sp)
 800370c:	05000044 	movi	r20,1
 8003710:	18800017 	ldw	r2,0(r3)
 8003714:	18c00104 	addi	r3,r3,4
 8003718:	d8c00615 	stw	r3,24(sp)
 800371c:	d8801d05 	stb	r2,116(sp)
 8003720:	05400044 	movi	r21,1
 8003724:	dc401d04 	addi	r17,sp,116
 8003728:	003e9706 	br	8003188 <___vfprintf_internal_r+0x314>
 800372c:	21003fcc 	andi	r4,r4,255
 8003730:	2005a71e 	bne	r4,zero,8004dd0 <___vfprintf_internal_r+0x1f5c>
 8003734:	00820074 	movhi	r2,2049
 8003738:	108b5304 	addi	r2,r2,11596
 800373c:	d8800c15 	stw	r2,48(sp)
 8003740:	6080080c 	andi	r2,r12,32
 8003744:	10008726 	beq	r2,zero,8003964 <___vfprintf_internal_r+0xaf0>
 8003748:	d8800617 	ldw	r2,24(sp)
 800374c:	15000017 	ldw	r20,0(r2)
 8003750:	15400117 	ldw	r21,4(r2)
 8003754:	10800204 	addi	r2,r2,8
 8003758:	d8800615 	stw	r2,24(sp)
 800375c:	6080004c 	andi	r2,r12,1
 8003760:	10000226 	beq	r2,zero,800376c <___vfprintf_internal_r+0x8f8>
 8003764:	a544b03a 	or	r2,r20,r21
 8003768:	1002cd1e 	bne	r2,zero,80042a0 <___vfprintf_internal_r+0x142c>
 800376c:	00800084 	movi	r2,2
 8003770:	003f0c06 	br	80033a4 <___vfprintf_internal_r+0x530>
 8003774:	bac00007 	ldb	r11,0(r23)
 8003778:	63000214 	ori	r12,r12,8
 800377c:	003e0906 	br	8002fa4 <___vfprintf_internal_r+0x130>
 8003780:	21003fcc 	andi	r4,r4,255
 8003784:	2005981e 	bne	r4,zero,8004de8 <___vfprintf_internal_r+0x1f74>
 8003788:	63000414 	ori	r12,r12,16
 800378c:	6080080c 	andi	r2,r12,32
 8003790:	103fb71e 	bne	r2,zero,8003670 <___vfprintf_internal_r+0x7fc>
 8003794:	d9000617 	ldw	r4,24(sp)
 8003798:	6080040c 	andi	r2,r12,16
 800379c:	20c00104 	addi	r3,r4,4
 80037a0:	1002dd1e 	bne	r2,zero,8004318 <___vfprintf_internal_r+0x14a4>
 80037a4:	6080100c 	andi	r2,r12,64
 80037a8:	10048426 	beq	r2,zero,80049bc <___vfprintf_internal_r+0x1b48>
 80037ac:	d8800617 	ldw	r2,24(sp)
 80037b0:	d8c00615 	stw	r3,24(sp)
 80037b4:	1500000f 	ldh	r20,0(r2)
 80037b8:	a02bd7fa 	srai	r21,r20,31
 80037bc:	a805883a 	mov	r2,r21
 80037c0:	103fb20e 	bge	r2,zero,800368c <___vfprintf_internal_r+0x818>
 80037c4:	a004c03a 	cmpne	r2,r20,zero
 80037c8:	056bc83a 	sub	r21,zero,r21
 80037cc:	a8abc83a 	sub	r21,r21,r2
 80037d0:	00800b44 	movi	r2,45
 80037d4:	d8801345 	stb	r2,77(sp)
 80037d8:	40ffffe0 	cmpeqi	r3,r8,-1
 80037dc:	0529c83a 	sub	r20,zero,r20
 80037e0:	03400b44 	movi	r13,45
 80037e4:	00800044 	movi	r2,1
 80037e8:	183ef226 	beq	r3,zero,80033b4 <___vfprintf_internal_r+0x540>
 80037ec:	10c00060 	cmpeqi	r3,r2,1
 80037f0:	183faf1e 	bne	r3,zero,80036b0 <___vfprintf_internal_r+0x83c>
 80037f4:	108000a0 	cmpeqi	r2,r2,2
 80037f8:	1001581e 	bne	r2,zero,8003d5c <___vfprintf_internal_r+0xee8>
 80037fc:	dc402704 	addi	r17,sp,156
 8003800:	a006d0fa 	srli	r3,r20,3
 8003804:	a808977a 	slli	r4,r21,29
 8003808:	a82ad0fa 	srli	r21,r21,3
 800380c:	a50001cc 	andi	r20,r20,7
 8003810:	a0800c04 	addi	r2,r20,48
 8003814:	20e8b03a 	or	r20,r4,r3
 8003818:	88bfffc5 	stb	r2,-1(r17)
 800381c:	a546b03a 	or	r3,r20,r21
 8003820:	880b883a 	mov	r5,r17
 8003824:	8c7fffc4 	addi	r17,r17,-1
 8003828:	183ff51e 	bne	r3,zero,8003800 <___vfprintf_internal_r+0x98c>
 800382c:	60c0004c 	andi	r3,r12,1
 8003830:	18015726 	beq	r3,zero,8003d90 <___vfprintf_internal_r+0xf1c>
 8003834:	10803fcc 	andi	r2,r2,255
 8003838:	1080201c 	xori	r2,r2,128
 800383c:	10bfe004 	addi	r2,r2,-128
 8003840:	10800c18 	cmpnei	r2,r2,48
 8003844:	10015226 	beq	r2,zero,8003d90 <___vfprintf_internal_r+0xf1c>
 8003848:	00800c04 	movi	r2,48
 800384c:	297fff84 	addi	r5,r5,-2
 8003850:	88bfffc5 	stb	r2,-1(r17)
 8003854:	d8802704 	addi	r2,sp,156
 8003858:	116bc83a 	sub	r21,r2,r5
 800385c:	db000415 	stw	r12,16(sp)
 8003860:	2823883a 	mov	r17,r5
 8003864:	003f9a06 	br	80036d0 <___vfprintf_internal_r+0x85c>
 8003868:	bac00007 	ldb	r11,0(r23)
 800386c:	63002014 	ori	r12,r12,128
 8003870:	003dcc06 	br	8002fa4 <___vfprintf_internal_r+0x130>
 8003874:	bf000007 	ldb	fp,0(r23)
 8003878:	b8800044 	addi	r2,r23,1
 800387c:	e0c00aa0 	cmpeqi	r3,fp,42
 8003880:	1805b11e 	bne	r3,zero,8004f48 <___vfprintf_internal_r+0x20d4>
 8003884:	e0fff404 	addi	r3,fp,-48
 8003888:	198002b0 	cmpltui	r6,r3,10
 800388c:	102f883a 	mov	r23,r2
 8003890:	0011883a 	mov	r8,zero
 8003894:	303dc526 	beq	r6,zero,8002fac <___vfprintf_internal_r+0x138>
 8003898:	400490ba 	slli	r2,r8,2
 800389c:	bf000007 	ldb	fp,0(r23)
 80038a0:	bdc00044 	addi	r23,r23,1
 80038a4:	1211883a 	add	r8,r2,r8
 80038a8:	4211883a 	add	r8,r8,r8
 80038ac:	40d1883a 	add	r8,r8,r3
 80038b0:	e0fff404 	addi	r3,fp,-48
 80038b4:	188002b0 	cmpltui	r2,r3,10
 80038b8:	103ff71e 	bne	r2,zero,8003898 <___vfprintf_internal_r+0xa24>
 80038bc:	003dbb06 	br	8002fac <___vfprintf_internal_r+0x138>
 80038c0:	bf000003 	ldbu	fp,0(r23)
 80038c4:	e2c03fcc 	andi	r11,fp,255
 80038c8:	5ac0201c 	xori	r11,r11,128
 80038cc:	63000114 	ori	r12,r12,4
 80038d0:	5affe004 	addi	r11,r11,-128
 80038d4:	003db306 	br	8002fa4 <___vfprintf_internal_r+0x130>
 80038d8:	bac00007 	ldb	r11,0(r23)
 80038dc:	01000044 	movi	r4,1
 80038e0:	01400ac4 	movi	r5,43
 80038e4:	003daf06 	br	8002fa4 <___vfprintf_internal_r+0x130>
 80038e8:	d8800617 	ldw	r2,24(sp)
 80038ec:	bf000003 	ldbu	fp,0(r23)
 80038f0:	14000017 	ldw	r16,0(r2)
 80038f4:	10800104 	addi	r2,r2,4
 80038f8:	80028c16 	blt	r16,zero,800432c <___vfprintf_internal_r+0x14b8>
 80038fc:	d8800615 	stw	r2,24(sp)
 8003900:	e2c03fcc 	andi	r11,fp,255
 8003904:	5ac0201c 	xori	r11,r11,128
 8003908:	5affe004 	addi	r11,r11,-128
 800390c:	003da506 	br	8002fa4 <___vfprintf_internal_r+0x130>
 8003910:	bac00007 	ldb	r11,0(r23)
 8003914:	63000054 	ori	r12,r12,1
 8003918:	003da206 	br	8002fa4 <___vfprintf_internal_r+0x130>
 800391c:	28803fcc 	andi	r2,r5,255
 8003920:	1080201c 	xori	r2,r2,128
 8003924:	10bfe004 	addi	r2,r2,-128
 8003928:	bf000003 	ldbu	fp,0(r23)
 800392c:	103ff41e 	bne	r2,zero,8003900 <___vfprintf_internal_r+0xa8c>
 8003930:	e2c03fcc 	andi	r11,fp,255
 8003934:	5ac0201c 	xori	r11,r11,128
 8003938:	01000044 	movi	r4,1
 800393c:	01400804 	movi	r5,32
 8003940:	5affe004 	addi	r11,r11,-128
 8003944:	003d9706 	br	8002fa4 <___vfprintf_internal_r+0x130>
 8003948:	21003fcc 	andi	r4,r4,255
 800394c:	20051e1e 	bne	r4,zero,8004dc8 <___vfprintf_internal_r+0x1f54>
 8003950:	00820074 	movhi	r2,2049
 8003954:	108b4e04 	addi	r2,r2,11576
 8003958:	d8800c15 	stw	r2,48(sp)
 800395c:	6080080c 	andi	r2,r12,32
 8003960:	103f791e 	bne	r2,zero,8003748 <___vfprintf_internal_r+0x8d4>
 8003964:	d9000617 	ldw	r4,24(sp)
 8003968:	6080040c 	andi	r2,r12,16
 800396c:	20c00104 	addi	r3,r4,4
 8003970:	10025b1e 	bne	r2,zero,80042e0 <___vfprintf_internal_r+0x146c>
 8003974:	6080100c 	andi	r2,r12,64
 8003978:	10046026 	beq	r2,zero,8004afc <___vfprintf_internal_r+0x1c88>
 800397c:	d8800617 	ldw	r2,24(sp)
 8003980:	002b883a 	mov	r21,zero
 8003984:	d8c00615 	stw	r3,24(sp)
 8003988:	1500000b 	ldhu	r20,0(r2)
 800398c:	003f7306 	br	800375c <___vfprintf_internal_r+0x8e8>
 8003990:	d8800617 	ldw	r2,24(sp)
 8003994:	d8001345 	stb	zero,77(sp)
 8003998:	14400017 	ldw	r17,0(r2)
 800399c:	10c00104 	addi	r3,r2,4
 80039a0:	88028e26 	beq	r17,zero,80043dc <___vfprintf_internal_r+0x1568>
 80039a4:	40bfffe0 	cmpeqi	r2,r8,-1
 80039a8:	1003c01e 	bne	r2,zero,80048ac <___vfprintf_internal_r+0x1a38>
 80039ac:	400d883a 	mov	r6,r8
 80039b0:	000b883a 	mov	r5,zero
 80039b4:	8809883a 	mov	r4,r17
 80039b8:	d8c00715 	stw	r3,28(sp)
 80039bc:	db000615 	stw	r12,24(sp)
 80039c0:	da000415 	stw	r8,16(sp)
 80039c4:	80086400 	call	8008640 <memchr>
 80039c8:	da000417 	ldw	r8,16(sp)
 80039cc:	db000617 	ldw	r12,24(sp)
 80039d0:	d8c00717 	ldw	r3,28(sp)
 80039d4:	1004ec26 	beq	r2,zero,8004d88 <___vfprintf_internal_r+0x1f14>
 80039d8:	146bc83a 	sub	r21,r2,r17
 80039dc:	a829883a 	mov	r20,r21
 80039e0:	d8c00615 	stw	r3,24(sp)
 80039e4:	003de806 	br	8003188 <___vfprintf_internal_r+0x314>
 80039e8:	bac00007 	ldb	r11,0(r23)
 80039ec:	63000814 	ori	r12,r12,32
 80039f0:	003d6c06 	br	8002fa4 <___vfprintf_internal_r+0x130>
 80039f4:	d8c00617 	ldw	r3,24(sp)
 80039f8:	00800c04 	movi	r2,48
 80039fc:	d8801385 	stb	r2,78(sp)
 8003a00:	00801e04 	movi	r2,120
 8003a04:	01020074 	movhi	r4,2049
 8003a08:	d88013c5 	stb	r2,79(sp)
 8003a0c:	18800104 	addi	r2,r3,4
 8003a10:	d8800615 	stw	r2,24(sp)
 8003a14:	208b4e04 	addi	r2,r4,11576
 8003a18:	d8800c15 	stw	r2,48(sp)
 8003a1c:	1d000017 	ldw	r20,0(r3)
 8003a20:	002b883a 	mov	r21,zero
 8003a24:	63000094 	ori	r12,r12,2
 8003a28:	00800084 	movi	r2,2
 8003a2c:	07001e04 	movi	fp,120
 8003a30:	003e5c06 	br	80033a4 <___vfprintf_internal_r+0x530>
 8003a34:	21003fcc 	andi	r4,r4,255
 8003a38:	2004e71e 	bne	r4,zero,8004dd8 <___vfprintf_internal_r+0x1f64>
 8003a3c:	d9000617 	ldw	r4,24(sp)
 8003a40:	6080080c 	andi	r2,r12,32
 8003a44:	20c00017 	ldw	r3,0(r4)
 8003a48:	21000104 	addi	r4,r4,4
 8003a4c:	d9000615 	stw	r4,24(sp)
 8003a50:	10021e1e 	bne	r2,zero,80042cc <___vfprintf_internal_r+0x1458>
 8003a54:	6080040c 	andi	r2,r12,16
 8003a58:	1002ae1e 	bne	r2,zero,8004514 <___vfprintf_internal_r+0x16a0>
 8003a5c:	6300100c 	andi	r12,r12,64
 8003a60:	6002ac26 	beq	r12,zero,8004514 <___vfprintf_internal_r+0x16a0>
 8003a64:	d8800517 	ldw	r2,20(sp)
 8003a68:	1880000d 	sth	r2,0(r3)
 8003a6c:	003d3506 	br	8002f44 <___vfprintf_internal_r+0xd0>
 8003a70:	bac00007 	ldb	r11,0(r23)
 8003a74:	58801b18 	cmpnei	r2,r11,108
 8003a78:	10024926 	beq	r2,zero,80043a0 <___vfprintf_internal_r+0x152c>
 8003a7c:	63000414 	ori	r12,r12,16
 8003a80:	003d4806 	br	8002fa4 <___vfprintf_internal_r+0x130>
 8003a84:	e2c01990 	cmplti	r11,fp,102
 8003a88:	5800cb1e 	bne	r11,zero,8003db8 <___vfprintf_internal_r+0xf44>
 8003a8c:	d9000917 	ldw	r4,36(sp)
 8003a90:	d9400a17 	ldw	r5,40(sp)
 8003a94:	000d883a 	mov	r6,zero
 8003a98:	000f883a 	mov	r7,zero
 8003a9c:	d8c00e15 	stw	r3,56(sp)
 8003aa0:	800e95c0 	call	800e95c <__eqdf2>
 8003aa4:	d8c00e17 	ldw	r3,56(sp)
 8003aa8:	1001641e 	bne	r2,zero,800403c <___vfprintf_internal_r+0x11c8>
 8003aac:	d8801b17 	ldw	r2,108(sp)
 8003ab0:	01020074 	movhi	r4,2049
 8003ab4:	210b5a04 	addi	r4,r4,11624
 8003ab8:	10800044 	addi	r2,r2,1
 8003abc:	18c00044 	addi	r3,r3,1
 8003ac0:	b1000015 	stw	r4,0(r22)
 8003ac4:	01000044 	movi	r4,1
 8003ac8:	d8801b15 	stw	r2,108(sp)
 8003acc:	b1000115 	stw	r4,4(r22)
 8003ad0:	d8c01c15 	stw	r3,112(sp)
 8003ad4:	10800208 	cmpgei	r2,r2,8
 8003ad8:	1003621e 	bne	r2,zero,8004864 <___vfprintf_internal_r+0x19f0>
 8003adc:	b5800204 	addi	r22,r22,8
 8003ae0:	d8801417 	ldw	r2,80(sp)
 8003ae4:	d9000817 	ldw	r4,32(sp)
 8003ae8:	1101e70e 	bge	r2,r4,8004288 <___vfprintf_internal_r+0x1414>
 8003aec:	d8800d17 	ldw	r2,52(sp)
 8003af0:	d9000b17 	ldw	r4,44(sp)
 8003af4:	b0800015 	stw	r2,0(r22)
 8003af8:	d8801b17 	ldw	r2,108(sp)
 8003afc:	1907883a 	add	r3,r3,r4
 8003b00:	b1000115 	stw	r4,4(r22)
 8003b04:	10800044 	addi	r2,r2,1
 8003b08:	d8801b15 	stw	r2,108(sp)
 8003b0c:	d8c01c15 	stw	r3,112(sp)
 8003b10:	10800208 	cmpgei	r2,r2,8
 8003b14:	1002291e 	bne	r2,zero,80043bc <___vfprintf_internal_r+0x1548>
 8003b18:	b5800204 	addi	r22,r22,8
 8003b1c:	d8800817 	ldw	r2,32(sp)
 8003b20:	157fffc4 	addi	r21,r2,-1
 8003b24:	057dd10e 	bge	zero,r21,800326c <___vfprintf_internal_r+0x3f8>
 8003b28:	01c20074 	movhi	r7,2049
 8003b2c:	a9000450 	cmplti	r4,r21,17
 8003b30:	d8801b17 	ldw	r2,108(sp)
 8003b34:	39cb5b04 	addi	r7,r7,11628
 8003b38:	2003461e 	bne	r4,zero,8004854 <___vfprintf_internal_r+0x19e0>
 8003b3c:	07000404 	movi	fp,16
 8003b40:	3823883a 	mov	r17,r7
 8003b44:	00000406 	br	8003b58 <___vfprintf_internal_r+0xce4>
 8003b48:	b5800204 	addi	r22,r22,8
 8003b4c:	ad7ffc04 	addi	r21,r21,-16
 8003b50:	a9000448 	cmpgei	r4,r21,17
 8003b54:	20033e26 	beq	r4,zero,8004850 <___vfprintf_internal_r+0x19dc>
 8003b58:	10800044 	addi	r2,r2,1
 8003b5c:	18c00404 	addi	r3,r3,16
 8003b60:	b4400015 	stw	r17,0(r22)
 8003b64:	b7000115 	stw	fp,4(r22)
 8003b68:	d8c01c15 	stw	r3,112(sp)
 8003b6c:	d8801b15 	stw	r2,108(sp)
 8003b70:	11000208 	cmpgei	r4,r2,8
 8003b74:	203ff426 	beq	r4,zero,8003b48 <___vfprintf_internal_r+0xcd4>
 8003b78:	d9801a04 	addi	r6,sp,104
 8003b7c:	900b883a 	mov	r5,r18
 8003b80:	9809883a 	mov	r4,r19
 8003b84:	800a5b80 	call	800a5b8 <__sprint_r>
 8003b88:	103dc91e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8003b8c:	d8c01c17 	ldw	r3,112(sp)
 8003b90:	d8801b17 	ldw	r2,108(sp)
 8003b94:	dd802704 	addi	r22,sp,156
 8003b98:	003fec06 	br	8003b4c <___vfprintf_internal_r+0xcd8>
 8003b9c:	8519c83a 	sub	r12,r16,r20
 8003ba0:	033da30e 	bge	zero,r12,8003230 <___vfprintf_internal_r+0x3bc>
 8003ba4:	01c20074 	movhi	r7,2049
 8003ba8:	61000450 	cmplti	r4,r12,17
 8003bac:	d8801b17 	ldw	r2,108(sp)
 8003bb0:	39cb5b04 	addi	r7,r7,11628
 8003bb4:	2000281e 	bne	r4,zero,8003c58 <___vfprintf_internal_r+0xde4>
 8003bb8:	dc400e15 	stw	r17,56(sp)
 8003bbc:	dc000f15 	stw	r16,60(sp)
 8003bc0:	b009883a 	mov	r4,r22
 8003bc4:	03400404 	movi	r13,16
 8003bc8:	a02d883a 	mov	r22,r20
 8003bcc:	6021883a 	mov	r16,r12
 8003bd0:	4029883a 	mov	r20,r8
 8003bd4:	3823883a 	mov	r17,r7
 8003bd8:	00000406 	br	8003bec <___vfprintf_internal_r+0xd78>
 8003bdc:	843ffc04 	addi	r16,r16,-16
 8003be0:	81400448 	cmpgei	r5,r16,17
 8003be4:	21000204 	addi	r4,r4,8
 8003be8:	28001426 	beq	r5,zero,8003c3c <___vfprintf_internal_r+0xdc8>
 8003bec:	10800044 	addi	r2,r2,1
 8003bf0:	18c00404 	addi	r3,r3,16
 8003bf4:	24400015 	stw	r17,0(r4)
 8003bf8:	23400115 	stw	r13,4(r4)
 8003bfc:	d8c01c15 	stw	r3,112(sp)
 8003c00:	d8801b15 	stw	r2,108(sp)
 8003c04:	11400208 	cmpgei	r5,r2,8
 8003c08:	283ff426 	beq	r5,zero,8003bdc <___vfprintf_internal_r+0xd68>
 8003c0c:	d9801a04 	addi	r6,sp,104
 8003c10:	900b883a 	mov	r5,r18
 8003c14:	9809883a 	mov	r4,r19
 8003c18:	800a5b80 	call	800a5b8 <__sprint_r>
 8003c1c:	103da41e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8003c20:	843ffc04 	addi	r16,r16,-16
 8003c24:	81400448 	cmpgei	r5,r16,17
 8003c28:	d8c01c17 	ldw	r3,112(sp)
 8003c2c:	d8801b17 	ldw	r2,108(sp)
 8003c30:	d9002704 	addi	r4,sp,156
 8003c34:	03400404 	movi	r13,16
 8003c38:	283fec1e 	bne	r5,zero,8003bec <___vfprintf_internal_r+0xd78>
 8003c3c:	8019883a 	mov	r12,r16
 8003c40:	880f883a 	mov	r7,r17
 8003c44:	dc000f17 	ldw	r16,60(sp)
 8003c48:	dc400e17 	ldw	r17,56(sp)
 8003c4c:	a011883a 	mov	r8,r20
 8003c50:	b029883a 	mov	r20,r22
 8003c54:	202d883a 	mov	r22,r4
 8003c58:	10800044 	addi	r2,r2,1
 8003c5c:	1b07883a 	add	r3,r3,r12
 8003c60:	d8801b15 	stw	r2,108(sp)
 8003c64:	b1c00015 	stw	r7,0(r22)
 8003c68:	b3000115 	stw	r12,4(r22)
 8003c6c:	d8c01c15 	stw	r3,112(sp)
 8003c70:	10800208 	cmpgei	r2,r2,8
 8003c74:	1003031e 	bne	r2,zero,8004884 <___vfprintf_internal_r+0x1a10>
 8003c78:	4551c83a 	sub	r8,r8,r21
 8003c7c:	b5800204 	addi	r22,r22,8
 8003c80:	023d6d0e 	bge	zero,r8,8003238 <___vfprintf_internal_r+0x3c4>
 8003c84:	01c20074 	movhi	r7,2049
 8003c88:	41000450 	cmplti	r4,r8,17
 8003c8c:	d8801b17 	ldw	r2,108(sp)
 8003c90:	39cb5b04 	addi	r7,r7,11628
 8003c94:	2000221e 	bne	r4,zero,8003d20 <___vfprintf_internal_r+0xeac>
 8003c98:	dc400e15 	stw	r17,56(sp)
 8003c9c:	dc000f15 	stw	r16,60(sp)
 8003ca0:	03000404 	movi	r12,16
 8003ca4:	4021883a 	mov	r16,r8
 8003ca8:	3823883a 	mov	r17,r7
 8003cac:	00000406 	br	8003cc0 <___vfprintf_internal_r+0xe4c>
 8003cb0:	843ffc04 	addi	r16,r16,-16
 8003cb4:	81000448 	cmpgei	r4,r16,17
 8003cb8:	b5800204 	addi	r22,r22,8
 8003cbc:	20001426 	beq	r4,zero,8003d10 <___vfprintf_internal_r+0xe9c>
 8003cc0:	10800044 	addi	r2,r2,1
 8003cc4:	18c00404 	addi	r3,r3,16
 8003cc8:	b4400015 	stw	r17,0(r22)
 8003ccc:	b3000115 	stw	r12,4(r22)
 8003cd0:	d8c01c15 	stw	r3,112(sp)
 8003cd4:	d8801b15 	stw	r2,108(sp)
 8003cd8:	11000208 	cmpgei	r4,r2,8
 8003cdc:	203ff426 	beq	r4,zero,8003cb0 <___vfprintf_internal_r+0xe3c>
 8003ce0:	d9801a04 	addi	r6,sp,104
 8003ce4:	900b883a 	mov	r5,r18
 8003ce8:	9809883a 	mov	r4,r19
 8003cec:	800a5b80 	call	800a5b8 <__sprint_r>
 8003cf0:	103d6f1e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8003cf4:	843ffc04 	addi	r16,r16,-16
 8003cf8:	81000448 	cmpgei	r4,r16,17
 8003cfc:	d8c01c17 	ldw	r3,112(sp)
 8003d00:	d8801b17 	ldw	r2,108(sp)
 8003d04:	dd802704 	addi	r22,sp,156
 8003d08:	03000404 	movi	r12,16
 8003d0c:	203fec1e 	bne	r4,zero,8003cc0 <___vfprintf_internal_r+0xe4c>
 8003d10:	8011883a 	mov	r8,r16
 8003d14:	880f883a 	mov	r7,r17
 8003d18:	dc000f17 	ldw	r16,60(sp)
 8003d1c:	dc400e17 	ldw	r17,56(sp)
 8003d20:	10800044 	addi	r2,r2,1
 8003d24:	1a07883a 	add	r3,r3,r8
 8003d28:	d8801b15 	stw	r2,108(sp)
 8003d2c:	b1c00015 	stw	r7,0(r22)
 8003d30:	b2000115 	stw	r8,4(r22)
 8003d34:	d8c01c15 	stw	r3,112(sp)
 8003d38:	10800208 	cmpgei	r2,r2,8
 8003d3c:	10014a1e 	bne	r2,zero,8004268 <___vfprintf_internal_r+0x13f4>
 8003d40:	b5800204 	addi	r22,r22,8
 8003d44:	003d3c06 	br	8003238 <___vfprintf_internal_r+0x3c4>
 8003d48:	10c00060 	cmpeqi	r3,r2,1
 8003d4c:	1803bc1e 	bne	r3,zero,8004c40 <___vfprintf_internal_r+0x1dcc>
 8003d50:	108000a0 	cmpeqi	r2,r2,2
 8003d54:	db000417 	ldw	r12,16(sp)
 8003d58:	103ea826 	beq	r2,zero,80037fc <___vfprintf_internal_r+0x988>
 8003d5c:	d9000c17 	ldw	r4,48(sp)
 8003d60:	dc402704 	addi	r17,sp,156
 8003d64:	a08003cc 	andi	r2,r20,15
 8003d68:	a806973a 	slli	r3,r21,28
 8003d6c:	a028d13a 	srli	r20,r20,4
 8003d70:	2085883a 	add	r2,r4,r2
 8003d74:	10800003 	ldbu	r2,0(r2)
 8003d78:	a82ad13a 	srli	r21,r21,4
 8003d7c:	1d28b03a 	or	r20,r3,r20
 8003d80:	88bfffc5 	stb	r2,-1(r17)
 8003d84:	a544b03a 	or	r2,r20,r21
 8003d88:	8c7fffc4 	addi	r17,r17,-1
 8003d8c:	103ff51e 	bne	r2,zero,8003d64 <___vfprintf_internal_r+0xef0>
 8003d90:	d8802704 	addi	r2,sp,156
 8003d94:	146bc83a 	sub	r21,r2,r17
 8003d98:	db000415 	stw	r12,16(sp)
 8003d9c:	003e4c06 	br	80036d0 <___vfprintf_internal_r+0x85c>
 8003da0:	d9801a04 	addi	r6,sp,104
 8003da4:	900b883a 	mov	r5,r18
 8003da8:	9809883a 	mov	r4,r19
 8003dac:	800a5b80 	call	800a5b8 <__sprint_r>
 8003db0:	103d3926 	beq	r2,zero,8003298 <___vfprintf_internal_r+0x424>
 8003db4:	003d3e06 	br	80032b0 <___vfprintf_internal_r+0x43c>
 8003db8:	d8800817 	ldw	r2,32(sp)
 8003dbc:	da001b17 	ldw	r8,108(sp)
 8003dc0:	18c00044 	addi	r3,r3,1
 8003dc4:	10800088 	cmpgei	r2,r2,2
 8003dc8:	45400044 	addi	r21,r8,1
 8003dcc:	b7000204 	addi	fp,r22,8
 8003dd0:	1000f826 	beq	r2,zero,80041b4 <___vfprintf_internal_r+0x1340>
 8003dd4:	00800044 	movi	r2,1
 8003dd8:	b0800115 	stw	r2,4(r22)
 8003ddc:	b4400015 	stw	r17,0(r22)
 8003de0:	d8c01c15 	stw	r3,112(sp)
 8003de4:	dd401b15 	stw	r21,108(sp)
 8003de8:	a8800210 	cmplti	r2,r21,8
 8003dec:	1001cc26 	beq	r2,zero,8004520 <___vfprintf_internal_r+0x16ac>
 8003df0:	d8800b17 	ldw	r2,44(sp)
 8003df4:	d9000d17 	ldw	r4,52(sp)
 8003df8:	ad400044 	addi	r21,r21,1
 8003dfc:	1887883a 	add	r3,r3,r2
 8003e00:	e0800115 	stw	r2,4(fp)
 8003e04:	e1000015 	stw	r4,0(fp)
 8003e08:	d8c01c15 	stw	r3,112(sp)
 8003e0c:	dd401b15 	stw	r21,108(sp)
 8003e10:	a8800208 	cmpgei	r2,r21,8
 8003e14:	1001cb1e 	bne	r2,zero,8004544 <___vfprintf_internal_r+0x16d0>
 8003e18:	e7000204 	addi	fp,fp,8
 8003e1c:	d9000917 	ldw	r4,36(sp)
 8003e20:	d9400a17 	ldw	r5,40(sp)
 8003e24:	aa000044 	addi	r8,r21,1
 8003e28:	000d883a 	mov	r6,zero
 8003e2c:	000f883a 	mov	r7,zero
 8003e30:	d8c00e15 	stw	r3,56(sp)
 8003e34:	da000715 	stw	r8,28(sp)
 8003e38:	800e95c0 	call	800e95c <__eqdf2>
 8003e3c:	d8c00817 	ldw	r3,32(sp)
 8003e40:	da000717 	ldw	r8,28(sp)
 8003e44:	e5800204 	addi	r22,fp,8
 8003e48:	1affffc4 	addi	r11,r3,-1
 8003e4c:	d8c00e17 	ldw	r3,56(sp)
 8003e50:	1000e526 	beq	r2,zero,80041e8 <___vfprintf_internal_r+0x1374>
 8003e54:	8a400044 	addi	r9,r17,1
 8003e58:	1ac7883a 	add	r3,r3,r11
 8003e5c:	da001b15 	stw	r8,108(sp)
 8003e60:	e2400015 	stw	r9,0(fp)
 8003e64:	e2c00115 	stw	r11,4(fp)
 8003e68:	d8c01c15 	stw	r3,112(sp)
 8003e6c:	42000208 	cmpgei	r8,r8,8
 8003e70:	40013e1e 	bne	r8,zero,800436c <___vfprintf_internal_r+0x14f8>
 8003e74:	e0800404 	addi	r2,fp,16
 8003e78:	aa000084 	addi	r8,r21,2
 8003e7c:	b039883a 	mov	fp,r22
 8003e80:	102d883a 	mov	r22,r2
 8003e84:	d9001017 	ldw	r4,64(sp)
 8003e88:	d8801644 	addi	r2,sp,89
 8003e8c:	da001b15 	stw	r8,108(sp)
 8003e90:	20c7883a 	add	r3,r4,r3
 8003e94:	e0800015 	stw	r2,0(fp)
 8003e98:	e1000115 	stw	r4,4(fp)
 8003e9c:	d8c01c15 	stw	r3,112(sp)
 8003ea0:	42000210 	cmplti	r8,r8,8
 8003ea4:	403cf11e 	bne	r8,zero,800326c <___vfprintf_internal_r+0x3f8>
 8003ea8:	d9801a04 	addi	r6,sp,104
 8003eac:	900b883a 	mov	r5,r18
 8003eb0:	9809883a 	mov	r4,r19
 8003eb4:	800a5b80 	call	800a5b8 <__sprint_r>
 8003eb8:	103cfd1e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8003ebc:	d8c01c17 	ldw	r3,112(sp)
 8003ec0:	dd802704 	addi	r22,sp,156
 8003ec4:	003ce906 	br	800326c <___vfprintf_internal_r+0x3f8>
 8003ec8:	db000417 	ldw	r12,16(sp)
 8003ecc:	003e4706 	br	80037ec <___vfprintf_internal_r+0x978>
 8003ed0:	03020074 	movhi	r12,2049
 8003ed4:	39000450 	cmplti	r4,r7,17
 8003ed8:	d8801b17 	ldw	r2,108(sp)
 8003edc:	630b5f04 	addi	r12,r12,11644
 8003ee0:	2000321e 	bne	r4,zero,8003fac <___vfprintf_internal_r+0x1138>
 8003ee4:	dc401115 	stw	r17,68(sp)
 8003ee8:	b009883a 	mov	r4,r22
 8003eec:	9023883a 	mov	r17,r18
 8003ef0:	a82d883a 	mov	r22,r21
 8003ef4:	ddc01215 	stw	r23,72(sp)
 8003ef8:	03c00404 	movi	r15,16
 8003efc:	a02f883a 	mov	r23,r20
 8003f00:	db800e15 	stw	r14,56(sp)
 8003f04:	8029883a 	mov	r20,r16
 8003f08:	db400f15 	stw	r13,60(sp)
 8003f0c:	402b883a 	mov	r21,r8
 8003f10:	3821883a 	mov	r16,r7
 8003f14:	6025883a 	mov	r18,r12
 8003f18:	00000406 	br	8003f2c <___vfprintf_internal_r+0x10b8>
 8003f1c:	843ffc04 	addi	r16,r16,-16
 8003f20:	81800448 	cmpgei	r6,r16,17
 8003f24:	21000204 	addi	r4,r4,8
 8003f28:	30001426 	beq	r6,zero,8003f7c <___vfprintf_internal_r+0x1108>
 8003f2c:	10800044 	addi	r2,r2,1
 8003f30:	18c00404 	addi	r3,r3,16
 8003f34:	24800015 	stw	r18,0(r4)
 8003f38:	23c00115 	stw	r15,4(r4)
 8003f3c:	d8c01c15 	stw	r3,112(sp)
 8003f40:	d8801b15 	stw	r2,108(sp)
 8003f44:	11800208 	cmpgei	r6,r2,8
 8003f48:	303ff426 	beq	r6,zero,8003f1c <___vfprintf_internal_r+0x10a8>
 8003f4c:	d9801a04 	addi	r6,sp,104
 8003f50:	880b883a 	mov	r5,r17
 8003f54:	9809883a 	mov	r4,r19
 8003f58:	800a5b80 	call	800a5b8 <__sprint_r>
 8003f5c:	1001b91e 	bne	r2,zero,8004644 <___vfprintf_internal_r+0x17d0>
 8003f60:	843ffc04 	addi	r16,r16,-16
 8003f64:	81800448 	cmpgei	r6,r16,17
 8003f68:	d8c01c17 	ldw	r3,112(sp)
 8003f6c:	d8801b17 	ldw	r2,108(sp)
 8003f70:	d9002704 	addi	r4,sp,156
 8003f74:	03c00404 	movi	r15,16
 8003f78:	303fec1e 	bne	r6,zero,8003f2c <___vfprintf_internal_r+0x10b8>
 8003f7c:	800f883a 	mov	r7,r16
 8003f80:	9019883a 	mov	r12,r18
 8003f84:	a021883a 	mov	r16,r20
 8003f88:	8825883a 	mov	r18,r17
 8003f8c:	b829883a 	mov	r20,r23
 8003f90:	db800e17 	ldw	r14,56(sp)
 8003f94:	db400f17 	ldw	r13,60(sp)
 8003f98:	ddc01217 	ldw	r23,72(sp)
 8003f9c:	dc401117 	ldw	r17,68(sp)
 8003fa0:	a811883a 	mov	r8,r21
 8003fa4:	b02b883a 	mov	r21,r22
 8003fa8:	202d883a 	mov	r22,r4
 8003fac:	10800044 	addi	r2,r2,1
 8003fb0:	19c7883a 	add	r3,r3,r7
 8003fb4:	d8801b15 	stw	r2,108(sp)
 8003fb8:	b3000015 	stw	r12,0(r22)
 8003fbc:	b1c00115 	stw	r7,4(r22)
 8003fc0:	d8c01c15 	stw	r3,112(sp)
 8003fc4:	10800208 	cmpgei	r2,r2,8
 8003fc8:	1001671e 	bne	r2,zero,8004568 <___vfprintf_internal_r+0x16f4>
 8003fcc:	b5800204 	addi	r22,r22,8
 8003fd0:	003c7a06 	br	80031bc <___vfprintf_internal_r+0x348>
 8003fd4:	d9801a04 	addi	r6,sp,104
 8003fd8:	900b883a 	mov	r5,r18
 8003fdc:	9809883a 	mov	r4,r19
 8003fe0:	da001115 	stw	r8,68(sp)
 8003fe4:	db400f15 	stw	r13,60(sp)
 8003fe8:	db800e15 	stw	r14,56(sp)
 8003fec:	800a5b80 	call	800a5b8 <__sprint_r>
 8003ff0:	103caf1e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8003ff4:	d8c01c17 	ldw	r3,112(sp)
 8003ff8:	da001117 	ldw	r8,68(sp)
 8003ffc:	db400f17 	ldw	r13,60(sp)
 8004000:	db800e17 	ldw	r14,56(sp)
 8004004:	dd802704 	addi	r22,sp,156
 8004008:	003c7a06 	br	80031f4 <___vfprintf_internal_r+0x380>
 800400c:	d9801a04 	addi	r6,sp,104
 8004010:	900b883a 	mov	r5,r18
 8004014:	9809883a 	mov	r4,r19
 8004018:	da000f15 	stw	r8,60(sp)
 800401c:	db400e15 	stw	r13,56(sp)
 8004020:	800a5b80 	call	800a5b8 <__sprint_r>
 8004024:	103ca21e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8004028:	d8c01c17 	ldw	r3,112(sp)
 800402c:	da000f17 	ldw	r8,60(sp)
 8004030:	db400e17 	ldw	r13,56(sp)
 8004034:	dd802704 	addi	r22,sp,156
 8004038:	003c7b06 	br	8003228 <___vfprintf_internal_r+0x3b4>
 800403c:	d9401417 	ldw	r5,80(sp)
 8004040:	0141570e 	bge	zero,r5,80045a0 <___vfprintf_internal_r+0x172c>
 8004044:	d8800717 	ldw	r2,28(sp)
 8004048:	d9000817 	ldw	r4,32(sp)
 800404c:	102b883a 	mov	r21,r2
 8004050:	2080b916 	blt	r4,r2,8004338 <___vfprintf_internal_r+0x14c4>
 8004054:	05400a0e 	bge	zero,r21,8004080 <___vfprintf_internal_r+0x120c>
 8004058:	d8801b17 	ldw	r2,108(sp)
 800405c:	1d47883a 	add	r3,r3,r21
 8004060:	b4400015 	stw	r17,0(r22)
 8004064:	10800044 	addi	r2,r2,1
 8004068:	d8801b15 	stw	r2,108(sp)
 800406c:	b5400115 	stw	r21,4(r22)
 8004070:	d8c01c15 	stw	r3,112(sp)
 8004074:	10800208 	cmpgei	r2,r2,8
 8004078:	10032d1e 	bne	r2,zero,8004d30 <___vfprintf_internal_r+0x1ebc>
 800407c:	b5800204 	addi	r22,r22,8
 8004080:	a800c516 	blt	r21,zero,8004398 <___vfprintf_internal_r+0x1524>
 8004084:	d8800717 	ldw	r2,28(sp)
 8004088:	156bc83a 	sub	r21,r2,r21
 800408c:	0540db16 	blt	zero,r21,80043fc <___vfprintf_internal_r+0x1588>
 8004090:	dd401417 	ldw	r21,80(sp)
 8004094:	d8800817 	ldw	r2,32(sp)
 8004098:	a880aa0e 	bge	r21,r2,8004344 <___vfprintf_internal_r+0x14d0>
 800409c:	d8800d17 	ldw	r2,52(sp)
 80040a0:	d9000b17 	ldw	r4,44(sp)
 80040a4:	b0800015 	stw	r2,0(r22)
 80040a8:	d8801b17 	ldw	r2,108(sp)
 80040ac:	1907883a 	add	r3,r3,r4
 80040b0:	b1000115 	stw	r4,4(r22)
 80040b4:	10800044 	addi	r2,r2,1
 80040b8:	d8801b15 	stw	r2,108(sp)
 80040bc:	d8c01c15 	stw	r3,112(sp)
 80040c0:	10800208 	cmpgei	r2,r2,8
 80040c4:	1003111e 	bne	r2,zero,8004d0c <___vfprintf_internal_r+0x1e98>
 80040c8:	b5800204 	addi	r22,r22,8
 80040cc:	d9000817 	ldw	r4,32(sp)
 80040d0:	d9400717 	ldw	r5,28(sp)
 80040d4:	2545c83a 	sub	r2,r4,r21
 80040d8:	2149c83a 	sub	r4,r4,r5
 80040dc:	102b883a 	mov	r21,r2
 80040e0:	2080010e 	bge	r4,r2,80040e8 <___vfprintf_internal_r+0x1274>
 80040e4:	202b883a 	mov	r21,r4
 80040e8:	05400c0e 	bge	zero,r21,800411c <___vfprintf_internal_r+0x12a8>
 80040ec:	d9000717 	ldw	r4,28(sp)
 80040f0:	1d47883a 	add	r3,r3,r21
 80040f4:	b5400115 	stw	r21,4(r22)
 80040f8:	8913883a 	add	r9,r17,r4
 80040fc:	d9001b17 	ldw	r4,108(sp)
 8004100:	b2400015 	stw	r9,0(r22)
 8004104:	d8c01c15 	stw	r3,112(sp)
 8004108:	21000044 	addi	r4,r4,1
 800410c:	d9001b15 	stw	r4,108(sp)
 8004110:	21000208 	cmpgei	r4,r4,8
 8004114:	2003111e 	bne	r4,zero,8004d5c <___vfprintf_internal_r+0x1ee8>
 8004118:	b5800204 	addi	r22,r22,8
 800411c:	a800010e 	bge	r21,zero,8004124 <___vfprintf_internal_r+0x12b0>
 8004120:	002b883a 	mov	r21,zero
 8004124:	156bc83a 	sub	r21,r2,r21
 8004128:	057c500e 	bge	zero,r21,800326c <___vfprintf_internal_r+0x3f8>
 800412c:	01c20074 	movhi	r7,2049
 8004130:	a9000450 	cmplti	r4,r21,17
 8004134:	d8801b17 	ldw	r2,108(sp)
 8004138:	39cb5b04 	addi	r7,r7,11628
 800413c:	2001c51e 	bne	r4,zero,8004854 <___vfprintf_internal_r+0x19e0>
 8004140:	07000404 	movi	fp,16
 8004144:	3823883a 	mov	r17,r7
 8004148:	00000406 	br	800415c <___vfprintf_internal_r+0x12e8>
 800414c:	b5800204 	addi	r22,r22,8
 8004150:	ad7ffc04 	addi	r21,r21,-16
 8004154:	a9000448 	cmpgei	r4,r21,17
 8004158:	2001bd26 	beq	r4,zero,8004850 <___vfprintf_internal_r+0x19dc>
 800415c:	10800044 	addi	r2,r2,1
 8004160:	18c00404 	addi	r3,r3,16
 8004164:	b4400015 	stw	r17,0(r22)
 8004168:	b7000115 	stw	fp,4(r22)
 800416c:	d8c01c15 	stw	r3,112(sp)
 8004170:	d8801b15 	stw	r2,108(sp)
 8004174:	11000208 	cmpgei	r4,r2,8
 8004178:	203ff426 	beq	r4,zero,800414c <___vfprintf_internal_r+0x12d8>
 800417c:	d9801a04 	addi	r6,sp,104
 8004180:	900b883a 	mov	r5,r18
 8004184:	9809883a 	mov	r4,r19
 8004188:	800a5b80 	call	800a5b8 <__sprint_r>
 800418c:	103c481e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8004190:	d8c01c17 	ldw	r3,112(sp)
 8004194:	d8801b17 	ldw	r2,108(sp)
 8004198:	dd802704 	addi	r22,sp,156
 800419c:	003fec06 	br	8004150 <___vfprintf_internal_r+0x12dc>
 80041a0:	4002a71e 	bne	r8,zero,8004c40 <___vfprintf_internal_r+0x1dcc>
 80041a4:	0011883a 	mov	r8,zero
 80041a8:	002b883a 	mov	r21,zero
 80041ac:	dc402704 	addi	r17,sp,156
 80041b0:	003d4706 	br	80036d0 <___vfprintf_internal_r+0x85c>
 80041b4:	d8800417 	ldw	r2,16(sp)
 80041b8:	1080004c 	andi	r2,r2,1
 80041bc:	103f051e 	bne	r2,zero,8003dd4 <___vfprintf_internal_r+0xf60>
 80041c0:	00800044 	movi	r2,1
 80041c4:	dd401b15 	stw	r21,108(sp)
 80041c8:	b4400015 	stw	r17,0(r22)
 80041cc:	b0800115 	stw	r2,4(r22)
 80041d0:	d8c01c15 	stw	r3,112(sp)
 80041d4:	ad400208 	cmpgei	r21,r21,8
 80041d8:	a800641e 	bne	r21,zero,800436c <___vfprintf_internal_r+0x14f8>
 80041dc:	42000084 	addi	r8,r8,2
 80041e0:	b5800404 	addi	r22,r22,16
 80041e4:	003f2706 	br	8003e84 <___vfprintf_internal_r+0x1010>
 80041e8:	02ff260e 	bge	zero,r11,8003e84 <___vfprintf_internal_r+0x1010>
 80041ec:	58800450 	cmplti	r2,r11,17
 80041f0:	01c20074 	movhi	r7,2049
 80041f4:	10034c1e 	bne	r2,zero,8004f28 <___vfprintf_internal_r+0x20b4>
 80041f8:	39cb5b04 	addi	r7,r7,11628
 80041fc:	dc000715 	stw	r16,28(sp)
 8004200:	05800404 	movi	r22,16
 8004204:	5823883a 	mov	r17,r11
 8004208:	402b883a 	mov	r21,r8
 800420c:	3821883a 	mov	r16,r7
 8004210:	00000506 	br	8004228 <___vfprintf_internal_r+0x13b4>
 8004214:	e7000204 	addi	fp,fp,8
 8004218:	8c7ffc04 	addi	r17,r17,-16
 800421c:	88800448 	cmpgei	r2,r17,17
 8004220:	1001d626 	beq	r2,zero,800497c <___vfprintf_internal_r+0x1b08>
 8004224:	ad400044 	addi	r21,r21,1
 8004228:	18c00404 	addi	r3,r3,16
 800422c:	e4000015 	stw	r16,0(fp)
 8004230:	e5800115 	stw	r22,4(fp)
 8004234:	d8c01c15 	stw	r3,112(sp)
 8004238:	dd401b15 	stw	r21,108(sp)
 800423c:	a8800208 	cmpgei	r2,r21,8
 8004240:	103ff426 	beq	r2,zero,8004214 <___vfprintf_internal_r+0x13a0>
 8004244:	d9801a04 	addi	r6,sp,104
 8004248:	900b883a 	mov	r5,r18
 800424c:	9809883a 	mov	r4,r19
 8004250:	800a5b80 	call	800a5b8 <__sprint_r>
 8004254:	103c161e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8004258:	dd401b17 	ldw	r21,108(sp)
 800425c:	d8c01c17 	ldw	r3,112(sp)
 8004260:	df002704 	addi	fp,sp,156
 8004264:	003fec06 	br	8004218 <___vfprintf_internal_r+0x13a4>
 8004268:	d9801a04 	addi	r6,sp,104
 800426c:	900b883a 	mov	r5,r18
 8004270:	9809883a 	mov	r4,r19
 8004274:	800a5b80 	call	800a5b8 <__sprint_r>
 8004278:	103c0d1e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 800427c:	d8c01c17 	ldw	r3,112(sp)
 8004280:	dd802704 	addi	r22,sp,156
 8004284:	003bec06 	br	8003238 <___vfprintf_internal_r+0x3c4>
 8004288:	d8800417 	ldw	r2,16(sp)
 800428c:	1080004c 	andi	r2,r2,1
 8004290:	103bf626 	beq	r2,zero,800326c <___vfprintf_internal_r+0x3f8>
 8004294:	003e1506 	br	8003aec <___vfprintf_internal_r+0xc78>
 8004298:	dc402704 	addi	r17,sp,156
 800429c:	003d0c06 	br	80036d0 <___vfprintf_internal_r+0x85c>
 80042a0:	00800c04 	movi	r2,48
 80042a4:	d8801385 	stb	r2,78(sp)
 80042a8:	df0013c5 	stb	fp,79(sp)
 80042ac:	63000094 	ori	r12,r12,2
 80042b0:	00800084 	movi	r2,2
 80042b4:	003c3b06 	br	80033a4 <___vfprintf_internal_r+0x530>
 80042b8:	25000017 	ldw	r20,0(r4)
 80042bc:	002b883a 	mov	r21,zero
 80042c0:	d8c00615 	stw	r3,24(sp)
 80042c4:	00800044 	movi	r2,1
 80042c8:	003c3606 	br	80033a4 <___vfprintf_internal_r+0x530>
 80042cc:	d9000517 	ldw	r4,20(sp)
 80042d0:	2005d7fa 	srai	r2,r4,31
 80042d4:	19000015 	stw	r4,0(r3)
 80042d8:	18800115 	stw	r2,4(r3)
 80042dc:	003b1906 	br	8002f44 <___vfprintf_internal_r+0xd0>
 80042e0:	25000017 	ldw	r20,0(r4)
 80042e4:	002b883a 	mov	r21,zero
 80042e8:	d8c00615 	stw	r3,24(sp)
 80042ec:	003d1b06 	br	800375c <___vfprintf_internal_r+0x8e8>
 80042f0:	25000017 	ldw	r20,0(r4)
 80042f4:	002b883a 	mov	r21,zero
 80042f8:	d8c00615 	stw	r3,24(sp)
 80042fc:	0005883a 	mov	r2,zero
 8004300:	003c2806 	br	80033a4 <___vfprintf_internal_r+0x530>
 8004304:	18800017 	ldw	r2,0(r3)
 8004308:	d8800915 	stw	r2,36(sp)
 800430c:	18800117 	ldw	r2,4(r3)
 8004310:	d8800a15 	stw	r2,40(sp)
 8004314:	003c5906 	br	800347c <___vfprintf_internal_r+0x608>
 8004318:	25000017 	ldw	r20,0(r4)
 800431c:	d8c00615 	stw	r3,24(sp)
 8004320:	a02bd7fa 	srai	r21,r20,31
 8004324:	a805883a 	mov	r2,r21
 8004328:	003cd706 	br	8003688 <___vfprintf_internal_r+0x814>
 800432c:	0421c83a 	sub	r16,zero,r16
 8004330:	d8800615 	stw	r2,24(sp)
 8004334:	003d6306 	br	80038c4 <___vfprintf_internal_r+0xa50>
 8004338:	202b883a 	mov	r21,r4
 800433c:	057f4616 	blt	zero,r21,8004058 <___vfprintf_internal_r+0x11e4>
 8004340:	003f4f06 	br	8004080 <___vfprintf_internal_r+0x120c>
 8004344:	d8800417 	ldw	r2,16(sp)
 8004348:	1080004c 	andi	r2,r2,1
 800434c:	103f531e 	bne	r2,zero,800409c <___vfprintf_internal_r+0x1228>
 8004350:	d9000817 	ldw	r4,32(sp)
 8004354:	d9400717 	ldw	r5,28(sp)
 8004358:	2545c83a 	sub	r2,r4,r21
 800435c:	216bc83a 	sub	r21,r4,r5
 8004360:	157f6e0e 	bge	r2,r21,800411c <___vfprintf_internal_r+0x12a8>
 8004364:	102b883a 	mov	r21,r2
 8004368:	003f6c06 	br	800411c <___vfprintf_internal_r+0x12a8>
 800436c:	d9801a04 	addi	r6,sp,104
 8004370:	900b883a 	mov	r5,r18
 8004374:	9809883a 	mov	r4,r19
 8004378:	800a5b80 	call	800a5b8 <__sprint_r>
 800437c:	103bcc1e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8004380:	da001b17 	ldw	r8,108(sp)
 8004384:	d8c01c17 	ldw	r3,112(sp)
 8004388:	dd802904 	addi	r22,sp,164
 800438c:	42000044 	addi	r8,r8,1
 8004390:	df002704 	addi	fp,sp,156
 8004394:	003ebb06 	br	8003e84 <___vfprintf_internal_r+0x1010>
 8004398:	002b883a 	mov	r21,zero
 800439c:	003f3906 	br	8004084 <___vfprintf_internal_r+0x1210>
 80043a0:	bf000043 	ldbu	fp,1(r23)
 80043a4:	63000814 	ori	r12,r12,32
 80043a8:	bdc00044 	addi	r23,r23,1
 80043ac:	e2c03fcc 	andi	r11,fp,255
 80043b0:	5ac0201c 	xori	r11,r11,128
 80043b4:	5affe004 	addi	r11,r11,-128
 80043b8:	003afa06 	br	8002fa4 <___vfprintf_internal_r+0x130>
 80043bc:	d9801a04 	addi	r6,sp,104
 80043c0:	900b883a 	mov	r5,r18
 80043c4:	9809883a 	mov	r4,r19
 80043c8:	800a5b80 	call	800a5b8 <__sprint_r>
 80043cc:	103bb81e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 80043d0:	d8c01c17 	ldw	r3,112(sp)
 80043d4:	dd802704 	addi	r22,sp,156
 80043d8:	003dd006 	br	8003b1c <___vfprintf_internal_r+0xca8>
 80043dc:	408001f0 	cmpltui	r2,r8,7
 80043e0:	402b883a 	mov	r21,r8
 80043e4:	1001e726 	beq	r2,zero,8004b84 <___vfprintf_internal_r+0x1d10>
 80043e8:	04420074 	movhi	r17,2049
 80043ec:	a829883a 	mov	r20,r21
 80043f0:	d8c00615 	stw	r3,24(sp)
 80043f4:	8c4b5804 	addi	r17,r17,11616
 80043f8:	003b6306 	br	8003188 <___vfprintf_internal_r+0x314>
 80043fc:	01c20074 	movhi	r7,2049
 8004400:	a9000450 	cmplti	r4,r21,17
 8004404:	d8801b17 	ldw	r2,108(sp)
 8004408:	39cb5b04 	addi	r7,r7,11628
 800440c:	2001c21e 	bne	r4,zero,8004b18 <___vfprintf_internal_r+0x1ca4>
 8004410:	dc000e15 	stw	r16,56(sp)
 8004414:	07000404 	movi	fp,16
 8004418:	3821883a 	mov	r16,r7
 800441c:	00000406 	br	8004430 <___vfprintf_internal_r+0x15bc>
 8004420:	b5800204 	addi	r22,r22,8
 8004424:	ad7ffc04 	addi	r21,r21,-16
 8004428:	a9000448 	cmpgei	r4,r21,17
 800442c:	2001b826 	beq	r4,zero,8004b10 <___vfprintf_internal_r+0x1c9c>
 8004430:	10800044 	addi	r2,r2,1
 8004434:	18c00404 	addi	r3,r3,16
 8004438:	b4000015 	stw	r16,0(r22)
 800443c:	b7000115 	stw	fp,4(r22)
 8004440:	d8c01c15 	stw	r3,112(sp)
 8004444:	d8801b15 	stw	r2,108(sp)
 8004448:	11000208 	cmpgei	r4,r2,8
 800444c:	203ff426 	beq	r4,zero,8004420 <___vfprintf_internal_r+0x15ac>
 8004450:	d9801a04 	addi	r6,sp,104
 8004454:	900b883a 	mov	r5,r18
 8004458:	9809883a 	mov	r4,r19
 800445c:	800a5b80 	call	800a5b8 <__sprint_r>
 8004460:	103b931e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8004464:	d8c01c17 	ldw	r3,112(sp)
 8004468:	d8801b17 	ldw	r2,108(sp)
 800446c:	dd802704 	addi	r22,sp,156
 8004470:	003fec06 	br	8004424 <___vfprintf_internal_r+0x15b0>
 8004474:	dc402704 	addi	r17,sp,156
 8004478:	a805883a 	mov	r2,r21
 800447c:	dc000715 	stw	r16,28(sp)
 8004480:	902b883a 	mov	r21,r18
 8004484:	8821883a 	mov	r16,r17
 8004488:	db000415 	stw	r12,16(sp)
 800448c:	a023883a 	mov	r17,r20
 8004490:	da000e15 	stw	r8,56(sp)
 8004494:	9829883a 	mov	r20,r19
 8004498:	1025883a 	mov	r18,r2
 800449c:	6827883a 	mov	r19,r13
 80044a0:	8809883a 	mov	r4,r17
 80044a4:	900b883a 	mov	r5,r18
 80044a8:	01800284 	movi	r6,10
 80044ac:	000f883a 	mov	r7,zero
 80044b0:	800d1780 	call	800d178 <__umoddi3>
 80044b4:	10800c04 	addi	r2,r2,48
 80044b8:	8809883a 	mov	r4,r17
 80044bc:	900b883a 	mov	r5,r18
 80044c0:	01800284 	movi	r6,10
 80044c4:	000f883a 	mov	r7,zero
 80044c8:	80bfffc5 	stb	r2,-1(r16)
 80044cc:	800cb580 	call	800cb58 <__udivdi3>
 80044d0:	900d883a 	mov	r6,r18
 80044d4:	880f883a 	mov	r7,r17
 80044d8:	843fffc4 	addi	r16,r16,-1
 80044dc:	1023883a 	mov	r17,r2
 80044e0:	1825883a 	mov	r18,r3
 80044e4:	303fee1e 	bne	r6,zero,80044a0 <___vfprintf_internal_r+0x162c>
 80044e8:	39c002a8 	cmpgeui	r7,r7,10
 80044ec:	383fec1e 	bne	r7,zero,80044a0 <___vfprintf_internal_r+0x162c>
 80044f0:	8023883a 	mov	r17,r16
 80044f4:	d8802704 	addi	r2,sp,156
 80044f8:	981b883a 	mov	r13,r19
 80044fc:	a825883a 	mov	r18,r21
 8004500:	dc000717 	ldw	r16,28(sp)
 8004504:	da000e17 	ldw	r8,56(sp)
 8004508:	a027883a 	mov	r19,r20
 800450c:	146bc83a 	sub	r21,r2,r17
 8004510:	003c6f06 	br	80036d0 <___vfprintf_internal_r+0x85c>
 8004514:	d8800517 	ldw	r2,20(sp)
 8004518:	18800015 	stw	r2,0(r3)
 800451c:	003a8906 	br	8002f44 <___vfprintf_internal_r+0xd0>
 8004520:	d9801a04 	addi	r6,sp,104
 8004524:	900b883a 	mov	r5,r18
 8004528:	9809883a 	mov	r4,r19
 800452c:	800a5b80 	call	800a5b8 <__sprint_r>
 8004530:	103b5f1e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8004534:	d8c01c17 	ldw	r3,112(sp)
 8004538:	dd401b17 	ldw	r21,108(sp)
 800453c:	df002704 	addi	fp,sp,156
 8004540:	003e2b06 	br	8003df0 <___vfprintf_internal_r+0xf7c>
 8004544:	d9801a04 	addi	r6,sp,104
 8004548:	900b883a 	mov	r5,r18
 800454c:	9809883a 	mov	r4,r19
 8004550:	800a5b80 	call	800a5b8 <__sprint_r>
 8004554:	103b561e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8004558:	d8c01c17 	ldw	r3,112(sp)
 800455c:	dd401b17 	ldw	r21,108(sp)
 8004560:	df002704 	addi	fp,sp,156
 8004564:	003e2d06 	br	8003e1c <___vfprintf_internal_r+0xfa8>
 8004568:	d9801a04 	addi	r6,sp,104
 800456c:	900b883a 	mov	r5,r18
 8004570:	9809883a 	mov	r4,r19
 8004574:	da001115 	stw	r8,68(sp)
 8004578:	db400f15 	stw	r13,60(sp)
 800457c:	db800e15 	stw	r14,56(sp)
 8004580:	800a5b80 	call	800a5b8 <__sprint_r>
 8004584:	103b4a1e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8004588:	d8c01c17 	ldw	r3,112(sp)
 800458c:	da001117 	ldw	r8,68(sp)
 8004590:	db400f17 	ldw	r13,60(sp)
 8004594:	db800e17 	ldw	r14,56(sp)
 8004598:	dd802704 	addi	r22,sp,156
 800459c:	003b0706 	br	80031bc <___vfprintf_internal_r+0x348>
 80045a0:	d8801b17 	ldw	r2,108(sp)
 80045a4:	01020074 	movhi	r4,2049
 80045a8:	210b5a04 	addi	r4,r4,11624
 80045ac:	10800044 	addi	r2,r2,1
 80045b0:	18c00044 	addi	r3,r3,1
 80045b4:	b1000015 	stw	r4,0(r22)
 80045b8:	01000044 	movi	r4,1
 80045bc:	d8801b15 	stw	r2,108(sp)
 80045c0:	b1000115 	stw	r4,4(r22)
 80045c4:	d8c01c15 	stw	r3,112(sp)
 80045c8:	10800208 	cmpgei	r2,r2,8
 80045cc:	1001641e 	bne	r2,zero,8004b60 <___vfprintf_internal_r+0x1cec>
 80045d0:	b5800204 	addi	r22,r22,8
 80045d4:	2800bd1e 	bne	r5,zero,80048cc <___vfprintf_internal_r+0x1a58>
 80045d8:	d8800417 	ldw	r2,16(sp)
 80045dc:	d9000817 	ldw	r4,32(sp)
 80045e0:	1080004c 	andi	r2,r2,1
 80045e4:	1104b03a 	or	r2,r2,r4
 80045e8:	103b2026 	beq	r2,zero,800326c <___vfprintf_internal_r+0x3f8>
 80045ec:	d8800d17 	ldw	r2,52(sp)
 80045f0:	d9000b17 	ldw	r4,44(sp)
 80045f4:	b0800015 	stw	r2,0(r22)
 80045f8:	d8801b17 	ldw	r2,108(sp)
 80045fc:	20c7883a 	add	r3,r4,r3
 8004600:	b1000115 	stw	r4,4(r22)
 8004604:	10800044 	addi	r2,r2,1
 8004608:	d8c01c15 	stw	r3,112(sp)
 800460c:	d8801b15 	stw	r2,108(sp)
 8004610:	11000208 	cmpgei	r4,r2,8
 8004614:	2001771e 	bne	r4,zero,8004bf4 <___vfprintf_internal_r+0x1d80>
 8004618:	b5800204 	addi	r22,r22,8
 800461c:	d9000817 	ldw	r4,32(sp)
 8004620:	10800044 	addi	r2,r2,1
 8004624:	d8801b15 	stw	r2,108(sp)
 8004628:	20c7883a 	add	r3,r4,r3
 800462c:	b4400015 	stw	r17,0(r22)
 8004630:	b1000115 	stw	r4,4(r22)
 8004634:	d8c01c15 	stw	r3,112(sp)
 8004638:	10800208 	cmpgei	r2,r2,8
 800463c:	103b0a26 	beq	r2,zero,8003268 <___vfprintf_internal_r+0x3f4>
 8004640:	003e1906 	br	8003ea8 <___vfprintf_internal_r+0x1034>
 8004644:	8825883a 	mov	r18,r17
 8004648:	003b1906 	br	80032b0 <___vfprintf_internal_r+0x43c>
 800464c:	d9000917 	ldw	r4,36(sp)
 8004650:	d9400a17 	ldw	r5,40(sp)
 8004654:	da000615 	stw	r8,24(sp)
 8004658:	200d883a 	mov	r6,r4
 800465c:	280f883a 	mov	r7,r5
 8004660:	db000415 	stw	r12,16(sp)
 8004664:	800fc0c0 	call	800fc0c <__unorddf2>
 8004668:	db000417 	ldw	r12,16(sp)
 800466c:	da000617 	ldw	r8,24(sp)
 8004670:	1002061e 	bne	r2,zero,8004e8c <___vfprintf_internal_r+0x2018>
 8004674:	057ff7c4 	movi	r21,-33
 8004678:	40bfffe0 	cmpeqi	r2,r8,-1
 800467c:	e56a703a 	and	r21,fp,r21
 8004680:	1001b41e 	bne	r2,zero,8004d54 <___vfprintf_internal_r+0x1ee0>
 8004684:	a88011d8 	cmpnei	r2,r21,71
 8004688:	10015726 	beq	r2,zero,8004be8 <___vfprintf_internal_r+0x1d74>
 800468c:	60804014 	ori	r2,r12,256
 8004690:	d8800415 	stw	r2,16(sp)
 8004694:	d8800a17 	ldw	r2,40(sp)
 8004698:	10012d16 	blt	r2,zero,8004b50 <___vfprintf_internal_r+0x1cdc>
 800469c:	dd000a17 	ldw	r20,40(sp)
 80046a0:	d8000605 	stb	zero,24(sp)
 80046a4:	e08019a0 	cmpeqi	r2,fp,102
 80046a8:	d8800f15 	stw	r2,60(sp)
 80046ac:	1000d21e 	bne	r2,zero,80049f8 <___vfprintf_internal_r+0x1b84>
 80046b0:	e08011a0 	cmpeqi	r2,fp,70
 80046b4:	1000d01e 	bne	r2,zero,80049f8 <___vfprintf_internal_r+0x1b84>
 80046b8:	a8801158 	cmpnei	r2,r21,69
 80046bc:	10016226 	beq	r2,zero,8004c48 <___vfprintf_internal_r+0x1dd4>
 80046c0:	d8801804 	addi	r2,sp,96
 80046c4:	d8800315 	stw	r2,12(sp)
 80046c8:	d9400917 	ldw	r5,36(sp)
 80046cc:	d8801504 	addi	r2,sp,84
 80046d0:	d8800215 	stw	r2,8(sp)
 80046d4:	d8801404 	addi	r2,sp,80
 80046d8:	da000015 	stw	r8,0(sp)
 80046dc:	9809883a 	mov	r4,r19
 80046e0:	d8800115 	stw	r2,4(sp)
 80046e4:	01c00084 	movi	r7,2
 80046e8:	a00d883a 	mov	r6,r20
 80046ec:	db000815 	stw	r12,32(sp)
 80046f0:	da000715 	stw	r8,28(sp)
 80046f4:	80053d80 	call	80053d8 <_dtoa_r>
 80046f8:	da000717 	ldw	r8,28(sp)
 80046fc:	e10019d8 	cmpnei	r4,fp,103
 8004700:	db000817 	ldw	r12,32(sp)
 8004704:	1023883a 	mov	r17,r2
 8004708:	4007883a 	mov	r3,r8
 800470c:	2001621e 	bne	r4,zero,8004c98 <___vfprintf_internal_r+0x1e24>
 8004710:	6080004c 	andi	r2,r12,1
 8004714:	1001621e 	bne	r2,zero,8004ca0 <___vfprintf_internal_r+0x1e2c>
 8004718:	d8801417 	ldw	r2,80(sp)
 800471c:	ad4011e0 	cmpeqi	r21,r21,71
 8004720:	d8800715 	stw	r2,28(sp)
 8004724:	d8801817 	ldw	r2,96(sp)
 8004728:	1445c83a 	sub	r2,r2,r17
 800472c:	d8800815 	stw	r2,32(sp)
 8004730:	a8000526 	beq	r21,zero,8004748 <___vfprintf_internal_r+0x18d4>
 8004734:	d8c00717 	ldw	r3,28(sp)
 8004738:	18bfff50 	cmplti	r2,r3,-3
 800473c:	1000011e 	bne	r2,zero,8004744 <___vfprintf_internal_r+0x18d0>
 8004740:	40c1670e 	bge	r8,r3,8004ce0 <___vfprintf_internal_r+0x1e6c>
 8004744:	e73fff84 	addi	fp,fp,-2
 8004748:	d8800717 	ldw	r2,28(sp)
 800474c:	df001645 	stb	fp,89(sp)
 8004750:	157fffc4 	addi	r21,r2,-1
 8004754:	dd401415 	stw	r21,80(sp)
 8004758:	a801d416 	blt	r21,zero,8004eac <___vfprintf_internal_r+0x2038>
 800475c:	00800ac4 	movi	r2,43
 8004760:	d8801685 	stb	r2,90(sp)
 8004764:	a8800290 	cmplti	r2,r21,10
 8004768:	1001c11e 	bne	r2,zero,8004e70 <___vfprintf_internal_r+0x1ffc>
 800476c:	d98019c4 	addi	r6,sp,103
 8004770:	9029883a 	mov	r20,r18
 8004774:	dc400715 	stw	r17,28(sp)
 8004778:	8025883a 	mov	r18,r16
 800477c:	db000f15 	stw	r12,60(sp)
 8004780:	3021883a 	mov	r16,r6
 8004784:	a809883a 	mov	r4,r21
 8004788:	01400284 	movi	r5,10
 800478c:	8002b1c0 	call	8002b1c <__modsi3>
 8004790:	10800c04 	addi	r2,r2,48
 8004794:	a809883a 	mov	r4,r21
 8004798:	80bfffc5 	stb	r2,-1(r16)
 800479c:	01400284 	movi	r5,10
 80047a0:	8002a9c0 	call	8002a9c <__divsi3>
 80047a4:	a9001908 	cmpgei	r4,r21,100
 80047a8:	8023883a 	mov	r17,r16
 80047ac:	102b883a 	mov	r21,r2
 80047b0:	843fffc4 	addi	r16,r16,-1
 80047b4:	203ff31e 	bne	r4,zero,8004784 <___vfprintf_internal_r+0x1910>
 80047b8:	800d883a 	mov	r6,r16
 80047bc:	11000c04 	addi	r4,r2,48
 80047c0:	9021883a 	mov	r16,r18
 80047c4:	a025883a 	mov	r18,r20
 80047c8:	8829883a 	mov	r20,r17
 80047cc:	a0bfff84 	addi	r2,r20,-2
 80047d0:	313fffc5 	stb	r4,-1(r6)
 80047d4:	d8c019c4 	addi	r3,sp,103
 80047d8:	db000f17 	ldw	r12,60(sp)
 80047dc:	dc400717 	ldw	r17,28(sp)
 80047e0:	10c1d62e 	bgeu	r2,r3,8004f3c <___vfprintf_internal_r+0x20c8>
 80047e4:	d8c016c4 	addi	r3,sp,91
 80047e8:	00000106 	br	80047f0 <___vfprintf_internal_r+0x197c>
 80047ec:	11000003 	ldbu	r4,0(r2)
 80047f0:	19000005 	stb	r4,0(r3)
 80047f4:	10800044 	addi	r2,r2,1
 80047f8:	d90019c4 	addi	r4,sp,103
 80047fc:	18c00044 	addi	r3,r3,1
 8004800:	113ffa1e 	bne	r2,r4,80047ec <___vfprintf_internal_r+0x1978>
 8004804:	d8801a44 	addi	r2,sp,105
 8004808:	d8c016c4 	addi	r3,sp,91
 800480c:	1505c83a 	sub	r2,r2,r20
 8004810:	1885883a 	add	r2,r3,r2
 8004814:	d8c01644 	addi	r3,sp,89
 8004818:	10c5c83a 	sub	r2,r2,r3
 800481c:	d8801015 	stw	r2,64(sp)
 8004820:	d8c00817 	ldw	r3,32(sp)
 8004824:	d9001017 	ldw	r4,64(sp)
 8004828:	18800088 	cmpgei	r2,r3,2
 800482c:	192b883a 	add	r21,r3,r4
 8004830:	1001aa26 	beq	r2,zero,8004edc <___vfprintf_internal_r+0x2068>
 8004834:	d8800b17 	ldw	r2,44(sp)
 8004838:	a8ab883a 	add	r21,r21,r2
 800483c:	a829883a 	mov	r20,r21
 8004840:	a800010e 	bge	r21,zero,8004848 <___vfprintf_internal_r+0x19d4>
 8004844:	0029883a 	mov	r20,zero
 8004848:	d8000715 	stw	zero,28(sp)
 800484c:	00009d06 	br	8004ac4 <___vfprintf_internal_r+0x1c50>
 8004850:	880f883a 	mov	r7,r17
 8004854:	10800044 	addi	r2,r2,1
 8004858:	1d47883a 	add	r3,r3,r21
 800485c:	b1c00015 	stw	r7,0(r22)
 8004860:	003a7c06 	br	8003254 <___vfprintf_internal_r+0x3e0>
 8004864:	d9801a04 	addi	r6,sp,104
 8004868:	900b883a 	mov	r5,r18
 800486c:	9809883a 	mov	r4,r19
 8004870:	800a5b80 	call	800a5b8 <__sprint_r>
 8004874:	103a8e1e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8004878:	d8c01c17 	ldw	r3,112(sp)
 800487c:	dd802704 	addi	r22,sp,156
 8004880:	003c9706 	br	8003ae0 <___vfprintf_internal_r+0xc6c>
 8004884:	d9801a04 	addi	r6,sp,104
 8004888:	900b883a 	mov	r5,r18
 800488c:	9809883a 	mov	r4,r19
 8004890:	da000e15 	stw	r8,56(sp)
 8004894:	800a5b80 	call	800a5b8 <__sprint_r>
 8004898:	103a851e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 800489c:	d8c01c17 	ldw	r3,112(sp)
 80048a0:	da000e17 	ldw	r8,56(sp)
 80048a4:	dd802704 	addi	r22,sp,156
 80048a8:	003a6106 	br	8003230 <___vfprintf_internal_r+0x3bc>
 80048ac:	8809883a 	mov	r4,r17
 80048b0:	db000415 	stw	r12,16(sp)
 80048b4:	d8c00615 	stw	r3,24(sp)
 80048b8:	8002ddc0 	call	8002ddc <strlen>
 80048bc:	db000417 	ldw	r12,16(sp)
 80048c0:	102b883a 	mov	r21,r2
 80048c4:	1029883a 	mov	r20,r2
 80048c8:	003a2f06 	br	8003188 <___vfprintf_internal_r+0x314>
 80048cc:	d8800d17 	ldw	r2,52(sp)
 80048d0:	d9000b17 	ldw	r4,44(sp)
 80048d4:	b0800015 	stw	r2,0(r22)
 80048d8:	d8801b17 	ldw	r2,108(sp)
 80048dc:	20c7883a 	add	r3,r4,r3
 80048e0:	b1000115 	stw	r4,4(r22)
 80048e4:	10800044 	addi	r2,r2,1
 80048e8:	d8c01c15 	stw	r3,112(sp)
 80048ec:	d8801b15 	stw	r2,108(sp)
 80048f0:	11000208 	cmpgei	r4,r2,8
 80048f4:	2000bf1e 	bne	r4,zero,8004bf4 <___vfprintf_internal_r+0x1d80>
 80048f8:	b5800204 	addi	r22,r22,8
 80048fc:	283f470e 	bge	r5,zero,800461c <___vfprintf_internal_r+0x17a8>
 8004900:	01c20074 	movhi	r7,2049
 8004904:	293ffc08 	cmpgei	r4,r5,-16
 8004908:	39cb5b04 	addi	r7,r7,11628
 800490c:	0179c83a 	sub	fp,zero,r5
 8004910:	20013f1e 	bne	r4,zero,8004e10 <___vfprintf_internal_r+0x1f9c>
 8004914:	dc000715 	stw	r16,28(sp)
 8004918:	05400404 	movi	r21,16
 800491c:	9021883a 	mov	r16,r18
 8004920:	3825883a 	mov	r18,r7
 8004924:	00000406 	br	8004938 <___vfprintf_internal_r+0x1ac4>
 8004928:	b5800204 	addi	r22,r22,8
 800492c:	e73ffc04 	addi	fp,fp,-16
 8004930:	e1800448 	cmpgei	r6,fp,17
 8004934:	30013326 	beq	r6,zero,8004e04 <___vfprintf_internal_r+0x1f90>
 8004938:	10800044 	addi	r2,r2,1
 800493c:	18c00404 	addi	r3,r3,16
 8004940:	b4800015 	stw	r18,0(r22)
 8004944:	b5400115 	stw	r21,4(r22)
 8004948:	d8c01c15 	stw	r3,112(sp)
 800494c:	d8801b15 	stw	r2,108(sp)
 8004950:	11800208 	cmpgei	r6,r2,8
 8004954:	303ff426 	beq	r6,zero,8004928 <___vfprintf_internal_r+0x1ab4>
 8004958:	d9801a04 	addi	r6,sp,104
 800495c:	800b883a 	mov	r5,r16
 8004960:	9809883a 	mov	r4,r19
 8004964:	800a5b80 	call	800a5b8 <__sprint_r>
 8004968:	1001721e 	bne	r2,zero,8004f34 <___vfprintf_internal_r+0x20c0>
 800496c:	d8c01c17 	ldw	r3,112(sp)
 8004970:	d8801b17 	ldw	r2,108(sp)
 8004974:	dd802704 	addi	r22,sp,156
 8004978:	003fec06 	br	800492c <___vfprintf_internal_r+0x1ab8>
 800497c:	800f883a 	mov	r7,r16
 8004980:	dc000717 	ldw	r16,28(sp)
 8004984:	8817883a 	mov	r11,r17
 8004988:	aa000044 	addi	r8,r21,1
 800498c:	e0800204 	addi	r2,fp,8
 8004990:	1ac7883a 	add	r3,r3,r11
 8004994:	e1c00015 	stw	r7,0(fp)
 8004998:	e2c00115 	stw	r11,4(fp)
 800499c:	d8c01c15 	stw	r3,112(sp)
 80049a0:	da001b15 	stw	r8,108(sp)
 80049a4:	41000208 	cmpgei	r4,r8,8
 80049a8:	203e701e 	bne	r4,zero,800436c <___vfprintf_internal_r+0x14f8>
 80049ac:	42000044 	addi	r8,r8,1
 80049b0:	15800204 	addi	r22,r2,8
 80049b4:	1039883a 	mov	fp,r2
 80049b8:	003d3206 	br	8003e84 <___vfprintf_internal_r+0x1010>
 80049bc:	d8800617 	ldw	r2,24(sp)
 80049c0:	d8c00615 	stw	r3,24(sp)
 80049c4:	15000017 	ldw	r20,0(r2)
 80049c8:	a02bd7fa 	srai	r21,r20,31
 80049cc:	a805883a 	mov	r2,r21
 80049d0:	003b2d06 	br	8003688 <___vfprintf_internal_r+0x814>
 80049d4:	d8800617 	ldw	r2,24(sp)
 80049d8:	002b883a 	mov	r21,zero
 80049dc:	d8c00615 	stw	r3,24(sp)
 80049e0:	15000017 	ldw	r20,0(r2)
 80049e4:	0005883a 	mov	r2,zero
 80049e8:	003a6e06 	br	80033a4 <___vfprintf_internal_r+0x530>
 80049ec:	04420074 	movhi	r17,2049
 80049f0:	8c4b4a04 	addi	r17,r17,11560
 80049f4:	003ac606 	br	8003510 <___vfprintf_internal_r+0x69c>
 80049f8:	d8801804 	addi	r2,sp,96
 80049fc:	d8800315 	stw	r2,12(sp)
 8004a00:	d9400917 	ldw	r5,36(sp)
 8004a04:	d8801504 	addi	r2,sp,84
 8004a08:	d8800215 	stw	r2,8(sp)
 8004a0c:	d8801404 	addi	r2,sp,80
 8004a10:	da000015 	stw	r8,0(sp)
 8004a14:	d8800115 	stw	r2,4(sp)
 8004a18:	01c000c4 	movi	r7,3
 8004a1c:	a00d883a 	mov	r6,r20
 8004a20:	9809883a 	mov	r4,r19
 8004a24:	db000815 	stw	r12,32(sp)
 8004a28:	da000715 	stw	r8,28(sp)
 8004a2c:	80053d80 	call	80053d8 <_dtoa_r>
 8004a30:	da000717 	ldw	r8,28(sp)
 8004a34:	1023883a 	mov	r17,r2
 8004a38:	db000817 	ldw	r12,32(sp)
 8004a3c:	1207883a 	add	r3,r2,r8
 8004a40:	88800007 	ldb	r2,0(r17)
 8004a44:	10800c20 	cmpeqi	r2,r2,48
 8004a48:	1000571e 	bne	r2,zero,8004ba8 <___vfprintf_internal_r+0x1d34>
 8004a4c:	d8801417 	ldw	r2,80(sp)
 8004a50:	1893883a 	add	r9,r3,r2
 8004a54:	d9000917 	ldw	r4,36(sp)
 8004a58:	000d883a 	mov	r6,zero
 8004a5c:	000f883a 	mov	r7,zero
 8004a60:	a00b883a 	mov	r5,r20
 8004a64:	da401115 	stw	r9,68(sp)
 8004a68:	da000815 	stw	r8,32(sp)
 8004a6c:	db000715 	stw	r12,28(sp)
 8004a70:	800e95c0 	call	800e95c <__eqdf2>
 8004a74:	db000717 	ldw	r12,28(sp)
 8004a78:	da000817 	ldw	r8,32(sp)
 8004a7c:	da401117 	ldw	r9,68(sp)
 8004a80:	1000891e 	bne	r2,zero,8004ca8 <___vfprintf_internal_r+0x1e34>
 8004a84:	4805883a 	mov	r2,r9
 8004a88:	d8c01417 	ldw	r3,80(sp)
 8004a8c:	1445c83a 	sub	r2,r2,r17
 8004a90:	ad4011d8 	cmpnei	r21,r21,71
 8004a94:	d8c00715 	stw	r3,28(sp)
 8004a98:	d8800815 	stw	r2,32(sp)
 8004a9c:	a83f2526 	beq	r21,zero,8004734 <___vfprintf_internal_r+0x18c0>
 8004aa0:	d8800f17 	ldw	r2,60(sp)
 8004aa4:	103f2826 	beq	r2,zero,8004748 <___vfprintf_internal_r+0x18d4>
 8004aa8:	d8c00717 	ldw	r3,28(sp)
 8004aac:	6080004c 	andi	r2,r12,1
 8004ab0:	1204b03a 	or	r2,r2,r8
 8004ab4:	00c1140e 	bge	zero,r3,8004f08 <___vfprintf_internal_r+0x2094>
 8004ab8:	1001011e 	bne	r2,zero,8004ec0 <___vfprintf_internal_r+0x204c>
 8004abc:	dd400717 	ldw	r21,28(sp)
 8004ac0:	a829883a 	mov	r20,r21
 8004ac4:	d8800607 	ldb	r2,24(sp)
 8004ac8:	10008026 	beq	r2,zero,8004ccc <___vfprintf_internal_r+0x1e58>
 8004acc:	00800b44 	movi	r2,45
 8004ad0:	d8801345 	stb	r2,77(sp)
 8004ad4:	d8800e17 	ldw	r2,56(sp)
 8004ad8:	0011883a 	mov	r8,zero
 8004adc:	d8800615 	stw	r2,24(sp)
 8004ae0:	003b0306 	br	80036f0 <___vfprintf_internal_r+0x87c>
 8004ae4:	d8800617 	ldw	r2,24(sp)
 8004ae8:	002b883a 	mov	r21,zero
 8004aec:	d8c00615 	stw	r3,24(sp)
 8004af0:	15000017 	ldw	r20,0(r2)
 8004af4:	00800044 	movi	r2,1
 8004af8:	003a2a06 	br	80033a4 <___vfprintf_internal_r+0x530>
 8004afc:	d8800617 	ldw	r2,24(sp)
 8004b00:	002b883a 	mov	r21,zero
 8004b04:	d8c00615 	stw	r3,24(sp)
 8004b08:	15000017 	ldw	r20,0(r2)
 8004b0c:	003b1306 	br	800375c <___vfprintf_internal_r+0x8e8>
 8004b10:	800f883a 	mov	r7,r16
 8004b14:	dc000e17 	ldw	r16,56(sp)
 8004b18:	10800044 	addi	r2,r2,1
 8004b1c:	1d47883a 	add	r3,r3,r21
 8004b20:	d8801b15 	stw	r2,108(sp)
 8004b24:	b1c00015 	stw	r7,0(r22)
 8004b28:	b5400115 	stw	r21,4(r22)
 8004b2c:	d8c01c15 	stw	r3,112(sp)
 8004b30:	10800208 	cmpgei	r2,r2,8
 8004b34:	10003a1e 	bne	r2,zero,8004c20 <___vfprintf_internal_r+0x1dac>
 8004b38:	b5800204 	addi	r22,r22,8
 8004b3c:	003d5406 	br	8004090 <___vfprintf_internal_r+0x121c>
 8004b40:	00800b44 	movi	r2,45
 8004b44:	d8801345 	stb	r2,77(sp)
 8004b48:	03400b44 	movi	r13,45
 8004b4c:	003a6c06 	br	8003500 <___vfprintf_internal_r+0x68c>
 8004b50:	1520003c 	xorhi	r20,r2,32768
 8004b54:	00800b44 	movi	r2,45
 8004b58:	d8800605 	stb	r2,24(sp)
 8004b5c:	003ed106 	br	80046a4 <___vfprintf_internal_r+0x1830>
 8004b60:	d9801a04 	addi	r6,sp,104
 8004b64:	900b883a 	mov	r5,r18
 8004b68:	9809883a 	mov	r4,r19
 8004b6c:	800a5b80 	call	800a5b8 <__sprint_r>
 8004b70:	1039cf1e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8004b74:	d9401417 	ldw	r5,80(sp)
 8004b78:	d8c01c17 	ldw	r3,112(sp)
 8004b7c:	dd802704 	addi	r22,sp,156
 8004b80:	003e9406 	br	80045d4 <___vfprintf_internal_r+0x1760>
 8004b84:	05400184 	movi	r21,6
 8004b88:	003e1706 	br	80043e8 <___vfprintf_internal_r+0x1574>
 8004b8c:	d9401345 	stb	r5,77(sp)
 8004b90:	00397706 	br	8003170 <___vfprintf_internal_r+0x2fc>
 8004b94:	d9801a04 	addi	r6,sp,104
 8004b98:	900b883a 	mov	r5,r18
 8004b9c:	9809883a 	mov	r4,r19
 8004ba0:	800a5b80 	call	800a5b8 <__sprint_r>
 8004ba4:	0039c206 	br	80032b0 <___vfprintf_internal_r+0x43c>
 8004ba8:	d9000917 	ldw	r4,36(sp)
 8004bac:	000d883a 	mov	r6,zero
 8004bb0:	000f883a 	mov	r7,zero
 8004bb4:	a00b883a 	mov	r5,r20
 8004bb8:	d8c01115 	stw	r3,68(sp)
 8004bbc:	da000815 	stw	r8,32(sp)
 8004bc0:	db000715 	stw	r12,28(sp)
 8004bc4:	800e95c0 	call	800e95c <__eqdf2>
 8004bc8:	db000717 	ldw	r12,28(sp)
 8004bcc:	da000817 	ldw	r8,32(sp)
 8004bd0:	d8c01117 	ldw	r3,68(sp)
 8004bd4:	103f9d26 	beq	r2,zero,8004a4c <___vfprintf_internal_r+0x1bd8>
 8004bd8:	00800044 	movi	r2,1
 8004bdc:	1205c83a 	sub	r2,r2,r8
 8004be0:	d8801415 	stw	r2,80(sp)
 8004be4:	003f9a06 	br	8004a50 <___vfprintf_internal_r+0x1bdc>
 8004be8:	403ea81e 	bne	r8,zero,800468c <___vfprintf_internal_r+0x1818>
 8004bec:	02000044 	movi	r8,1
 8004bf0:	003ea606 	br	800468c <___vfprintf_internal_r+0x1818>
 8004bf4:	d9801a04 	addi	r6,sp,104
 8004bf8:	900b883a 	mov	r5,r18
 8004bfc:	9809883a 	mov	r4,r19
 8004c00:	800a5b80 	call	800a5b8 <__sprint_r>
 8004c04:	1039aa1e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8004c08:	d9401417 	ldw	r5,80(sp)
 8004c0c:	d8c01c17 	ldw	r3,112(sp)
 8004c10:	d8801b17 	ldw	r2,108(sp)
 8004c14:	dd802704 	addi	r22,sp,156
 8004c18:	283e800e 	bge	r5,zero,800461c <___vfprintf_internal_r+0x17a8>
 8004c1c:	003f3806 	br	8004900 <___vfprintf_internal_r+0x1a8c>
 8004c20:	d9801a04 	addi	r6,sp,104
 8004c24:	900b883a 	mov	r5,r18
 8004c28:	9809883a 	mov	r4,r19
 8004c2c:	800a5b80 	call	800a5b8 <__sprint_r>
 8004c30:	10399f1e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8004c34:	d8c01c17 	ldw	r3,112(sp)
 8004c38:	dd802704 	addi	r22,sp,156
 8004c3c:	003d1406 	br	8004090 <___vfprintf_internal_r+0x121c>
 8004c40:	db000417 	ldw	r12,16(sp)
 8004c44:	003a9d06 	br	80036bc <___vfprintf_internal_r+0x848>
 8004c48:	d8801804 	addi	r2,sp,96
 8004c4c:	d8800315 	stw	r2,12(sp)
 8004c50:	d9400917 	ldw	r5,36(sp)
 8004c54:	d8801504 	addi	r2,sp,84
 8004c58:	40c00044 	addi	r3,r8,1
 8004c5c:	d8800215 	stw	r2,8(sp)
 8004c60:	d8801404 	addi	r2,sp,80
 8004c64:	d8c00015 	stw	r3,0(sp)
 8004c68:	d8800115 	stw	r2,4(sp)
 8004c6c:	01c00084 	movi	r7,2
 8004c70:	a00d883a 	mov	r6,r20
 8004c74:	9809883a 	mov	r4,r19
 8004c78:	db001115 	stw	r12,68(sp)
 8004c7c:	da000815 	stw	r8,32(sp)
 8004c80:	d8c00715 	stw	r3,28(sp)
 8004c84:	80053d80 	call	80053d8 <_dtoa_r>
 8004c88:	d8c00717 	ldw	r3,28(sp)
 8004c8c:	da000817 	ldw	r8,32(sp)
 8004c90:	db001117 	ldw	r12,68(sp)
 8004c94:	1023883a 	mov	r17,r2
 8004c98:	e08011d8 	cmpnei	r2,fp,71
 8004c9c:	103e9c26 	beq	r2,zero,8004710 <___vfprintf_internal_r+0x189c>
 8004ca0:	88d3883a 	add	r9,r17,r3
 8004ca4:	003f6b06 	br	8004a54 <___vfprintf_internal_r+0x1be0>
 8004ca8:	d8801817 	ldw	r2,96(sp)
 8004cac:	127f762e 	bgeu	r2,r9,8004a88 <___vfprintf_internal_r+0x1c14>
 8004cb0:	01000c04 	movi	r4,48
 8004cb4:	10c00044 	addi	r3,r2,1
 8004cb8:	d8c01815 	stw	r3,96(sp)
 8004cbc:	11000005 	stb	r4,0(r2)
 8004cc0:	d8801817 	ldw	r2,96(sp)
 8004cc4:	127ffb36 	bltu	r2,r9,8004cb4 <___vfprintf_internal_r+0x1e40>
 8004cc8:	003f6f06 	br	8004a88 <___vfprintf_internal_r+0x1c14>
 8004ccc:	d8800e17 	ldw	r2,56(sp)
 8004cd0:	db401343 	ldbu	r13,77(sp)
 8004cd4:	0011883a 	mov	r8,zero
 8004cd8:	d8800615 	stw	r2,24(sp)
 8004cdc:	003a8006 	br	80036e0 <___vfprintf_internal_r+0x86c>
 8004ce0:	d8800717 	ldw	r2,28(sp)
 8004ce4:	d8c00817 	ldw	r3,32(sp)
 8004ce8:	10c02b16 	blt	r2,r3,8004d98 <___vfprintf_internal_r+0x1f24>
 8004cec:	6300004c 	andi	r12,r12,1
 8004cf0:	6000581e 	bne	r12,zero,8004e54 <___vfprintf_internal_r+0x1fe0>
 8004cf4:	1029883a 	mov	r20,r2
 8004cf8:	1000010e 	bge	r2,zero,8004d00 <___vfprintf_internal_r+0x1e8c>
 8004cfc:	0029883a 	mov	r20,zero
 8004d00:	dd400717 	ldw	r21,28(sp)
 8004d04:	070019c4 	movi	fp,103
 8004d08:	003f6e06 	br	8004ac4 <___vfprintf_internal_r+0x1c50>
 8004d0c:	d9801a04 	addi	r6,sp,104
 8004d10:	900b883a 	mov	r5,r18
 8004d14:	9809883a 	mov	r4,r19
 8004d18:	800a5b80 	call	800a5b8 <__sprint_r>
 8004d1c:	1039641e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8004d20:	dd401417 	ldw	r21,80(sp)
 8004d24:	d8c01c17 	ldw	r3,112(sp)
 8004d28:	dd802704 	addi	r22,sp,156
 8004d2c:	003ce706 	br	80040cc <___vfprintf_internal_r+0x1258>
 8004d30:	d9801a04 	addi	r6,sp,104
 8004d34:	900b883a 	mov	r5,r18
 8004d38:	9809883a 	mov	r4,r19
 8004d3c:	800a5b80 	call	800a5b8 <__sprint_r>
 8004d40:	10395b1e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8004d44:	d8c01c17 	ldw	r3,112(sp)
 8004d48:	dd802704 	addi	r22,sp,156
 8004d4c:	a83ccd0e 	bge	r21,zero,8004084 <___vfprintf_internal_r+0x1210>
 8004d50:	003d9106 	br	8004398 <___vfprintf_internal_r+0x1524>
 8004d54:	02000184 	movi	r8,6
 8004d58:	003e4c06 	br	800468c <___vfprintf_internal_r+0x1818>
 8004d5c:	d9801a04 	addi	r6,sp,104
 8004d60:	900b883a 	mov	r5,r18
 8004d64:	9809883a 	mov	r4,r19
 8004d68:	800a5b80 	call	800a5b8 <__sprint_r>
 8004d6c:	1039501e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8004d70:	d8801417 	ldw	r2,80(sp)
 8004d74:	d9000817 	ldw	r4,32(sp)
 8004d78:	d8c01c17 	ldw	r3,112(sp)
 8004d7c:	dd802704 	addi	r22,sp,156
 8004d80:	2085c83a 	sub	r2,r4,r2
 8004d84:	003ce506 	br	800411c <___vfprintf_internal_r+0x12a8>
 8004d88:	4029883a 	mov	r20,r8
 8004d8c:	d8c00615 	stw	r3,24(sp)
 8004d90:	402b883a 	mov	r21,r8
 8004d94:	0038fc06 	br	8003188 <___vfprintf_internal_r+0x314>
 8004d98:	d8800817 	ldw	r2,32(sp)
 8004d9c:	d8c00b17 	ldw	r3,44(sp)
 8004da0:	10eb883a 	add	r21,r2,r3
 8004da4:	d8800717 	ldw	r2,28(sp)
 8004da8:	00800316 	blt	zero,r2,8004db8 <___vfprintf_internal_r+0x1f44>
 8004dac:	d8800717 	ldw	r2,28(sp)
 8004db0:	a8abc83a 	sub	r21,r21,r2
 8004db4:	ad400044 	addi	r21,r21,1
 8004db8:	a829883a 	mov	r20,r21
 8004dbc:	a8002a16 	blt	r21,zero,8004e68 <___vfprintf_internal_r+0x1ff4>
 8004dc0:	070019c4 	movi	fp,103
 8004dc4:	003f3f06 	br	8004ac4 <___vfprintf_internal_r+0x1c50>
 8004dc8:	d9401345 	stb	r5,77(sp)
 8004dcc:	003ae006 	br	8003950 <___vfprintf_internal_r+0xadc>
 8004dd0:	d9401345 	stb	r5,77(sp)
 8004dd4:	003a5706 	br	8003734 <___vfprintf_internal_r+0x8c0>
 8004dd8:	d9401345 	stb	r5,77(sp)
 8004ddc:	003b1706 	br	8003a3c <___vfprintf_internal_r+0xbc8>
 8004de0:	d9401345 	stb	r5,77(sp)
 8004de4:	003a2006 	br	8003668 <___vfprintf_internal_r+0x7f4>
 8004de8:	d9401345 	stb	r5,77(sp)
 8004dec:	003a6606 	br	8003788 <___vfprintf_internal_r+0x914>
 8004df0:	d9401345 	stb	r5,77(sp)
 8004df4:	00399706 	br	8003454 <___vfprintf_internal_r+0x5e0>
 8004df8:	00bfffc4 	movi	r2,-1
 8004dfc:	d8800515 	stw	r2,20(sp)
 8004e00:	00392e06 	br	80032bc <___vfprintf_internal_r+0x448>
 8004e04:	900f883a 	mov	r7,r18
 8004e08:	8025883a 	mov	r18,r16
 8004e0c:	dc000717 	ldw	r16,28(sp)
 8004e10:	10800044 	addi	r2,r2,1
 8004e14:	1f07883a 	add	r3,r3,fp
 8004e18:	b1c00015 	stw	r7,0(r22)
 8004e1c:	b7000115 	stw	fp,4(r22)
 8004e20:	d8c01c15 	stw	r3,112(sp)
 8004e24:	d8801b15 	stw	r2,108(sp)
 8004e28:	11000208 	cmpgei	r4,r2,8
 8004e2c:	203dfa26 	beq	r4,zero,8004618 <___vfprintf_internal_r+0x17a4>
 8004e30:	d9801a04 	addi	r6,sp,104
 8004e34:	900b883a 	mov	r5,r18
 8004e38:	9809883a 	mov	r4,r19
 8004e3c:	800a5b80 	call	800a5b8 <__sprint_r>
 8004e40:	10391b1e 	bne	r2,zero,80032b0 <___vfprintf_internal_r+0x43c>
 8004e44:	d8c01c17 	ldw	r3,112(sp)
 8004e48:	d8801b17 	ldw	r2,108(sp)
 8004e4c:	dd802704 	addi	r22,sp,156
 8004e50:	003df206 	br	800461c <___vfprintf_internal_r+0x17a8>
 8004e54:	d8800717 	ldw	r2,28(sp)
 8004e58:	d8c00b17 	ldw	r3,44(sp)
 8004e5c:	10eb883a 	add	r21,r2,r3
 8004e60:	a829883a 	mov	r20,r21
 8004e64:	a83fd60e 	bge	r21,zero,8004dc0 <___vfprintf_internal_r+0x1f4c>
 8004e68:	0029883a 	mov	r20,zero
 8004e6c:	003fd406 	br	8004dc0 <___vfprintf_internal_r+0x1f4c>
 8004e70:	00800c04 	movi	r2,48
 8004e74:	ad400c04 	addi	r21,r21,48
 8004e78:	d88016c5 	stb	r2,91(sp)
 8004e7c:	00800104 	movi	r2,4
 8004e80:	dd401705 	stb	r21,92(sp)
 8004e84:	d8801015 	stw	r2,64(sp)
 8004e88:	003e6506 	br	8004820 <___vfprintf_internal_r+0x19ac>
 8004e8c:	d8800a17 	ldw	r2,40(sp)
 8004e90:	10001916 	blt	r2,zero,8004ef8 <___vfprintf_internal_r+0x2084>
 8004e94:	db401343 	ldbu	r13,77(sp)
 8004e98:	e0801210 	cmplti	r2,fp,72
 8004e9c:	1000131e 	bne	r2,zero,8004eec <___vfprintf_internal_r+0x2078>
 8004ea0:	04420074 	movhi	r17,2049
 8004ea4:	8c4b4d04 	addi	r17,r17,11572
 8004ea8:	00399906 	br	8003510 <___vfprintf_internal_r+0x69c>
 8004eac:	05400044 	movi	r21,1
 8004eb0:	a8abc83a 	sub	r21,r21,r2
 8004eb4:	00800b44 	movi	r2,45
 8004eb8:	d8801685 	stb	r2,90(sp)
 8004ebc:	003e2906 	br	8004764 <___vfprintf_internal_r+0x18f0>
 8004ec0:	d8800b17 	ldw	r2,44(sp)
 8004ec4:	18ab883a 	add	r21,r3,r2
 8004ec8:	aa2b883a 	add	r21,r21,r8
 8004ecc:	a829883a 	mov	r20,r21
 8004ed0:	a83efc0e 	bge	r21,zero,8004ac4 <___vfprintf_internal_r+0x1c50>
 8004ed4:	0029883a 	mov	r20,zero
 8004ed8:	003efa06 	br	8004ac4 <___vfprintf_internal_r+0x1c50>
 8004edc:	6080004c 	andi	r2,r12,1
 8004ee0:	d8800715 	stw	r2,28(sp)
 8004ee4:	103e531e 	bne	r2,zero,8004834 <___vfprintf_internal_r+0x19c0>
 8004ee8:	003ff806 	br	8004ecc <___vfprintf_internal_r+0x2058>
 8004eec:	04420074 	movhi	r17,2049
 8004ef0:	8c4b4c04 	addi	r17,r17,11568
 8004ef4:	00398606 	br	8003510 <___vfprintf_internal_r+0x69c>
 8004ef8:	00800b44 	movi	r2,45
 8004efc:	d8801345 	stb	r2,77(sp)
 8004f00:	03400b44 	movi	r13,45
 8004f04:	003fe406 	br	8004e98 <___vfprintf_internal_r+0x2024>
 8004f08:	1000031e 	bne	r2,zero,8004f18 <___vfprintf_internal_r+0x20a4>
 8004f0c:	05000044 	movi	r20,1
 8004f10:	05400044 	movi	r21,1
 8004f14:	003eeb06 	br	8004ac4 <___vfprintf_internal_r+0x1c50>
 8004f18:	d8800b17 	ldw	r2,44(sp)
 8004f1c:	15400044 	addi	r21,r2,1
 8004f20:	aa2b883a 	add	r21,r21,r8
 8004f24:	003fe906 	br	8004ecc <___vfprintf_internal_r+0x2058>
 8004f28:	b005883a 	mov	r2,r22
 8004f2c:	39cb5b04 	addi	r7,r7,11628
 8004f30:	003e9706 	br	8004990 <___vfprintf_internal_r+0x1b1c>
 8004f34:	8025883a 	mov	r18,r16
 8004f38:	0038dd06 	br	80032b0 <___vfprintf_internal_r+0x43c>
 8004f3c:	00800084 	movi	r2,2
 8004f40:	d8801015 	stw	r2,64(sp)
 8004f44:	003e3606 	br	8004820 <___vfprintf_internal_r+0x19ac>
 8004f48:	d8c00617 	ldw	r3,24(sp)
 8004f4c:	1a000017 	ldw	r8,0(r3)
 8004f50:	18c00104 	addi	r3,r3,4
 8004f54:	4000010e 	bge	r8,zero,8004f5c <___vfprintf_internal_r+0x20e8>
 8004f58:	023fffc4 	movi	r8,-1
 8004f5c:	bf000043 	ldbu	fp,1(r23)
 8004f60:	d8c00615 	stw	r3,24(sp)
 8004f64:	102f883a 	mov	r23,r2
 8004f68:	e2c03fcc 	andi	r11,fp,255
 8004f6c:	5ac0201c 	xori	r11,r11,128
 8004f70:	5affe004 	addi	r11,r11,-128
 8004f74:	00380b06 	br	8002fa4 <___vfprintf_internal_r+0x130>

08004f78 <__vfprintf_internal>:
 8004f78:	00c20074 	movhi	r3,2049
 8004f7c:	2005883a 	mov	r2,r4
 8004f80:	1913d817 	ldw	r4,20320(r3)
 8004f84:	300f883a 	mov	r7,r6
 8004f88:	280d883a 	mov	r6,r5
 8004f8c:	100b883a 	mov	r5,r2
 8004f90:	8002e741 	jmpi	8002e74 <___vfprintf_internal_r>

08004f94 <__sbprintf>:
 8004f94:	2880030b 	ldhu	r2,12(r5)
 8004f98:	2b001917 	ldw	r12,100(r5)
 8004f9c:	2ac0038b 	ldhu	r11,14(r5)
 8004fa0:	2a800717 	ldw	r10,28(r5)
 8004fa4:	2a400917 	ldw	r9,36(r5)
 8004fa8:	defee204 	addi	sp,sp,-1144
 8004fac:	da001a04 	addi	r8,sp,104
 8004fb0:	00c10004 	movi	r3,1024
 8004fb4:	dc011a15 	stw	r16,1128(sp)
 8004fb8:	10bfff4c 	andi	r2,r2,65533
 8004fbc:	2821883a 	mov	r16,r5
 8004fc0:	d80b883a 	mov	r5,sp
 8004fc4:	dc811c15 	stw	r18,1136(sp)
 8004fc8:	dc411b15 	stw	r17,1132(sp)
 8004fcc:	dfc11d15 	stw	ra,1140(sp)
 8004fd0:	2025883a 	mov	r18,r4
 8004fd4:	d880030d 	sth	r2,12(sp)
 8004fd8:	db001915 	stw	r12,100(sp)
 8004fdc:	dac0038d 	sth	r11,14(sp)
 8004fe0:	da800715 	stw	r10,28(sp)
 8004fe4:	da400915 	stw	r9,36(sp)
 8004fe8:	da000015 	stw	r8,0(sp)
 8004fec:	da000415 	stw	r8,16(sp)
 8004ff0:	d8c00215 	stw	r3,8(sp)
 8004ff4:	d8c00515 	stw	r3,20(sp)
 8004ff8:	d8000615 	stw	zero,24(sp)
 8004ffc:	8002e740 	call	8002e74 <___vfprintf_internal_r>
 8005000:	1023883a 	mov	r17,r2
 8005004:	10000d0e 	bge	r2,zero,800503c <__sbprintf+0xa8>
 8005008:	d880030b 	ldhu	r2,12(sp)
 800500c:	1080100c 	andi	r2,r2,64
 8005010:	10000326 	beq	r2,zero,8005020 <__sbprintf+0x8c>
 8005014:	8080030b 	ldhu	r2,12(r16)
 8005018:	10801014 	ori	r2,r2,64
 800501c:	8080030d 	sth	r2,12(r16)
 8005020:	8805883a 	mov	r2,r17
 8005024:	dfc11d17 	ldw	ra,1140(sp)
 8005028:	dc811c17 	ldw	r18,1136(sp)
 800502c:	dc411b17 	ldw	r17,1132(sp)
 8005030:	dc011a17 	ldw	r16,1128(sp)
 8005034:	dec11e04 	addi	sp,sp,1144
 8005038:	f800283a 	ret
 800503c:	d80b883a 	mov	r5,sp
 8005040:	9009883a 	mov	r4,r18
 8005044:	8006d480 	call	8006d48 <_fflush_r>
 8005048:	103fef26 	beq	r2,zero,8005008 <__sbprintf+0x74>
 800504c:	047fffc4 	movi	r17,-1
 8005050:	003fed06 	br	8005008 <__sbprintf+0x74>

08005054 <__swsetup_r>:
 8005054:	00820074 	movhi	r2,2049
 8005058:	1093d817 	ldw	r2,20320(r2)
 800505c:	defffd04 	addi	sp,sp,-12
 8005060:	dc400115 	stw	r17,4(sp)
 8005064:	dc000015 	stw	r16,0(sp)
 8005068:	dfc00215 	stw	ra,8(sp)
 800506c:	2023883a 	mov	r17,r4
 8005070:	2821883a 	mov	r16,r5
 8005074:	10000226 	beq	r2,zero,8005080 <__swsetup_r+0x2c>
 8005078:	10c00e17 	ldw	r3,56(r2)
 800507c:	18001f26 	beq	r3,zero,80050fc <__swsetup_r+0xa8>
 8005080:	8180030b 	ldhu	r6,12(r16)
 8005084:	30c0020c 	andi	r3,r6,8
 8005088:	3005883a 	mov	r2,r6
 800508c:	18002126 	beq	r3,zero,8005114 <__swsetup_r+0xc0>
 8005090:	80c00417 	ldw	r3,16(r16)
 8005094:	18002826 	beq	r3,zero,8005138 <__swsetup_r+0xe4>
 8005098:	1100004c 	andi	r4,r2,1
 800509c:	20000b1e 	bne	r4,zero,80050cc <__swsetup_r+0x78>
 80050a0:	1100008c 	andi	r4,r2,2
 80050a4:	20002e1e 	bne	r4,zero,8005160 <__swsetup_r+0x10c>
 80050a8:	81000517 	ldw	r4,20(r16)
 80050ac:	81000215 	stw	r4,8(r16)
 80050b0:	18000b26 	beq	r3,zero,80050e0 <__swsetup_r+0x8c>
 80050b4:	0005883a 	mov	r2,zero
 80050b8:	dfc00217 	ldw	ra,8(sp)
 80050bc:	dc400117 	ldw	r17,4(sp)
 80050c0:	dc000017 	ldw	r16,0(sp)
 80050c4:	dec00304 	addi	sp,sp,12
 80050c8:	f800283a 	ret
 80050cc:	81000517 	ldw	r4,20(r16)
 80050d0:	80000215 	stw	zero,8(r16)
 80050d4:	0109c83a 	sub	r4,zero,r4
 80050d8:	81000615 	stw	r4,24(r16)
 80050dc:	183ff51e 	bne	r3,zero,80050b4 <__swsetup_r+0x60>
 80050e0:	10c0200c 	andi	r3,r2,128
 80050e4:	0005883a 	mov	r2,zero
 80050e8:	183ff326 	beq	r3,zero,80050b8 <__swsetup_r+0x64>
 80050ec:	31801014 	ori	r6,r6,64
 80050f0:	8180030d 	sth	r6,12(r16)
 80050f4:	00bfffc4 	movi	r2,-1
 80050f8:	003fef06 	br	80050b8 <__swsetup_r+0x64>
 80050fc:	1009883a 	mov	r4,r2
 8005100:	80071900 	call	8007190 <__sinit>
 8005104:	8180030b 	ldhu	r6,12(r16)
 8005108:	30c0020c 	andi	r3,r6,8
 800510c:	3005883a 	mov	r2,r6
 8005110:	183fdf1e 	bne	r3,zero,8005090 <__swsetup_r+0x3c>
 8005114:	3080040c 	andi	r2,r6,16
 8005118:	10002126 	beq	r2,zero,80051a0 <__swsetup_r+0x14c>
 800511c:	3080010c 	andi	r2,r6,4
 8005120:	1000111e 	bne	r2,zero,8005168 <__swsetup_r+0x114>
 8005124:	80c00417 	ldw	r3,16(r16)
 8005128:	30800214 	ori	r2,r6,8
 800512c:	8080030d 	sth	r2,12(r16)
 8005130:	100d883a 	mov	r6,r2
 8005134:	183fd81e 	bne	r3,zero,8005098 <__swsetup_r+0x44>
 8005138:	1100a00c 	andi	r4,r2,640
 800513c:	21008020 	cmpeqi	r4,r4,512
 8005140:	203fd51e 	bne	r4,zero,8005098 <__swsetup_r+0x44>
 8005144:	800b883a 	mov	r5,r16
 8005148:	8809883a 	mov	r4,r17
 800514c:	8007c180 	call	8007c18 <__smakebuf_r>
 8005150:	8180030b 	ldhu	r6,12(r16)
 8005154:	80c00417 	ldw	r3,16(r16)
 8005158:	3005883a 	mov	r2,r6
 800515c:	003fce06 	br	8005098 <__swsetup_r+0x44>
 8005160:	0009883a 	mov	r4,zero
 8005164:	003fd106 	br	80050ac <__swsetup_r+0x58>
 8005168:	81400c17 	ldw	r5,48(r16)
 800516c:	28000626 	beq	r5,zero,8005188 <__swsetup_r+0x134>
 8005170:	80801004 	addi	r2,r16,64
 8005174:	28800326 	beq	r5,r2,8005184 <__swsetup_r+0x130>
 8005178:	8809883a 	mov	r4,r17
 800517c:	80072f40 	call	80072f4 <_free_r>
 8005180:	8180030b 	ldhu	r6,12(r16)
 8005184:	80000c15 	stw	zero,48(r16)
 8005188:	80c00417 	ldw	r3,16(r16)
 800518c:	00bff6c4 	movi	r2,-37
 8005190:	118c703a 	and	r6,r2,r6
 8005194:	80000115 	stw	zero,4(r16)
 8005198:	80c00015 	stw	r3,0(r16)
 800519c:	003fe206 	br	8005128 <__swsetup_r+0xd4>
 80051a0:	00800244 	movi	r2,9
 80051a4:	88800015 	stw	r2,0(r17)
 80051a8:	31801014 	ori	r6,r6,64
 80051ac:	8180030d 	sth	r6,12(r16)
 80051b0:	00bfffc4 	movi	r2,-1
 80051b4:	003fc006 	br	80050b8 <__swsetup_r+0x64>

080051b8 <quorem>:
 80051b8:	defff204 	addi	sp,sp,-56
 80051bc:	dc400515 	stw	r17,20(sp)
 80051c0:	20800417 	ldw	r2,16(r4)
 80051c4:	2c400417 	ldw	r17,16(r5)
 80051c8:	dfc00d15 	stw	ra,52(sp)
 80051cc:	df000c15 	stw	fp,48(sp)
 80051d0:	ddc00b15 	stw	r23,44(sp)
 80051d4:	dd800a15 	stw	r22,40(sp)
 80051d8:	dd400915 	stw	r21,36(sp)
 80051dc:	dd000815 	stw	r20,32(sp)
 80051e0:	dcc00715 	stw	r19,28(sp)
 80051e4:	dc800615 	stw	r18,24(sp)
 80051e8:	dc000415 	stw	r16,16(sp)
 80051ec:	d9000115 	stw	r4,4(sp)
 80051f0:	d9400215 	stw	r5,8(sp)
 80051f4:	14407616 	blt	r2,r17,80053d0 <quorem+0x218>
 80051f8:	8c7fffc4 	addi	r17,r17,-1
 80051fc:	882a90ba 	slli	r21,r17,2
 8005200:	2f000504 	addi	fp,r5,20
 8005204:	25800504 	addi	r22,r4,20
 8005208:	e565883a 	add	r18,fp,r21
 800520c:	b545883a 	add	r2,r22,r21
 8005210:	95c00017 	ldw	r23,0(r18)
 8005214:	15000017 	ldw	r20,0(r2)
 8005218:	dd800015 	stw	r22,0(sp)
 800521c:	bdc00044 	addi	r23,r23,1
 8005220:	b80b883a 	mov	r5,r23
 8005224:	a009883a 	mov	r4,r20
 8005228:	d8800315 	stw	r2,12(sp)
 800522c:	8002b900 	call	8002b90 <__udivsi3>
 8005230:	1021883a 	mov	r16,r2
 8005234:	a5c02f36 	bltu	r20,r23,80052f4 <quorem+0x13c>
 8005238:	e029883a 	mov	r20,fp
 800523c:	002b883a 	mov	r21,zero
 8005240:	002f883a 	mov	r23,zero
 8005244:	a4c00017 	ldw	r19,0(r20)
 8005248:	800b883a 	mov	r5,r16
 800524c:	b5800104 	addi	r22,r22,4
 8005250:	993fffcc 	andi	r4,r19,65535
 8005254:	8002c500 	call	8002c50 <__mulsi3>
 8005258:	9808d43a 	srli	r4,r19,16
 800525c:	800b883a 	mov	r5,r16
 8005260:	156b883a 	add	r21,r2,r21
 8005264:	8002c500 	call	8002c50 <__mulsi3>
 8005268:	b0ffff17 	ldw	r3,-4(r22)
 800526c:	a80ad43a 	srli	r5,r21,16
 8005270:	a93fffcc 	andi	r4,r21,65535
 8005274:	19bfffcc 	andi	r6,r3,65535
 8005278:	b909c83a 	sub	r4,r23,r4
 800527c:	2189883a 	add	r4,r4,r6
 8005280:	1806d43a 	srli	r3,r3,16
 8005284:	1145883a 	add	r2,r2,r5
 8005288:	200bd43a 	srai	r5,r4,16
 800528c:	11bfffcc 	andi	r6,r2,65535
 8005290:	1987c83a 	sub	r3,r3,r6
 8005294:	1947883a 	add	r3,r3,r5
 8005298:	180a943a 	slli	r5,r3,16
 800529c:	213fffcc 	andi	r4,r4,65535
 80052a0:	a5000104 	addi	r20,r20,4
 80052a4:	2908b03a 	or	r4,r5,r4
 80052a8:	b13fff15 	stw	r4,-4(r22)
 80052ac:	102ad43a 	srli	r21,r2,16
 80052b0:	182fd43a 	srai	r23,r3,16
 80052b4:	953fe32e 	bgeu	r18,r20,8005244 <quorem+0x8c>
 80052b8:	d8c00317 	ldw	r3,12(sp)
 80052bc:	18800017 	ldw	r2,0(r3)
 80052c0:	10000c1e 	bne	r2,zero,80052f4 <quorem+0x13c>
 80052c4:	d8800017 	ldw	r2,0(sp)
 80052c8:	1d7fff04 	addi	r21,r3,-4
 80052cc:	15400436 	bltu	r2,r21,80052e0 <quorem+0x128>
 80052d0:	00000606 	br	80052ec <quorem+0x134>
 80052d4:	d8800017 	ldw	r2,0(sp)
 80052d8:	8c7fffc4 	addi	r17,r17,-1
 80052dc:	1540032e 	bgeu	r2,r21,80052ec <quorem+0x134>
 80052e0:	a8800017 	ldw	r2,0(r21)
 80052e4:	ad7fff04 	addi	r21,r21,-4
 80052e8:	103ffa26 	beq	r2,zero,80052d4 <quorem+0x11c>
 80052ec:	d8800117 	ldw	r2,4(sp)
 80052f0:	14400415 	stw	r17,16(r2)
 80052f4:	d9400217 	ldw	r5,8(sp)
 80052f8:	d9000117 	ldw	r4,4(sp)
 80052fc:	80094e00 	call	80094e0 <__mcmp>
 8005300:	10002616 	blt	r2,zero,800539c <quorem+0x1e4>
 8005304:	d9400017 	ldw	r5,0(sp)
 8005308:	84000044 	addi	r16,r16,1
 800530c:	0007883a 	mov	r3,zero
 8005310:	e1000017 	ldw	r4,0(fp)
 8005314:	29800017 	ldw	r6,0(r5)
 8005318:	29400104 	addi	r5,r5,4
 800531c:	20bfffcc 	andi	r2,r4,65535
 8005320:	1887c83a 	sub	r3,r3,r2
 8005324:	30bfffcc 	andi	r2,r6,65535
 8005328:	1885883a 	add	r2,r3,r2
 800532c:	2008d43a 	srli	r4,r4,16
 8005330:	3006d43a 	srli	r3,r6,16
 8005334:	100fd43a 	srai	r7,r2,16
 8005338:	11bfffcc 	andi	r6,r2,65535
 800533c:	1907c83a 	sub	r3,r3,r4
 8005340:	19c7883a 	add	r3,r3,r7
 8005344:	1804943a 	slli	r2,r3,16
 8005348:	e7000104 	addi	fp,fp,4
 800534c:	1807d43a 	srai	r3,r3,16
 8005350:	1184b03a 	or	r2,r2,r6
 8005354:	28bfff15 	stw	r2,-4(r5)
 8005358:	973fed2e 	bgeu	r18,fp,8005310 <quorem+0x158>
 800535c:	880490ba 	slli	r2,r17,2
 8005360:	d9000017 	ldw	r4,0(sp)
 8005364:	2085883a 	add	r2,r4,r2
 8005368:	10c00017 	ldw	r3,0(r2)
 800536c:	18000b1e 	bne	r3,zero,800539c <quorem+0x1e4>
 8005370:	10bfff04 	addi	r2,r2,-4
 8005374:	20800436 	bltu	r4,r2,8005388 <quorem+0x1d0>
 8005378:	00000606 	br	8005394 <quorem+0x1dc>
 800537c:	d8c00017 	ldw	r3,0(sp)
 8005380:	8c7fffc4 	addi	r17,r17,-1
 8005384:	1880032e 	bgeu	r3,r2,8005394 <quorem+0x1dc>
 8005388:	10c00017 	ldw	r3,0(r2)
 800538c:	10bfff04 	addi	r2,r2,-4
 8005390:	183ffa26 	beq	r3,zero,800537c <quorem+0x1c4>
 8005394:	d8800117 	ldw	r2,4(sp)
 8005398:	14400415 	stw	r17,16(r2)
 800539c:	8005883a 	mov	r2,r16
 80053a0:	dfc00d17 	ldw	ra,52(sp)
 80053a4:	df000c17 	ldw	fp,48(sp)
 80053a8:	ddc00b17 	ldw	r23,44(sp)
 80053ac:	dd800a17 	ldw	r22,40(sp)
 80053b0:	dd400917 	ldw	r21,36(sp)
 80053b4:	dd000817 	ldw	r20,32(sp)
 80053b8:	dcc00717 	ldw	r19,28(sp)
 80053bc:	dc800617 	ldw	r18,24(sp)
 80053c0:	dc400517 	ldw	r17,20(sp)
 80053c4:	dc000417 	ldw	r16,16(sp)
 80053c8:	dec00e04 	addi	sp,sp,56
 80053cc:	f800283a 	ret
 80053d0:	0005883a 	mov	r2,zero
 80053d4:	003ff206 	br	80053a0 <quorem+0x1e8>

080053d8 <_dtoa_r>:
 80053d8:	20801017 	ldw	r2,64(r4)
 80053dc:	deffe204 	addi	sp,sp,-120
 80053e0:	ddc01b15 	stw	r23,108(sp)
 80053e4:	dcc01715 	stw	r19,92(sp)
 80053e8:	dc801615 	stw	r18,88(sp)
 80053ec:	dc401515 	stw	r17,84(sp)
 80053f0:	dc001415 	stw	r16,80(sp)
 80053f4:	dfc01d15 	stw	ra,116(sp)
 80053f8:	df001c15 	stw	fp,112(sp)
 80053fc:	dd801a15 	stw	r22,104(sp)
 8005400:	dd401915 	stw	r21,100(sp)
 8005404:	dd001815 	stw	r20,96(sp)
 8005408:	d9c00215 	stw	r7,8(sp)
 800540c:	dc002017 	ldw	r16,128(sp)
 8005410:	202f883a 	mov	r23,r4
 8005414:	3025883a 	mov	r18,r6
 8005418:	2827883a 	mov	r19,r5
 800541c:	3023883a 	mov	r17,r6
 8005420:	10000826 	beq	r2,zero,8005444 <_dtoa_r+0x6c>
 8005424:	21801117 	ldw	r6,68(r4)
 8005428:	00c00044 	movi	r3,1
 800542c:	100b883a 	mov	r5,r2
 8005430:	1986983a 	sll	r3,r3,r6
 8005434:	11800115 	stw	r6,4(r2)
 8005438:	10c00215 	stw	r3,8(r2)
 800543c:	8008ad00 	call	8008ad0 <_Bfree>
 8005440:	b8001015 	stw	zero,64(r23)
 8005444:	90018816 	blt	r18,zero,8005a68 <_dtoa_r+0x690>
 8005448:	80000015 	stw	zero,0(r16)
 800544c:	909ffc2c 	andhi	r2,r18,32752
 8005450:	00dffc34 	movhi	r3,32752
 8005454:	10c18d26 	beq	r2,r3,8005a8c <_dtoa_r+0x6b4>
 8005458:	000d883a 	mov	r6,zero
 800545c:	000f883a 	mov	r7,zero
 8005460:	9809883a 	mov	r4,r19
 8005464:	880b883a 	mov	r5,r17
 8005468:	800e95c0 	call	800e95c <__eqdf2>
 800546c:	1000191e 	bne	r2,zero,80054d4 <_dtoa_r+0xfc>
 8005470:	d8c01f17 	ldw	r3,124(sp)
 8005474:	00800044 	movi	r2,1
 8005478:	18800015 	stw	r2,0(r3)
 800547c:	d8802117 	ldw	r2,132(sp)
 8005480:	1002f926 	beq	r2,zero,8006068 <_dtoa_r+0xc90>
 8005484:	d9002117 	ldw	r4,132(sp)
 8005488:	00820074 	movhi	r2,2049
 800548c:	108b5a44 	addi	r2,r2,11625
 8005490:	00c20074 	movhi	r3,2049
 8005494:	20800015 	stw	r2,0(r4)
 8005498:	188b5a04 	addi	r2,r3,11624
 800549c:	d8800115 	stw	r2,4(sp)
 80054a0:	d8800117 	ldw	r2,4(sp)
 80054a4:	dfc01d17 	ldw	ra,116(sp)
 80054a8:	df001c17 	ldw	fp,112(sp)
 80054ac:	ddc01b17 	ldw	r23,108(sp)
 80054b0:	dd801a17 	ldw	r22,104(sp)
 80054b4:	dd401917 	ldw	r21,100(sp)
 80054b8:	dd001817 	ldw	r20,96(sp)
 80054bc:	dcc01717 	ldw	r19,92(sp)
 80054c0:	dc801617 	ldw	r18,88(sp)
 80054c4:	dc401517 	ldw	r17,84(sp)
 80054c8:	dc001417 	ldw	r16,80(sp)
 80054cc:	dec01e04 	addi	sp,sp,120
 80054d0:	f800283a 	ret
 80054d4:	d8801204 	addi	r2,sp,72
 80054d8:	9020d53a 	srli	r16,r18,20
 80054dc:	d8800015 	stw	r2,0(sp)
 80054e0:	d9c01304 	addi	r7,sp,76
 80054e4:	980b883a 	mov	r5,r19
 80054e8:	880d883a 	mov	r6,r17
 80054ec:	b809883a 	mov	r4,r23
 80054f0:	80098c80 	call	80098c8 <__d2b>
 80054f4:	1039883a 	mov	fp,r2
 80054f8:	8001771e 	bne	r16,zero,8005ad8 <_dtoa_r+0x700>
 80054fc:	dd001217 	ldw	r20,72(sp)
 8005500:	dc001317 	ldw	r16,76(sp)
 8005504:	a421883a 	add	r16,r20,r16
 8005508:	80810c84 	addi	r2,r16,1074
 800550c:	10c00850 	cmplti	r3,r2,33
 8005510:	1802e51e 	bne	r3,zero,80060a8 <_dtoa_r+0xcd0>
 8005514:	01001004 	movi	r4,64
 8005518:	2085c83a 	sub	r2,r4,r2
 800551c:	81010484 	addi	r4,r16,1042
 8005520:	90a4983a 	sll	r18,r18,r2
 8005524:	9908d83a 	srl	r4,r19,r4
 8005528:	9108b03a 	or	r4,r18,r4
 800552c:	800fd980 	call	800fd98 <__floatunsidf>
 8005530:	1009883a 	mov	r4,r2
 8005534:	017f8434 	movhi	r5,65040
 8005538:	00800044 	movi	r2,1
 800553c:	194b883a 	add	r5,r3,r5
 8005540:	843fffc4 	addi	r16,r16,-1
 8005544:	d8800a15 	stw	r2,40(sp)
 8005548:	000d883a 	mov	r6,zero
 800554c:	01cffe34 	movhi	r7,16376
 8005550:	800f3580 	call	800f358 <__subdf3>
 8005554:	0198dbf4 	movhi	r6,25455
 8005558:	01cff4f4 	movhi	r7,16339
 800555c:	3190d844 	addi	r6,r6,17249
 8005560:	39e1e9c4 	addi	r7,r7,-30809
 8005564:	1009883a 	mov	r4,r2
 8005568:	180b883a 	mov	r5,r3
 800556c:	800ebac0 	call	800ebac <__muldf3>
 8005570:	01a2d874 	movhi	r6,35681
 8005574:	01cff1f4 	movhi	r7,16327
 8005578:	31b22cc4 	addi	r6,r6,-14157
 800557c:	39e28a04 	addi	r7,r7,-30168
 8005580:	180b883a 	mov	r5,r3
 8005584:	1009883a 	mov	r4,r2
 8005588:	800d73c0 	call	800d73c <__adddf3>
 800558c:	8009883a 	mov	r4,r16
 8005590:	102b883a 	mov	r21,r2
 8005594:	1825883a 	mov	r18,r3
 8005598:	800fce00 	call	800fce0 <__floatsidf>
 800559c:	019427f4 	movhi	r6,20639
 80055a0:	01cff4f4 	movhi	r7,16339
 80055a4:	319e7ec4 	addi	r6,r6,31227
 80055a8:	39d104c4 	addi	r7,r7,17427
 80055ac:	1009883a 	mov	r4,r2
 80055b0:	180b883a 	mov	r5,r3
 80055b4:	800ebac0 	call	800ebac <__muldf3>
 80055b8:	100d883a 	mov	r6,r2
 80055bc:	180f883a 	mov	r7,r3
 80055c0:	a809883a 	mov	r4,r21
 80055c4:	900b883a 	mov	r5,r18
 80055c8:	800d73c0 	call	800d73c <__adddf3>
 80055cc:	1009883a 	mov	r4,r2
 80055d0:	180b883a 	mov	r5,r3
 80055d4:	1025883a 	mov	r18,r2
 80055d8:	182d883a 	mov	r22,r3
 80055dc:	800fc600 	call	800fc60 <__fixdfsi>
 80055e0:	000d883a 	mov	r6,zero
 80055e4:	000f883a 	mov	r7,zero
 80055e8:	9009883a 	mov	r4,r18
 80055ec:	b00b883a 	mov	r5,r22
 80055f0:	102b883a 	mov	r21,r2
 80055f4:	d8800315 	stw	r2,12(sp)
 80055f8:	800eac40 	call	800eac4 <__ledf2>
 80055fc:	10028f16 	blt	r2,zero,800603c <_dtoa_r+0xc64>
 8005600:	dc800317 	ldw	r18,12(sp)
 8005604:	a421c83a 	sub	r16,r20,r16
 8005608:	85bfffc4 	addi	r22,r16,-1
 800560c:	908005e8 	cmpgeui	r2,r18,23
 8005610:	1002821e 	bne	r2,zero,800601c <_dtoa_r+0xc44>
 8005614:	900690fa 	slli	r3,r18,3
 8005618:	00820074 	movhi	r2,2049
 800561c:	108ba304 	addi	r2,r2,11916
 8005620:	10c5883a 	add	r2,r2,r3
 8005624:	11800017 	ldw	r6,0(r2)
 8005628:	11c00117 	ldw	r7,4(r2)
 800562c:	9809883a 	mov	r4,r19
 8005630:	880b883a 	mov	r5,r17
 8005634:	800eac40 	call	800eac4 <__ledf2>
 8005638:	1002550e 	bge	r2,zero,8005f90 <_dtoa_r+0xbb8>
 800563c:	90bfffc4 	addi	r2,r18,-1
 8005640:	d8800315 	stw	r2,12(sp)
 8005644:	d8000915 	stw	zero,36(sp)
 8005648:	b0027716 	blt	r22,zero,8006028 <_dtoa_r+0xc50>
 800564c:	d8000615 	stw	zero,24(sp)
 8005650:	d8800317 	ldw	r2,12(sp)
 8005654:	1002510e 	bge	r2,zero,8005f9c <_dtoa_r+0xbc4>
 8005658:	d8800317 	ldw	r2,12(sp)
 800565c:	d8c00617 	ldw	r3,24(sp)
 8005660:	d8000315 	stw	zero,12(sp)
 8005664:	d8800415 	stw	r2,16(sp)
 8005668:	1887c83a 	sub	r3,r3,r2
 800566c:	d8c00615 	stw	r3,24(sp)
 8005670:	0087c83a 	sub	r3,zero,r2
 8005674:	d8c00815 	stw	r3,32(sp)
 8005678:	d8c00217 	ldw	r3,8(sp)
 800567c:	188002a8 	cmpgeui	r2,r3,10
 8005680:	10024d1e 	bne	r2,zero,8005fb8 <_dtoa_r+0xbe0>
 8005684:	18800190 	cmplti	r2,r3,6
 8005688:	10028b1e 	bne	r2,zero,80060b8 <_dtoa_r+0xce0>
 800568c:	18bfff04 	addi	r2,r3,-4
 8005690:	d8800215 	stw	r2,8(sp)
 8005694:	0021883a 	mov	r16,zero
 8005698:	d8c00217 	ldw	r3,8(sp)
 800569c:	18800120 	cmpeqi	r2,r3,4
 80056a0:	10035d1e 	bne	r2,zero,8006418 <_dtoa_r+0x1040>
 80056a4:	18800160 	cmpeqi	r2,r3,5
 80056a8:	10031b1e 	bne	r2,zero,8006318 <_dtoa_r+0xf40>
 80056ac:	188000a0 	cmpeqi	r2,r3,2
 80056b0:	10024d26 	beq	r2,zero,8005fe8 <_dtoa_r+0xc10>
 80056b4:	d8000715 	stw	zero,28(sp)
 80056b8:	d8801e17 	ldw	r2,120(sp)
 80056bc:	0083260e 	bge	zero,r2,8006358 <_dtoa_r+0xf80>
 80056c0:	d8800b15 	stw	r2,44(sp)
 80056c4:	d8800515 	stw	r2,20(sp)
 80056c8:	100d883a 	mov	r6,r2
 80056cc:	b8001115 	stw	zero,68(r23)
 80056d0:	30800610 	cmplti	r2,r6,24
 80056d4:	1004f11e 	bne	r2,zero,8006a9c <_dtoa_r+0x16c4>
 80056d8:	00c00044 	movi	r3,1
 80056dc:	00800104 	movi	r2,4
 80056e0:	1085883a 	add	r2,r2,r2
 80056e4:	11000504 	addi	r4,r2,20
 80056e8:	180b883a 	mov	r5,r3
 80056ec:	18c00044 	addi	r3,r3,1
 80056f0:	313ffb2e 	bgeu	r6,r4,80056e0 <_dtoa_r+0x308>
 80056f4:	b9401115 	stw	r5,68(r23)
 80056f8:	b809883a 	mov	r4,r23
 80056fc:	8008a2c0 	call	8008a2c <_Balloc>
 8005700:	d8800115 	stw	r2,4(sp)
 8005704:	1004de26 	beq	r2,zero,8006a80 <_dtoa_r+0x16a8>
 8005708:	d8800117 	ldw	r2,4(sp)
 800570c:	b8801015 	stw	r2,64(r23)
 8005710:	d8800517 	ldw	r2,20(sp)
 8005714:	108003e8 	cmpgeui	r2,r2,15
 8005718:	1001021e 	bne	r2,zero,8005b24 <_dtoa_r+0x74c>
 800571c:	80010126 	beq	r16,zero,8005b24 <_dtoa_r+0x74c>
 8005720:	d9000417 	ldw	r4,16(sp)
 8005724:	01038b0e 	bge	zero,r4,8006554 <_dtoa_r+0x117c>
 8005728:	208003cc 	andi	r2,r4,15
 800572c:	100690fa 	slli	r3,r2,3
 8005730:	2029d13a 	srai	r20,r4,4
 8005734:	00820074 	movhi	r2,2049
 8005738:	108ba304 	addi	r2,r2,11916
 800573c:	10c5883a 	add	r2,r2,r3
 8005740:	a0c0040c 	andi	r3,r20,16
 8005744:	12800017 	ldw	r10,0(r2)
 8005748:	12400117 	ldw	r9,4(r2)
 800574c:	18032c26 	beq	r3,zero,8006400 <_dtoa_r+0x1028>
 8005750:	00820074 	movhi	r2,2049
 8005754:	108b9904 	addi	r2,r2,11876
 8005758:	11800817 	ldw	r6,32(r2)
 800575c:	11c00917 	ldw	r7,36(r2)
 8005760:	9809883a 	mov	r4,r19
 8005764:	880b883a 	mov	r5,r17
 8005768:	da400e15 	stw	r9,56(sp)
 800576c:	da800d15 	stw	r10,52(sp)
 8005770:	800e02c0 	call	800e02c <__divdf3>
 8005774:	da800d17 	ldw	r10,52(sp)
 8005778:	da400e17 	ldw	r9,56(sp)
 800577c:	a50003cc 	andi	r20,r20,15
 8005780:	d8800c15 	stw	r2,48(sp)
 8005784:	1825883a 	mov	r18,r3
 8005788:	054000c4 	movi	r21,3
 800578c:	a0001126 	beq	r20,zero,80057d4 <_dtoa_r+0x3fc>
 8005790:	04020074 	movhi	r16,2049
 8005794:	840b9904 	addi	r16,r16,11876
 8005798:	5009883a 	mov	r4,r10
 800579c:	480b883a 	mov	r5,r9
 80057a0:	a180004c 	andi	r6,r20,1
 80057a4:	30000626 	beq	r6,zero,80057c0 <_dtoa_r+0x3e8>
 80057a8:	81800017 	ldw	r6,0(r16)
 80057ac:	81c00117 	ldw	r7,4(r16)
 80057b0:	ad400044 	addi	r21,r21,1
 80057b4:	800ebac0 	call	800ebac <__muldf3>
 80057b8:	1009883a 	mov	r4,r2
 80057bc:	180b883a 	mov	r5,r3
 80057c0:	a029d07a 	srai	r20,r20,1
 80057c4:	84000204 	addi	r16,r16,8
 80057c8:	a03ff51e 	bne	r20,zero,80057a0 <_dtoa_r+0x3c8>
 80057cc:	2015883a 	mov	r10,r4
 80057d0:	2813883a 	mov	r9,r5
 80057d4:	d9000c17 	ldw	r4,48(sp)
 80057d8:	900b883a 	mov	r5,r18
 80057dc:	500d883a 	mov	r6,r10
 80057e0:	480f883a 	mov	r7,r9
 80057e4:	800e02c0 	call	800e02c <__divdf3>
 80057e8:	1021883a 	mov	r16,r2
 80057ec:	1825883a 	mov	r18,r3
 80057f0:	d8800917 	ldw	r2,36(sp)
 80057f4:	10000626 	beq	r2,zero,8005810 <_dtoa_r+0x438>
 80057f8:	000d883a 	mov	r6,zero
 80057fc:	01cffc34 	movhi	r7,16368
 8005800:	8009883a 	mov	r4,r16
 8005804:	900b883a 	mov	r5,r18
 8005808:	800eac40 	call	800eac4 <__ledf2>
 800580c:	10044416 	blt	r2,zero,8006920 <_dtoa_r+0x1548>
 8005810:	a809883a 	mov	r4,r21
 8005814:	800fce00 	call	800fce0 <__floatsidf>
 8005818:	800d883a 	mov	r6,r16
 800581c:	900f883a 	mov	r7,r18
 8005820:	1009883a 	mov	r4,r2
 8005824:	180b883a 	mov	r5,r3
 8005828:	800ebac0 	call	800ebac <__muldf3>
 800582c:	000d883a 	mov	r6,zero
 8005830:	01d00734 	movhi	r7,16412
 8005834:	1009883a 	mov	r4,r2
 8005838:	180b883a 	mov	r5,r3
 800583c:	800d73c0 	call	800d73c <__adddf3>
 8005840:	1029883a 	mov	r20,r2
 8005844:	00bf3034 	movhi	r2,64704
 8005848:	1885883a 	add	r2,r3,r2
 800584c:	d8800c15 	stw	r2,48(sp)
 8005850:	d8800517 	ldw	r2,20(sp)
 8005854:	10032226 	beq	r2,zero,80064e0 <_dtoa_r+0x1108>
 8005858:	d8800417 	ldw	r2,16(sp)
 800585c:	d8801115 	stw	r2,68(sp)
 8005860:	d8800517 	ldw	r2,20(sp)
 8005864:	d8800d15 	stw	r2,52(sp)
 8005868:	d8800d17 	ldw	r2,52(sp)
 800586c:	900b883a 	mov	r5,r18
 8005870:	8009883a 	mov	r4,r16
 8005874:	10bfffc4 	addi	r2,r2,-1
 8005878:	100690fa 	slli	r3,r2,3
 800587c:	00820074 	movhi	r2,2049
 8005880:	108ba304 	addi	r2,r2,11916
 8005884:	10c5883a 	add	r2,r2,r3
 8005888:	12800017 	ldw	r10,0(r2)
 800588c:	12c00117 	ldw	r11,4(r2)
 8005890:	da800f15 	stw	r10,60(sp)
 8005894:	dac00e15 	stw	r11,56(sp)
 8005898:	800fc600 	call	800fc60 <__fixdfsi>
 800589c:	1009883a 	mov	r4,r2
 80058a0:	10800c04 	addi	r2,r2,48
 80058a4:	d8801015 	stw	r2,64(sp)
 80058a8:	800fce00 	call	800fce0 <__floatsidf>
 80058ac:	8009883a 	mov	r4,r16
 80058b0:	100d883a 	mov	r6,r2
 80058b4:	180f883a 	mov	r7,r3
 80058b8:	900b883a 	mov	r5,r18
 80058bc:	800f3580 	call	800f358 <__subdf3>
 80058c0:	d9000117 	ldw	r4,4(sp)
 80058c4:	dac00e17 	ldw	r11,56(sp)
 80058c8:	da800f17 	ldw	r10,60(sp)
 80058cc:	1825883a 	mov	r18,r3
 80058d0:	d8c00717 	ldw	r3,28(sp)
 80058d4:	25400044 	addi	r21,r4,1
 80058d8:	1021883a 	mov	r16,r2
 80058dc:	500d883a 	mov	r6,r10
 80058e0:	580f883a 	mov	r7,r11
 80058e4:	1803b626 	beq	r3,zero,80067c0 <_dtoa_r+0x13e8>
 80058e8:	0009883a 	mov	r4,zero
 80058ec:	014ff834 	movhi	r5,16352
 80058f0:	800e02c0 	call	800e02c <__divdf3>
 80058f4:	d9c00c17 	ldw	r7,48(sp)
 80058f8:	a00d883a 	mov	r6,r20
 80058fc:	1009883a 	mov	r4,r2
 8005900:	180b883a 	mov	r5,r3
 8005904:	800f3580 	call	800f358 <__subdf3>
 8005908:	d9000117 	ldw	r4,4(sp)
 800590c:	1029883a 	mov	r20,r2
 8005910:	d8801017 	ldw	r2,64(sp)
 8005914:	800d883a 	mov	r6,r16
 8005918:	900f883a 	mov	r7,r18
 800591c:	20800005 	stb	r2,0(r4)
 8005920:	180b883a 	mov	r5,r3
 8005924:	a009883a 	mov	r4,r20
 8005928:	d8c00c15 	stw	r3,48(sp)
 800592c:	800e9dc0 	call	800e9dc <__gedf2>
 8005930:	0083e716 	blt	zero,r2,80068d0 <_dtoa_r+0x14f8>
 8005934:	0005883a 	mov	r2,zero
 8005938:	dd800e15 	stw	r22,56(sp)
 800593c:	dc400f15 	stw	r17,60(sp)
 8005940:	dd800d17 	ldw	r22,52(sp)
 8005944:	dc400c17 	ldw	r17,48(sp)
 8005948:	ddc00d15 	stw	r23,52(sp)
 800594c:	dcc00c15 	stw	r19,48(sp)
 8005950:	1027883a 	mov	r19,r2
 8005954:	00002606 	br	80059f0 <_dtoa_r+0x618>
 8005958:	9cc00044 	addi	r19,r19,1
 800595c:	9d806d0e 	bge	r19,r22,8005b14 <_dtoa_r+0x73c>
 8005960:	a009883a 	mov	r4,r20
 8005964:	880b883a 	mov	r5,r17
 8005968:	000d883a 	mov	r6,zero
 800596c:	01d00934 	movhi	r7,16420
 8005970:	800ebac0 	call	800ebac <__muldf3>
 8005974:	000d883a 	mov	r6,zero
 8005978:	01d00934 	movhi	r7,16420
 800597c:	8009883a 	mov	r4,r16
 8005980:	900b883a 	mov	r5,r18
 8005984:	1029883a 	mov	r20,r2
 8005988:	1823883a 	mov	r17,r3
 800598c:	800ebac0 	call	800ebac <__muldf3>
 8005990:	180b883a 	mov	r5,r3
 8005994:	1009883a 	mov	r4,r2
 8005998:	1821883a 	mov	r16,r3
 800599c:	1025883a 	mov	r18,r2
 80059a0:	800fc600 	call	800fc60 <__fixdfsi>
 80059a4:	1009883a 	mov	r4,r2
 80059a8:	102f883a 	mov	r23,r2
 80059ac:	800fce00 	call	800fce0 <__floatsidf>
 80059b0:	9009883a 	mov	r4,r18
 80059b4:	800b883a 	mov	r5,r16
 80059b8:	100d883a 	mov	r6,r2
 80059bc:	180f883a 	mov	r7,r3
 80059c0:	800f3580 	call	800f358 <__subdf3>
 80059c4:	ad400044 	addi	r21,r21,1
 80059c8:	ba000c04 	addi	r8,r23,48
 80059cc:	aa3fffc5 	stb	r8,-1(r21)
 80059d0:	a00d883a 	mov	r6,r20
 80059d4:	880f883a 	mov	r7,r17
 80059d8:	1009883a 	mov	r4,r2
 80059dc:	180b883a 	mov	r5,r3
 80059e0:	1021883a 	mov	r16,r2
 80059e4:	1825883a 	mov	r18,r3
 80059e8:	800eac40 	call	800eac4 <__ledf2>
 80059ec:	10040516 	blt	r2,zero,8006a04 <_dtoa_r+0x162c>
 80059f0:	800d883a 	mov	r6,r16
 80059f4:	900f883a 	mov	r7,r18
 80059f8:	0009883a 	mov	r4,zero
 80059fc:	014ffc34 	movhi	r5,16368
 8005a00:	800f3580 	call	800f358 <__subdf3>
 8005a04:	a00d883a 	mov	r6,r20
 8005a08:	880f883a 	mov	r7,r17
 8005a0c:	1009883a 	mov	r4,r2
 8005a10:	180b883a 	mov	r5,r3
 8005a14:	800eac40 	call	800eac4 <__ledf2>
 8005a18:	103fcf0e 	bge	r2,zero,8005958 <_dtoa_r+0x580>
 8005a1c:	d8801117 	ldw	r2,68(sp)
 8005a20:	ddc00d17 	ldw	r23,52(sp)
 8005a24:	d9000117 	ldw	r4,4(sp)
 8005a28:	10800044 	addi	r2,r2,1
 8005a2c:	d8800415 	stw	r2,16(sp)
 8005a30:	a829883a 	mov	r20,r21
 8005a34:	00000106 	br	8005a3c <_dtoa_r+0x664>
 8005a38:	a103da26 	beq	r20,r4,80069a4 <_dtoa_r+0x15cc>
 8005a3c:	a0ffffc3 	ldbu	r3,-1(r20)
 8005a40:	a02b883a 	mov	r21,r20
 8005a44:	a53fffc4 	addi	r20,r20,-1
 8005a48:	18803fcc 	andi	r2,r3,255
 8005a4c:	1080201c 	xori	r2,r2,128
 8005a50:	10bfe004 	addi	r2,r2,-128
 8005a54:	10800e60 	cmpeqi	r2,r2,57
 8005a58:	103ff71e 	bne	r2,zero,8005a38 <_dtoa_r+0x660>
 8005a5c:	18c00044 	addi	r3,r3,1
 8005a60:	a0c00005 	stb	r3,0(r20)
 8005a64:	00013f06 	br	8005f64 <_dtoa_r+0xb8c>
 8005a68:	04600034 	movhi	r17,32768
 8005a6c:	8c7fffc4 	addi	r17,r17,-1
 8005a70:	9462703a 	and	r17,r18,r17
 8005a74:	00800044 	movi	r2,1
 8005a78:	8825883a 	mov	r18,r17
 8005a7c:	80800015 	stw	r2,0(r16)
 8005a80:	00dffc34 	movhi	r3,32752
 8005a84:	909ffc2c 	andhi	r2,r18,32752
 8005a88:	10fe731e 	bne	r2,r3,8005458 <_dtoa_r+0x80>
 8005a8c:	d9001f17 	ldw	r4,124(sp)
 8005a90:	00800434 	movhi	r2,16
 8005a94:	10bfffc4 	addi	r2,r2,-1
 8005a98:	9084703a 	and	r2,r18,r2
 8005a9c:	00c9c3c4 	movi	r3,9999
 8005aa0:	20c00015 	stw	r3,0(r4)
 8005aa4:	14e6b03a 	or	r19,r2,r19
 8005aa8:	9800141e 	bne	r19,zero,8005afc <_dtoa_r+0x724>
 8005aac:	d8802117 	ldw	r2,132(sp)
 8005ab0:	10041226 	beq	r2,zero,8006afc <_dtoa_r+0x1724>
 8005ab4:	00820074 	movhi	r2,2049
 8005ab8:	1007883a 	mov	r3,r2
 8005abc:	18cb6404 	addi	r3,r3,11664
 8005ac0:	00820074 	movhi	r2,2049
 8005ac4:	d8c00115 	stw	r3,4(sp)
 8005ac8:	108b6604 	addi	r2,r2,11672
 8005acc:	d8c02117 	ldw	r3,132(sp)
 8005ad0:	18800015 	stw	r2,0(r3)
 8005ad4:	003e7206 	br	80054a0 <_dtoa_r+0xc8>
 8005ad8:	01400434 	movhi	r5,16
 8005adc:	297fffc4 	addi	r5,r5,-1
 8005ae0:	894a703a 	and	r5,r17,r5
 8005ae4:	dd001217 	ldw	r20,72(sp)
 8005ae8:	9809883a 	mov	r4,r19
 8005aec:	294ffc34 	orhi	r5,r5,16368
 8005af0:	843f0044 	addi	r16,r16,-1023
 8005af4:	d8000a15 	stw	zero,40(sp)
 8005af8:	003e9306 	br	8005548 <_dtoa_r+0x170>
 8005afc:	d8802117 	ldw	r2,132(sp)
 8005b00:	1001fe1e 	bne	r2,zero,80062fc <_dtoa_r+0xf24>
 8005b04:	00820074 	movhi	r2,2049
 8005b08:	108b6304 	addi	r2,r2,11660
 8005b0c:	d8800115 	stw	r2,4(sp)
 8005b10:	003e6306 	br	80054a0 <_dtoa_r+0xc8>
 8005b14:	dd800e17 	ldw	r22,56(sp)
 8005b18:	ddc00d17 	ldw	r23,52(sp)
 8005b1c:	dc400f17 	ldw	r17,60(sp)
 8005b20:	dcc00c17 	ldw	r19,48(sp)
 8005b24:	d8801317 	ldw	r2,76(sp)
 8005b28:	10006e16 	blt	r2,zero,8005ce4 <_dtoa_r+0x90c>
 8005b2c:	d9000417 	ldw	r4,16(sp)
 8005b30:	20c003c8 	cmpgei	r3,r4,15
 8005b34:	18006b1e 	bne	r3,zero,8005ce4 <_dtoa_r+0x90c>
 8005b38:	200690fa 	slli	r3,r4,3
 8005b3c:	00820074 	movhi	r2,2049
 8005b40:	108ba304 	addi	r2,r2,11916
 8005b44:	10c5883a 	add	r2,r2,r3
 8005b48:	14000017 	ldw	r16,0(r2)
 8005b4c:	14800117 	ldw	r18,4(r2)
 8005b50:	d8801e17 	ldw	r2,120(sp)
 8005b54:	1000150e 	bge	r2,zero,8005bac <_dtoa_r+0x7d4>
 8005b58:	d8800517 	ldw	r2,20(sp)
 8005b5c:	00801316 	blt	zero,r2,8005bac <_dtoa_r+0x7d4>
 8005b60:	d8800517 	ldw	r2,20(sp)
 8005b64:	1002721e 	bne	r2,zero,8006530 <_dtoa_r+0x1158>
 8005b68:	8009883a 	mov	r4,r16
 8005b6c:	000d883a 	mov	r6,zero
 8005b70:	01d00534 	movhi	r7,16404
 8005b74:	900b883a 	mov	r5,r18
 8005b78:	800ebac0 	call	800ebac <__muldf3>
 8005b7c:	100d883a 	mov	r6,r2
 8005b80:	180f883a 	mov	r7,r3
 8005b84:	9809883a 	mov	r4,r19
 8005b88:	880b883a 	mov	r5,r17
 8005b8c:	800eac40 	call	800eac4 <__ledf2>
 8005b90:	0029883a 	mov	r20,zero
 8005b94:	0021883a 	mov	r16,zero
 8005b98:	00820216 	blt	zero,r2,80063a4 <_dtoa_r+0xfcc>
 8005b9c:	d8801e17 	ldw	r2,120(sp)
 8005ba0:	dd400117 	ldw	r21,4(sp)
 8005ba4:	00a2303a 	nor	r17,zero,r2
 8005ba8:	00020406 	br	80063bc <_dtoa_r+0xfe4>
 8005bac:	800d883a 	mov	r6,r16
 8005bb0:	900f883a 	mov	r7,r18
 8005bb4:	9809883a 	mov	r4,r19
 8005bb8:	880b883a 	mov	r5,r17
 8005bbc:	800e02c0 	call	800e02c <__divdf3>
 8005bc0:	180b883a 	mov	r5,r3
 8005bc4:	1009883a 	mov	r4,r2
 8005bc8:	800fc600 	call	800fc60 <__fixdfsi>
 8005bcc:	1009883a 	mov	r4,r2
 8005bd0:	102b883a 	mov	r21,r2
 8005bd4:	800fce00 	call	800fce0 <__floatsidf>
 8005bd8:	800d883a 	mov	r6,r16
 8005bdc:	900f883a 	mov	r7,r18
 8005be0:	1009883a 	mov	r4,r2
 8005be4:	180b883a 	mov	r5,r3
 8005be8:	800ebac0 	call	800ebac <__muldf3>
 8005bec:	100d883a 	mov	r6,r2
 8005bf0:	9809883a 	mov	r4,r19
 8005bf4:	880b883a 	mov	r5,r17
 8005bf8:	180f883a 	mov	r7,r3
 8005bfc:	800f3580 	call	800f358 <__subdf3>
 8005c00:	d9800117 	ldw	r6,4(sp)
 8005c04:	dd800517 	ldw	r22,20(sp)
 8005c08:	1009883a 	mov	r4,r2
 8005c0c:	a8800c04 	addi	r2,r21,48
 8005c10:	30800005 	stb	r2,0(r6)
 8005c14:	b0800060 	cmpeqi	r2,r22,1
 8005c18:	180b883a 	mov	r5,r3
 8005c1c:	35000044 	addi	r20,r6,1
 8005c20:	10029f1e 	bne	r2,zero,80066a0 <_dtoa_r+0x12c8>
 8005c24:	04400044 	movi	r17,1
 8005c28:	ddc00215 	stw	r23,8(sp)
 8005c2c:	00001c06 	br	8005ca0 <_dtoa_r+0x8c8>
 8005c30:	800d883a 	mov	r6,r16
 8005c34:	900f883a 	mov	r7,r18
 8005c38:	a809883a 	mov	r4,r21
 8005c3c:	980b883a 	mov	r5,r19
 8005c40:	800e02c0 	call	800e02c <__divdf3>
 8005c44:	180b883a 	mov	r5,r3
 8005c48:	1009883a 	mov	r4,r2
 8005c4c:	800fc600 	call	800fc60 <__fixdfsi>
 8005c50:	1009883a 	mov	r4,r2
 8005c54:	102f883a 	mov	r23,r2
 8005c58:	800fce00 	call	800fce0 <__floatsidf>
 8005c5c:	800d883a 	mov	r6,r16
 8005c60:	900f883a 	mov	r7,r18
 8005c64:	1009883a 	mov	r4,r2
 8005c68:	180b883a 	mov	r5,r3
 8005c6c:	800ebac0 	call	800ebac <__muldf3>
 8005c70:	a809883a 	mov	r4,r21
 8005c74:	980b883a 	mov	r5,r19
 8005c78:	100d883a 	mov	r6,r2
 8005c7c:	180f883a 	mov	r7,r3
 8005c80:	800f3580 	call	800f358 <__subdf3>
 8005c84:	b9000c04 	addi	r4,r23,48
 8005c88:	a1000005 	stb	r4,0(r20)
 8005c8c:	8c400044 	addi	r17,r17,1
 8005c90:	a5000044 	addi	r20,r20,1
 8005c94:	1009883a 	mov	r4,r2
 8005c98:	180b883a 	mov	r5,r3
 8005c9c:	8d827e26 	beq	r17,r22,8006698 <_dtoa_r+0x12c0>
 8005ca0:	000d883a 	mov	r6,zero
 8005ca4:	01d00934 	movhi	r7,16420
 8005ca8:	800ebac0 	call	800ebac <__muldf3>
 8005cac:	000d883a 	mov	r6,zero
 8005cb0:	000f883a 	mov	r7,zero
 8005cb4:	1009883a 	mov	r4,r2
 8005cb8:	180b883a 	mov	r5,r3
 8005cbc:	102b883a 	mov	r21,r2
 8005cc0:	1827883a 	mov	r19,r3
 8005cc4:	800e95c0 	call	800e95c <__eqdf2>
 8005cc8:	103fd91e 	bne	r2,zero,8005c30 <_dtoa_r+0x858>
 8005ccc:	d8800417 	ldw	r2,16(sp)
 8005cd0:	ddc00217 	ldw	r23,8(sp)
 8005cd4:	a02b883a 	mov	r21,r20
 8005cd8:	10800044 	addi	r2,r2,1
 8005cdc:	d8800415 	stw	r2,16(sp)
 8005ce0:	0000a006 	br	8005f64 <_dtoa_r+0xb8c>
 8005ce4:	d8c00717 	ldw	r3,28(sp)
 8005ce8:	1800e326 	beq	r3,zero,8006078 <_dtoa_r+0xca0>
 8005cec:	d8c00217 	ldw	r3,8(sp)
 8005cf0:	18c00088 	cmpgei	r3,r3,2
 8005cf4:	1801e026 	beq	r3,zero,8006478 <_dtoa_r+0x10a0>
 8005cf8:	d8800517 	ldw	r2,20(sp)
 8005cfc:	153fffc4 	addi	r20,r2,-1
 8005d00:	d8800817 	ldw	r2,32(sp)
 8005d04:	1501bc0e 	bge	r2,r20,80063f8 <_dtoa_r+0x1020>
 8005d08:	d8800817 	ldw	r2,32(sp)
 8005d0c:	d8c00317 	ldw	r3,12(sp)
 8005d10:	dd000815 	stw	r20,32(sp)
 8005d14:	a085c83a 	sub	r2,r20,r2
 8005d18:	1885883a 	add	r2,r3,r2
 8005d1c:	d8800315 	stw	r2,12(sp)
 8005d20:	0029883a 	mov	r20,zero
 8005d24:	d8800517 	ldw	r2,20(sp)
 8005d28:	10028b16 	blt	r2,zero,8006758 <_dtoa_r+0x1380>
 8005d2c:	d8c00617 	ldw	r3,24(sp)
 8005d30:	b0ad883a 	add	r22,r22,r2
 8005d34:	1885883a 	add	r2,r3,r2
 8005d38:	1825883a 	mov	r18,r3
 8005d3c:	d8800615 	stw	r2,24(sp)
 8005d40:	01400044 	movi	r5,1
 8005d44:	b809883a 	mov	r4,r23
 8005d48:	8008e9c0 	call	8008e9c <__i2b>
 8005d4c:	1021883a 	mov	r16,r2
 8005d50:	0480080e 	bge	zero,r18,8005d74 <_dtoa_r+0x99c>
 8005d54:	0580070e 	bge	zero,r22,8005d74 <_dtoa_r+0x99c>
 8005d58:	9005883a 	mov	r2,r18
 8005d5c:	b4819e16 	blt	r22,r18,80063d8 <_dtoa_r+0x1000>
 8005d60:	d8c00617 	ldw	r3,24(sp)
 8005d64:	90a5c83a 	sub	r18,r18,r2
 8005d68:	b0adc83a 	sub	r22,r22,r2
 8005d6c:	1887c83a 	sub	r3,r3,r2
 8005d70:	d8c00615 	stw	r3,24(sp)
 8005d74:	d8800817 	ldw	r2,32(sp)
 8005d78:	10001426 	beq	r2,zero,8005dcc <_dtoa_r+0x9f4>
 8005d7c:	d8800717 	ldw	r2,28(sp)
 8005d80:	1001ee26 	beq	r2,zero,800653c <_dtoa_r+0x1164>
 8005d84:	05000e0e 	bge	zero,r20,8005dc0 <_dtoa_r+0x9e8>
 8005d88:	800b883a 	mov	r5,r16
 8005d8c:	a00d883a 	mov	r6,r20
 8005d90:	b809883a 	mov	r4,r23
 8005d94:	80092100 	call	8009210 <__pow5mult>
 8005d98:	e00d883a 	mov	r6,fp
 8005d9c:	100b883a 	mov	r5,r2
 8005da0:	b809883a 	mov	r4,r23
 8005da4:	1021883a 	mov	r16,r2
 8005da8:	8008f4c0 	call	8008f4c <__multiply>
 8005dac:	102b883a 	mov	r21,r2
 8005db0:	e00b883a 	mov	r5,fp
 8005db4:	b809883a 	mov	r4,r23
 8005db8:	8008ad00 	call	8008ad0 <_Bfree>
 8005dbc:	a839883a 	mov	fp,r21
 8005dc0:	d8800817 	ldw	r2,32(sp)
 8005dc4:	150dc83a 	sub	r6,r2,r20
 8005dc8:	15025e1e 	bne	r2,r20,8006744 <_dtoa_r+0x136c>
 8005dcc:	01400044 	movi	r5,1
 8005dd0:	b809883a 	mov	r4,r23
 8005dd4:	8008e9c0 	call	8008e9c <__i2b>
 8005dd8:	d9800317 	ldw	r6,12(sp)
 8005ddc:	1029883a 	mov	r20,r2
 8005de0:	0180b716 	blt	zero,r6,80060c0 <_dtoa_r+0xce8>
 8005de4:	d8800217 	ldw	r2,8(sp)
 8005de8:	10800088 	cmpgei	r2,r2,2
 8005dec:	10014d26 	beq	r2,zero,8006324 <_dtoa_r+0xf4c>
 8005df0:	0023883a 	mov	r17,zero
 8005df4:	d8c00317 	ldw	r3,12(sp)
 8005df8:	00800044 	movi	r2,1
 8005dfc:	1800b81e 	bne	r3,zero,80060e0 <_dtoa_r+0xd08>
 8005e00:	1585883a 	add	r2,r2,r22
 8005e04:	108007cc 	andi	r2,r2,31
 8005e08:	1000a526 	beq	r2,zero,80060a0 <_dtoa_r+0xcc8>
 8005e0c:	00c00804 	movi	r3,32
 8005e10:	1887c83a 	sub	r3,r3,r2
 8005e14:	19000150 	cmplti	r4,r3,5
 8005e18:	20033c1e 	bne	r4,zero,8006b0c <_dtoa_r+0x1734>
 8005e1c:	00c00704 	movi	r3,28
 8005e20:	1885c83a 	sub	r2,r3,r2
 8005e24:	d8c00617 	ldw	r3,24(sp)
 8005e28:	90a5883a 	add	r18,r18,r2
 8005e2c:	b0ad883a 	add	r22,r22,r2
 8005e30:	1887883a 	add	r3,r3,r2
 8005e34:	d8c00615 	stw	r3,24(sp)
 8005e38:	d8800617 	ldw	r2,24(sp)
 8005e3c:	00809216 	blt	zero,r2,8006088 <_dtoa_r+0xcb0>
 8005e40:	0580050e 	bge	zero,r22,8005e58 <_dtoa_r+0xa80>
 8005e44:	a00b883a 	mov	r5,r20
 8005e48:	b00d883a 	mov	r6,r22
 8005e4c:	b809883a 	mov	r4,r23
 8005e50:	80093580 	call	8009358 <__lshift>
 8005e54:	1029883a 	mov	r20,r2
 8005e58:	d8800917 	ldw	r2,36(sp)
 8005e5c:	1001151e 	bne	r2,zero,80062b4 <_dtoa_r+0xedc>
 8005e60:	d8800517 	ldw	r2,20(sp)
 8005e64:	0081020e 	bge	zero,r2,8006270 <_dtoa_r+0xe98>
 8005e68:	d8800717 	ldw	r2,28(sp)
 8005e6c:	1000af1e 	bne	r2,zero,800612c <_dtoa_r+0xd54>
 8005e70:	d8800417 	ldw	r2,16(sp)
 8005e74:	10800044 	addi	r2,r2,1
 8005e78:	d8800415 	stw	r2,16(sp)
 8005e7c:	dc800517 	ldw	r18,20(sp)
 8005e80:	dd400117 	ldw	r21,4(sp)
 8005e84:	04400044 	movi	r17,1
 8005e88:	00000706 	br	8005ea8 <_dtoa_r+0xad0>
 8005e8c:	e00b883a 	mov	r5,fp
 8005e90:	000f883a 	mov	r7,zero
 8005e94:	01800284 	movi	r6,10
 8005e98:	b809883a 	mov	r4,r23
 8005e9c:	8008af40 	call	8008af4 <__multadd>
 8005ea0:	1039883a 	mov	fp,r2
 8005ea4:	8c400044 	addi	r17,r17,1
 8005ea8:	a00b883a 	mov	r5,r20
 8005eac:	e009883a 	mov	r4,fp
 8005eb0:	80051b80 	call	80051b8 <quorem>
 8005eb4:	14c00c04 	addi	r19,r2,48
 8005eb8:	ac45883a 	add	r2,r21,r17
 8005ebc:	14ffffc5 	stb	r19,-1(r2)
 8005ec0:	8cbff216 	blt	r17,r18,8005e8c <_dtoa_r+0xab4>
 8005ec4:	d8800517 	ldw	r2,20(sp)
 8005ec8:	0081510e 	bge	zero,r2,8006410 <_dtoa_r+0x1038>
 8005ecc:	d8c00117 	ldw	r3,4(sp)
 8005ed0:	0023883a 	mov	r17,zero
 8005ed4:	18ab883a 	add	r21,r3,r2
 8005ed8:	e00b883a 	mov	r5,fp
 8005edc:	01800044 	movi	r6,1
 8005ee0:	b809883a 	mov	r4,r23
 8005ee4:	80093580 	call	8009358 <__lshift>
 8005ee8:	1009883a 	mov	r4,r2
 8005eec:	a00b883a 	mov	r5,r20
 8005ef0:	1039883a 	mov	fp,r2
 8005ef4:	80094e00 	call	80094e0 <__mcmp>
 8005ef8:	a93fffc3 	ldbu	r4,-1(r21)
 8005efc:	0081490e 	bge	zero,r2,8006424 <_dtoa_r+0x104c>
 8005f00:	d9400117 	ldw	r5,4(sp)
 8005f04:	00000306 	br	8005f14 <_dtoa_r+0xb3c>
 8005f08:	19415426 	beq	r3,r5,800645c <_dtoa_r+0x1084>
 8005f0c:	193fffc3 	ldbu	r4,-1(r3)
 8005f10:	182b883a 	mov	r21,r3
 8005f14:	20803fcc 	andi	r2,r4,255
 8005f18:	1080201c 	xori	r2,r2,128
 8005f1c:	10bfe004 	addi	r2,r2,-128
 8005f20:	10800e60 	cmpeqi	r2,r2,57
 8005f24:	a8ffffc4 	addi	r3,r21,-1
 8005f28:	103ff71e 	bne	r2,zero,8005f08 <_dtoa_r+0xb30>
 8005f2c:	21000044 	addi	r4,r4,1
 8005f30:	19000005 	stb	r4,0(r3)
 8005f34:	a00b883a 	mov	r5,r20
 8005f38:	b809883a 	mov	r4,r23
 8005f3c:	8008ad00 	call	8008ad0 <_Bfree>
 8005f40:	80000826 	beq	r16,zero,8005f64 <_dtoa_r+0xb8c>
 8005f44:	88000426 	beq	r17,zero,8005f58 <_dtoa_r+0xb80>
 8005f48:	8c000326 	beq	r17,r16,8005f58 <_dtoa_r+0xb80>
 8005f4c:	880b883a 	mov	r5,r17
 8005f50:	b809883a 	mov	r4,r23
 8005f54:	8008ad00 	call	8008ad0 <_Bfree>
 8005f58:	800b883a 	mov	r5,r16
 8005f5c:	b809883a 	mov	r4,r23
 8005f60:	8008ad00 	call	8008ad0 <_Bfree>
 8005f64:	e00b883a 	mov	r5,fp
 8005f68:	b809883a 	mov	r4,r23
 8005f6c:	8008ad00 	call	8008ad0 <_Bfree>
 8005f70:	d8801f17 	ldw	r2,124(sp)
 8005f74:	d8c00417 	ldw	r3,16(sp)
 8005f78:	a8000005 	stb	zero,0(r21)
 8005f7c:	10c00015 	stw	r3,0(r2)
 8005f80:	d8802117 	ldw	r2,132(sp)
 8005f84:	103d4626 	beq	r2,zero,80054a0 <_dtoa_r+0xc8>
 8005f88:	15400015 	stw	r21,0(r2)
 8005f8c:	003d4406 	br	80054a0 <_dtoa_r+0xc8>
 8005f90:	d8000915 	stw	zero,36(sp)
 8005f94:	b0002416 	blt	r22,zero,8006028 <_dtoa_r+0xc50>
 8005f98:	d8000615 	stw	zero,24(sp)
 8005f9c:	d8800317 	ldw	r2,12(sp)
 8005fa0:	d8c00217 	ldw	r3,8(sp)
 8005fa4:	d8000815 	stw	zero,32(sp)
 8005fa8:	b0ad883a 	add	r22,r22,r2
 8005fac:	d8800415 	stw	r2,16(sp)
 8005fb0:	188002a8 	cmpgeui	r2,r3,10
 8005fb4:	103db326 	beq	r2,zero,8005684 <_dtoa_r+0x2ac>
 8005fb8:	00800044 	movi	r2,1
 8005fbc:	d8800715 	stw	r2,28(sp)
 8005fc0:	00bfffc4 	movi	r2,-1
 8005fc4:	04000044 	movi	r16,1
 8005fc8:	d8000215 	stw	zero,8(sp)
 8005fcc:	d8800515 	stw	r2,20(sp)
 8005fd0:	d8001e15 	stw	zero,120(sp)
 8005fd4:	d8800517 	ldw	r2,20(sp)
 8005fd8:	b8001115 	stw	zero,68(r23)
 8005fdc:	000b883a 	mov	r5,zero
 8005fe0:	d8800b15 	stw	r2,44(sp)
 8005fe4:	003dc406 	br	80056f8 <_dtoa_r+0x320>
 8005fe8:	188000e0 	cmpeqi	r2,r3,3
 8005fec:	d8000715 	stw	zero,28(sp)
 8005ff0:	1002ac26 	beq	r2,zero,8006aa4 <_dtoa_r+0x16cc>
 8005ff4:	d8801e17 	ldw	r2,120(sp)
 8005ff8:	d8c00417 	ldw	r3,16(sp)
 8005ffc:	10c5883a 	add	r2,r2,r3
 8006000:	d8800b15 	stw	r2,44(sp)
 8006004:	10800044 	addi	r2,r2,1
 8006008:	d8800515 	stw	r2,20(sp)
 800600c:	100d883a 	mov	r6,r2
 8006010:	00bdae16 	blt	zero,r2,80056cc <_dtoa_r+0x2f4>
 8006014:	01800044 	movi	r6,1
 8006018:	003dac06 	br	80056cc <_dtoa_r+0x2f4>
 800601c:	00800044 	movi	r2,1
 8006020:	d8800915 	stw	r2,36(sp)
 8006024:	b03d890e 	bge	r22,zero,800564c <_dtoa_r+0x274>
 8006028:	00800044 	movi	r2,1
 800602c:	1405c83a 	sub	r2,r2,r16
 8006030:	d8800615 	stw	r2,24(sp)
 8006034:	002d883a 	mov	r22,zero
 8006038:	003d8506 	br	8005650 <_dtoa_r+0x278>
 800603c:	a809883a 	mov	r4,r21
 8006040:	800fce00 	call	800fce0 <__floatsidf>
 8006044:	900d883a 	mov	r6,r18
 8006048:	b00f883a 	mov	r7,r22
 800604c:	1009883a 	mov	r4,r2
 8006050:	180b883a 	mov	r5,r3
 8006054:	800e95c0 	call	800e95c <__eqdf2>
 8006058:	103d6926 	beq	r2,zero,8005600 <_dtoa_r+0x228>
 800605c:	a8bfffc4 	addi	r2,r21,-1
 8006060:	d8800315 	stw	r2,12(sp)
 8006064:	003d6606 	br	8005600 <_dtoa_r+0x228>
 8006068:	00820074 	movhi	r2,2049
 800606c:	108b5a04 	addi	r2,r2,11624
 8006070:	d8800115 	stw	r2,4(sp)
 8006074:	003d0a06 	br	80054a0 <_dtoa_r+0xc8>
 8006078:	dd000817 	ldw	r20,32(sp)
 800607c:	dc800617 	ldw	r18,24(sp)
 8006080:	0021883a 	mov	r16,zero
 8006084:	003f3206 	br	8005d50 <_dtoa_r+0x978>
 8006088:	e00b883a 	mov	r5,fp
 800608c:	100d883a 	mov	r6,r2
 8006090:	b809883a 	mov	r4,r23
 8006094:	80093580 	call	8009358 <__lshift>
 8006098:	1039883a 	mov	fp,r2
 800609c:	003f6806 	br	8005e40 <_dtoa_r+0xa68>
 80060a0:	00800704 	movi	r2,28
 80060a4:	003f5f06 	br	8005e24 <_dtoa_r+0xa4c>
 80060a8:	01000804 	movi	r4,32
 80060ac:	2089c83a 	sub	r4,r4,r2
 80060b0:	9908983a 	sll	r4,r19,r4
 80060b4:	003d1d06 	br	800552c <_dtoa_r+0x154>
 80060b8:	04000044 	movi	r16,1
 80060bc:	003d7606 	br	8005698 <_dtoa_r+0x2c0>
 80060c0:	100b883a 	mov	r5,r2
 80060c4:	b809883a 	mov	r4,r23
 80060c8:	80092100 	call	8009210 <__pow5mult>
 80060cc:	d8c00217 	ldw	r3,8(sp)
 80060d0:	1029883a 	mov	r20,r2
 80060d4:	18c00090 	cmplti	r3,r3,2
 80060d8:	1801511e 	bne	r3,zero,8006620 <_dtoa_r+0x1248>
 80060dc:	0023883a 	mov	r17,zero
 80060e0:	a0800417 	ldw	r2,16(r20)
 80060e4:	10800104 	addi	r2,r2,4
 80060e8:	100490ba 	slli	r2,r2,2
 80060ec:	a085883a 	add	r2,r20,r2
 80060f0:	11000017 	ldw	r4,0(r2)
 80060f4:	8008d880 	call	8008d88 <__hi0bits>
 80060f8:	00c00804 	movi	r3,32
 80060fc:	1885c83a 	sub	r2,r3,r2
 8006100:	003f3f06 	br	8005e00 <_dtoa_r+0xa28>
 8006104:	800b883a 	mov	r5,r16
 8006108:	000f883a 	mov	r7,zero
 800610c:	01800284 	movi	r6,10
 8006110:	b809883a 	mov	r4,r23
 8006114:	8008af40 	call	8008af4 <__multadd>
 8006118:	1021883a 	mov	r16,r2
 800611c:	d8800b17 	ldw	r2,44(sp)
 8006120:	00824b0e 	bge	zero,r2,8006a50 <_dtoa_r+0x1678>
 8006124:	dd400415 	stw	r21,16(sp)
 8006128:	d8800515 	stw	r2,20(sp)
 800612c:	0480ac16 	blt	zero,r18,80063e0 <_dtoa_r+0x1008>
 8006130:	8801731e 	bne	r17,zero,8006700 <_dtoa_r+0x1328>
 8006134:	8025883a 	mov	r18,r16
 8006138:	dd800117 	ldw	r22,4(sp)
 800613c:	d9000517 	ldw	r4,20(sp)
 8006140:	98c0004c 	andi	r3,r19,1
 8006144:	b0bfffc4 	addi	r2,r22,-1
 8006148:	1105883a 	add	r2,r2,r4
 800614c:	d8800515 	stw	r2,20(sp)
 8006150:	d8800217 	ldw	r2,8(sp)
 8006154:	d8c00815 	stw	r3,32(sp)
 8006158:	1884b03a 	or	r2,r3,r2
 800615c:	d8800715 	stw	r2,28(sp)
 8006160:	00002906 	br	8006208 <_dtoa_r+0xe30>
 8006164:	e009883a 	mov	r4,fp
 8006168:	80094e00 	call	80094e0 <__mcmp>
 800616c:	980b883a 	mov	r5,r19
 8006170:	b809883a 	mov	r4,r23
 8006174:	d8800315 	stw	r2,12(sp)
 8006178:	8008ad00 	call	8008ad0 <_Bfree>
 800617c:	d8800317 	ldw	r2,12(sp)
 8006180:	1000021e 	bne	r2,zero,800618c <_dtoa_r+0xdb4>
 8006184:	d8c00717 	ldw	r3,28(sp)
 8006188:	18022326 	beq	r3,zero,8006a18 <_dtoa_r+0x1640>
 800618c:	b4c00044 	addi	r19,r22,1
 8006190:	88012916 	blt	r17,zero,8006638 <_dtoa_r+0x1260>
 8006194:	d8c00217 	ldw	r3,8(sp)
 8006198:	88e2b03a 	or	r17,r17,r3
 800619c:	d8c00817 	ldw	r3,32(sp)
 80061a0:	1c62b03a 	or	r17,r3,r17
 80061a4:	88012426 	beq	r17,zero,8006638 <_dtoa_r+0x1260>
 80061a8:	00816f16 	blt	zero,r2,8006768 <_dtoa_r+0x1390>
 80061ac:	d8800517 	ldw	r2,20(sp)
 80061b0:	b5400005 	stb	r21,0(r22)
 80061b4:	15817926 	beq	r2,r22,800679c <_dtoa_r+0x13c4>
 80061b8:	e00b883a 	mov	r5,fp
 80061bc:	000f883a 	mov	r7,zero
 80061c0:	01800284 	movi	r6,10
 80061c4:	b809883a 	mov	r4,r23
 80061c8:	8008af40 	call	8008af4 <__multadd>
 80061cc:	1039883a 	mov	fp,r2
 80061d0:	800b883a 	mov	r5,r16
 80061d4:	000f883a 	mov	r7,zero
 80061d8:	01800284 	movi	r6,10
 80061dc:	b809883a 	mov	r4,r23
 80061e0:	84801f26 	beq	r16,r18,8006260 <_dtoa_r+0xe88>
 80061e4:	8008af40 	call	8008af4 <__multadd>
 80061e8:	900b883a 	mov	r5,r18
 80061ec:	000f883a 	mov	r7,zero
 80061f0:	01800284 	movi	r6,10
 80061f4:	b809883a 	mov	r4,r23
 80061f8:	1021883a 	mov	r16,r2
 80061fc:	8008af40 	call	8008af4 <__multadd>
 8006200:	1025883a 	mov	r18,r2
 8006204:	982d883a 	mov	r22,r19
 8006208:	a00b883a 	mov	r5,r20
 800620c:	e009883a 	mov	r4,fp
 8006210:	80051b80 	call	80051b8 <quorem>
 8006214:	800b883a 	mov	r5,r16
 8006218:	e009883a 	mov	r4,fp
 800621c:	102b883a 	mov	r21,r2
 8006220:	d8800615 	stw	r2,24(sp)
 8006224:	80094e00 	call	80094e0 <__mcmp>
 8006228:	a00b883a 	mov	r5,r20
 800622c:	900d883a 	mov	r6,r18
 8006230:	b809883a 	mov	r4,r23
 8006234:	1023883a 	mov	r17,r2
 8006238:	80095380 	call	8009538 <__mdiff>
 800623c:	1027883a 	mov	r19,r2
 8006240:	10800317 	ldw	r2,12(r2)
 8006244:	ad400c04 	addi	r21,r21,48
 8006248:	980b883a 	mov	r5,r19
 800624c:	103fc526 	beq	r2,zero,8006164 <_dtoa_r+0xd8c>
 8006250:	b809883a 	mov	r4,r23
 8006254:	8008ad00 	call	8008ad0 <_Bfree>
 8006258:	00800044 	movi	r2,1
 800625c:	003fcb06 	br	800618c <_dtoa_r+0xdb4>
 8006260:	8008af40 	call	8008af4 <__multadd>
 8006264:	1021883a 	mov	r16,r2
 8006268:	1025883a 	mov	r18,r2
 800626c:	003fe506 	br	8006204 <_dtoa_r+0xe2c>
 8006270:	d8800217 	ldw	r2,8(sp)
 8006274:	108000d0 	cmplti	r2,r2,3
 8006278:	10003e26 	beq	r2,zero,8006374 <_dtoa_r+0xf9c>
 800627c:	d8800717 	ldw	r2,28(sp)
 8006280:	103faa1e 	bne	r2,zero,800612c <_dtoa_r+0xd54>
 8006284:	a00b883a 	mov	r5,r20
 8006288:	e009883a 	mov	r4,fp
 800628c:	80051b80 	call	80051b8 <quorem>
 8006290:	14c00c04 	addi	r19,r2,48
 8006294:	d8800117 	ldw	r2,4(sp)
 8006298:	0023883a 	mov	r17,zero
 800629c:	15400044 	addi	r21,r2,1
 80062a0:	14c00005 	stb	r19,0(r2)
 80062a4:	d8800417 	ldw	r2,16(sp)
 80062a8:	10800044 	addi	r2,r2,1
 80062ac:	d8800415 	stw	r2,16(sp)
 80062b0:	003f0906 	br	8005ed8 <_dtoa_r+0xb00>
 80062b4:	a00b883a 	mov	r5,r20
 80062b8:	e009883a 	mov	r4,fp
 80062bc:	80094e00 	call	80094e0 <__mcmp>
 80062c0:	103ee70e 	bge	r2,zero,8005e60 <_dtoa_r+0xa88>
 80062c4:	e00b883a 	mov	r5,fp
 80062c8:	000f883a 	mov	r7,zero
 80062cc:	01800284 	movi	r6,10
 80062d0:	b809883a 	mov	r4,r23
 80062d4:	8008af40 	call	8008af4 <__multadd>
 80062d8:	d8c00417 	ldw	r3,16(sp)
 80062dc:	1039883a 	mov	fp,r2
 80062e0:	d8800717 	ldw	r2,28(sp)
 80062e4:	1d7fffc4 	addi	r21,r3,-1
 80062e8:	103f861e 	bne	r2,zero,8006104 <_dtoa_r+0xd2c>
 80062ec:	d8800b17 	ldw	r2,44(sp)
 80062f0:	0081d20e 	bge	zero,r2,8006a3c <_dtoa_r+0x1664>
 80062f4:	d8800515 	stw	r2,20(sp)
 80062f8:	003ee006 	br	8005e7c <_dtoa_r+0xaa4>
 80062fc:	00820074 	movhi	r2,2049
 8006300:	1007883a 	mov	r3,r2
 8006304:	18cb6304 	addi	r3,r3,11660
 8006308:	00820074 	movhi	r2,2049
 800630c:	d8c00115 	stw	r3,4(sp)
 8006310:	108b63c4 	addi	r2,r2,11663
 8006314:	003ded06 	br	8005acc <_dtoa_r+0x6f4>
 8006318:	00800044 	movi	r2,1
 800631c:	d8800715 	stw	r2,28(sp)
 8006320:	003f3406 	br	8005ff4 <_dtoa_r+0xc1c>
 8006324:	983eb21e 	bne	r19,zero,8005df0 <_dtoa_r+0xa18>
 8006328:	00800434 	movhi	r2,16
 800632c:	10bfffc4 	addi	r2,r2,-1
 8006330:	8884703a 	and	r2,r17,r2
 8006334:	103eae1e 	bne	r2,zero,8005df0 <_dtoa_r+0xa18>
 8006338:	8c5ffc2c 	andhi	r17,r17,32752
 800633c:	883eac26 	beq	r17,zero,8005df0 <_dtoa_r+0xa18>
 8006340:	d8800617 	ldw	r2,24(sp)
 8006344:	b5800044 	addi	r22,r22,1
 8006348:	04400044 	movi	r17,1
 800634c:	10800044 	addi	r2,r2,1
 8006350:	d8800615 	stw	r2,24(sp)
 8006354:	003ea706 	br	8005df4 <_dtoa_r+0xa1c>
 8006358:	00800044 	movi	r2,1
 800635c:	d8800515 	stw	r2,20(sp)
 8006360:	d8801e15 	stw	r2,120(sp)
 8006364:	003f1b06 	br	8005fd4 <_dtoa_r+0xbfc>
 8006368:	d8800b17 	ldw	r2,44(sp)
 800636c:	dd400415 	stw	r21,16(sp)
 8006370:	d8800515 	stw	r2,20(sp)
 8006374:	d8800517 	ldw	r2,20(sp)
 8006378:	103e081e 	bne	r2,zero,8005b9c <_dtoa_r+0x7c4>
 800637c:	a00b883a 	mov	r5,r20
 8006380:	b809883a 	mov	r4,r23
 8006384:	000f883a 	mov	r7,zero
 8006388:	01800144 	movi	r6,5
 800638c:	8008af40 	call	8008af4 <__multadd>
 8006390:	100b883a 	mov	r5,r2
 8006394:	e009883a 	mov	r4,fp
 8006398:	1029883a 	mov	r20,r2
 800639c:	80094e00 	call	80094e0 <__mcmp>
 80063a0:	00bdfe0e 	bge	zero,r2,8005b9c <_dtoa_r+0x7c4>
 80063a4:	d8c00117 	ldw	r3,4(sp)
 80063a8:	00800c44 	movi	r2,49
 80063ac:	18800005 	stb	r2,0(r3)
 80063b0:	d8800417 	ldw	r2,16(sp)
 80063b4:	1d400044 	addi	r21,r3,1
 80063b8:	14400044 	addi	r17,r2,1
 80063bc:	a00b883a 	mov	r5,r20
 80063c0:	b809883a 	mov	r4,r23
 80063c4:	8008ad00 	call	8008ad0 <_Bfree>
 80063c8:	88800044 	addi	r2,r17,1
 80063cc:	d8800415 	stw	r2,16(sp)
 80063d0:	803ee11e 	bne	r16,zero,8005f58 <_dtoa_r+0xb80>
 80063d4:	003ee306 	br	8005f64 <_dtoa_r+0xb8c>
 80063d8:	b005883a 	mov	r2,r22
 80063dc:	003e6006 	br	8005d60 <_dtoa_r+0x988>
 80063e0:	800b883a 	mov	r5,r16
 80063e4:	900d883a 	mov	r6,r18
 80063e8:	b809883a 	mov	r4,r23
 80063ec:	80093580 	call	8009358 <__lshift>
 80063f0:	1021883a 	mov	r16,r2
 80063f4:	003f4e06 	br	8006130 <_dtoa_r+0xd58>
 80063f8:	1529c83a 	sub	r20,r2,r20
 80063fc:	003e4906 	br	8005d24 <_dtoa_r+0x94c>
 8006400:	dcc00c15 	stw	r19,48(sp)
 8006404:	8825883a 	mov	r18,r17
 8006408:	05400084 	movi	r21,2
 800640c:	003cdf06 	br	800578c <_dtoa_r+0x3b4>
 8006410:	00800044 	movi	r2,1
 8006414:	003ead06 	br	8005ecc <_dtoa_r+0xaf4>
 8006418:	00800044 	movi	r2,1
 800641c:	d8800715 	stw	r2,28(sp)
 8006420:	003ca506 	br	80056b8 <_dtoa_r+0x2e0>
 8006424:	1000021e 	bne	r2,zero,8006430 <_dtoa_r+0x1058>
 8006428:	98c0004c 	andi	r3,r19,1
 800642c:	183eb41e 	bne	r3,zero,8005f00 <_dtoa_r+0xb28>
 8006430:	2005883a 	mov	r2,r4
 8006434:	00000206 	br	8006440 <_dtoa_r+0x1068>
 8006438:	a8bfff83 	ldbu	r2,-2(r21)
 800643c:	182b883a 	mov	r21,r3
 8006440:	10803fcc 	andi	r2,r2,255
 8006444:	1080201c 	xori	r2,r2,128
 8006448:	10bfe004 	addi	r2,r2,-128
 800644c:	10800c18 	cmpnei	r2,r2,48
 8006450:	a8ffffc4 	addi	r3,r21,-1
 8006454:	103ff826 	beq	r2,zero,8006438 <_dtoa_r+0x1060>
 8006458:	003eb606 	br	8005f34 <_dtoa_r+0xb5c>
 800645c:	d8c00117 	ldw	r3,4(sp)
 8006460:	00800c44 	movi	r2,49
 8006464:	18800005 	stb	r2,0(r3)
 8006468:	d8800417 	ldw	r2,16(sp)
 800646c:	10800044 	addi	r2,r2,1
 8006470:	d8800415 	stw	r2,16(sp)
 8006474:	003eaf06 	br	8005f34 <_dtoa_r+0xb5c>
 8006478:	d8c00a17 	ldw	r3,40(sp)
 800647c:	18011826 	beq	r3,zero,80068e0 <_dtoa_r+0x1508>
 8006480:	d8c00617 	ldw	r3,24(sp)
 8006484:	10810cc4 	addi	r2,r2,1075
 8006488:	b0ad883a 	add	r22,r22,r2
 800648c:	1885883a 	add	r2,r3,r2
 8006490:	dd000817 	ldw	r20,32(sp)
 8006494:	1825883a 	mov	r18,r3
 8006498:	d8800615 	stw	r2,24(sp)
 800649c:	003e2806 	br	8005d40 <_dtoa_r+0x968>
 80064a0:	a809883a 	mov	r4,r21
 80064a4:	800fce00 	call	800fce0 <__floatsidf>
 80064a8:	800d883a 	mov	r6,r16
 80064ac:	900f883a 	mov	r7,r18
 80064b0:	1009883a 	mov	r4,r2
 80064b4:	180b883a 	mov	r5,r3
 80064b8:	800ebac0 	call	800ebac <__muldf3>
 80064bc:	000d883a 	mov	r6,zero
 80064c0:	01d00734 	movhi	r7,16412
 80064c4:	1009883a 	mov	r4,r2
 80064c8:	180b883a 	mov	r5,r3
 80064cc:	800d73c0 	call	800d73c <__adddf3>
 80064d0:	1029883a 	mov	r20,r2
 80064d4:	00bf3034 	movhi	r2,64704
 80064d8:	1885883a 	add	r2,r3,r2
 80064dc:	d8800c15 	stw	r2,48(sp)
 80064e0:	8009883a 	mov	r4,r16
 80064e4:	900b883a 	mov	r5,r18
 80064e8:	000d883a 	mov	r6,zero
 80064ec:	01d00534 	movhi	r7,16404
 80064f0:	800f3580 	call	800f358 <__subdf3>
 80064f4:	dd400c17 	ldw	r21,48(sp)
 80064f8:	a00d883a 	mov	r6,r20
 80064fc:	1009883a 	mov	r4,r2
 8006500:	a80f883a 	mov	r7,r21
 8006504:	180b883a 	mov	r5,r3
 8006508:	1025883a 	mov	r18,r2
 800650c:	1821883a 	mov	r16,r3
 8006510:	800e9dc0 	call	800e9dc <__gedf2>
 8006514:	00812f16 	blt	zero,r2,80069d4 <_dtoa_r+0x15fc>
 8006518:	a9e0003c 	xorhi	r7,r21,32768
 800651c:	a00d883a 	mov	r6,r20
 8006520:	9009883a 	mov	r4,r18
 8006524:	800b883a 	mov	r5,r16
 8006528:	800eac40 	call	800eac4 <__ledf2>
 800652c:	103d7d0e 	bge	r2,zero,8005b24 <_dtoa_r+0x74c>
 8006530:	0029883a 	mov	r20,zero
 8006534:	0021883a 	mov	r16,zero
 8006538:	003d9806 	br	8005b9c <_dtoa_r+0x7c4>
 800653c:	d9800817 	ldw	r6,32(sp)
 8006540:	e00b883a 	mov	r5,fp
 8006544:	b809883a 	mov	r4,r23
 8006548:	80092100 	call	8009210 <__pow5mult>
 800654c:	1039883a 	mov	fp,r2
 8006550:	003e1e06 	br	8005dcc <_dtoa_r+0x9f4>
 8006554:	d8800417 	ldw	r2,16(sp)
 8006558:	1000ed26 	beq	r2,zero,8006910 <_dtoa_r+0x1538>
 800655c:	00a9c83a 	sub	r20,zero,r2
 8006560:	a08003cc 	andi	r2,r20,15
 8006564:	100690fa 	slli	r3,r2,3
 8006568:	00820074 	movhi	r2,2049
 800656c:	108ba304 	addi	r2,r2,11916
 8006570:	10c5883a 	add	r2,r2,r3
 8006574:	11800017 	ldw	r6,0(r2)
 8006578:	11c00117 	ldw	r7,4(r2)
 800657c:	a029d13a 	srai	r20,r20,4
 8006580:	9809883a 	mov	r4,r19
 8006584:	880b883a 	mov	r5,r17
 8006588:	800ebac0 	call	800ebac <__muldf3>
 800658c:	1021883a 	mov	r16,r2
 8006590:	1825883a 	mov	r18,r3
 8006594:	a0013826 	beq	r20,zero,8006a78 <_dtoa_r+0x16a0>
 8006598:	02020074 	movhi	r8,2049
 800659c:	05400084 	movi	r21,2
 80065a0:	420b9904 	addi	r8,r8,11876
 80065a4:	1009883a 	mov	r4,r2
 80065a8:	9805883a 	mov	r2,r19
 80065ac:	180b883a 	mov	r5,r3
 80065b0:	dc000c15 	stw	r16,48(sp)
 80065b4:	8827883a 	mov	r19,r17
 80065b8:	0007883a 	mov	r3,zero
 80065bc:	a823883a 	mov	r17,r21
 80065c0:	4021883a 	mov	r16,r8
 80065c4:	102b883a 	mov	r21,r2
 80065c8:	a180004c 	andi	r6,r20,1
 80065cc:	30000726 	beq	r6,zero,80065ec <_dtoa_r+0x1214>
 80065d0:	81800017 	ldw	r6,0(r16)
 80065d4:	81c00117 	ldw	r7,4(r16)
 80065d8:	8c400044 	addi	r17,r17,1
 80065dc:	800ebac0 	call	800ebac <__muldf3>
 80065e0:	180b883a 	mov	r5,r3
 80065e4:	1009883a 	mov	r4,r2
 80065e8:	00c00044 	movi	r3,1
 80065ec:	a029d07a 	srai	r20,r20,1
 80065f0:	84000204 	addi	r16,r16,8
 80065f4:	a03ff41e 	bne	r20,zero,80065c8 <_dtoa_r+0x11f0>
 80065f8:	a805883a 	mov	r2,r21
 80065fc:	18c03fcc 	andi	r3,r3,255
 8006600:	882b883a 	mov	r21,r17
 8006604:	dc000c17 	ldw	r16,48(sp)
 8006608:	9823883a 	mov	r17,r19
 800660c:	1027883a 	mov	r19,r2
 8006610:	183c7726 	beq	r3,zero,80057f0 <_dtoa_r+0x418>
 8006614:	2021883a 	mov	r16,r4
 8006618:	2825883a 	mov	r18,r5
 800661c:	003c7406 	br	80057f0 <_dtoa_r+0x418>
 8006620:	983eae1e 	bne	r19,zero,80060dc <_dtoa_r+0xd04>
 8006624:	00800434 	movhi	r2,16
 8006628:	10bfffc4 	addi	r2,r2,-1
 800662c:	8884703a 	and	r2,r17,r2
 8006630:	103f4126 	beq	r2,zero,8006338 <_dtoa_r+0xf60>
 8006634:	003ea906 	br	80060dc <_dtoa_r+0xd04>
 8006638:	9807883a 	mov	r3,r19
 800663c:	a827883a 	mov	r19,r21
 8006640:	182b883a 	mov	r21,r3
 8006644:	d8c00417 	ldw	r3,16(sp)
 8006648:	18c00044 	addi	r3,r3,1
 800664c:	d8c00415 	stw	r3,16(sp)
 8006650:	00800d0e 	bge	zero,r2,8006688 <_dtoa_r+0x12b0>
 8006654:	e00b883a 	mov	r5,fp
 8006658:	b809883a 	mov	r4,r23
 800665c:	01800044 	movi	r6,1
 8006660:	80093580 	call	8009358 <__lshift>
 8006664:	a00b883a 	mov	r5,r20
 8006668:	1009883a 	mov	r4,r2
 800666c:	1039883a 	mov	fp,r2
 8006670:	80094e00 	call	80094e0 <__mcmp>
 8006674:	0080df0e 	bge	zero,r2,80069f4 <_dtoa_r+0x161c>
 8006678:	98c00e60 	cmpeqi	r3,r19,57
 800667c:	1800ce1e 	bne	r3,zero,80069b8 <_dtoa_r+0x15e0>
 8006680:	d8800617 	ldw	r2,24(sp)
 8006684:	14c00c44 	addi	r19,r2,49
 8006688:	8023883a 	mov	r17,r16
 800668c:	b4c00005 	stb	r19,0(r22)
 8006690:	9021883a 	mov	r16,r18
 8006694:	003e2706 	br	8005f34 <_dtoa_r+0xb5c>
 8006698:	b82b883a 	mov	r21,r23
 800669c:	ddc00217 	ldw	r23,8(sp)
 80066a0:	200d883a 	mov	r6,r4
 80066a4:	280f883a 	mov	r7,r5
 80066a8:	800d73c0 	call	800d73c <__adddf3>
 80066ac:	180b883a 	mov	r5,r3
 80066b0:	800d883a 	mov	r6,r16
 80066b4:	900f883a 	mov	r7,r18
 80066b8:	1009883a 	mov	r4,r2
 80066bc:	1823883a 	mov	r17,r3
 80066c0:	1027883a 	mov	r19,r2
 80066c4:	800e9dc0 	call	800e9dc <__gedf2>
 80066c8:	d8c00417 	ldw	r3,16(sp)
 80066cc:	18c00044 	addi	r3,r3,1
 80066d0:	d8c00415 	stw	r3,16(sp)
 80066d4:	00808c16 	blt	zero,r2,8006908 <_dtoa_r+0x1530>
 80066d8:	800d883a 	mov	r6,r16
 80066dc:	900f883a 	mov	r7,r18
 80066e0:	9809883a 	mov	r4,r19
 80066e4:	880b883a 	mov	r5,r17
 80066e8:	800e95c0 	call	800e95c <__eqdf2>
 80066ec:	1000021e 	bne	r2,zero,80066f8 <_dtoa_r+0x1320>
 80066f0:	ad40004c 	andi	r21,r21,1
 80066f4:	a800841e 	bne	r21,zero,8006908 <_dtoa_r+0x1530>
 80066f8:	a02b883a 	mov	r21,r20
 80066fc:	003e1906 	br	8005f64 <_dtoa_r+0xb8c>
 8006700:	81400117 	ldw	r5,4(r16)
 8006704:	b809883a 	mov	r4,r23
 8006708:	8008a2c0 	call	8008a2c <_Balloc>
 800670c:	1023883a 	mov	r17,r2
 8006710:	1000f326 	beq	r2,zero,8006ae0 <_dtoa_r+0x1708>
 8006714:	81800417 	ldw	r6,16(r16)
 8006718:	81400304 	addi	r5,r16,12
 800671c:	11000304 	addi	r4,r2,12
 8006720:	31800084 	addi	r6,r6,2
 8006724:	300c90ba 	slli	r6,r6,2
 8006728:	80087100 	call	8008710 <memcpy>
 800672c:	01800044 	movi	r6,1
 8006730:	880b883a 	mov	r5,r17
 8006734:	b809883a 	mov	r4,r23
 8006738:	80093580 	call	8009358 <__lshift>
 800673c:	1025883a 	mov	r18,r2
 8006740:	003e7d06 	br	8006138 <_dtoa_r+0xd60>
 8006744:	e00b883a 	mov	r5,fp
 8006748:	b809883a 	mov	r4,r23
 800674c:	80092100 	call	8009210 <__pow5mult>
 8006750:	1039883a 	mov	fp,r2
 8006754:	003d9d06 	br	8005dcc <_dtoa_r+0x9f4>
 8006758:	d8800617 	ldw	r2,24(sp)
 800675c:	d8c00517 	ldw	r3,20(sp)
 8006760:	10e5c83a 	sub	r18,r2,r3
 8006764:	003d7606 	br	8005d40 <_dtoa_r+0x968>
 8006768:	d8c00417 	ldw	r3,16(sp)
 800676c:	9805883a 	mov	r2,r19
 8006770:	a827883a 	mov	r19,r21
 8006774:	18c00044 	addi	r3,r3,1
 8006778:	102b883a 	mov	r21,r2
 800677c:	d8c00415 	stw	r3,16(sp)
 8006780:	98800e58 	cmpnei	r2,r19,57
 8006784:	10008c26 	beq	r2,zero,80069b8 <_dtoa_r+0x15e0>
 8006788:	98c00044 	addi	r3,r19,1
 800678c:	8023883a 	mov	r17,r16
 8006790:	b0c00005 	stb	r3,0(r22)
 8006794:	9021883a 	mov	r16,r18
 8006798:	003de606 	br	8005f34 <_dtoa_r+0xb5c>
 800679c:	9805883a 	mov	r2,r19
 80067a0:	a827883a 	mov	r19,r21
 80067a4:	102b883a 	mov	r21,r2
 80067a8:	d8800417 	ldw	r2,16(sp)
 80067ac:	8023883a 	mov	r17,r16
 80067b0:	9021883a 	mov	r16,r18
 80067b4:	10800044 	addi	r2,r2,1
 80067b8:	d8800415 	stw	r2,16(sp)
 80067bc:	003dc606 	br	8005ed8 <_dtoa_r+0xb00>
 80067c0:	d9400c17 	ldw	r5,48(sp)
 80067c4:	a009883a 	mov	r4,r20
 80067c8:	800ebac0 	call	800ebac <__muldf3>
 80067cc:	d9800d17 	ldw	r6,52(sp)
 80067d0:	d9400117 	ldw	r5,4(sp)
 80067d4:	d9001017 	ldw	r4,64(sp)
 80067d8:	d8800c15 	stw	r2,48(sp)
 80067dc:	d8c00d15 	stw	r3,52(sp)
 80067e0:	29000005 	stb	r4,0(r5)
 80067e4:	31000058 	cmpnei	r4,r6,1
 80067e8:	29a9883a 	add	r20,r5,r6
 80067ec:	2000a026 	beq	r4,zero,8006a70 <_dtoa_r+0x1698>
 80067f0:	dc400e15 	stw	r17,56(sp)
 80067f4:	8009883a 	mov	r4,r16
 80067f8:	900b883a 	mov	r5,r18
 80067fc:	a823883a 	mov	r17,r21
 8006800:	000d883a 	mov	r6,zero
 8006804:	01d00934 	movhi	r7,16420
 8006808:	800ebac0 	call	800ebac <__muldf3>
 800680c:	180b883a 	mov	r5,r3
 8006810:	1009883a 	mov	r4,r2
 8006814:	1825883a 	mov	r18,r3
 8006818:	102b883a 	mov	r21,r2
 800681c:	800fc600 	call	800fc60 <__fixdfsi>
 8006820:	1009883a 	mov	r4,r2
 8006824:	1021883a 	mov	r16,r2
 8006828:	800fce00 	call	800fce0 <__floatsidf>
 800682c:	a809883a 	mov	r4,r21
 8006830:	900b883a 	mov	r5,r18
 8006834:	100d883a 	mov	r6,r2
 8006838:	180f883a 	mov	r7,r3
 800683c:	8c400044 	addi	r17,r17,1
 8006840:	84000c04 	addi	r16,r16,48
 8006844:	800f3580 	call	800f358 <__subdf3>
 8006848:	8c3fffc5 	stb	r16,-1(r17)
 800684c:	1009883a 	mov	r4,r2
 8006850:	180b883a 	mov	r5,r3
 8006854:	a47fea1e 	bne	r20,r17,8006800 <_dtoa_r+0x1428>
 8006858:	dc400e17 	ldw	r17,56(sp)
 800685c:	1021883a 	mov	r16,r2
 8006860:	1825883a 	mov	r18,r3
 8006864:	d9000c17 	ldw	r4,48(sp)
 8006868:	d9400d17 	ldw	r5,52(sp)
 800686c:	000d883a 	mov	r6,zero
 8006870:	01cff834 	movhi	r7,16352
 8006874:	800d73c0 	call	800d73c <__adddf3>
 8006878:	800d883a 	mov	r6,r16
 800687c:	900f883a 	mov	r7,r18
 8006880:	1009883a 	mov	r4,r2
 8006884:	180b883a 	mov	r5,r3
 8006888:	800eac40 	call	800eac4 <__ledf2>
 800688c:	10005416 	blt	r2,zero,80069e0 <_dtoa_r+0x1608>
 8006890:	d9800c17 	ldw	r6,48(sp)
 8006894:	d9c00d17 	ldw	r7,52(sp)
 8006898:	0009883a 	mov	r4,zero
 800689c:	014ff834 	movhi	r5,16352
 80068a0:	800f3580 	call	800f358 <__subdf3>
 80068a4:	800d883a 	mov	r6,r16
 80068a8:	900f883a 	mov	r7,r18
 80068ac:	1009883a 	mov	r4,r2
 80068b0:	180b883a 	mov	r5,r3
 80068b4:	800e9dc0 	call	800e9dc <__gedf2>
 80068b8:	00bc9a0e 	bge	zero,r2,8005b24 <_dtoa_r+0x74c>
 80068bc:	a0bfffc7 	ldb	r2,-1(r20)
 80068c0:	a02b883a 	mov	r21,r20
 80068c4:	a53fffc4 	addi	r20,r20,-1
 80068c8:	10800c20 	cmpeqi	r2,r2,48
 80068cc:	103ffb1e 	bne	r2,zero,80068bc <_dtoa_r+0x14e4>
 80068d0:	d8801117 	ldw	r2,68(sp)
 80068d4:	10800044 	addi	r2,r2,1
 80068d8:	d8800415 	stw	r2,16(sp)
 80068dc:	003da106 	br	8005f64 <_dtoa_r+0xb8c>
 80068e0:	d8c01217 	ldw	r3,72(sp)
 80068e4:	d9000617 	ldw	r4,24(sp)
 80068e8:	00800d84 	movi	r2,54
 80068ec:	10c5c83a 	sub	r2,r2,r3
 80068f0:	b0ad883a 	add	r22,r22,r2
 80068f4:	2085883a 	add	r2,r4,r2
 80068f8:	dd000817 	ldw	r20,32(sp)
 80068fc:	2025883a 	mov	r18,r4
 8006900:	d8800615 	stw	r2,24(sp)
 8006904:	003d0e06 	br	8005d40 <_dtoa_r+0x968>
 8006908:	d9000117 	ldw	r4,4(sp)
 800690c:	003c4b06 	br	8005a3c <_dtoa_r+0x664>
 8006910:	9821883a 	mov	r16,r19
 8006914:	8825883a 	mov	r18,r17
 8006918:	05400084 	movi	r21,2
 800691c:	003bb406 	br	80057f0 <_dtoa_r+0x418>
 8006920:	d8800517 	ldw	r2,20(sp)
 8006924:	103ede26 	beq	r2,zero,80064a0 <_dtoa_r+0x10c8>
 8006928:	d8800b17 	ldw	r2,44(sp)
 800692c:	00bc7d0e 	bge	zero,r2,8005b24 <_dtoa_r+0x74c>
 8006930:	900b883a 	mov	r5,r18
 8006934:	8009883a 	mov	r4,r16
 8006938:	000d883a 	mov	r6,zero
 800693c:	01d00934 	movhi	r7,16420
 8006940:	800ebac0 	call	800ebac <__muldf3>
 8006944:	a9000044 	addi	r4,r21,1
 8006948:	1021883a 	mov	r16,r2
 800694c:	1825883a 	mov	r18,r3
 8006950:	800fce00 	call	800fce0 <__floatsidf>
 8006954:	800d883a 	mov	r6,r16
 8006958:	900f883a 	mov	r7,r18
 800695c:	1009883a 	mov	r4,r2
 8006960:	180b883a 	mov	r5,r3
 8006964:	800ebac0 	call	800ebac <__muldf3>
 8006968:	1009883a 	mov	r4,r2
 800696c:	000d883a 	mov	r6,zero
 8006970:	01d00734 	movhi	r7,16412
 8006974:	180b883a 	mov	r5,r3
 8006978:	800d73c0 	call	800d73c <__adddf3>
 800697c:	d9000417 	ldw	r4,16(sp)
 8006980:	1029883a 	mov	r20,r2
 8006984:	00bf3034 	movhi	r2,64704
 8006988:	1887883a 	add	r3,r3,r2
 800698c:	d8800b17 	ldw	r2,44(sp)
 8006990:	213fffc4 	addi	r4,r4,-1
 8006994:	d9001115 	stw	r4,68(sp)
 8006998:	d8c00c15 	stw	r3,48(sp)
 800699c:	d8800d15 	stw	r2,52(sp)
 80069a0:	003bb106 	br	8005868 <_dtoa_r+0x490>
 80069a4:	d8800417 	ldw	r2,16(sp)
 80069a8:	00c00c44 	movi	r3,49
 80069ac:	10800044 	addi	r2,r2,1
 80069b0:	d8800415 	stw	r2,16(sp)
 80069b4:	003c2a06 	br	8005a60 <_dtoa_r+0x688>
 80069b8:	00800e44 	movi	r2,57
 80069bc:	8023883a 	mov	r17,r16
 80069c0:	d9400117 	ldw	r5,4(sp)
 80069c4:	b0800005 	stb	r2,0(r22)
 80069c8:	9021883a 	mov	r16,r18
 80069cc:	01000e44 	movi	r4,57
 80069d0:	003d5006 	br	8005f14 <_dtoa_r+0xb3c>
 80069d4:	0029883a 	mov	r20,zero
 80069d8:	0021883a 	mov	r16,zero
 80069dc:	003e7106 	br	80063a4 <_dtoa_r+0xfcc>
 80069e0:	d8801117 	ldw	r2,68(sp)
 80069e4:	d9000117 	ldw	r4,4(sp)
 80069e8:	10800044 	addi	r2,r2,1
 80069ec:	d8800415 	stw	r2,16(sp)
 80069f0:	003c1206 	br	8005a3c <_dtoa_r+0x664>
 80069f4:	103f241e 	bne	r2,zero,8006688 <_dtoa_r+0x12b0>
 80069f8:	9880004c 	andi	r2,r19,1
 80069fc:	103f1e1e 	bne	r2,zero,8006678 <_dtoa_r+0x12a0>
 8006a00:	003f2106 	br	8006688 <_dtoa_r+0x12b0>
 8006a04:	d8801117 	ldw	r2,68(sp)
 8006a08:	ddc00d17 	ldw	r23,52(sp)
 8006a0c:	10800044 	addi	r2,r2,1
 8006a10:	d8800415 	stw	r2,16(sp)
 8006a14:	003d5306 	br	8005f64 <_dtoa_r+0xb8c>
 8006a18:	d8c00417 	ldw	r3,16(sp)
 8006a1c:	a8800e60 	cmpeqi	r2,r21,57
 8006a20:	a827883a 	mov	r19,r21
 8006a24:	18c00044 	addi	r3,r3,1
 8006a28:	d8c00415 	stw	r3,16(sp)
 8006a2c:	b5400044 	addi	r21,r22,1
 8006a30:	103fe11e 	bne	r2,zero,80069b8 <_dtoa_r+0x15e0>
 8006a34:	047f1216 	blt	zero,r17,8006680 <_dtoa_r+0x12a8>
 8006a38:	003f1306 	br	8006688 <_dtoa_r+0x12b0>
 8006a3c:	d8800217 	ldw	r2,8(sp)
 8006a40:	108000c8 	cmpgei	r2,r2,3
 8006a44:	103e481e 	bne	r2,zero,8006368 <_dtoa_r+0xf90>
 8006a48:	dd400415 	stw	r21,16(sp)
 8006a4c:	003e0d06 	br	8006284 <_dtoa_r+0xeac>
 8006a50:	d8800217 	ldw	r2,8(sp)
 8006a54:	108000c8 	cmpgei	r2,r2,3
 8006a58:	103e431e 	bne	r2,zero,8006368 <_dtoa_r+0xf90>
 8006a5c:	d8800b17 	ldw	r2,44(sp)
 8006a60:	dd400415 	stw	r21,16(sp)
 8006a64:	d8800515 	stw	r2,20(sp)
 8006a68:	04bdb10e 	bge	zero,r18,8006130 <_dtoa_r+0xd58>
 8006a6c:	003e5c06 	br	80063e0 <_dtoa_r+0x1008>
 8006a70:	a829883a 	mov	r20,r21
 8006a74:	003f7b06 	br	8006864 <_dtoa_r+0x148c>
 8006a78:	05400084 	movi	r21,2
 8006a7c:	003b5c06 	br	80057f0 <_dtoa_r+0x418>
 8006a80:	01c20074 	movhi	r7,2049
 8006a84:	01020074 	movhi	r4,2049
 8006a88:	39cb6704 	addi	r7,r7,11676
 8006a8c:	000d883a 	mov	r6,zero
 8006a90:	01406a84 	movi	r5,426
 8006a94:	210b6c04 	addi	r4,r4,11696
 8006a98:	800bc0c0 	call	800bc0c <__assert_func>
 8006a9c:	000b883a 	mov	r5,zero
 8006aa0:	003b1506 	br	80056f8 <_dtoa_r+0x320>
 8006aa4:	b8001115 	stw	zero,68(r23)
 8006aa8:	000b883a 	mov	r5,zero
 8006aac:	b809883a 	mov	r4,r23
 8006ab0:	8008a2c0 	call	8008a2c <_Balloc>
 8006ab4:	d8800115 	stw	r2,4(sp)
 8006ab8:	103ff126 	beq	r2,zero,8006a80 <_dtoa_r+0x16a8>
 8006abc:	d8800117 	ldw	r2,4(sp)
 8006ac0:	d8001e15 	stw	zero,120(sp)
 8006ac4:	b8801015 	stw	r2,64(r23)
 8006ac8:	00bfffc4 	movi	r2,-1
 8006acc:	d8800515 	stw	r2,20(sp)
 8006ad0:	d8800b15 	stw	r2,44(sp)
 8006ad4:	00800044 	movi	r2,1
 8006ad8:	d8800715 	stw	r2,28(sp)
 8006adc:	003c1106 	br	8005b24 <_dtoa_r+0x74c>
 8006ae0:	01c20074 	movhi	r7,2049
 8006ae4:	01020074 	movhi	r4,2049
 8006ae8:	39cb6704 	addi	r7,r7,11676
 8006aec:	000d883a 	mov	r6,zero
 8006af0:	0140ba84 	movi	r5,746
 8006af4:	210b6c04 	addi	r4,r4,11696
 8006af8:	800bc0c0 	call	800bc0c <__assert_func>
 8006afc:	00820074 	movhi	r2,2049
 8006b00:	108b6404 	addi	r2,r2,11664
 8006b04:	d8800115 	stw	r2,4(sp)
 8006b08:	003a6506 	br	80054a0 <_dtoa_r+0xc8>
 8006b0c:	18c00120 	cmpeqi	r3,r3,4
 8006b10:	183cc91e 	bne	r3,zero,8005e38 <_dtoa_r+0xa60>
 8006b14:	00c00f04 	movi	r3,60
 8006b18:	1885c83a 	sub	r2,r3,r2
 8006b1c:	003cc106 	br	8005e24 <_dtoa_r+0xa4c>

08006b20 <__sflush_r>:
 8006b20:	2880030b 	ldhu	r2,12(r5)
 8006b24:	defffb04 	addi	sp,sp,-20
 8006b28:	dcc00315 	stw	r19,12(sp)
 8006b2c:	dc000015 	stw	r16,0(sp)
 8006b30:	dfc00415 	stw	ra,16(sp)
 8006b34:	dc800215 	stw	r18,8(sp)
 8006b38:	dc400115 	stw	r17,4(sp)
 8006b3c:	10c0020c 	andi	r3,r2,8
 8006b40:	2821883a 	mov	r16,r5
 8006b44:	2027883a 	mov	r19,r4
 8006b48:	18003f1e 	bne	r3,zero,8006c48 <__sflush_r+0x128>
 8006b4c:	28c00117 	ldw	r3,4(r5)
 8006b50:	10820014 	ori	r2,r2,2048
 8006b54:	2880030d 	sth	r2,12(r5)
 8006b58:	00c0550e 	bge	zero,r3,8006cb0 <__sflush_r+0x190>
 8006b5c:	82000a17 	ldw	r8,40(r16)
 8006b60:	40003126 	beq	r8,zero,8006c28 <__sflush_r+0x108>
 8006b64:	9c400017 	ldw	r17,0(r19)
 8006b68:	1104000c 	andi	r4,r2,4096
 8006b6c:	98000015 	stw	zero,0(r19)
 8006b70:	81400717 	ldw	r5,28(r16)
 8006b74:	1007883a 	mov	r3,r2
 8006b78:	2000521e 	bne	r4,zero,8006cc4 <__sflush_r+0x1a4>
 8006b7c:	01c00044 	movi	r7,1
 8006b80:	000d883a 	mov	r6,zero
 8006b84:	9809883a 	mov	r4,r19
 8006b88:	403ee83a 	callr	r8
 8006b8c:	10ffffd8 	cmpnei	r3,r2,-1
 8006b90:	18005826 	beq	r3,zero,8006cf4 <__sflush_r+0x1d4>
 8006b94:	80c0030b 	ldhu	r3,12(r16)
 8006b98:	82000a17 	ldw	r8,40(r16)
 8006b9c:	81400717 	ldw	r5,28(r16)
 8006ba0:	18c0010c 	andi	r3,r3,4
 8006ba4:	18000626 	beq	r3,zero,8006bc0 <__sflush_r+0xa0>
 8006ba8:	81000117 	ldw	r4,4(r16)
 8006bac:	80c00c17 	ldw	r3,48(r16)
 8006bb0:	1105c83a 	sub	r2,r2,r4
 8006bb4:	18000226 	beq	r3,zero,8006bc0 <__sflush_r+0xa0>
 8006bb8:	80c00f17 	ldw	r3,60(r16)
 8006bbc:	10c5c83a 	sub	r2,r2,r3
 8006bc0:	100d883a 	mov	r6,r2
 8006bc4:	000f883a 	mov	r7,zero
 8006bc8:	9809883a 	mov	r4,r19
 8006bcc:	403ee83a 	callr	r8
 8006bd0:	10ffffd8 	cmpnei	r3,r2,-1
 8006bd4:	18003d1e 	bne	r3,zero,8006ccc <__sflush_r+0x1ac>
 8006bd8:	99000017 	ldw	r4,0(r19)
 8006bdc:	80c0030b 	ldhu	r3,12(r16)
 8006be0:	20004e26 	beq	r4,zero,8006d1c <__sflush_r+0x1fc>
 8006be4:	21400760 	cmpeqi	r5,r4,29
 8006be8:	2800021e 	bne	r5,zero,8006bf4 <__sflush_r+0xd4>
 8006bec:	210005a0 	cmpeqi	r4,r4,22
 8006bf0:	20002c26 	beq	r4,zero,8006ca4 <__sflush_r+0x184>
 8006bf4:	80800417 	ldw	r2,16(r16)
 8006bf8:	18fdffcc 	andi	r3,r3,63487
 8006bfc:	80c0030d 	sth	r3,12(r16)
 8006c00:	80000115 	stw	zero,4(r16)
 8006c04:	80800015 	stw	r2,0(r16)
 8006c08:	81400c17 	ldw	r5,48(r16)
 8006c0c:	9c400015 	stw	r17,0(r19)
 8006c10:	28000526 	beq	r5,zero,8006c28 <__sflush_r+0x108>
 8006c14:	80801004 	addi	r2,r16,64
 8006c18:	28800226 	beq	r5,r2,8006c24 <__sflush_r+0x104>
 8006c1c:	9809883a 	mov	r4,r19
 8006c20:	80072f40 	call	80072f4 <_free_r>
 8006c24:	80000c15 	stw	zero,48(r16)
 8006c28:	0005883a 	mov	r2,zero
 8006c2c:	dfc00417 	ldw	ra,16(sp)
 8006c30:	dcc00317 	ldw	r19,12(sp)
 8006c34:	dc800217 	ldw	r18,8(sp)
 8006c38:	dc400117 	ldw	r17,4(sp)
 8006c3c:	dc000017 	ldw	r16,0(sp)
 8006c40:	dec00504 	addi	sp,sp,20
 8006c44:	f800283a 	ret
 8006c48:	2c800417 	ldw	r18,16(r5)
 8006c4c:	903ff626 	beq	r18,zero,8006c28 <__sflush_r+0x108>
 8006c50:	2c400017 	ldw	r17,0(r5)
 8006c54:	108000cc 	andi	r2,r2,3
 8006c58:	2c800015 	stw	r18,0(r5)
 8006c5c:	8ca3c83a 	sub	r17,r17,r18
 8006c60:	1000161e 	bne	r2,zero,8006cbc <__sflush_r+0x19c>
 8006c64:	28800517 	ldw	r2,20(r5)
 8006c68:	80800215 	stw	r2,8(r16)
 8006c6c:	04400316 	blt	zero,r17,8006c7c <__sflush_r+0x15c>
 8006c70:	003fed06 	br	8006c28 <__sflush_r+0x108>
 8006c74:	90a5883a 	add	r18,r18,r2
 8006c78:	047feb0e 	bge	zero,r17,8006c28 <__sflush_r+0x108>
 8006c7c:	80800917 	ldw	r2,36(r16)
 8006c80:	81400717 	ldw	r5,28(r16)
 8006c84:	880f883a 	mov	r7,r17
 8006c88:	900d883a 	mov	r6,r18
 8006c8c:	9809883a 	mov	r4,r19
 8006c90:	103ee83a 	callr	r2
 8006c94:	88a3c83a 	sub	r17,r17,r2
 8006c98:	00bff616 	blt	zero,r2,8006c74 <__sflush_r+0x154>
 8006c9c:	80c0030b 	ldhu	r3,12(r16)
 8006ca0:	00bfffc4 	movi	r2,-1
 8006ca4:	18c01014 	ori	r3,r3,64
 8006ca8:	80c0030d 	sth	r3,12(r16)
 8006cac:	003fdf06 	br	8006c2c <__sflush_r+0x10c>
 8006cb0:	28c00f17 	ldw	r3,60(r5)
 8006cb4:	00ffa916 	blt	zero,r3,8006b5c <__sflush_r+0x3c>
 8006cb8:	003fdb06 	br	8006c28 <__sflush_r+0x108>
 8006cbc:	0005883a 	mov	r2,zero
 8006cc0:	003fe906 	br	8006c68 <__sflush_r+0x148>
 8006cc4:	80801417 	ldw	r2,80(r16)
 8006cc8:	003fb506 	br	8006ba0 <__sflush_r+0x80>
 8006ccc:	80c0030b 	ldhu	r3,12(r16)
 8006cd0:	81000417 	ldw	r4,16(r16)
 8006cd4:	80000115 	stw	zero,4(r16)
 8006cd8:	197dffcc 	andi	r5,r3,63487
 8006cdc:	8140030d 	sth	r5,12(r16)
 8006ce0:	81000015 	stw	r4,0(r16)
 8006ce4:	18c4000c 	andi	r3,r3,4096
 8006ce8:	183fc726 	beq	r3,zero,8006c08 <__sflush_r+0xe8>
 8006cec:	80801415 	stw	r2,80(r16)
 8006cf0:	003fc506 	br	8006c08 <__sflush_r+0xe8>
 8006cf4:	98c00017 	ldw	r3,0(r19)
 8006cf8:	183fa626 	beq	r3,zero,8006b94 <__sflush_r+0x74>
 8006cfc:	19000760 	cmpeqi	r4,r3,29
 8006d00:	20000e1e 	bne	r4,zero,8006d3c <__sflush_r+0x21c>
 8006d04:	18c00598 	cmpnei	r3,r3,22
 8006d08:	18000c26 	beq	r3,zero,8006d3c <__sflush_r+0x21c>
 8006d0c:	80c0030b 	ldhu	r3,12(r16)
 8006d10:	18c01014 	ori	r3,r3,64
 8006d14:	80c0030d 	sth	r3,12(r16)
 8006d18:	003fc406 	br	8006c2c <__sflush_r+0x10c>
 8006d1c:	81000417 	ldw	r4,16(r16)
 8006d20:	197dffcc 	andi	r5,r3,63487
 8006d24:	8140030d 	sth	r5,12(r16)
 8006d28:	80000115 	stw	zero,4(r16)
 8006d2c:	81000015 	stw	r4,0(r16)
 8006d30:	18c4000c 	andi	r3,r3,4096
 8006d34:	183fb426 	beq	r3,zero,8006c08 <__sflush_r+0xe8>
 8006d38:	003fec06 	br	8006cec <__sflush_r+0x1cc>
 8006d3c:	9c400015 	stw	r17,0(r19)
 8006d40:	0005883a 	mov	r2,zero
 8006d44:	003fb906 	br	8006c2c <__sflush_r+0x10c>

08006d48 <_fflush_r>:
 8006d48:	defffd04 	addi	sp,sp,-12
 8006d4c:	dc000115 	stw	r16,4(sp)
 8006d50:	dfc00215 	stw	ra,8(sp)
 8006d54:	2021883a 	mov	r16,r4
 8006d58:	20000226 	beq	r4,zero,8006d64 <_fflush_r+0x1c>
 8006d5c:	20800e17 	ldw	r2,56(r4)
 8006d60:	10000726 	beq	r2,zero,8006d80 <_fflush_r+0x38>
 8006d64:	2880030f 	ldh	r2,12(r5)
 8006d68:	10000a1e 	bne	r2,zero,8006d94 <_fflush_r+0x4c>
 8006d6c:	0005883a 	mov	r2,zero
 8006d70:	dfc00217 	ldw	ra,8(sp)
 8006d74:	dc000117 	ldw	r16,4(sp)
 8006d78:	dec00304 	addi	sp,sp,12
 8006d7c:	f800283a 	ret
 8006d80:	d9400015 	stw	r5,0(sp)
 8006d84:	80071900 	call	8007190 <__sinit>
 8006d88:	d9400017 	ldw	r5,0(sp)
 8006d8c:	2880030f 	ldh	r2,12(r5)
 8006d90:	103ff626 	beq	r2,zero,8006d6c <_fflush_r+0x24>
 8006d94:	8009883a 	mov	r4,r16
 8006d98:	dfc00217 	ldw	ra,8(sp)
 8006d9c:	dc000117 	ldw	r16,4(sp)
 8006da0:	dec00304 	addi	sp,sp,12
 8006da4:	8006b201 	jmpi	8006b20 <__sflush_r>

08006da8 <fflush>:
 8006da8:	20001726 	beq	r4,zero,8006e08 <fflush+0x60>
 8006dac:	00820074 	movhi	r2,2049
 8006db0:	200b883a 	mov	r5,r4
 8006db4:	1113d817 	ldw	r4,20320(r2)
 8006db8:	20000226 	beq	r4,zero,8006dc4 <fflush+0x1c>
 8006dbc:	20800e17 	ldw	r2,56(r4)
 8006dc0:	10000526 	beq	r2,zero,8006dd8 <fflush+0x30>
 8006dc4:	2880030f 	ldh	r2,12(r5)
 8006dc8:	1000021e 	bne	r2,zero,8006dd4 <fflush+0x2c>
 8006dcc:	0005883a 	mov	r2,zero
 8006dd0:	f800283a 	ret
 8006dd4:	8006b201 	jmpi	8006b20 <__sflush_r>
 8006dd8:	defffd04 	addi	sp,sp,-12
 8006ddc:	d9400115 	stw	r5,4(sp)
 8006de0:	d9000015 	stw	r4,0(sp)
 8006de4:	dfc00215 	stw	ra,8(sp)
 8006de8:	80071900 	call	8007190 <__sinit>
 8006dec:	d9400117 	ldw	r5,4(sp)
 8006df0:	d9000017 	ldw	r4,0(sp)
 8006df4:	2880030f 	ldh	r2,12(r5)
 8006df8:	10000826 	beq	r2,zero,8006e1c <fflush+0x74>
 8006dfc:	dfc00217 	ldw	ra,8(sp)
 8006e00:	dec00304 	addi	sp,sp,12
 8006e04:	8006b201 	jmpi	8006b20 <__sflush_r>
 8006e08:	00820074 	movhi	r2,2049
 8006e0c:	1113d717 	ldw	r4,20316(r2)
 8006e10:	01420034 	movhi	r5,2048
 8006e14:	295b5204 	addi	r5,r5,27976
 8006e18:	8007b501 	jmpi	8007b50 <_fwalk_reent>
 8006e1c:	0005883a 	mov	r2,zero
 8006e20:	dfc00217 	ldw	ra,8(sp)
 8006e24:	dec00304 	addi	sp,sp,12
 8006e28:	f800283a 	ret

08006e2c <__fp_lock>:
 8006e2c:	0005883a 	mov	r2,zero
 8006e30:	f800283a 	ret

08006e34 <_cleanup_r>:
 8006e34:	01420074 	movhi	r5,2049
 8006e38:	296f8204 	addi	r5,r5,-16888
 8006e3c:	8007b501 	jmpi	8007b50 <_fwalk_reent>

08006e40 <__fp_unlock>:
 8006e40:	0005883a 	mov	r2,zero
 8006e44:	f800283a 	ret

08006e48 <__sinit.part.0>:
 8006e48:	00c20034 	movhi	r3,2048
 8006e4c:	20800117 	ldw	r2,4(r4)
 8006e50:	18db8d04 	addi	r3,r3,28212
 8006e54:	20c00f15 	stw	r3,60(r4)
 8006e58:	2140bb04 	addi	r5,r4,748
 8006e5c:	00c000c4 	movi	r3,3
 8006e60:	20c0b915 	stw	r3,740(r4)
 8006e64:	2140ba15 	stw	r5,744(r4)
 8006e68:	2000b815 	stw	zero,736(r4)
 8006e6c:	10001705 	stb	zero,92(r2)
 8006e70:	10001745 	stb	zero,93(r2)
 8006e74:	10001785 	stb	zero,94(r2)
 8006e78:	100017c5 	stb	zero,95(r2)
 8006e7c:	10001805 	stb	zero,96(r2)
 8006e80:	10001845 	stb	zero,97(r2)
 8006e84:	10001885 	stb	zero,98(r2)
 8006e88:	100018c5 	stb	zero,99(r2)
 8006e8c:	00c00104 	movi	r3,4
 8006e90:	10c00315 	stw	r3,12(r2)
 8006e94:	02020074 	movhi	r8,2049
 8006e98:	20c00217 	ldw	r3,8(r4)
 8006e9c:	01c20074 	movhi	r7,2049
 8006ea0:	01820074 	movhi	r6,2049
 8006ea4:	01420074 	movhi	r5,2049
 8006ea8:	4228e104 	addi	r8,r8,-23676
 8006eac:	39e8f804 	addi	r7,r7,-23584
 8006eb0:	31a91804 	addi	r6,r6,-23456
 8006eb4:	29692f04 	addi	r5,r5,-23364
 8006eb8:	02400074 	movhi	r9,1
 8006ebc:	10001915 	stw	zero,100(r2)
 8006ec0:	10000015 	stw	zero,0(r2)
 8006ec4:	10000115 	stw	zero,4(r2)
 8006ec8:	10000215 	stw	zero,8(r2)
 8006ecc:	10000415 	stw	zero,16(r2)
 8006ed0:	10000515 	stw	zero,20(r2)
 8006ed4:	10000615 	stw	zero,24(r2)
 8006ed8:	10800715 	stw	r2,28(r2)
 8006edc:	12000815 	stw	r8,32(r2)
 8006ee0:	11c00915 	stw	r7,36(r2)
 8006ee4:	11800a15 	stw	r6,40(r2)
 8006ee8:	11400b15 	stw	r5,44(r2)
 8006eec:	4a400284 	addi	r9,r9,10
 8006ef0:	1a400315 	stw	r9,12(r3)
 8006ef4:	18001915 	stw	zero,100(r3)
 8006ef8:	18000015 	stw	zero,0(r3)
 8006efc:	18000115 	stw	zero,4(r3)
 8006f00:	18000215 	stw	zero,8(r3)
 8006f04:	18000415 	stw	zero,16(r3)
 8006f08:	18001705 	stb	zero,92(r3)
 8006f0c:	18001745 	stb	zero,93(r3)
 8006f10:	18001785 	stb	zero,94(r3)
 8006f14:	180017c5 	stb	zero,95(r3)
 8006f18:	18001805 	stb	zero,96(r3)
 8006f1c:	18001845 	stb	zero,97(r3)
 8006f20:	18001885 	stb	zero,98(r3)
 8006f24:	180018c5 	stb	zero,99(r3)
 8006f28:	20800317 	ldw	r2,12(r4)
 8006f2c:	024000b4 	movhi	r9,2
 8006f30:	18000515 	stw	zero,20(r3)
 8006f34:	18000615 	stw	zero,24(r3)
 8006f38:	18c00715 	stw	r3,28(r3)
 8006f3c:	1a000815 	stw	r8,32(r3)
 8006f40:	19c00915 	stw	r7,36(r3)
 8006f44:	19800a15 	stw	r6,40(r3)
 8006f48:	19400b15 	stw	r5,44(r3)
 8006f4c:	4a400484 	addi	r9,r9,18
 8006f50:	10001915 	stw	zero,100(r2)
 8006f54:	10000015 	stw	zero,0(r2)
 8006f58:	10000115 	stw	zero,4(r2)
 8006f5c:	10000215 	stw	zero,8(r2)
 8006f60:	12400315 	stw	r9,12(r2)
 8006f64:	10000415 	stw	zero,16(r2)
 8006f68:	10000515 	stw	zero,20(r2)
 8006f6c:	10000615 	stw	zero,24(r2)
 8006f70:	10001705 	stb	zero,92(r2)
 8006f74:	10001745 	stb	zero,93(r2)
 8006f78:	10001785 	stb	zero,94(r2)
 8006f7c:	100017c5 	stb	zero,95(r2)
 8006f80:	10001805 	stb	zero,96(r2)
 8006f84:	10001845 	stb	zero,97(r2)
 8006f88:	10001885 	stb	zero,98(r2)
 8006f8c:	100018c5 	stb	zero,99(r2)
 8006f90:	10800715 	stw	r2,28(r2)
 8006f94:	12000815 	stw	r8,32(r2)
 8006f98:	11c00915 	stw	r7,36(r2)
 8006f9c:	11800a15 	stw	r6,40(r2)
 8006fa0:	11400b15 	stw	r5,44(r2)
 8006fa4:	00800044 	movi	r2,1
 8006fa8:	20800e15 	stw	r2,56(r4)
 8006fac:	f800283a 	ret

08006fb0 <__sfmoreglue>:
 8006fb0:	defffc04 	addi	sp,sp,-16
 8006fb4:	dc800215 	stw	r18,8(sp)
 8006fb8:	2825883a 	mov	r18,r5
 8006fbc:	dc000015 	stw	r16,0(sp)
 8006fc0:	01401a04 	movi	r5,104
 8006fc4:	2021883a 	mov	r16,r4
 8006fc8:	913fffc4 	addi	r4,r18,-1
 8006fcc:	dfc00315 	stw	ra,12(sp)
 8006fd0:	dc400115 	stw	r17,4(sp)
 8006fd4:	8002c500 	call	8002c50 <__mulsi3>
 8006fd8:	8009883a 	mov	r4,r16
 8006fdc:	11401d04 	addi	r5,r2,116
 8006fe0:	1023883a 	mov	r17,r2
 8006fe4:	8007e600 	call	8007e60 <_malloc_r>
 8006fe8:	1021883a 	mov	r16,r2
 8006fec:	10000726 	beq	r2,zero,800700c <__sfmoreglue+0x5c>
 8006ff0:	11000304 	addi	r4,r2,12
 8006ff4:	10000015 	stw	zero,0(r2)
 8006ff8:	14800115 	stw	r18,4(r2)
 8006ffc:	11000215 	stw	r4,8(r2)
 8007000:	89801a04 	addi	r6,r17,104
 8007004:	000b883a 	mov	r5,zero
 8007008:	800893c0 	call	800893c <memset>
 800700c:	8005883a 	mov	r2,r16
 8007010:	dfc00317 	ldw	ra,12(sp)
 8007014:	dc800217 	ldw	r18,8(sp)
 8007018:	dc400117 	ldw	r17,4(sp)
 800701c:	dc000017 	ldw	r16,0(sp)
 8007020:	dec00404 	addi	sp,sp,16
 8007024:	f800283a 	ret

08007028 <__sfp>:
 8007028:	defffb04 	addi	sp,sp,-20
 800702c:	00820074 	movhi	r2,2049
 8007030:	dc000015 	stw	r16,0(sp)
 8007034:	1413d717 	ldw	r16,20316(r2)
 8007038:	dc400115 	stw	r17,4(sp)
 800703c:	dfc00415 	stw	ra,16(sp)
 8007040:	80800e17 	ldw	r2,56(r16)
 8007044:	dcc00315 	stw	r19,12(sp)
 8007048:	dc800215 	stw	r18,8(sp)
 800704c:	2023883a 	mov	r17,r4
 8007050:	10003126 	beq	r2,zero,8007118 <__sfp+0xf0>
 8007054:	8100ba17 	ldw	r4,744(r16)
 8007058:	8140b917 	ldw	r5,740(r16)
 800705c:	04c00104 	movi	r19,4
 8007060:	8400b804 	addi	r16,r16,736
 8007064:	297fffc4 	addi	r5,r5,-1
 8007068:	2800050e 	bge	r5,zero,8007080 <__sfp+0x58>
 800706c:	00002406 	br	8007100 <__sfp+0xd8>
 8007070:	297fffc4 	addi	r5,r5,-1
 8007074:	28bfffd8 	cmpnei	r2,r5,-1
 8007078:	21001a04 	addi	r4,r4,104
 800707c:	10002026 	beq	r2,zero,8007100 <__sfp+0xd8>
 8007080:	2080030f 	ldh	r2,12(r4)
 8007084:	103ffa1e 	bne	r2,zero,8007070 <__sfp+0x48>
 8007088:	00bffff4 	movhi	r2,65535
 800708c:	10800044 	addi	r2,r2,1
 8007090:	20001915 	stw	zero,100(r4)
 8007094:	20000015 	stw	zero,0(r4)
 8007098:	20000115 	stw	zero,4(r4)
 800709c:	20000215 	stw	zero,8(r4)
 80070a0:	20800315 	stw	r2,12(r4)
 80070a4:	20000415 	stw	zero,16(r4)
 80070a8:	20000515 	stw	zero,20(r4)
 80070ac:	20000615 	stw	zero,24(r4)
 80070b0:	20001705 	stb	zero,92(r4)
 80070b4:	20001745 	stb	zero,93(r4)
 80070b8:	20001785 	stb	zero,94(r4)
 80070bc:	200017c5 	stb	zero,95(r4)
 80070c0:	20001805 	stb	zero,96(r4)
 80070c4:	20001845 	stb	zero,97(r4)
 80070c8:	20001885 	stb	zero,98(r4)
 80070cc:	200018c5 	stb	zero,99(r4)
 80070d0:	20000c15 	stw	zero,48(r4)
 80070d4:	20000d15 	stw	zero,52(r4)
 80070d8:	20001115 	stw	zero,68(r4)
 80070dc:	20001215 	stw	zero,72(r4)
 80070e0:	2005883a 	mov	r2,r4
 80070e4:	dfc00417 	ldw	ra,16(sp)
 80070e8:	dcc00317 	ldw	r19,12(sp)
 80070ec:	dc800217 	ldw	r18,8(sp)
 80070f0:	dc400117 	ldw	r17,4(sp)
 80070f4:	dc000017 	ldw	r16,0(sp)
 80070f8:	dec00504 	addi	sp,sp,20
 80070fc:	f800283a 	ret
 8007100:	80800017 	ldw	r2,0(r16)
 8007104:	10000726 	beq	r2,zero,8007124 <__sfp+0xfc>
 8007108:	11000217 	ldw	r4,8(r2)
 800710c:	11400117 	ldw	r5,4(r2)
 8007110:	1021883a 	mov	r16,r2
 8007114:	003fd306 	br	8007064 <__sfp+0x3c>
 8007118:	8009883a 	mov	r4,r16
 800711c:	8006e480 	call	8006e48 <__sinit.part.0>
 8007120:	003fcc06 	br	8007054 <__sfp+0x2c>
 8007124:	01406b04 	movi	r5,428
 8007128:	8809883a 	mov	r4,r17
 800712c:	8007e600 	call	8007e60 <_malloc_r>
 8007130:	1025883a 	mov	r18,r2
 8007134:	10000c26 	beq	r2,zero,8007168 <__sfp+0x140>
 8007138:	11000304 	addi	r4,r2,12
 800713c:	11000215 	stw	r4,8(r2)
 8007140:	000b883a 	mov	r5,zero
 8007144:	10000015 	stw	zero,0(r2)
 8007148:	14c00115 	stw	r19,4(r2)
 800714c:	01806804 	movi	r6,416
 8007150:	800893c0 	call	800893c <memset>
 8007154:	1009883a 	mov	r4,r2
 8007158:	84800015 	stw	r18,0(r16)
 800715c:	014000c4 	movi	r5,3
 8007160:	9021883a 	mov	r16,r18
 8007164:	003fc606 	br	8007080 <__sfp+0x58>
 8007168:	80000015 	stw	zero,0(r16)
 800716c:	00800304 	movi	r2,12
 8007170:	88800015 	stw	r2,0(r17)
 8007174:	0009883a 	mov	r4,zero
 8007178:	003fd906 	br	80070e0 <__sfp+0xb8>

0800717c <_cleanup>:
 800717c:	00820074 	movhi	r2,2049
 8007180:	1113d717 	ldw	r4,20316(r2)
 8007184:	01420074 	movhi	r5,2049
 8007188:	296f8204 	addi	r5,r5,-16888
 800718c:	8007b501 	jmpi	8007b50 <_fwalk_reent>

08007190 <__sinit>:
 8007190:	20800e17 	ldw	r2,56(r4)
 8007194:	10000126 	beq	r2,zero,800719c <__sinit+0xc>
 8007198:	f800283a 	ret
 800719c:	8006e481 	jmpi	8006e48 <__sinit.part.0>

080071a0 <__sfp_lock_acquire>:
 80071a0:	f800283a 	ret

080071a4 <__sfp_lock_release>:
 80071a4:	f800283a 	ret

080071a8 <__sinit_lock_acquire>:
 80071a8:	f800283a 	ret

080071ac <__sinit_lock_release>:
 80071ac:	f800283a 	ret

080071b0 <__fp_lock_all>:
 80071b0:	00820074 	movhi	r2,2049
 80071b4:	1113d817 	ldw	r4,20320(r2)
 80071b8:	01420034 	movhi	r5,2048
 80071bc:	295b8b04 	addi	r5,r5,28204
 80071c0:	8007ab81 	jmpi	8007ab8 <_fwalk>

080071c4 <__fp_unlock_all>:
 80071c4:	00820074 	movhi	r2,2049
 80071c8:	1113d817 	ldw	r4,20320(r2)
 80071cc:	01420034 	movhi	r5,2048
 80071d0:	295b9004 	addi	r5,r5,28224
 80071d4:	8007ab81 	jmpi	8007ab8 <_fwalk>

080071d8 <_malloc_trim_r>:
 80071d8:	defffb04 	addi	sp,sp,-20
 80071dc:	dcc00315 	stw	r19,12(sp)
 80071e0:	04c20074 	movhi	r19,2049
 80071e4:	dc800215 	stw	r18,8(sp)
 80071e8:	dc400115 	stw	r17,4(sp)
 80071ec:	dc000015 	stw	r16,0(sp)
 80071f0:	dfc00415 	stw	ra,16(sp)
 80071f4:	2821883a 	mov	r16,r5
 80071f8:	9ccdf404 	addi	r19,r19,14288
 80071fc:	2025883a 	mov	r18,r4
 8007200:	80105e80 	call	80105e8 <__malloc_lock>
 8007204:	98800217 	ldw	r2,8(r19)
 8007208:	14400117 	ldw	r17,4(r2)
 800720c:	00bfff04 	movi	r2,-4
 8007210:	88a2703a 	and	r17,r17,r2
 8007214:	8c21c83a 	sub	r16,r17,r16
 8007218:	8403fbc4 	addi	r16,r16,4079
 800721c:	8020d33a 	srli	r16,r16,12
 8007220:	843fffc4 	addi	r16,r16,-1
 8007224:	8020933a 	slli	r16,r16,12
 8007228:	80840008 	cmpgei	r2,r16,4096
 800722c:	10000626 	beq	r2,zero,8007248 <_malloc_trim_r+0x70>
 8007230:	000b883a 	mov	r5,zero
 8007234:	9009883a 	mov	r4,r18
 8007238:	800a32c0 	call	800a32c <_sbrk_r>
 800723c:	98c00217 	ldw	r3,8(r19)
 8007240:	1c47883a 	add	r3,r3,r17
 8007244:	10c00a26 	beq	r2,r3,8007270 <_malloc_trim_r+0x98>
 8007248:	9009883a 	mov	r4,r18
 800724c:	801060c0 	call	801060c <__malloc_unlock>
 8007250:	0005883a 	mov	r2,zero
 8007254:	dfc00417 	ldw	ra,16(sp)
 8007258:	dcc00317 	ldw	r19,12(sp)
 800725c:	dc800217 	ldw	r18,8(sp)
 8007260:	dc400117 	ldw	r17,4(sp)
 8007264:	dc000017 	ldw	r16,0(sp)
 8007268:	dec00504 	addi	sp,sp,20
 800726c:	f800283a 	ret
 8007270:	040bc83a 	sub	r5,zero,r16
 8007274:	9009883a 	mov	r4,r18
 8007278:	800a32c0 	call	800a32c <_sbrk_r>
 800727c:	10bfffd8 	cmpnei	r2,r2,-1
 8007280:	10000d26 	beq	r2,zero,80072b8 <_malloc_trim_r+0xe0>
 8007284:	00820074 	movhi	r2,2049
 8007288:	109b5917 	ldw	r2,28004(r2)
 800728c:	98c00217 	ldw	r3,8(r19)
 8007290:	8c23c83a 	sub	r17,r17,r16
 8007294:	8c400054 	ori	r17,r17,1
 8007298:	1421c83a 	sub	r16,r2,r16
 800729c:	1c400115 	stw	r17,4(r3)
 80072a0:	00820074 	movhi	r2,2049
 80072a4:	9009883a 	mov	r4,r18
 80072a8:	141b5915 	stw	r16,28004(r2)
 80072ac:	801060c0 	call	801060c <__malloc_unlock>
 80072b0:	00800044 	movi	r2,1
 80072b4:	003fe706 	br	8007254 <_malloc_trim_r+0x7c>
 80072b8:	000b883a 	mov	r5,zero
 80072bc:	9009883a 	mov	r4,r18
 80072c0:	800a32c0 	call	800a32c <_sbrk_r>
 80072c4:	99000217 	ldw	r4,8(r19)
 80072c8:	1107c83a 	sub	r3,r2,r4
 80072cc:	19400410 	cmplti	r5,r3,16
 80072d0:	283fdd1e 	bne	r5,zero,8007248 <_malloc_trim_r+0x70>
 80072d4:	01420074 	movhi	r5,2049
 80072d8:	2953d917 	ldw	r5,20324(r5)
 80072dc:	18c00054 	ori	r3,r3,1
 80072e0:	20c00115 	stw	r3,4(r4)
 80072e4:	1145c83a 	sub	r2,r2,r5
 80072e8:	01420074 	movhi	r5,2049
 80072ec:	289b5915 	stw	r2,28004(r5)
 80072f0:	003fd506 	br	8007248 <_malloc_trim_r+0x70>

080072f4 <_free_r>:
 80072f4:	28004f26 	beq	r5,zero,8007434 <_free_r+0x140>
 80072f8:	defffd04 	addi	sp,sp,-12
 80072fc:	dc400115 	stw	r17,4(sp)
 8007300:	dc000015 	stw	r16,0(sp)
 8007304:	2023883a 	mov	r17,r4
 8007308:	2821883a 	mov	r16,r5
 800730c:	dfc00215 	stw	ra,8(sp)
 8007310:	80105e80 	call	80105e8 <__malloc_lock>
 8007314:	81ffff17 	ldw	r7,-4(r16)
 8007318:	00bfff84 	movi	r2,-2
 800731c:	80fffe04 	addi	r3,r16,-8
 8007320:	3884703a 	and	r2,r7,r2
 8007324:	01020074 	movhi	r4,2049
 8007328:	188d883a 	add	r6,r3,r2
 800732c:	210df404 	addi	r4,r4,14288
 8007330:	31400117 	ldw	r5,4(r6)
 8007334:	22000217 	ldw	r8,8(r4)
 8007338:	027fff04 	movi	r9,-4
 800733c:	2a4a703a 	and	r5,r5,r9
 8007340:	41806426 	beq	r8,r6,80074d4 <_free_r+0x1e0>
 8007344:	31400115 	stw	r5,4(r6)
 8007348:	39c0004c 	andi	r7,r7,1
 800734c:	3151883a 	add	r8,r6,r5
 8007350:	3800281e 	bne	r7,zero,80073f4 <_free_r+0x100>
 8007354:	82bffe17 	ldw	r10,-8(r16)
 8007358:	42000117 	ldw	r8,4(r8)
 800735c:	01c20074 	movhi	r7,2049
 8007360:	1a87c83a 	sub	r3,r3,r10
 8007364:	1a400217 	ldw	r9,8(r3)
 8007368:	39cdf604 	addi	r7,r7,14296
 800736c:	1285883a 	add	r2,r2,r10
 8007370:	4200004c 	andi	r8,r8,1
 8007374:	49c04c26 	beq	r9,r7,80074a8 <_free_r+0x1b4>
 8007378:	1a800317 	ldw	r10,12(r3)
 800737c:	4a800315 	stw	r10,12(r9)
 8007380:	52400215 	stw	r9,8(r10)
 8007384:	40007126 	beq	r8,zero,800754c <_free_r+0x258>
 8007388:	11400054 	ori	r5,r2,1
 800738c:	19400115 	stw	r5,4(r3)
 8007390:	30800015 	stw	r2,0(r6)
 8007394:	11408028 	cmpgeui	r5,r2,512
 8007398:	28002c1e 	bne	r5,zero,800744c <_free_r+0x158>
 800739c:	100ad0fa 	srli	r5,r2,3
 80073a0:	100cd17a 	srli	r6,r2,5
 80073a4:	00800044 	movi	r2,1
 80073a8:	29400044 	addi	r5,r5,1
 80073ac:	280a90fa 	slli	r5,r5,3
 80073b0:	21c00117 	ldw	r7,4(r4)
 80073b4:	1184983a 	sll	r2,r2,r6
 80073b8:	214b883a 	add	r5,r4,r5
 80073bc:	29800017 	ldw	r6,0(r5)
 80073c0:	11c4b03a 	or	r2,r2,r7
 80073c4:	29fffe04 	addi	r7,r5,-8
 80073c8:	19c00315 	stw	r7,12(r3)
 80073cc:	19800215 	stw	r6,8(r3)
 80073d0:	20800115 	stw	r2,4(r4)
 80073d4:	28c00015 	stw	r3,0(r5)
 80073d8:	30c00315 	stw	r3,12(r6)
 80073dc:	8809883a 	mov	r4,r17
 80073e0:	dfc00217 	ldw	ra,8(sp)
 80073e4:	dc400117 	ldw	r17,4(sp)
 80073e8:	dc000017 	ldw	r16,0(sp)
 80073ec:	dec00304 	addi	sp,sp,12
 80073f0:	801060c1 	jmpi	801060c <__malloc_unlock>
 80073f4:	41c00117 	ldw	r7,4(r8)
 80073f8:	39c0004c 	andi	r7,r7,1
 80073fc:	38000e1e 	bne	r7,zero,8007438 <_free_r+0x144>
 8007400:	01c20074 	movhi	r7,2049
 8007404:	1145883a 	add	r2,r2,r5
 8007408:	39cdf604 	addi	r7,r7,14296
 800740c:	31400217 	ldw	r5,8(r6)
 8007410:	12400054 	ori	r9,r2,1
 8007414:	1891883a 	add	r8,r3,r2
 8007418:	29c05226 	beq	r5,r7,8007564 <_free_r+0x270>
 800741c:	31800317 	ldw	r6,12(r6)
 8007420:	29800315 	stw	r6,12(r5)
 8007424:	31400215 	stw	r5,8(r6)
 8007428:	1a400115 	stw	r9,4(r3)
 800742c:	40800015 	stw	r2,0(r8)
 8007430:	003fd806 	br	8007394 <_free_r+0xa0>
 8007434:	f800283a 	ret
 8007438:	11400054 	ori	r5,r2,1
 800743c:	817fff15 	stw	r5,-4(r16)
 8007440:	30800015 	stw	r2,0(r6)
 8007444:	11408028 	cmpgeui	r5,r2,512
 8007448:	283fd426 	beq	r5,zero,800739c <_free_r+0xa8>
 800744c:	100ad27a 	srli	r5,r2,9
 8007450:	29800168 	cmpgeui	r6,r5,5
 8007454:	3000341e 	bne	r6,zero,8007528 <_free_r+0x234>
 8007458:	100ad1ba 	srli	r5,r2,6
 800745c:	29800e44 	addi	r6,r5,57
 8007460:	300c90fa 	slli	r6,r6,3
 8007464:	29c00e04 	addi	r7,r5,56
 8007468:	218d883a 	add	r6,r4,r6
 800746c:	31400017 	ldw	r5,0(r6)
 8007470:	31bffe04 	addi	r6,r6,-8
 8007474:	31404226 	beq	r6,r5,8007580 <_free_r+0x28c>
 8007478:	01ffff04 	movi	r7,-4
 800747c:	29000117 	ldw	r4,4(r5)
 8007480:	21c8703a 	and	r4,r4,r7
 8007484:	1100022e 	bgeu	r2,r4,8007490 <_free_r+0x19c>
 8007488:	29400217 	ldw	r5,8(r5)
 800748c:	317ffb1e 	bne	r6,r5,800747c <_free_r+0x188>
 8007490:	29800317 	ldw	r6,12(r5)
 8007494:	19800315 	stw	r6,12(r3)
 8007498:	19400215 	stw	r5,8(r3)
 800749c:	30c00215 	stw	r3,8(r6)
 80074a0:	28c00315 	stw	r3,12(r5)
 80074a4:	003fcd06 	br	80073dc <_free_r+0xe8>
 80074a8:	40004d1e 	bne	r8,zero,80075e0 <_free_r+0x2ec>
 80074ac:	31000317 	ldw	r4,12(r6)
 80074b0:	31800217 	ldw	r6,8(r6)
 80074b4:	2885883a 	add	r2,r5,r2
 80074b8:	11400054 	ori	r5,r2,1
 80074bc:	31000315 	stw	r4,12(r6)
 80074c0:	21800215 	stw	r6,8(r4)
 80074c4:	19400115 	stw	r5,4(r3)
 80074c8:	1887883a 	add	r3,r3,r2
 80074cc:	18800015 	stw	r2,0(r3)
 80074d0:	003fc206 	br	80073dc <_free_r+0xe8>
 80074d4:	39c0004c 	andi	r7,r7,1
 80074d8:	1145883a 	add	r2,r2,r5
 80074dc:	3800071e 	bne	r7,zero,80074fc <_free_r+0x208>
 80074e0:	81fffe17 	ldw	r7,-8(r16)
 80074e4:	19c7c83a 	sub	r3,r3,r7
 80074e8:	19400317 	ldw	r5,12(r3)
 80074ec:	19800217 	ldw	r6,8(r3)
 80074f0:	11c5883a 	add	r2,r2,r7
 80074f4:	31400315 	stw	r5,12(r6)
 80074f8:	29800215 	stw	r6,8(r5)
 80074fc:	01420074 	movhi	r5,2049
 8007500:	11800054 	ori	r6,r2,1
 8007504:	2953da17 	ldw	r5,20328(r5)
 8007508:	19800115 	stw	r6,4(r3)
 800750c:	20c00215 	stw	r3,8(r4)
 8007510:	117fb236 	bltu	r2,r5,80073dc <_free_r+0xe8>
 8007514:	00820074 	movhi	r2,2049
 8007518:	115af317 	ldw	r5,27596(r2)
 800751c:	8809883a 	mov	r4,r17
 8007520:	80071d80 	call	80071d8 <_malloc_trim_r>
 8007524:	003fad06 	br	80073dc <_free_r+0xe8>
 8007528:	29800568 	cmpgeui	r6,r5,21
 800752c:	30000926 	beq	r6,zero,8007554 <_free_r+0x260>
 8007530:	29801568 	cmpgeui	r6,r5,85
 8007534:	3000191e 	bne	r6,zero,800759c <_free_r+0x2a8>
 8007538:	100ad33a 	srli	r5,r2,12
 800753c:	29801bc4 	addi	r6,r5,111
 8007540:	300c90fa 	slli	r6,r6,3
 8007544:	29c01b84 	addi	r7,r5,110
 8007548:	003fc706 	br	8007468 <_free_r+0x174>
 800754c:	1145883a 	add	r2,r2,r5
 8007550:	003fae06 	br	800740c <_free_r+0x118>
 8007554:	29801704 	addi	r6,r5,92
 8007558:	300c90fa 	slli	r6,r6,3
 800755c:	29c016c4 	addi	r7,r5,91
 8007560:	003fc106 	br	8007468 <_free_r+0x174>
 8007564:	20c00515 	stw	r3,20(r4)
 8007568:	20c00415 	stw	r3,16(r4)
 800756c:	19c00315 	stw	r7,12(r3)
 8007570:	19c00215 	stw	r7,8(r3)
 8007574:	1a400115 	stw	r9,4(r3)
 8007578:	40800015 	stw	r2,0(r8)
 800757c:	003f9706 	br	80073dc <_free_r+0xe8>
 8007580:	380fd0ba 	srai	r7,r7,2
 8007584:	00800044 	movi	r2,1
 8007588:	22000117 	ldw	r8,4(r4)
 800758c:	11ce983a 	sll	r7,r2,r7
 8007590:	3a0eb03a 	or	r7,r7,r8
 8007594:	21c00115 	stw	r7,4(r4)
 8007598:	003fbe06 	br	8007494 <_free_r+0x1a0>
 800759c:	29805568 	cmpgeui	r6,r5,341
 80075a0:	3000051e 	bne	r6,zero,80075b8 <_free_r+0x2c4>
 80075a4:	100ad3fa 	srli	r5,r2,15
 80075a8:	29801e04 	addi	r6,r5,120
 80075ac:	300c90fa 	slli	r6,r6,3
 80075b0:	29c01dc4 	addi	r7,r5,119
 80075b4:	003fac06 	br	8007468 <_free_r+0x174>
 80075b8:	29415568 	cmpgeui	r5,r5,1365
 80075bc:	2800051e 	bne	r5,zero,80075d4 <_free_r+0x2e0>
 80075c0:	100ad4ba 	srli	r5,r2,18
 80075c4:	29801f44 	addi	r6,r5,125
 80075c8:	300c90fa 	slli	r6,r6,3
 80075cc:	29c01f04 	addi	r7,r5,124
 80075d0:	003fa506 	br	8007468 <_free_r+0x174>
 80075d4:	0180fe04 	movi	r6,1016
 80075d8:	01c01f84 	movi	r7,126
 80075dc:	003fa206 	br	8007468 <_free_r+0x174>
 80075e0:	11000054 	ori	r4,r2,1
 80075e4:	19000115 	stw	r4,4(r3)
 80075e8:	30800015 	stw	r2,0(r6)
 80075ec:	003f7b06 	br	80073dc <_free_r+0xe8>

080075f0 <__sfvwrite_r>:
 80075f0:	30800217 	ldw	r2,8(r6)
 80075f4:	1000a326 	beq	r2,zero,8007884 <__sfvwrite_r+0x294>
 80075f8:	29c0030b 	ldhu	r7,12(r5)
 80075fc:	defff404 	addi	sp,sp,-48
 8007600:	ddc00915 	stw	r23,36(sp)
 8007604:	dd400715 	stw	r21,28(sp)
 8007608:	dc000215 	stw	r16,8(sp)
 800760c:	dfc00b15 	stw	ra,44(sp)
 8007610:	df000a15 	stw	fp,40(sp)
 8007614:	dd800815 	stw	r22,32(sp)
 8007618:	dd000615 	stw	r20,24(sp)
 800761c:	dcc00515 	stw	r19,20(sp)
 8007620:	dc800415 	stw	r18,16(sp)
 8007624:	dc400315 	stw	r17,12(sp)
 8007628:	3880020c 	andi	r2,r7,8
 800762c:	302f883a 	mov	r23,r6
 8007630:	202b883a 	mov	r21,r4
 8007634:	2821883a 	mov	r16,r5
 8007638:	10002226 	beq	r2,zero,80076c4 <__sfvwrite_r+0xd4>
 800763c:	28800417 	ldw	r2,16(r5)
 8007640:	10002026 	beq	r2,zero,80076c4 <__sfvwrite_r+0xd4>
 8007644:	3880008c 	andi	r2,r7,2
 8007648:	bc400017 	ldw	r17,0(r23)
 800764c:	10002526 	beq	r2,zero,80076e4 <__sfvwrite_r+0xf4>
 8007650:	80800917 	ldw	r2,36(r16)
 8007654:	81400717 	ldw	r5,28(r16)
 8007658:	05200034 	movhi	r20,32768
 800765c:	0027883a 	mov	r19,zero
 8007660:	0025883a 	mov	r18,zero
 8007664:	a53f0004 	addi	r20,r20,-1024
 8007668:	980d883a 	mov	r6,r19
 800766c:	a809883a 	mov	r4,r21
 8007670:	90001026 	beq	r18,zero,80076b4 <__sfvwrite_r+0xc4>
 8007674:	900f883a 	mov	r7,r18
 8007678:	a480012e 	bgeu	r20,r18,8007680 <__sfvwrite_r+0x90>
 800767c:	a00f883a 	mov	r7,r20
 8007680:	103ee83a 	callr	r2
 8007684:	00807a0e 	bge	zero,r2,8007870 <__sfvwrite_r+0x280>
 8007688:	b9000217 	ldw	r4,8(r23)
 800768c:	98a7883a 	add	r19,r19,r2
 8007690:	90a5c83a 	sub	r18,r18,r2
 8007694:	2085c83a 	sub	r2,r4,r2
 8007698:	b8800215 	stw	r2,8(r23)
 800769c:	10006326 	beq	r2,zero,800782c <__sfvwrite_r+0x23c>
 80076a0:	80800917 	ldw	r2,36(r16)
 80076a4:	81400717 	ldw	r5,28(r16)
 80076a8:	980d883a 	mov	r6,r19
 80076ac:	a809883a 	mov	r4,r21
 80076b0:	903ff01e 	bne	r18,zero,8007674 <__sfvwrite_r+0x84>
 80076b4:	8cc00017 	ldw	r19,0(r17)
 80076b8:	8c800117 	ldw	r18,4(r17)
 80076bc:	8c400204 	addi	r17,r17,8
 80076c0:	003fe906 	br	8007668 <__sfvwrite_r+0x78>
 80076c4:	800b883a 	mov	r5,r16
 80076c8:	a809883a 	mov	r4,r21
 80076cc:	80050540 	call	8005054 <__swsetup_r>
 80076d0:	1000f71e 	bne	r2,zero,8007ab0 <__sfvwrite_r+0x4c0>
 80076d4:	81c0030b 	ldhu	r7,12(r16)
 80076d8:	bc400017 	ldw	r17,0(r23)
 80076dc:	3880008c 	andi	r2,r7,2
 80076e0:	103fdb1e 	bne	r2,zero,8007650 <__sfvwrite_r+0x60>
 80076e4:	3880004c 	andi	r2,r7,1
 80076e8:	84800217 	ldw	r18,8(r16)
 80076ec:	82000017 	ldw	r8,0(r16)
 80076f0:	1000661e 	bne	r2,zero,800788c <__sfvwrite_r+0x29c>
 80076f4:	00a00034 	movhi	r2,32768
 80076f8:	10bfff84 	addi	r2,r2,-2
 80076fc:	00e00034 	movhi	r3,32768
 8007700:	d8800015 	stw	r2,0(sp)
 8007704:	18bfffc4 	addi	r2,r3,-1
 8007708:	0039883a 	mov	fp,zero
 800770c:	0027883a 	mov	r19,zero
 8007710:	d8800115 	stw	r2,4(sp)
 8007714:	98004126 	beq	r19,zero,800781c <__sfvwrite_r+0x22c>
 8007718:	3880800c 	andi	r2,r7,512
 800771c:	10009726 	beq	r2,zero,800797c <__sfvwrite_r+0x38c>
 8007720:	902d883a 	mov	r22,r18
 8007724:	9c80be36 	bltu	r19,r18,8007a20 <__sfvwrite_r+0x430>
 8007728:	3881200c 	andi	r2,r7,1152
 800772c:	10002626 	beq	r2,zero,80077c8 <__sfvwrite_r+0x1d8>
 8007730:	81800517 	ldw	r6,20(r16)
 8007734:	81400417 	ldw	r5,16(r16)
 8007738:	98800044 	addi	r2,r19,1
 800773c:	3189883a 	add	r4,r6,r6
 8007740:	2189883a 	add	r4,r4,r6
 8007744:	2028d7fa 	srli	r20,r4,31
 8007748:	4165c83a 	sub	r18,r8,r5
 800774c:	1485883a 	add	r2,r2,r18
 8007750:	a109883a 	add	r4,r20,r4
 8007754:	2029d07a 	srai	r20,r4,1
 8007758:	a00d883a 	mov	r6,r20
 800775c:	a080022e 	bgeu	r20,r2,8007768 <__sfvwrite_r+0x178>
 8007760:	1029883a 	mov	r20,r2
 8007764:	100d883a 	mov	r6,r2
 8007768:	39c1000c 	andi	r7,r7,1024
 800776c:	3800c026 	beq	r7,zero,8007a70 <__sfvwrite_r+0x480>
 8007770:	a809883a 	mov	r4,r21
 8007774:	300b883a 	mov	r5,r6
 8007778:	8007e600 	call	8007e60 <_malloc_r>
 800777c:	1009883a 	mov	r4,r2
 8007780:	1000c726 	beq	r2,zero,8007aa0 <__sfvwrite_r+0x4b0>
 8007784:	81400417 	ldw	r5,16(r16)
 8007788:	900d883a 	mov	r6,r18
 800778c:	80087100 	call	8008710 <memcpy>
 8007790:	1009883a 	mov	r4,r2
 8007794:	8080030b 	ldhu	r2,12(r16)
 8007798:	00fedfc4 	movi	r3,-1153
 800779c:	10c4703a 	and	r2,r2,r3
 80077a0:	10802014 	ori	r2,r2,128
 80077a4:	8080030d 	sth	r2,12(r16)
 80077a8:	2491883a 	add	r8,r4,r18
 80077ac:	a485c83a 	sub	r2,r20,r18
 80077b0:	81000415 	stw	r4,16(r16)
 80077b4:	82000015 	stw	r8,0(r16)
 80077b8:	85000515 	stw	r20,20(r16)
 80077bc:	9825883a 	mov	r18,r19
 80077c0:	80800215 	stw	r2,8(r16)
 80077c4:	982d883a 	mov	r22,r19
 80077c8:	4009883a 	mov	r4,r8
 80077cc:	b00d883a 	mov	r6,r22
 80077d0:	e00b883a 	mov	r5,fp
 80077d4:	80088100 	call	8008810 <memmove>
 80077d8:	81000217 	ldw	r4,8(r16)
 80077dc:	80800017 	ldw	r2,0(r16)
 80077e0:	9829883a 	mov	r20,r19
 80077e4:	24a5c83a 	sub	r18,r4,r18
 80077e8:	1585883a 	add	r2,r2,r22
 80077ec:	84800215 	stw	r18,8(r16)
 80077f0:	80800015 	stw	r2,0(r16)
 80077f4:	0027883a 	mov	r19,zero
 80077f8:	b8800217 	ldw	r2,8(r23)
 80077fc:	e539883a 	add	fp,fp,r20
 8007800:	1529c83a 	sub	r20,r2,r20
 8007804:	bd000215 	stw	r20,8(r23)
 8007808:	a0000826 	beq	r20,zero,800782c <__sfvwrite_r+0x23c>
 800780c:	81c0030b 	ldhu	r7,12(r16)
 8007810:	84800217 	ldw	r18,8(r16)
 8007814:	82000017 	ldw	r8,0(r16)
 8007818:	983fbf1e 	bne	r19,zero,8007718 <__sfvwrite_r+0x128>
 800781c:	8f000017 	ldw	fp,0(r17)
 8007820:	8cc00117 	ldw	r19,4(r17)
 8007824:	8c400204 	addi	r17,r17,8
 8007828:	003fba06 	br	8007714 <__sfvwrite_r+0x124>
 800782c:	0005883a 	mov	r2,zero
 8007830:	dfc00b17 	ldw	ra,44(sp)
 8007834:	df000a17 	ldw	fp,40(sp)
 8007838:	ddc00917 	ldw	r23,36(sp)
 800783c:	dd800817 	ldw	r22,32(sp)
 8007840:	dd400717 	ldw	r21,28(sp)
 8007844:	dd000617 	ldw	r20,24(sp)
 8007848:	dcc00517 	ldw	r19,20(sp)
 800784c:	dc800417 	ldw	r18,16(sp)
 8007850:	dc400317 	ldw	r17,12(sp)
 8007854:	dc000217 	ldw	r16,8(sp)
 8007858:	dec00c04 	addi	sp,sp,48
 800785c:	f800283a 	ret
 8007860:	800b883a 	mov	r5,r16
 8007864:	a809883a 	mov	r4,r21
 8007868:	8006d480 	call	8006d48 <_fflush_r>
 800786c:	10002026 	beq	r2,zero,80078f0 <__sfvwrite_r+0x300>
 8007870:	8080030b 	ldhu	r2,12(r16)
 8007874:	10801014 	ori	r2,r2,64
 8007878:	8080030d 	sth	r2,12(r16)
 800787c:	00bfffc4 	movi	r2,-1
 8007880:	003feb06 	br	8007830 <__sfvwrite_r+0x240>
 8007884:	0005883a 	mov	r2,zero
 8007888:	f800283a 	ret
 800788c:	002d883a 	mov	r22,zero
 8007890:	0027883a 	mov	r19,zero
 8007894:	0005883a 	mov	r2,zero
 8007898:	0039883a 	mov	fp,zero
 800789c:	b0001d26 	beq	r22,zero,8007914 <__sfvwrite_r+0x324>
 80078a0:	10002026 	beq	r2,zero,8007924 <__sfvwrite_r+0x334>
 80078a4:	9829883a 	mov	r20,r19
 80078a8:	b500012e 	bgeu	r22,r20,80078b0 <__sfvwrite_r+0x2c0>
 80078ac:	b029883a 	mov	r20,r22
 80078b0:	80800417 	ldw	r2,16(r16)
 80078b4:	81c00517 	ldw	r7,20(r16)
 80078b8:	1200022e 	bgeu	r2,r8,80078c4 <__sfvwrite_r+0x2d4>
 80078bc:	3ca5883a 	add	r18,r7,r18
 80078c0:	95002216 	blt	r18,r20,800794c <__sfvwrite_r+0x35c>
 80078c4:	a1c05916 	blt	r20,r7,8007a2c <__sfvwrite_r+0x43c>
 80078c8:	80800917 	ldw	r2,36(r16)
 80078cc:	81400717 	ldw	r5,28(r16)
 80078d0:	e00d883a 	mov	r6,fp
 80078d4:	a809883a 	mov	r4,r21
 80078d8:	103ee83a 	callr	r2
 80078dc:	1025883a 	mov	r18,r2
 80078e0:	00bfe30e 	bge	zero,r2,8007870 <__sfvwrite_r+0x280>
 80078e4:	9ca7c83a 	sub	r19,r19,r18
 80078e8:	983fdd26 	beq	r19,zero,8007860 <__sfvwrite_r+0x270>
 80078ec:	00800044 	movi	r2,1
 80078f0:	b9800217 	ldw	r6,8(r23)
 80078f4:	e4b9883a 	add	fp,fp,r18
 80078f8:	b4adc83a 	sub	r22,r22,r18
 80078fc:	34a5c83a 	sub	r18,r6,r18
 8007900:	bc800215 	stw	r18,8(r23)
 8007904:	903fc926 	beq	r18,zero,800782c <__sfvwrite_r+0x23c>
 8007908:	84800217 	ldw	r18,8(r16)
 800790c:	82000017 	ldw	r8,0(r16)
 8007910:	b03fe31e 	bne	r22,zero,80078a0 <__sfvwrite_r+0x2b0>
 8007914:	8d800117 	ldw	r22,4(r17)
 8007918:	8f000017 	ldw	fp,0(r17)
 800791c:	8c400204 	addi	r17,r17,8
 8007920:	b03ffc26 	beq	r22,zero,8007914 <__sfvwrite_r+0x324>
 8007924:	b00d883a 	mov	r6,r22
 8007928:	01400284 	movi	r5,10
 800792c:	e009883a 	mov	r4,fp
 8007930:	da000015 	stw	r8,0(sp)
 8007934:	80086400 	call	8008640 <memchr>
 8007938:	da000017 	ldw	r8,0(sp)
 800793c:	10004926 	beq	r2,zero,8007a64 <__sfvwrite_r+0x474>
 8007940:	10800044 	addi	r2,r2,1
 8007944:	1727c83a 	sub	r19,r2,fp
 8007948:	003fd606 	br	80078a4 <__sfvwrite_r+0x2b4>
 800794c:	e00b883a 	mov	r5,fp
 8007950:	4009883a 	mov	r4,r8
 8007954:	900d883a 	mov	r6,r18
 8007958:	80088100 	call	8008810 <memmove>
 800795c:	80800017 	ldw	r2,0(r16)
 8007960:	800b883a 	mov	r5,r16
 8007964:	a809883a 	mov	r4,r21
 8007968:	1485883a 	add	r2,r2,r18
 800796c:	80800015 	stw	r2,0(r16)
 8007970:	8006d480 	call	8006d48 <_fflush_r>
 8007974:	103fdb26 	beq	r2,zero,80078e4 <__sfvwrite_r+0x2f4>
 8007978:	003fbd06 	br	8007870 <__sfvwrite_r+0x280>
 800797c:	80800417 	ldw	r2,16(r16)
 8007980:	12001436 	bltu	r2,r8,80079d4 <__sfvwrite_r+0x3e4>
 8007984:	85000517 	ldw	r20,20(r16)
 8007988:	9d001236 	bltu	r19,r20,80079d4 <__sfvwrite_r+0x3e4>
 800798c:	d8800017 	ldw	r2,0(sp)
 8007990:	14c0322e 	bgeu	r2,r19,8007a5c <__sfvwrite_r+0x46c>
 8007994:	d9000117 	ldw	r4,4(sp)
 8007998:	a00b883a 	mov	r5,r20
 800799c:	8002a9c0 	call	8002a9c <__divsi3>
 80079a0:	a00b883a 	mov	r5,r20
 80079a4:	1009883a 	mov	r4,r2
 80079a8:	8002c500 	call	8002c50 <__mulsi3>
 80079ac:	82000917 	ldw	r8,36(r16)
 80079b0:	81400717 	ldw	r5,28(r16)
 80079b4:	100f883a 	mov	r7,r2
 80079b8:	e00d883a 	mov	r6,fp
 80079bc:	a809883a 	mov	r4,r21
 80079c0:	403ee83a 	callr	r8
 80079c4:	1029883a 	mov	r20,r2
 80079c8:	00bfa90e 	bge	zero,r2,8007870 <__sfvwrite_r+0x280>
 80079cc:	9d27c83a 	sub	r19,r19,r20
 80079d0:	003f8906 	br	80077f8 <__sfvwrite_r+0x208>
 80079d4:	9029883a 	mov	r20,r18
 80079d8:	9c80012e 	bgeu	r19,r18,80079e0 <__sfvwrite_r+0x3f0>
 80079dc:	9829883a 	mov	r20,r19
 80079e0:	4009883a 	mov	r4,r8
 80079e4:	a00d883a 	mov	r6,r20
 80079e8:	e00b883a 	mov	r5,fp
 80079ec:	80088100 	call	8008810 <memmove>
 80079f0:	80800217 	ldw	r2,8(r16)
 80079f4:	81000017 	ldw	r4,0(r16)
 80079f8:	1505c83a 	sub	r2,r2,r20
 80079fc:	2509883a 	add	r4,r4,r20
 8007a00:	80800215 	stw	r2,8(r16)
 8007a04:	81000015 	stw	r4,0(r16)
 8007a08:	103ff01e 	bne	r2,zero,80079cc <__sfvwrite_r+0x3dc>
 8007a0c:	800b883a 	mov	r5,r16
 8007a10:	a809883a 	mov	r4,r21
 8007a14:	8006d480 	call	8006d48 <_fflush_r>
 8007a18:	103fec26 	beq	r2,zero,80079cc <__sfvwrite_r+0x3dc>
 8007a1c:	003f9406 	br	8007870 <__sfvwrite_r+0x280>
 8007a20:	9825883a 	mov	r18,r19
 8007a24:	982d883a 	mov	r22,r19
 8007a28:	003f6706 	br	80077c8 <__sfvwrite_r+0x1d8>
 8007a2c:	4009883a 	mov	r4,r8
 8007a30:	a00d883a 	mov	r6,r20
 8007a34:	e00b883a 	mov	r5,fp
 8007a38:	80088100 	call	8008810 <memmove>
 8007a3c:	81000217 	ldw	r4,8(r16)
 8007a40:	80800017 	ldw	r2,0(r16)
 8007a44:	a025883a 	mov	r18,r20
 8007a48:	2509c83a 	sub	r4,r4,r20
 8007a4c:	1505883a 	add	r2,r2,r20
 8007a50:	81000215 	stw	r4,8(r16)
 8007a54:	80800015 	stw	r2,0(r16)
 8007a58:	003fa206 	br	80078e4 <__sfvwrite_r+0x2f4>
 8007a5c:	9809883a 	mov	r4,r19
 8007a60:	003fcd06 	br	8007998 <__sfvwrite_r+0x3a8>
 8007a64:	b5000044 	addi	r20,r22,1
 8007a68:	a027883a 	mov	r19,r20
 8007a6c:	003f8e06 	br	80078a8 <__sfvwrite_r+0x2b8>
 8007a70:	a809883a 	mov	r4,r21
 8007a74:	8009dc80 	call	8009dc8 <_realloc_r>
 8007a78:	1009883a 	mov	r4,r2
 8007a7c:	103f4a1e 	bne	r2,zero,80077a8 <__sfvwrite_r+0x1b8>
 8007a80:	81400417 	ldw	r5,16(r16)
 8007a84:	a809883a 	mov	r4,r21
 8007a88:	80072f40 	call	80072f4 <_free_r>
 8007a8c:	8080030b 	ldhu	r2,12(r16)
 8007a90:	00c00304 	movi	r3,12
 8007a94:	a8c00015 	stw	r3,0(r21)
 8007a98:	10bfdfcc 	andi	r2,r2,65407
 8007a9c:	003f7506 	br	8007874 <__sfvwrite_r+0x284>
 8007aa0:	00c00304 	movi	r3,12
 8007aa4:	8080030b 	ldhu	r2,12(r16)
 8007aa8:	a8c00015 	stw	r3,0(r21)
 8007aac:	003f7106 	br	8007874 <__sfvwrite_r+0x284>
 8007ab0:	00bfffc4 	movi	r2,-1
 8007ab4:	003f5e06 	br	8007830 <__sfvwrite_r+0x240>

08007ab8 <_fwalk>:
 8007ab8:	defffa04 	addi	sp,sp,-24
 8007abc:	dd000415 	stw	r20,16(sp)
 8007ac0:	dcc00315 	stw	r19,12(sp)
 8007ac4:	dc800215 	stw	r18,8(sp)
 8007ac8:	dfc00515 	stw	ra,20(sp)
 8007acc:	dc400115 	stw	r17,4(sp)
 8007ad0:	dc000015 	stw	r16,0(sp)
 8007ad4:	2827883a 	mov	r19,r5
 8007ad8:	2480b804 	addi	r18,r4,736
 8007adc:	0029883a 	mov	r20,zero
 8007ae0:	94400117 	ldw	r17,4(r18)
 8007ae4:	94000217 	ldw	r16,8(r18)
 8007ae8:	8c7fffc4 	addi	r17,r17,-1
 8007aec:	88000d16 	blt	r17,zero,8007b24 <_fwalk+0x6c>
 8007af0:	8080030b 	ldhu	r2,12(r16)
 8007af4:	8c7fffc4 	addi	r17,r17,-1
 8007af8:	108000b0 	cmpltui	r2,r2,2
 8007afc:	1000061e 	bne	r2,zero,8007b18 <_fwalk+0x60>
 8007b00:	8080038f 	ldh	r2,14(r16)
 8007b04:	8009883a 	mov	r4,r16
 8007b08:	10bfffe0 	cmpeqi	r2,r2,-1
 8007b0c:	1000021e 	bne	r2,zero,8007b18 <_fwalk+0x60>
 8007b10:	983ee83a 	callr	r19
 8007b14:	a0a8b03a 	or	r20,r20,r2
 8007b18:	88bfffd8 	cmpnei	r2,r17,-1
 8007b1c:	84001a04 	addi	r16,r16,104
 8007b20:	103ff31e 	bne	r2,zero,8007af0 <_fwalk+0x38>
 8007b24:	94800017 	ldw	r18,0(r18)
 8007b28:	903fed1e 	bne	r18,zero,8007ae0 <_fwalk+0x28>
 8007b2c:	a005883a 	mov	r2,r20
 8007b30:	dfc00517 	ldw	ra,20(sp)
 8007b34:	dd000417 	ldw	r20,16(sp)
 8007b38:	dcc00317 	ldw	r19,12(sp)
 8007b3c:	dc800217 	ldw	r18,8(sp)
 8007b40:	dc400117 	ldw	r17,4(sp)
 8007b44:	dc000017 	ldw	r16,0(sp)
 8007b48:	dec00604 	addi	sp,sp,24
 8007b4c:	f800283a 	ret

08007b50 <_fwalk_reent>:
 8007b50:	defff904 	addi	sp,sp,-28
 8007b54:	dd400515 	stw	r21,20(sp)
 8007b58:	dd000415 	stw	r20,16(sp)
 8007b5c:	dcc00315 	stw	r19,12(sp)
 8007b60:	dc800215 	stw	r18,8(sp)
 8007b64:	dfc00615 	stw	ra,24(sp)
 8007b68:	dc400115 	stw	r17,4(sp)
 8007b6c:	dc000015 	stw	r16,0(sp)
 8007b70:	202b883a 	mov	r21,r4
 8007b74:	2827883a 	mov	r19,r5
 8007b78:	2480b804 	addi	r18,r4,736
 8007b7c:	0029883a 	mov	r20,zero
 8007b80:	94400117 	ldw	r17,4(r18)
 8007b84:	94000217 	ldw	r16,8(r18)
 8007b88:	8c7fffc4 	addi	r17,r17,-1
 8007b8c:	88000e16 	blt	r17,zero,8007bc8 <_fwalk_reent+0x78>
 8007b90:	8080030b 	ldhu	r2,12(r16)
 8007b94:	8c7fffc4 	addi	r17,r17,-1
 8007b98:	108000b0 	cmpltui	r2,r2,2
 8007b9c:	1000071e 	bne	r2,zero,8007bbc <_fwalk_reent+0x6c>
 8007ba0:	8080038f 	ldh	r2,14(r16)
 8007ba4:	800b883a 	mov	r5,r16
 8007ba8:	a809883a 	mov	r4,r21
 8007bac:	10bfffe0 	cmpeqi	r2,r2,-1
 8007bb0:	1000021e 	bne	r2,zero,8007bbc <_fwalk_reent+0x6c>
 8007bb4:	983ee83a 	callr	r19
 8007bb8:	a0a8b03a 	or	r20,r20,r2
 8007bbc:	88bfffd8 	cmpnei	r2,r17,-1
 8007bc0:	84001a04 	addi	r16,r16,104
 8007bc4:	103ff21e 	bne	r2,zero,8007b90 <_fwalk_reent+0x40>
 8007bc8:	94800017 	ldw	r18,0(r18)
 8007bcc:	903fec1e 	bne	r18,zero,8007b80 <_fwalk_reent+0x30>
 8007bd0:	a005883a 	mov	r2,r20
 8007bd4:	dfc00617 	ldw	ra,24(sp)
 8007bd8:	dd400517 	ldw	r21,20(sp)
 8007bdc:	dd000417 	ldw	r20,16(sp)
 8007be0:	dcc00317 	ldw	r19,12(sp)
 8007be4:	dc800217 	ldw	r18,8(sp)
 8007be8:	dc400117 	ldw	r17,4(sp)
 8007bec:	dc000017 	ldw	r16,0(sp)
 8007bf0:	dec00704 	addi	sp,sp,28
 8007bf4:	f800283a 	ret

08007bf8 <__localeconv_l>:
 8007bf8:	20803c04 	addi	r2,r4,240
 8007bfc:	f800283a 	ret

08007c00 <_localeconv_r>:
 8007c00:	00820074 	movhi	r2,2049
 8007c04:	108f3204 	addi	r2,r2,15560
 8007c08:	f800283a 	ret

08007c0c <localeconv>:
 8007c0c:	00820074 	movhi	r2,2049
 8007c10:	108f3204 	addi	r2,r2,15560
 8007c14:	f800283a 	ret

08007c18 <__smakebuf_r>:
 8007c18:	2880030b 	ldhu	r2,12(r5)
 8007c1c:	deffe804 	addi	sp,sp,-96
 8007c20:	dc001215 	stw	r16,72(sp)
 8007c24:	dfc01715 	stw	ra,92(sp)
 8007c28:	dd001615 	stw	r20,88(sp)
 8007c2c:	dcc01515 	stw	r19,84(sp)
 8007c30:	dc801415 	stw	r18,80(sp)
 8007c34:	dc401315 	stw	r17,76(sp)
 8007c38:	10c0008c 	andi	r3,r2,2
 8007c3c:	2821883a 	mov	r16,r5
 8007c40:	18000d26 	beq	r3,zero,8007c78 <__smakebuf_r+0x60>
 8007c44:	288010c4 	addi	r2,r5,67
 8007c48:	28800015 	stw	r2,0(r5)
 8007c4c:	28800415 	stw	r2,16(r5)
 8007c50:	00800044 	movi	r2,1
 8007c54:	28800515 	stw	r2,20(r5)
 8007c58:	dfc01717 	ldw	ra,92(sp)
 8007c5c:	dd001617 	ldw	r20,88(sp)
 8007c60:	dcc01517 	ldw	r19,84(sp)
 8007c64:	dc801417 	ldw	r18,80(sp)
 8007c68:	dc401317 	ldw	r17,76(sp)
 8007c6c:	dc001217 	ldw	r16,72(sp)
 8007c70:	dec01804 	addi	sp,sp,96
 8007c74:	f800283a 	ret
 8007c78:	2940038f 	ldh	r5,14(r5)
 8007c7c:	2023883a 	mov	r17,r4
 8007c80:	28002816 	blt	r5,zero,8007d24 <__smakebuf_r+0x10c>
 8007c84:	d80d883a 	mov	r6,sp
 8007c88:	800c1400 	call	800c140 <_fstat_r>
 8007c8c:	10002416 	blt	r2,zero,8007d20 <__smakebuf_r+0x108>
 8007c90:	d8800117 	ldw	r2,4(sp)
 8007c94:	10bc000c 	andi	r2,r2,61440
 8007c98:	10880018 	cmpnei	r2,r2,8192
 8007c9c:	1000461e 	bne	r2,zero,8007db8 <__smakebuf_r+0x1a0>
 8007ca0:	8140038f 	ldh	r5,14(r16)
 8007ca4:	8809883a 	mov	r4,r17
 8007ca8:	800c1a00 	call	800c1a0 <_isatty_r>
 8007cac:	10003e26 	beq	r2,zero,8007da8 <__smakebuf_r+0x190>
 8007cb0:	8080030b 	ldhu	r2,12(r16)
 8007cb4:	80c010c4 	addi	r3,r16,67
 8007cb8:	80c00015 	stw	r3,0(r16)
 8007cbc:	10800054 	ori	r2,r2,1
 8007cc0:	8080030d 	sth	r2,12(r16)
 8007cc4:	00800044 	movi	r2,1
 8007cc8:	80c00415 	stw	r3,16(r16)
 8007ccc:	80800515 	stw	r2,20(r16)
 8007cd0:	04c00044 	movi	r19,1
 8007cd4:	05010004 	movi	r20,1024
 8007cd8:	04820004 	movi	r18,2048
 8007cdc:	a00b883a 	mov	r5,r20
 8007ce0:	8809883a 	mov	r4,r17
 8007ce4:	8007e600 	call	8007e60 <_malloc_r>
 8007ce8:	10001726 	beq	r2,zero,8007d48 <__smakebuf_r+0x130>
 8007cec:	80c0030b 	ldhu	r3,12(r16)
 8007cf0:	01020034 	movhi	r4,2048
 8007cf4:	211b8d04 	addi	r4,r4,28212
 8007cf8:	89000f15 	stw	r4,60(r17)
 8007cfc:	18c02014 	ori	r3,r3,128
 8007d00:	80c0030d 	sth	r3,12(r16)
 8007d04:	80800015 	stw	r2,0(r16)
 8007d08:	80800415 	stw	r2,16(r16)
 8007d0c:	85000515 	stw	r20,20(r16)
 8007d10:	98001d1e 	bne	r19,zero,8007d88 <__smakebuf_r+0x170>
 8007d14:	90c6b03a 	or	r3,r18,r3
 8007d18:	80c0030d 	sth	r3,12(r16)
 8007d1c:	003fce06 	br	8007c58 <__smakebuf_r+0x40>
 8007d20:	8080030b 	ldhu	r2,12(r16)
 8007d24:	1080200c 	andi	r2,r2,128
 8007d28:	0027883a 	mov	r19,zero
 8007d2c:	10001326 	beq	r2,zero,8007d7c <__smakebuf_r+0x164>
 8007d30:	05001004 	movi	r20,64
 8007d34:	a00b883a 	mov	r5,r20
 8007d38:	8809883a 	mov	r4,r17
 8007d3c:	0025883a 	mov	r18,zero
 8007d40:	8007e600 	call	8007e60 <_malloc_r>
 8007d44:	103fe91e 	bne	r2,zero,8007cec <__smakebuf_r+0xd4>
 8007d48:	8080030b 	ldhu	r2,12(r16)
 8007d4c:	10c0800c 	andi	r3,r2,512
 8007d50:	183fc11e 	bne	r3,zero,8007c58 <__smakebuf_r+0x40>
 8007d54:	00ffff04 	movi	r3,-4
 8007d58:	10c4703a 	and	r2,r2,r3
 8007d5c:	10800094 	ori	r2,r2,2
 8007d60:	80c010c4 	addi	r3,r16,67
 8007d64:	8080030d 	sth	r2,12(r16)
 8007d68:	00800044 	movi	r2,1
 8007d6c:	80c00015 	stw	r3,0(r16)
 8007d70:	80c00415 	stw	r3,16(r16)
 8007d74:	80800515 	stw	r2,20(r16)
 8007d78:	003fb706 	br	8007c58 <__smakebuf_r+0x40>
 8007d7c:	05010004 	movi	r20,1024
 8007d80:	0025883a 	mov	r18,zero
 8007d84:	003fd506 	br	8007cdc <__smakebuf_r+0xc4>
 8007d88:	8140038f 	ldh	r5,14(r16)
 8007d8c:	8809883a 	mov	r4,r17
 8007d90:	800c1a00 	call	800c1a0 <_isatty_r>
 8007d94:	80c0030b 	ldhu	r3,12(r16)
 8007d98:	103fde26 	beq	r2,zero,8007d14 <__smakebuf_r+0xfc>
 8007d9c:	18ffff0c 	andi	r3,r3,65532
 8007da0:	18c00054 	ori	r3,r3,1
 8007da4:	003fdb06 	br	8007d14 <__smakebuf_r+0xfc>
 8007da8:	04c00044 	movi	r19,1
 8007dac:	05010004 	movi	r20,1024
 8007db0:	04820004 	movi	r18,2048
 8007db4:	003fc906 	br	8007cdc <__smakebuf_r+0xc4>
 8007db8:	0027883a 	mov	r19,zero
 8007dbc:	05010004 	movi	r20,1024
 8007dc0:	04820004 	movi	r18,2048
 8007dc4:	003fc506 	br	8007cdc <__smakebuf_r+0xc4>

08007dc8 <__swhatbuf_r>:
 8007dc8:	deffea04 	addi	sp,sp,-88
 8007dcc:	dc001215 	stw	r16,72(sp)
 8007dd0:	2821883a 	mov	r16,r5
 8007dd4:	2940038f 	ldh	r5,14(r5)
 8007dd8:	dc801415 	stw	r18,80(sp)
 8007ddc:	dc401315 	stw	r17,76(sp)
 8007de0:	dfc01515 	stw	ra,84(sp)
 8007de4:	3023883a 	mov	r17,r6
 8007de8:	3825883a 	mov	r18,r7
 8007dec:	28001016 	blt	r5,zero,8007e30 <__swhatbuf_r+0x68>
 8007df0:	d80d883a 	mov	r6,sp
 8007df4:	800c1400 	call	800c140 <_fstat_r>
 8007df8:	10000d16 	blt	r2,zero,8007e30 <__swhatbuf_r+0x68>
 8007dfc:	d8c00117 	ldw	r3,4(sp)
 8007e00:	00820004 	movi	r2,2048
 8007e04:	18fc000c 	andi	r3,r3,61440
 8007e08:	18c80020 	cmpeqi	r3,r3,8192
 8007e0c:	90c00015 	stw	r3,0(r18)
 8007e10:	00c10004 	movi	r3,1024
 8007e14:	88c00015 	stw	r3,0(r17)
 8007e18:	dfc01517 	ldw	ra,84(sp)
 8007e1c:	dc801417 	ldw	r18,80(sp)
 8007e20:	dc401317 	ldw	r17,76(sp)
 8007e24:	dc001217 	ldw	r16,72(sp)
 8007e28:	dec01604 	addi	sp,sp,88
 8007e2c:	f800283a 	ret
 8007e30:	8080030b 	ldhu	r2,12(r16)
 8007e34:	90000015 	stw	zero,0(r18)
 8007e38:	1080200c 	andi	r2,r2,128
 8007e3c:	10000426 	beq	r2,zero,8007e50 <__swhatbuf_r+0x88>
 8007e40:	00801004 	movi	r2,64
 8007e44:	88800015 	stw	r2,0(r17)
 8007e48:	0005883a 	mov	r2,zero
 8007e4c:	003ff206 	br	8007e18 <__swhatbuf_r+0x50>
 8007e50:	00810004 	movi	r2,1024
 8007e54:	88800015 	stw	r2,0(r17)
 8007e58:	0005883a 	mov	r2,zero
 8007e5c:	003fee06 	br	8007e18 <__swhatbuf_r+0x50>

08007e60 <_malloc_r>:
 8007e60:	defff604 	addi	sp,sp,-40
 8007e64:	dc400115 	stw	r17,4(sp)
 8007e68:	2c4002c4 	addi	r17,r5,11
 8007e6c:	dc800215 	stw	r18,8(sp)
 8007e70:	dfc00915 	stw	ra,36(sp)
 8007e74:	df000815 	stw	fp,32(sp)
 8007e78:	ddc00715 	stw	r23,28(sp)
 8007e7c:	dd800615 	stw	r22,24(sp)
 8007e80:	dd400515 	stw	r21,20(sp)
 8007e84:	dd000415 	stw	r20,16(sp)
 8007e88:	dcc00315 	stw	r19,12(sp)
 8007e8c:	dc000015 	stw	r16,0(sp)
 8007e90:	888005e8 	cmpgeui	r2,r17,23
 8007e94:	2025883a 	mov	r18,r4
 8007e98:	10001b1e 	bne	r2,zero,8007f08 <_malloc_r+0xa8>
 8007e9c:	29400468 	cmpgeui	r5,r5,17
 8007ea0:	2800821e 	bne	r5,zero,80080ac <_malloc_r+0x24c>
 8007ea4:	80105e80 	call	80105e8 <__malloc_lock>
 8007ea8:	04400404 	movi	r17,16
 8007eac:	00800604 	movi	r2,24
 8007eb0:	01c00084 	movi	r7,2
 8007eb4:	04c20074 	movhi	r19,2049
 8007eb8:	9ccdf404 	addi	r19,r19,14288
 8007ebc:	9885883a 	add	r2,r19,r2
 8007ec0:	14000117 	ldw	r16,4(r2)
 8007ec4:	10fffe04 	addi	r3,r2,-8
 8007ec8:	80c08b26 	beq	r16,r3,80080f8 <_malloc_r+0x298>
 8007ecc:	80800117 	ldw	r2,4(r16)
 8007ed0:	81000317 	ldw	r4,12(r16)
 8007ed4:	00ffff04 	movi	r3,-4
 8007ed8:	10c4703a 	and	r2,r2,r3
 8007edc:	81400217 	ldw	r5,8(r16)
 8007ee0:	8085883a 	add	r2,r16,r2
 8007ee4:	10c00117 	ldw	r3,4(r2)
 8007ee8:	29000315 	stw	r4,12(r5)
 8007eec:	21400215 	stw	r5,8(r4)
 8007ef0:	18c00054 	ori	r3,r3,1
 8007ef4:	10c00115 	stw	r3,4(r2)
 8007ef8:	9009883a 	mov	r4,r18
 8007efc:	801060c0 	call	801060c <__malloc_unlock>
 8007f00:	80800204 	addi	r2,r16,8
 8007f04:	00006c06 	br	80080b8 <_malloc_r+0x258>
 8007f08:	00bffe04 	movi	r2,-8
 8007f0c:	88a2703a 	and	r17,r17,r2
 8007f10:	88006616 	blt	r17,zero,80080ac <_malloc_r+0x24c>
 8007f14:	89406536 	bltu	r17,r5,80080ac <_malloc_r+0x24c>
 8007f18:	80105e80 	call	80105e8 <__malloc_lock>
 8007f1c:	88807e28 	cmpgeui	r2,r17,504
 8007f20:	10012226 	beq	r2,zero,80083ac <_malloc_r+0x54c>
 8007f24:	8804d27a 	srli	r2,r17,9
 8007f28:	10006f26 	beq	r2,zero,80080e8 <_malloc_r+0x288>
 8007f2c:	10c00168 	cmpgeui	r3,r2,5
 8007f30:	1800fe1e 	bne	r3,zero,800832c <_malloc_r+0x4cc>
 8007f34:	8804d1ba 	srli	r2,r17,6
 8007f38:	11c00e44 	addi	r7,r2,57
 8007f3c:	380890fa 	slli	r4,r7,3
 8007f40:	12000e04 	addi	r8,r2,56
 8007f44:	04c20074 	movhi	r19,2049
 8007f48:	9ccdf404 	addi	r19,r19,14288
 8007f4c:	9909883a 	add	r4,r19,r4
 8007f50:	24000117 	ldw	r16,4(r4)
 8007f54:	213ffe04 	addi	r4,r4,-8
 8007f58:	24000b26 	beq	r4,r16,8007f88 <_malloc_r+0x128>
 8007f5c:	01bfff04 	movi	r6,-4
 8007f60:	00000306 	br	8007f70 <_malloc_r+0x110>
 8007f64:	1800d60e 	bge	r3,zero,80082c0 <_malloc_r+0x460>
 8007f68:	84000317 	ldw	r16,12(r16)
 8007f6c:	24000626 	beq	r4,r16,8007f88 <_malloc_r+0x128>
 8007f70:	80800117 	ldw	r2,4(r16)
 8007f74:	1184703a 	and	r2,r2,r6
 8007f78:	1447c83a 	sub	r3,r2,r17
 8007f7c:	19400408 	cmpgei	r5,r3,16
 8007f80:	283ff826 	beq	r5,zero,8007f64 <_malloc_r+0x104>
 8007f84:	400f883a 	mov	r7,r8
 8007f88:	9c000417 	ldw	r16,16(r19)
 8007f8c:	02420074 	movhi	r9,2049
 8007f90:	4a4df604 	addi	r9,r9,14296
 8007f94:	82405f26 	beq	r16,r9,8008114 <_malloc_r+0x2b4>
 8007f98:	80c00117 	ldw	r3,4(r16)
 8007f9c:	00bfff04 	movi	r2,-4
 8007fa0:	1884703a 	and	r2,r3,r2
 8007fa4:	1447c83a 	sub	r3,r2,r17
 8007fa8:	19000410 	cmplti	r4,r3,16
 8007fac:	20010a26 	beq	r4,zero,80083d8 <_malloc_r+0x578>
 8007fb0:	9a400515 	stw	r9,20(r19)
 8007fb4:	9a400415 	stw	r9,16(r19)
 8007fb8:	1800ff0e 	bge	r3,zero,80083b8 <_malloc_r+0x558>
 8007fbc:	10c08028 	cmpgeui	r3,r2,512
 8007fc0:	1800c11e 	bne	r3,zero,80082c8 <_malloc_r+0x468>
 8007fc4:	1006d0fa 	srli	r3,r2,3
 8007fc8:	1008d17a 	srli	r4,r2,5
 8007fcc:	00800044 	movi	r2,1
 8007fd0:	18c00044 	addi	r3,r3,1
 8007fd4:	180690fa 	slli	r3,r3,3
 8007fd8:	99400117 	ldw	r5,4(r19)
 8007fdc:	1104983a 	sll	r2,r2,r4
 8007fe0:	98c7883a 	add	r3,r19,r3
 8007fe4:	19000017 	ldw	r4,0(r3)
 8007fe8:	1144b03a 	or	r2,r2,r5
 8007fec:	197ffe04 	addi	r5,r3,-8
 8007ff0:	81400315 	stw	r5,12(r16)
 8007ff4:	81000215 	stw	r4,8(r16)
 8007ff8:	98800115 	stw	r2,4(r19)
 8007ffc:	1c000015 	stw	r16,0(r3)
 8008000:	24000315 	stw	r16,12(r4)
 8008004:	3807d0ba 	srai	r3,r7,2
 8008008:	01000044 	movi	r4,1
 800800c:	20c8983a 	sll	r4,r4,r3
 8008010:	11004536 	bltu	r2,r4,8008128 <_malloc_r+0x2c8>
 8008014:	2086703a 	and	r3,r4,r2
 8008018:	18000a1e 	bne	r3,zero,8008044 <_malloc_r+0x1e4>
 800801c:	00ffff04 	movi	r3,-4
 8008020:	2109883a 	add	r4,r4,r4
 8008024:	38ce703a 	and	r7,r7,r3
 8008028:	2086703a 	and	r3,r4,r2
 800802c:	39c00104 	addi	r7,r7,4
 8008030:	1800041e 	bne	r3,zero,8008044 <_malloc_r+0x1e4>
 8008034:	2109883a 	add	r4,r4,r4
 8008038:	2086703a 	and	r3,r4,r2
 800803c:	39c00104 	addi	r7,r7,4
 8008040:	183ffc26 	beq	r3,zero,8008034 <_malloc_r+0x1d4>
 8008044:	02bfff04 	movi	r10,-4
 8008048:	381690fa 	slli	r11,r7,3
 800804c:	3819883a 	mov	r12,r7
 8008050:	9ad7883a 	add	r11,r19,r11
 8008054:	5811883a 	mov	r8,r11
 8008058:	40800317 	ldw	r2,12(r8)
 800805c:	4080bc26 	beq	r8,r2,8008350 <_malloc_r+0x4f0>
 8008060:	10c00117 	ldw	r3,4(r2)
 8008064:	1021883a 	mov	r16,r2
 8008068:	10800317 	ldw	r2,12(r2)
 800806c:	1a86703a 	and	r3,r3,r10
 8008070:	1c4bc83a 	sub	r5,r3,r17
 8008074:	29800410 	cmplti	r6,r5,16
 8008078:	3000ba26 	beq	r6,zero,8008364 <_malloc_r+0x504>
 800807c:	283ff716 	blt	r5,zero,800805c <_malloc_r+0x1fc>
 8008080:	80c7883a 	add	r3,r16,r3
 8008084:	19400117 	ldw	r5,4(r3)
 8008088:	81800217 	ldw	r6,8(r16)
 800808c:	9009883a 	mov	r4,r18
 8008090:	29400054 	ori	r5,r5,1
 8008094:	19400115 	stw	r5,4(r3)
 8008098:	30800315 	stw	r2,12(r6)
 800809c:	11800215 	stw	r6,8(r2)
 80080a0:	801060c0 	call	801060c <__malloc_unlock>
 80080a4:	80800204 	addi	r2,r16,8
 80080a8:	00000306 	br	80080b8 <_malloc_r+0x258>
 80080ac:	00800304 	movi	r2,12
 80080b0:	90800015 	stw	r2,0(r18)
 80080b4:	0005883a 	mov	r2,zero
 80080b8:	dfc00917 	ldw	ra,36(sp)
 80080bc:	df000817 	ldw	fp,32(sp)
 80080c0:	ddc00717 	ldw	r23,28(sp)
 80080c4:	dd800617 	ldw	r22,24(sp)
 80080c8:	dd400517 	ldw	r21,20(sp)
 80080cc:	dd000417 	ldw	r20,16(sp)
 80080d0:	dcc00317 	ldw	r19,12(sp)
 80080d4:	dc800217 	ldw	r18,8(sp)
 80080d8:	dc400117 	ldw	r17,4(sp)
 80080dc:	dc000017 	ldw	r16,0(sp)
 80080e0:	dec00a04 	addi	sp,sp,40
 80080e4:	f800283a 	ret
 80080e8:	01008004 	movi	r4,512
 80080ec:	01c01004 	movi	r7,64
 80080f0:	02000fc4 	movi	r8,63
 80080f4:	003f9306 	br	8007f44 <_malloc_r+0xe4>
 80080f8:	14000317 	ldw	r16,12(r2)
 80080fc:	39c00084 	addi	r7,r7,2
 8008100:	143f721e 	bne	r2,r16,8007ecc <_malloc_r+0x6c>
 8008104:	9c000417 	ldw	r16,16(r19)
 8008108:	02420074 	movhi	r9,2049
 800810c:	4a4df604 	addi	r9,r9,14296
 8008110:	827fa11e 	bne	r16,r9,8007f98 <_malloc_r+0x138>
 8008114:	3807d0ba 	srai	r3,r7,2
 8008118:	01000044 	movi	r4,1
 800811c:	98800117 	ldw	r2,4(r19)
 8008120:	20c8983a 	sll	r4,r4,r3
 8008124:	113fbb2e 	bgeu	r2,r4,8008014 <_malloc_r+0x1b4>
 8008128:	9c000217 	ldw	r16,8(r19)
 800812c:	00bfff04 	movi	r2,-4
 8008130:	85400117 	ldw	r21,4(r16)
 8008134:	a8ac703a 	and	r22,r21,r2
 8008138:	b4400336 	bltu	r22,r17,8008148 <_malloc_r+0x2e8>
 800813c:	b445c83a 	sub	r2,r22,r17
 8008140:	10c00408 	cmpgei	r3,r2,16
 8008144:	1800541e 	bne	r3,zero,8008298 <_malloc_r+0x438>
 8008148:	00820074 	movhi	r2,2049
 800814c:	1093d917 	ldw	r2,20324(r2)
 8008150:	00c20074 	movhi	r3,2049
 8008154:	1d5af317 	ldw	r21,27596(r3)
 8008158:	10bfffd8 	cmpnei	r2,r2,-1
 800815c:	85b9883a 	add	fp,r16,r22
 8008160:	8d6b883a 	add	r21,r17,r21
 8008164:	1000d626 	beq	r2,zero,80084c0 <_malloc_r+0x660>
 8008168:	ad4403c4 	addi	r21,r21,4111
 800816c:	00bc0004 	movi	r2,-4096
 8008170:	a8aa703a 	and	r21,r21,r2
 8008174:	a80b883a 	mov	r5,r21
 8008178:	9009883a 	mov	r4,r18
 800817c:	800a32c0 	call	800a32c <_sbrk_r>
 8008180:	102f883a 	mov	r23,r2
 8008184:	10bfffd8 	cmpnei	r2,r2,-1
 8008188:	1000a826 	beq	r2,zero,800842c <_malloc_r+0x5cc>
 800818c:	bf00a636 	bltu	r23,fp,8008428 <_malloc_r+0x5c8>
 8008190:	00820074 	movhi	r2,2049
 8008194:	151b5917 	ldw	r20,28004(r2)
 8008198:	ad29883a 	add	r20,r21,r20
 800819c:	151b5915 	stw	r20,28004(r2)
 80081a0:	a007883a 	mov	r3,r20
 80081a4:	e5c0ec26 	beq	fp,r23,8008558 <_malloc_r+0x6f8>
 80081a8:	00820074 	movhi	r2,2049
 80081ac:	1093d917 	ldw	r2,20324(r2)
 80081b0:	10bfffd8 	cmpnei	r2,r2,-1
 80081b4:	1000ef26 	beq	r2,zero,8008574 <_malloc_r+0x714>
 80081b8:	bf39c83a 	sub	fp,r23,fp
 80081bc:	e0c7883a 	add	r3,fp,r3
 80081c0:	00820074 	movhi	r2,2049
 80081c4:	10db5915 	stw	r3,28004(r2)
 80081c8:	bf0001cc 	andi	fp,r23,7
 80081cc:	e000c526 	beq	fp,zero,80084e4 <_malloc_r+0x684>
 80081d0:	bf2fc83a 	sub	r23,r23,fp
 80081d4:	bdc00204 	addi	r23,r23,8
 80081d8:	05040204 	movi	r20,4104
 80081dc:	a729c83a 	sub	r20,r20,fp
 80081e0:	bd6b883a 	add	r21,r23,r21
 80081e4:	a569c83a 	sub	r20,r20,r21
 80081e8:	a503ffcc 	andi	r20,r20,4095
 80081ec:	a00b883a 	mov	r5,r20
 80081f0:	9009883a 	mov	r4,r18
 80081f4:	800a32c0 	call	800a32c <_sbrk_r>
 80081f8:	10ffffe0 	cmpeqi	r3,r2,-1
 80081fc:	1800f31e 	bne	r3,zero,80085cc <_malloc_r+0x76c>
 8008200:	15c5c83a 	sub	r2,r2,r23
 8008204:	152b883a 	add	r21,r2,r20
 8008208:	00820074 	movhi	r2,2049
 800820c:	115b5917 	ldw	r5,28004(r2)
 8008210:	9dc00215 	stw	r23,8(r19)
 8008214:	ad400054 	ori	r21,r21,1
 8008218:	a169883a 	add	r20,r20,r5
 800821c:	151b5915 	stw	r20,28004(r2)
 8008220:	bd400115 	stw	r21,4(r23)
 8008224:	84c0d626 	beq	r16,r19,8008580 <_malloc_r+0x720>
 8008228:	b0800428 	cmpgeui	r2,r22,16
 800822c:	1000d626 	beq	r2,zero,8008588 <_malloc_r+0x728>
 8008230:	80c00117 	ldw	r3,4(r16)
 8008234:	013ffe04 	movi	r4,-8
 8008238:	b0bffd04 	addi	r2,r22,-12
 800823c:	1104703a 	and	r2,r2,r4
 8008240:	18c0004c 	andi	r3,r3,1
 8008244:	1886b03a 	or	r3,r3,r2
 8008248:	80c00115 	stw	r3,4(r16)
 800824c:	01000144 	movi	r4,5
 8008250:	8087883a 	add	r3,r16,r2
 8008254:	19000115 	stw	r4,4(r3)
 8008258:	19000215 	stw	r4,8(r3)
 800825c:	10800428 	cmpgeui	r2,r2,16
 8008260:	1000df1e 	bne	r2,zero,80085e0 <_malloc_r+0x780>
 8008264:	bd400117 	ldw	r21,4(r23)
 8008268:	b821883a 	mov	r16,r23
 800826c:	00820074 	movhi	r2,2049
 8008270:	109af217 	ldw	r2,27592(r2)
 8008274:	1500022e 	bgeu	r2,r20,8008280 <_malloc_r+0x420>
 8008278:	00820074 	movhi	r2,2049
 800827c:	151af215 	stw	r20,27592(r2)
 8008280:	00820074 	movhi	r2,2049
 8008284:	109af117 	ldw	r2,27588(r2)
 8008288:	15006a2e 	bgeu	r2,r20,8008434 <_malloc_r+0x5d4>
 800828c:	00820074 	movhi	r2,2049
 8008290:	151af115 	stw	r20,27588(r2)
 8008294:	00006706 	br	8008434 <_malloc_r+0x5d4>
 8008298:	88c00054 	ori	r3,r17,1
 800829c:	80c00115 	stw	r3,4(r16)
 80082a0:	8463883a 	add	r17,r16,r17
 80082a4:	10800054 	ori	r2,r2,1
 80082a8:	9c400215 	stw	r17,8(r19)
 80082ac:	88800115 	stw	r2,4(r17)
 80082b0:	9009883a 	mov	r4,r18
 80082b4:	801060c0 	call	801060c <__malloc_unlock>
 80082b8:	80800204 	addi	r2,r16,8
 80082bc:	003f7e06 	br	80080b8 <_malloc_r+0x258>
 80082c0:	81000317 	ldw	r4,12(r16)
 80082c4:	003f0506 	br	8007edc <_malloc_r+0x7c>
 80082c8:	1006d27a 	srli	r3,r2,9
 80082cc:	19000168 	cmpgeui	r4,r3,5
 80082d0:	20005026 	beq	r4,zero,8008414 <_malloc_r+0x5b4>
 80082d4:	19000568 	cmpgeui	r4,r3,21
 80082d8:	20008c1e 	bne	r4,zero,800850c <_malloc_r+0x6ac>
 80082dc:	19401704 	addi	r5,r3,92
 80082e0:	280a90fa 	slli	r5,r5,3
 80082e4:	190016c4 	addi	r4,r3,91
 80082e8:	994b883a 	add	r5,r19,r5
 80082ec:	28c00017 	ldw	r3,0(r5)
 80082f0:	297ffe04 	addi	r5,r5,-8
 80082f4:	28c07426 	beq	r5,r3,80084c8 <_malloc_r+0x668>
 80082f8:	01bfff04 	movi	r6,-4
 80082fc:	19000117 	ldw	r4,4(r3)
 8008300:	2188703a 	and	r4,r4,r6
 8008304:	1100022e 	bgeu	r2,r4,8008310 <_malloc_r+0x4b0>
 8008308:	18c00217 	ldw	r3,8(r3)
 800830c:	28fffb1e 	bne	r5,r3,80082fc <_malloc_r+0x49c>
 8008310:	19400317 	ldw	r5,12(r3)
 8008314:	98800117 	ldw	r2,4(r19)
 8008318:	81400315 	stw	r5,12(r16)
 800831c:	80c00215 	stw	r3,8(r16)
 8008320:	2c000215 	stw	r16,8(r5)
 8008324:	1c000315 	stw	r16,12(r3)
 8008328:	003f3606 	br	8008004 <_malloc_r+0x1a4>
 800832c:	10c00568 	cmpgeui	r3,r2,21
 8008330:	18004a26 	beq	r3,zero,800845c <_malloc_r+0x5fc>
 8008334:	10c01568 	cmpgeui	r3,r2,85
 8008338:	18007b1e 	bne	r3,zero,8008528 <_malloc_r+0x6c8>
 800833c:	8804d33a 	srli	r2,r17,12
 8008340:	11c01bc4 	addi	r7,r2,111
 8008344:	380890fa 	slli	r4,r7,3
 8008348:	12001b84 	addi	r8,r2,110
 800834c:	003efd06 	br	8007f44 <_malloc_r+0xe4>
 8008350:	63000044 	addi	r12,r12,1
 8008354:	608000cc 	andi	r2,r12,3
 8008358:	42000204 	addi	r8,r8,8
 800835c:	103f3e1e 	bne	r2,zero,8008058 <_malloc_r+0x1f8>
 8008360:	00004506 	br	8008478 <_malloc_r+0x618>
 8008364:	81000217 	ldw	r4,8(r16)
 8008368:	89800054 	ori	r6,r17,1
 800836c:	81800115 	stw	r6,4(r16)
 8008370:	20800315 	stw	r2,12(r4)
 8008374:	11000215 	stw	r4,8(r2)
 8008378:	8463883a 	add	r17,r16,r17
 800837c:	9c400515 	stw	r17,20(r19)
 8008380:	9c400415 	stw	r17,16(r19)
 8008384:	28800054 	ori	r2,r5,1
 8008388:	88800115 	stw	r2,4(r17)
 800838c:	8a400315 	stw	r9,12(r17)
 8008390:	8a400215 	stw	r9,8(r17)
 8008394:	80c7883a 	add	r3,r16,r3
 8008398:	19400015 	stw	r5,0(r3)
 800839c:	9009883a 	mov	r4,r18
 80083a0:	801060c0 	call	801060c <__malloc_unlock>
 80083a4:	80800204 	addi	r2,r16,8
 80083a8:	003f4306 	br	80080b8 <_malloc_r+0x258>
 80083ac:	880ed0fa 	srli	r7,r17,3
 80083b0:	88800204 	addi	r2,r17,8
 80083b4:	003ebf06 	br	8007eb4 <_malloc_r+0x54>
 80083b8:	8085883a 	add	r2,r16,r2
 80083bc:	10c00117 	ldw	r3,4(r2)
 80083c0:	9009883a 	mov	r4,r18
 80083c4:	18c00054 	ori	r3,r3,1
 80083c8:	10c00115 	stw	r3,4(r2)
 80083cc:	801060c0 	call	801060c <__malloc_unlock>
 80083d0:	80800204 	addi	r2,r16,8
 80083d4:	003f3806 	br	80080b8 <_malloc_r+0x258>
 80083d8:	89000054 	ori	r4,r17,1
 80083dc:	81000115 	stw	r4,4(r16)
 80083e0:	8463883a 	add	r17,r16,r17
 80083e4:	9c400515 	stw	r17,20(r19)
 80083e8:	9c400415 	stw	r17,16(r19)
 80083ec:	19000054 	ori	r4,r3,1
 80083f0:	89000115 	stw	r4,4(r17)
 80083f4:	8085883a 	add	r2,r16,r2
 80083f8:	8a400315 	stw	r9,12(r17)
 80083fc:	8a400215 	stw	r9,8(r17)
 8008400:	10c00015 	stw	r3,0(r2)
 8008404:	9009883a 	mov	r4,r18
 8008408:	801060c0 	call	801060c <__malloc_unlock>
 800840c:	80800204 	addi	r2,r16,8
 8008410:	003f2906 	br	80080b8 <_malloc_r+0x258>
 8008414:	1006d1ba 	srli	r3,r2,6
 8008418:	19400e44 	addi	r5,r3,57
 800841c:	280a90fa 	slli	r5,r5,3
 8008420:	19000e04 	addi	r4,r3,56
 8008424:	003fb006 	br	80082e8 <_malloc_r+0x488>
 8008428:	84c04626 	beq	r16,r19,8008544 <_malloc_r+0x6e4>
 800842c:	9c000217 	ldw	r16,8(r19)
 8008430:	85400117 	ldw	r21,4(r16)
 8008434:	00bfff04 	movi	r2,-4
 8008438:	a8aa703a 	and	r21,r21,r2
 800843c:	ac45c83a 	sub	r2,r21,r17
 8008440:	ac400236 	bltu	r21,r17,800844c <_malloc_r+0x5ec>
 8008444:	10c00408 	cmpgei	r3,r2,16
 8008448:	183f931e 	bne	r3,zero,8008298 <_malloc_r+0x438>
 800844c:	9009883a 	mov	r4,r18
 8008450:	801060c0 	call	801060c <__malloc_unlock>
 8008454:	0005883a 	mov	r2,zero
 8008458:	003f1706 	br	80080b8 <_malloc_r+0x258>
 800845c:	11c01704 	addi	r7,r2,92
 8008460:	380890fa 	slli	r4,r7,3
 8008464:	120016c4 	addi	r8,r2,91
 8008468:	003eb606 	br	8007f44 <_malloc_r+0xe4>
 800846c:	58800217 	ldw	r2,8(r11)
 8008470:	39ffffc4 	addi	r7,r7,-1
 8008474:	12c0701e 	bne	r2,r11,8008638 <_malloc_r+0x7d8>
 8008478:	388000cc 	andi	r2,r7,3
 800847c:	5afffe04 	addi	r11,r11,-8
 8008480:	103ffa1e 	bne	r2,zero,800846c <_malloc_r+0x60c>
 8008484:	98c00117 	ldw	r3,4(r19)
 8008488:	0104303a 	nor	r2,zero,r4
 800848c:	10c4703a 	and	r2,r2,r3
 8008490:	98800115 	stw	r2,4(r19)
 8008494:	2109883a 	add	r4,r4,r4
 8008498:	113f2336 	bltu	r2,r4,8008128 <_malloc_r+0x2c8>
 800849c:	203f2226 	beq	r4,zero,8008128 <_malloc_r+0x2c8>
 80084a0:	2086703a 	and	r3,r4,r2
 80084a4:	1800041e 	bne	r3,zero,80084b8 <_malloc_r+0x658>
 80084a8:	2109883a 	add	r4,r4,r4
 80084ac:	2086703a 	and	r3,r4,r2
 80084b0:	63000104 	addi	r12,r12,4
 80084b4:	183ffc26 	beq	r3,zero,80084a8 <_malloc_r+0x648>
 80084b8:	600f883a 	mov	r7,r12
 80084bc:	003ee206 	br	8008048 <_malloc_r+0x1e8>
 80084c0:	ad400404 	addi	r21,r21,16
 80084c4:	003f2b06 	br	8008174 <_malloc_r+0x314>
 80084c8:	2009d0ba 	srai	r4,r4,2
 80084cc:	00800044 	movi	r2,1
 80084d0:	99800117 	ldw	r6,4(r19)
 80084d4:	1104983a 	sll	r2,r2,r4
 80084d8:	1184b03a 	or	r2,r2,r6
 80084dc:	98800115 	stw	r2,4(r19)
 80084e0:	003f8d06 	br	8008318 <_malloc_r+0x4b8>
 80084e4:	bd69883a 	add	r20,r23,r21
 80084e8:	0529c83a 	sub	r20,zero,r20
 80084ec:	a503ffcc 	andi	r20,r20,4095
 80084f0:	a00b883a 	mov	r5,r20
 80084f4:	9009883a 	mov	r4,r18
 80084f8:	800a32c0 	call	800a32c <_sbrk_r>
 80084fc:	10ffffe0 	cmpeqi	r3,r2,-1
 8008500:	183f3f26 	beq	r3,zero,8008200 <_malloc_r+0x3a0>
 8008504:	0029883a 	mov	r20,zero
 8008508:	003f3f06 	br	8008208 <_malloc_r+0x3a8>
 800850c:	19001568 	cmpgeui	r4,r3,85
 8008510:	2000201e 	bne	r4,zero,8008594 <_malloc_r+0x734>
 8008514:	1006d33a 	srli	r3,r2,12
 8008518:	19401bc4 	addi	r5,r3,111
 800851c:	280a90fa 	slli	r5,r5,3
 8008520:	19001b84 	addi	r4,r3,110
 8008524:	003f7006 	br	80082e8 <_malloc_r+0x488>
 8008528:	10c05568 	cmpgeui	r3,r2,341
 800852c:	1800201e 	bne	r3,zero,80085b0 <_malloc_r+0x750>
 8008530:	8804d3fa 	srli	r2,r17,15
 8008534:	11c01e04 	addi	r7,r2,120
 8008538:	380890fa 	slli	r4,r7,3
 800853c:	12001dc4 	addi	r8,r2,119
 8008540:	003e8006 	br	8007f44 <_malloc_r+0xe4>
 8008544:	00820074 	movhi	r2,2049
 8008548:	10db5917 	ldw	r3,28004(r2)
 800854c:	a8c7883a 	add	r3,r21,r3
 8008550:	10db5915 	stw	r3,28004(r2)
 8008554:	003f1406 	br	80081a8 <_malloc_r+0x348>
 8008558:	e083ffcc 	andi	r2,fp,4095
 800855c:	103f121e 	bne	r2,zero,80081a8 <_malloc_r+0x348>
 8008560:	9c000217 	ldw	r16,8(r19)
 8008564:	b56b883a 	add	r21,r22,r21
 8008568:	ad400054 	ori	r21,r21,1
 800856c:	85400115 	stw	r21,4(r16)
 8008570:	003f3e06 	br	800826c <_malloc_r+0x40c>
 8008574:	00820074 	movhi	r2,2049
 8008578:	15d3d915 	stw	r23,20324(r2)
 800857c:	003f1206 	br	80081c8 <_malloc_r+0x368>
 8008580:	b821883a 	mov	r16,r23
 8008584:	003f3906 	br	800826c <_malloc_r+0x40c>
 8008588:	00800044 	movi	r2,1
 800858c:	b8800115 	stw	r2,4(r23)
 8008590:	003fae06 	br	800844c <_malloc_r+0x5ec>
 8008594:	19005568 	cmpgeui	r4,r3,341
 8008598:	2000191e 	bne	r4,zero,8008600 <_malloc_r+0x7a0>
 800859c:	1006d3fa 	srli	r3,r2,15
 80085a0:	19401e04 	addi	r5,r3,120
 80085a4:	280a90fa 	slli	r5,r5,3
 80085a8:	19001dc4 	addi	r4,r3,119
 80085ac:	003f4e06 	br	80082e8 <_malloc_r+0x488>
 80085b0:	10815568 	cmpgeui	r2,r2,1365
 80085b4:	1000191e 	bne	r2,zero,800861c <_malloc_r+0x7bc>
 80085b8:	8804d4ba 	srli	r2,r17,18
 80085bc:	11c01f44 	addi	r7,r2,125
 80085c0:	380890fa 	slli	r4,r7,3
 80085c4:	12001f04 	addi	r8,r2,124
 80085c8:	003e5e06 	br	8007f44 <_malloc_r+0xe4>
 80085cc:	e73ffe04 	addi	fp,fp,-8
 80085d0:	af2b883a 	add	r21,r21,fp
 80085d4:	adebc83a 	sub	r21,r21,r23
 80085d8:	0029883a 	mov	r20,zero
 80085dc:	003f0a06 	br	8008208 <_malloc_r+0x3a8>
 80085e0:	81400204 	addi	r5,r16,8
 80085e4:	9009883a 	mov	r4,r18
 80085e8:	80072f40 	call	80072f4 <_free_r>
 80085ec:	9c000217 	ldw	r16,8(r19)
 80085f0:	00820074 	movhi	r2,2049
 80085f4:	151b5917 	ldw	r20,28004(r2)
 80085f8:	85400117 	ldw	r21,4(r16)
 80085fc:	003f1b06 	br	800826c <_malloc_r+0x40c>
 8008600:	18c15568 	cmpgeui	r3,r3,1365
 8008604:	1800091e 	bne	r3,zero,800862c <_malloc_r+0x7cc>
 8008608:	1006d4ba 	srli	r3,r2,18
 800860c:	19401f44 	addi	r5,r3,125
 8008610:	280a90fa 	slli	r5,r5,3
 8008614:	19001f04 	addi	r4,r3,124
 8008618:	003f3306 	br	80082e8 <_malloc_r+0x488>
 800861c:	0100fe04 	movi	r4,1016
 8008620:	01c01fc4 	movi	r7,127
 8008624:	02001f84 	movi	r8,126
 8008628:	003e4606 	br	8007f44 <_malloc_r+0xe4>
 800862c:	0140fe04 	movi	r5,1016
 8008630:	01001f84 	movi	r4,126
 8008634:	003f2c06 	br	80082e8 <_malloc_r+0x488>
 8008638:	98800117 	ldw	r2,4(r19)
 800863c:	003f9506 	br	8008494 <_malloc_r+0x634>

08008640 <memchr>:
 8008640:	208000cc 	andi	r2,r4,3
 8008644:	280f883a 	mov	r7,r5
 8008648:	10000e26 	beq	r2,zero,8008684 <memchr+0x44>
 800864c:	30bfffc4 	addi	r2,r6,-1
 8008650:	30001726 	beq	r6,zero,80086b0 <memchr+0x70>
 8008654:	29803fcc 	andi	r6,r5,255
 8008658:	00000606 	br	8008674 <memchr+0x34>
 800865c:	21000044 	addi	r4,r4,1
 8008660:	20c000cc 	andi	r3,r4,3
 8008664:	18000826 	beq	r3,zero,8008688 <memchr+0x48>
 8008668:	10bfffc4 	addi	r2,r2,-1
 800866c:	10ffffe0 	cmpeqi	r3,r2,-1
 8008670:	18000f1e 	bne	r3,zero,80086b0 <memchr+0x70>
 8008674:	20c00003 	ldbu	r3,0(r4)
 8008678:	19bff81e 	bne	r3,r6,800865c <memchr+0x1c>
 800867c:	2005883a 	mov	r2,r4
 8008680:	f800283a 	ret
 8008684:	3005883a 	mov	r2,r6
 8008688:	10c00128 	cmpgeui	r3,r2,4
 800868c:	18000a1e 	bne	r3,zero,80086b8 <memchr+0x78>
 8008690:	10001e26 	beq	r2,zero,800870c <memchr+0xcc>
 8008694:	2087883a 	add	r3,r4,r2
 8008698:	39803fcc 	andi	r6,r7,255
 800869c:	2005883a 	mov	r2,r4
 80086a0:	11000003 	ldbu	r4,0(r2)
 80086a4:	21bff626 	beq	r4,r6,8008680 <memchr+0x40>
 80086a8:	10800044 	addi	r2,r2,1
 80086ac:	18bffc1e 	bne	r3,r2,80086a0 <memchr+0x60>
 80086b0:	0005883a 	mov	r2,zero
 80086b4:	f800283a 	ret
 80086b8:	29403fcc 	andi	r5,r5,255
 80086bc:	280c923a 	slli	r6,r5,8
 80086c0:	027fbff4 	movhi	r9,65279
 80086c4:	02202074 	movhi	r8,32897
 80086c8:	314ab03a 	or	r5,r6,r5
 80086cc:	280c943a 	slli	r6,r5,16
 80086d0:	4a7fbfc4 	addi	r9,r9,-257
 80086d4:	42202004 	addi	r8,r8,-32640
 80086d8:	314cb03a 	or	r6,r6,r5
 80086dc:	20c00017 	ldw	r3,0(r4)
 80086e0:	30c6f03a 	xor	r3,r6,r3
 80086e4:	1a4b883a 	add	r5,r3,r9
 80086e8:	00c6303a 	nor	r3,zero,r3
 80086ec:	28c6703a 	and	r3,r5,r3
 80086f0:	1a06703a 	and	r3,r3,r8
 80086f4:	183fe71e 	bne	r3,zero,8008694 <memchr+0x54>
 80086f8:	10bfff04 	addi	r2,r2,-4
 80086fc:	10c00128 	cmpgeui	r3,r2,4
 8008700:	21000104 	addi	r4,r4,4
 8008704:	183ff51e 	bne	r3,zero,80086dc <memchr+0x9c>
 8008708:	003fe106 	br	8008690 <memchr+0x50>
 800870c:	f800283a 	ret

08008710 <memcpy>:
 8008710:	30c00430 	cmpltui	r3,r6,16
 8008714:	2005883a 	mov	r2,r4
 8008718:	18002d1e 	bne	r3,zero,80087d0 <memcpy+0xc0>
 800871c:	2906b03a 	or	r3,r5,r4
 8008720:	18c000cc 	andi	r3,r3,3
 8008724:	1800351e 	bne	r3,zero,80087fc <memcpy+0xec>
 8008728:	32fffc04 	addi	r11,r6,-16
 800872c:	5816d13a 	srli	r11,r11,4
 8008730:	280f883a 	mov	r7,r5
 8008734:	2007883a 	mov	r3,r4
 8008738:	5ac00044 	addi	r11,r11,1
 800873c:	5816913a 	slli	r11,r11,4
 8008740:	22d5883a 	add	r10,r4,r11
 8008744:	39000117 	ldw	r4,4(r7)
 8008748:	3a400017 	ldw	r9,0(r7)
 800874c:	3a000217 	ldw	r8,8(r7)
 8008750:	19000115 	stw	r4,4(r3)
 8008754:	39000317 	ldw	r4,12(r7)
 8008758:	1a400015 	stw	r9,0(r3)
 800875c:	1a000215 	stw	r8,8(r3)
 8008760:	19000315 	stw	r4,12(r3)
 8008764:	18c00404 	addi	r3,r3,16
 8008768:	39c00404 	addi	r7,r7,16
 800876c:	50fff51e 	bne	r10,r3,8008744 <memcpy+0x34>
 8008770:	3100030c 	andi	r4,r6,12
 8008774:	2acb883a 	add	r5,r5,r11
 8008778:	320003cc 	andi	r8,r6,15
 800877c:	20002226 	beq	r4,zero,8008808 <memcpy+0xf8>
 8008780:	280f883a 	mov	r7,r5
 8008784:	1813883a 	mov	r9,r3
 8008788:	39c00104 	addi	r7,r7,4
 800878c:	3abfff17 	ldw	r10,-4(r7)
 8008790:	41c9c83a 	sub	r4,r8,r7
 8008794:	2909883a 	add	r4,r5,r4
 8008798:	4a800015 	stw	r10,0(r9)
 800879c:	21000128 	cmpgeui	r4,r4,4
 80087a0:	4a400104 	addi	r9,r9,4
 80087a4:	203ff81e 	bne	r4,zero,8008788 <memcpy+0x78>
 80087a8:	413fff04 	addi	r4,r8,-4
 80087ac:	2008d0ba 	srli	r4,r4,2
 80087b0:	318000cc 	andi	r6,r6,3
 80087b4:	31ffffc4 	addi	r7,r6,-1
 80087b8:	21000044 	addi	r4,r4,1
 80087bc:	200890ba 	slli	r4,r4,2
 80087c0:	1907883a 	add	r3,r3,r4
 80087c4:	290b883a 	add	r5,r5,r4
 80087c8:	3000041e 	bne	r6,zero,80087dc <memcpy+0xcc>
 80087cc:	f800283a 	ret
 80087d0:	2007883a 	mov	r3,r4
 80087d4:	31ffffc4 	addi	r7,r6,-1
 80087d8:	303ffc26 	beq	r6,zero,80087cc <memcpy+0xbc>
 80087dc:	39c00044 	addi	r7,r7,1
 80087e0:	19cf883a 	add	r7,r3,r7
 80087e4:	29800003 	ldbu	r6,0(r5)
 80087e8:	18c00044 	addi	r3,r3,1
 80087ec:	29400044 	addi	r5,r5,1
 80087f0:	19bfffc5 	stb	r6,-1(r3)
 80087f4:	38fffb1e 	bne	r7,r3,80087e4 <memcpy+0xd4>
 80087f8:	f800283a 	ret
 80087fc:	31ffffc4 	addi	r7,r6,-1
 8008800:	2007883a 	mov	r3,r4
 8008804:	003ff506 	br	80087dc <memcpy+0xcc>
 8008808:	400d883a 	mov	r6,r8
 800880c:	003ff106 	br	80087d4 <memcpy+0xc4>

08008810 <memmove>:
 8008810:	2005883a 	mov	r2,r4
 8008814:	29000a2e 	bgeu	r5,r4,8008840 <memmove+0x30>
 8008818:	2989883a 	add	r4,r5,r6
 800881c:	1100082e 	bgeu	r2,r4,8008840 <memmove+0x30>
 8008820:	1187883a 	add	r3,r2,r6
 8008824:	30003e26 	beq	r6,zero,8008920 <memmove+0x110>
 8008828:	217fffc3 	ldbu	r5,-1(r4)
 800882c:	18ffffc4 	addi	r3,r3,-1
 8008830:	213fffc4 	addi	r4,r4,-1
 8008834:	19400005 	stb	r5,0(r3)
 8008838:	10fffb1e 	bne	r2,r3,8008828 <memmove+0x18>
 800883c:	f800283a 	ret
 8008840:	30c00430 	cmpltui	r3,r6,16
 8008844:	18000b26 	beq	r3,zero,8008874 <memmove+0x64>
 8008848:	1007883a 	mov	r3,r2
 800884c:	31ffffc4 	addi	r7,r6,-1
 8008850:	30003726 	beq	r6,zero,8008930 <memmove+0x120>
 8008854:	39c00044 	addi	r7,r7,1
 8008858:	29cf883a 	add	r7,r5,r7
 800885c:	29800003 	ldbu	r6,0(r5)
 8008860:	29400044 	addi	r5,r5,1
 8008864:	18c00044 	addi	r3,r3,1
 8008868:	19bfffc5 	stb	r6,-1(r3)
 800886c:	29fffb1e 	bne	r5,r7,800885c <memmove+0x4c>
 8008870:	f800283a 	ret
 8008874:	2886b03a 	or	r3,r5,r2
 8008878:	18c000cc 	andi	r3,r3,3
 800887c:	1800291e 	bne	r3,zero,8008924 <memmove+0x114>
 8008880:	327ffc04 	addi	r9,r6,-16
 8008884:	4812d13a 	srli	r9,r9,4
 8008888:	280f883a 	mov	r7,r5
 800888c:	1007883a 	mov	r3,r2
 8008890:	4a400044 	addi	r9,r9,1
 8008894:	4812913a 	slli	r9,r9,4
 8008898:	1251883a 	add	r8,r2,r9
 800889c:	39000017 	ldw	r4,0(r7)
 80088a0:	39c00404 	addi	r7,r7,16
 80088a4:	18c00404 	addi	r3,r3,16
 80088a8:	193ffc15 	stw	r4,-16(r3)
 80088ac:	393ffd17 	ldw	r4,-12(r7)
 80088b0:	193ffd15 	stw	r4,-12(r3)
 80088b4:	393ffe17 	ldw	r4,-8(r7)
 80088b8:	193ffe15 	stw	r4,-8(r3)
 80088bc:	393fff17 	ldw	r4,-4(r7)
 80088c0:	193fff15 	stw	r4,-4(r3)
 80088c4:	40fff51e 	bne	r8,r3,800889c <memmove+0x8c>
 80088c8:	3100030c 	andi	r4,r6,12
 80088cc:	2a4b883a 	add	r5,r5,r9
 80088d0:	320003cc 	andi	r8,r6,15
 80088d4:	20001726 	beq	r4,zero,8008934 <memmove+0x124>
 80088d8:	2813883a 	mov	r9,r5
 80088dc:	180f883a 	mov	r7,r3
 80088e0:	4a800017 	ldw	r10,0(r9)
 80088e4:	39c00104 	addi	r7,r7,4
 80088e8:	41c9c83a 	sub	r4,r8,r7
 80088ec:	1909883a 	add	r4,r3,r4
 80088f0:	21000128 	cmpgeui	r4,r4,4
 80088f4:	3abfff15 	stw	r10,-4(r7)
 80088f8:	4a400104 	addi	r9,r9,4
 80088fc:	203ff81e 	bne	r4,zero,80088e0 <memmove+0xd0>
 8008900:	413fff04 	addi	r4,r8,-4
 8008904:	2008d0ba 	srli	r4,r4,2
 8008908:	318000cc 	andi	r6,r6,3
 800890c:	21000044 	addi	r4,r4,1
 8008910:	200890ba 	slli	r4,r4,2
 8008914:	1907883a 	add	r3,r3,r4
 8008918:	290b883a 	add	r5,r5,r4
 800891c:	003fcb06 	br	800884c <memmove+0x3c>
 8008920:	f800283a 	ret
 8008924:	31ffffc4 	addi	r7,r6,-1
 8008928:	1007883a 	mov	r3,r2
 800892c:	003fc906 	br	8008854 <memmove+0x44>
 8008930:	f800283a 	ret
 8008934:	400d883a 	mov	r6,r8
 8008938:	003fc406 	br	800884c <memmove+0x3c>

0800893c <memset>:
 800893c:	20c000cc 	andi	r3,r4,3
 8008940:	2005883a 	mov	r2,r4
 8008944:	18003626 	beq	r3,zero,8008a20 <memset+0xe4>
 8008948:	31ffffc4 	addi	r7,r6,-1
 800894c:	30003326 	beq	r6,zero,8008a1c <memset+0xe0>
 8008950:	2811883a 	mov	r8,r5
 8008954:	2007883a 	mov	r3,r4
 8008958:	00000306 	br	8008968 <memset+0x2c>
 800895c:	39ffffc4 	addi	r7,r7,-1
 8008960:	39bfffe0 	cmpeqi	r6,r7,-1
 8008964:	30002d1e 	bne	r6,zero,8008a1c <memset+0xe0>
 8008968:	18c00044 	addi	r3,r3,1
 800896c:	198000cc 	andi	r6,r3,3
 8008970:	1a3fffc5 	stb	r8,-1(r3)
 8008974:	303ff91e 	bne	r6,zero,800895c <memset+0x20>
 8008978:	39000130 	cmpltui	r4,r7,4
 800897c:	2000221e 	bne	r4,zero,8008a08 <memset+0xcc>
 8008980:	29003fcc 	andi	r4,r5,255
 8008984:	200c923a 	slli	r6,r4,8
 8008988:	3a000430 	cmpltui	r8,r7,16
 800898c:	3108b03a 	or	r4,r6,r4
 8008990:	200c943a 	slli	r6,r4,16
 8008994:	310cb03a 	or	r6,r6,r4
 8008998:	40000e1e 	bne	r8,zero,80089d4 <memset+0x98>
 800899c:	393ffc04 	addi	r4,r7,-16
 80089a0:	2008d13a 	srli	r4,r4,4
 80089a4:	21000044 	addi	r4,r4,1
 80089a8:	2008913a 	slli	r4,r4,4
 80089ac:	1909883a 	add	r4,r3,r4
 80089b0:	19800015 	stw	r6,0(r3)
 80089b4:	19800115 	stw	r6,4(r3)
 80089b8:	19800215 	stw	r6,8(r3)
 80089bc:	19800315 	stw	r6,12(r3)
 80089c0:	18c00404 	addi	r3,r3,16
 80089c4:	20fffa1e 	bne	r4,r3,80089b0 <memset+0x74>
 80089c8:	3900030c 	andi	r4,r7,12
 80089cc:	39c003cc 	andi	r7,r7,15
 80089d0:	20000d26 	beq	r4,zero,8008a08 <memset+0xcc>
 80089d4:	1811883a 	mov	r8,r3
 80089d8:	42000104 	addi	r8,r8,4
 80089dc:	3a09c83a 	sub	r4,r7,r8
 80089e0:	1909883a 	add	r4,r3,r4
 80089e4:	21000128 	cmpgeui	r4,r4,4
 80089e8:	41bfff15 	stw	r6,-4(r8)
 80089ec:	203ffa1e 	bne	r4,zero,80089d8 <memset+0x9c>
 80089f0:	393fff04 	addi	r4,r7,-4
 80089f4:	2008d0ba 	srli	r4,r4,2
 80089f8:	39c000cc 	andi	r7,r7,3
 80089fc:	21000044 	addi	r4,r4,1
 8008a00:	200890ba 	slli	r4,r4,2
 8008a04:	1907883a 	add	r3,r3,r4
 8008a08:	38000426 	beq	r7,zero,8008a1c <memset+0xe0>
 8008a0c:	19cf883a 	add	r7,r3,r7
 8008a10:	18c00044 	addi	r3,r3,1
 8008a14:	197fffc5 	stb	r5,-1(r3)
 8008a18:	38fffd1e 	bne	r7,r3,8008a10 <memset+0xd4>
 8008a1c:	f800283a 	ret
 8008a20:	2007883a 	mov	r3,r4
 8008a24:	300f883a 	mov	r7,r6
 8008a28:	003fd306 	br	8008978 <memset+0x3c>

08008a2c <_Balloc>:
 8008a2c:	20801317 	ldw	r2,76(r4)
 8008a30:	defffc04 	addi	sp,sp,-16
 8008a34:	dc400115 	stw	r17,4(sp)
 8008a38:	dc000015 	stw	r16,0(sp)
 8008a3c:	dfc00315 	stw	ra,12(sp)
 8008a40:	dc800215 	stw	r18,8(sp)
 8008a44:	2021883a 	mov	r16,r4
 8008a48:	2823883a 	mov	r17,r5
 8008a4c:	10000e26 	beq	r2,zero,8008a88 <_Balloc+0x5c>
 8008a50:	880690ba 	slli	r3,r17,2
 8008a54:	10c7883a 	add	r3,r2,r3
 8008a58:	18800017 	ldw	r2,0(r3)
 8008a5c:	10001126 	beq	r2,zero,8008aa4 <_Balloc+0x78>
 8008a60:	11000017 	ldw	r4,0(r2)
 8008a64:	19000015 	stw	r4,0(r3)
 8008a68:	10000415 	stw	zero,16(r2)
 8008a6c:	10000315 	stw	zero,12(r2)
 8008a70:	dfc00317 	ldw	ra,12(sp)
 8008a74:	dc800217 	ldw	r18,8(sp)
 8008a78:	dc400117 	ldw	r17,4(sp)
 8008a7c:	dc000017 	ldw	r16,0(sp)
 8008a80:	dec00404 	addi	sp,sp,16
 8008a84:	f800283a 	ret
 8008a88:	01800844 	movi	r6,33
 8008a8c:	01400104 	movi	r5,4
 8008a90:	800bc840 	call	800bc84 <_calloc_r>
 8008a94:	80801315 	stw	r2,76(r16)
 8008a98:	103fed1e 	bne	r2,zero,8008a50 <_Balloc+0x24>
 8008a9c:	0005883a 	mov	r2,zero
 8008aa0:	003ff306 	br	8008a70 <_Balloc+0x44>
 8008aa4:	04800044 	movi	r18,1
 8008aa8:	9464983a 	sll	r18,r18,r17
 8008aac:	01400044 	movi	r5,1
 8008ab0:	8009883a 	mov	r4,r16
 8008ab4:	91800144 	addi	r6,r18,5
 8008ab8:	300c90ba 	slli	r6,r6,2
 8008abc:	800bc840 	call	800bc84 <_calloc_r>
 8008ac0:	103ff626 	beq	r2,zero,8008a9c <_Balloc+0x70>
 8008ac4:	14400115 	stw	r17,4(r2)
 8008ac8:	14800215 	stw	r18,8(r2)
 8008acc:	003fe606 	br	8008a68 <_Balloc+0x3c>

08008ad0 <_Bfree>:
 8008ad0:	28000726 	beq	r5,zero,8008af0 <_Bfree+0x20>
 8008ad4:	28c00117 	ldw	r3,4(r5)
 8008ad8:	20801317 	ldw	r2,76(r4)
 8008adc:	180690ba 	slli	r3,r3,2
 8008ae0:	10c5883a 	add	r2,r2,r3
 8008ae4:	10c00017 	ldw	r3,0(r2)
 8008ae8:	28c00015 	stw	r3,0(r5)
 8008aec:	11400015 	stw	r5,0(r2)
 8008af0:	f800283a 	ret

08008af4 <__multadd>:
 8008af4:	defff704 	addi	sp,sp,-36
 8008af8:	dc800215 	stw	r18,8(sp)
 8008afc:	2c800417 	ldw	r18,16(r5)
 8008b00:	ddc00715 	stw	r23,28(sp)
 8008b04:	dd800615 	stw	r22,24(sp)
 8008b08:	dd400515 	stw	r21,20(sp)
 8008b0c:	dd000415 	stw	r20,16(sp)
 8008b10:	dcc00315 	stw	r19,12(sp)
 8008b14:	dc400115 	stw	r17,4(sp)
 8008b18:	dfc00815 	stw	ra,32(sp)
 8008b1c:	dc000015 	stw	r16,0(sp)
 8008b20:	2827883a 	mov	r19,r5
 8008b24:	2029883a 	mov	r20,r4
 8008b28:	302b883a 	mov	r21,r6
 8008b2c:	3823883a 	mov	r17,r7
 8008b30:	2d800504 	addi	r22,r5,20
 8008b34:	002f883a 	mov	r23,zero
 8008b38:	b4000017 	ldw	r16,0(r22)
 8008b3c:	a80b883a 	mov	r5,r21
 8008b40:	b5800104 	addi	r22,r22,4
 8008b44:	813fffcc 	andi	r4,r16,65535
 8008b48:	8002c500 	call	8002c50 <__mulsi3>
 8008b4c:	8008d43a 	srli	r4,r16,16
 8008b50:	a80b883a 	mov	r5,r21
 8008b54:	1461883a 	add	r16,r2,r17
 8008b58:	8002c500 	call	8002c50 <__mulsi3>
 8008b5c:	800ed43a 	srli	r7,r16,16
 8008b60:	843fffcc 	andi	r16,r16,65535
 8008b64:	bdc00044 	addi	r23,r23,1
 8008b68:	11c5883a 	add	r2,r2,r7
 8008b6c:	1006943a 	slli	r3,r2,16
 8008b70:	1022d43a 	srli	r17,r2,16
 8008b74:	1c21883a 	add	r16,r3,r16
 8008b78:	b43fff15 	stw	r16,-4(r22)
 8008b7c:	bcbfee16 	blt	r23,r18,8008b38 <__multadd+0x44>
 8008b80:	88000826 	beq	r17,zero,8008ba4 <__multadd+0xb0>
 8008b84:	98800217 	ldw	r2,8(r19)
 8008b88:	9080120e 	bge	r18,r2,8008bd4 <__multadd+0xe0>
 8008b8c:	90800144 	addi	r2,r18,5
 8008b90:	100490ba 	slli	r2,r2,2
 8008b94:	94800044 	addi	r18,r18,1
 8008b98:	9885883a 	add	r2,r19,r2
 8008b9c:	14400015 	stw	r17,0(r2)
 8008ba0:	9c800415 	stw	r18,16(r19)
 8008ba4:	9805883a 	mov	r2,r19
 8008ba8:	dfc00817 	ldw	ra,32(sp)
 8008bac:	ddc00717 	ldw	r23,28(sp)
 8008bb0:	dd800617 	ldw	r22,24(sp)
 8008bb4:	dd400517 	ldw	r21,20(sp)
 8008bb8:	dd000417 	ldw	r20,16(sp)
 8008bbc:	dcc00317 	ldw	r19,12(sp)
 8008bc0:	dc800217 	ldw	r18,8(sp)
 8008bc4:	dc400117 	ldw	r17,4(sp)
 8008bc8:	dc000017 	ldw	r16,0(sp)
 8008bcc:	dec00904 	addi	sp,sp,36
 8008bd0:	f800283a 	ret
 8008bd4:	99400117 	ldw	r5,4(r19)
 8008bd8:	a009883a 	mov	r4,r20
 8008bdc:	29400044 	addi	r5,r5,1
 8008be0:	8008a2c0 	call	8008a2c <_Balloc>
 8008be4:	1021883a 	mov	r16,r2
 8008be8:	10001226 	beq	r2,zero,8008c34 <__multadd+0x140>
 8008bec:	99800417 	ldw	r6,16(r19)
 8008bf0:	99400304 	addi	r5,r19,12
 8008bf4:	11000304 	addi	r4,r2,12
 8008bf8:	31800084 	addi	r6,r6,2
 8008bfc:	300c90ba 	slli	r6,r6,2
 8008c00:	80087100 	call	8008710 <memcpy>
 8008c04:	98000926 	beq	r19,zero,8008c2c <__multadd+0x138>
 8008c08:	98c00117 	ldw	r3,4(r19)
 8008c0c:	a0801317 	ldw	r2,76(r20)
 8008c10:	180690ba 	slli	r3,r3,2
 8008c14:	10c5883a 	add	r2,r2,r3
 8008c18:	10c00017 	ldw	r3,0(r2)
 8008c1c:	98c00015 	stw	r3,0(r19)
 8008c20:	14c00015 	stw	r19,0(r2)
 8008c24:	8027883a 	mov	r19,r16
 8008c28:	003fd806 	br	8008b8c <__multadd+0x98>
 8008c2c:	8027883a 	mov	r19,r16
 8008c30:	003fd606 	br	8008b8c <__multadd+0x98>
 8008c34:	01c20074 	movhi	r7,2049
 8008c38:	01020074 	movhi	r4,2049
 8008c3c:	39cb6704 	addi	r7,r7,11676
 8008c40:	000d883a 	mov	r6,zero
 8008c44:	01402d44 	movi	r5,181
 8008c48:	210b7c04 	addi	r4,r4,11760
 8008c4c:	800bc0c0 	call	800bc0c <__assert_func>

08008c50 <__s2b>:
 8008c50:	defff904 	addi	sp,sp,-28
 8008c54:	dc800215 	stw	r18,8(sp)
 8008c58:	dc000015 	stw	r16,0(sp)
 8008c5c:	2025883a 	mov	r18,r4
 8008c60:	2821883a 	mov	r16,r5
 8008c64:	39000204 	addi	r4,r7,8
 8008c68:	01400244 	movi	r5,9
 8008c6c:	dcc00315 	stw	r19,12(sp)
 8008c70:	dc400115 	stw	r17,4(sp)
 8008c74:	dfc00615 	stw	ra,24(sp)
 8008c78:	3823883a 	mov	r17,r7
 8008c7c:	dd400515 	stw	r21,20(sp)
 8008c80:	dd000415 	stw	r20,16(sp)
 8008c84:	3027883a 	mov	r19,r6
 8008c88:	8002a9c0 	call	8002a9c <__divsi3>
 8008c8c:	88c00290 	cmplti	r3,r17,10
 8008c90:	1800341e 	bne	r3,zero,8008d64 <__s2b+0x114>
 8008c94:	00c00044 	movi	r3,1
 8008c98:	000b883a 	mov	r5,zero
 8008c9c:	18c7883a 	add	r3,r3,r3
 8008ca0:	29400044 	addi	r5,r5,1
 8008ca4:	18bffd16 	blt	r3,r2,8008c9c <__s2b+0x4c>
 8008ca8:	9009883a 	mov	r4,r18
 8008cac:	8008a2c0 	call	8008a2c <_Balloc>
 8008cb0:	100b883a 	mov	r5,r2
 8008cb4:	10002d26 	beq	r2,zero,8008d6c <__s2b+0x11c>
 8008cb8:	d8800717 	ldw	r2,28(sp)
 8008cbc:	28800515 	stw	r2,20(r5)
 8008cc0:	00800044 	movi	r2,1
 8008cc4:	28800415 	stw	r2,16(r5)
 8008cc8:	98800290 	cmplti	r2,r19,10
 8008ccc:	1000221e 	bne	r2,zero,8008d58 <__s2b+0x108>
 8008cd0:	85400244 	addi	r21,r16,9
 8008cd4:	a829883a 	mov	r20,r21
 8008cd8:	84e1883a 	add	r16,r16,r19
 8008cdc:	a1c00007 	ldb	r7,0(r20)
 8008ce0:	01800284 	movi	r6,10
 8008ce4:	9009883a 	mov	r4,r18
 8008ce8:	39fff404 	addi	r7,r7,-48
 8008cec:	8008af40 	call	8008af4 <__multadd>
 8008cf0:	a5000044 	addi	r20,r20,1
 8008cf4:	100b883a 	mov	r5,r2
 8008cf8:	a43ff81e 	bne	r20,r16,8008cdc <__s2b+0x8c>
 8008cfc:	9c3ffe04 	addi	r16,r19,-8
 8008d00:	ac21883a 	add	r16,r21,r16
 8008d04:	9c400a0e 	bge	r19,r17,8008d30 <__s2b+0xe0>
 8008d08:	8ce3c83a 	sub	r17,r17,r19
 8008d0c:	8463883a 	add	r17,r16,r17
 8008d10:	81c00007 	ldb	r7,0(r16)
 8008d14:	01800284 	movi	r6,10
 8008d18:	9009883a 	mov	r4,r18
 8008d1c:	39fff404 	addi	r7,r7,-48
 8008d20:	8008af40 	call	8008af4 <__multadd>
 8008d24:	84000044 	addi	r16,r16,1
 8008d28:	100b883a 	mov	r5,r2
 8008d2c:	8c3ff81e 	bne	r17,r16,8008d10 <__s2b+0xc0>
 8008d30:	2805883a 	mov	r2,r5
 8008d34:	dfc00617 	ldw	ra,24(sp)
 8008d38:	dd400517 	ldw	r21,20(sp)
 8008d3c:	dd000417 	ldw	r20,16(sp)
 8008d40:	dcc00317 	ldw	r19,12(sp)
 8008d44:	dc800217 	ldw	r18,8(sp)
 8008d48:	dc400117 	ldw	r17,4(sp)
 8008d4c:	dc000017 	ldw	r16,0(sp)
 8008d50:	dec00704 	addi	sp,sp,28
 8008d54:	f800283a 	ret
 8008d58:	84000284 	addi	r16,r16,10
 8008d5c:	04c00244 	movi	r19,9
 8008d60:	003fe806 	br	8008d04 <__s2b+0xb4>
 8008d64:	000b883a 	mov	r5,zero
 8008d68:	003fcf06 	br	8008ca8 <__s2b+0x58>
 8008d6c:	01c20074 	movhi	r7,2049
 8008d70:	01020074 	movhi	r4,2049
 8008d74:	39cb6704 	addi	r7,r7,11676
 8008d78:	000d883a 	mov	r6,zero
 8008d7c:	01403384 	movi	r5,206
 8008d80:	210b7c04 	addi	r4,r4,11760
 8008d84:	800bc0c0 	call	800bc0c <__assert_func>

08008d88 <__hi0bits>:
 8008d88:	20bfffec 	andhi	r2,r4,65535
 8008d8c:	1000131e 	bne	r2,zero,8008ddc <__hi0bits+0x54>
 8008d90:	2008943a 	slli	r4,r4,16
 8008d94:	00800404 	movi	r2,16
 8008d98:	20ffc02c 	andhi	r3,r4,65280
 8008d9c:	1800021e 	bne	r3,zero,8008da8 <__hi0bits+0x20>
 8008da0:	2008923a 	slli	r4,r4,8
 8008da4:	10800204 	addi	r2,r2,8
 8008da8:	20fc002c 	andhi	r3,r4,61440
 8008dac:	1800021e 	bne	r3,zero,8008db8 <__hi0bits+0x30>
 8008db0:	2008913a 	slli	r4,r4,4
 8008db4:	10800104 	addi	r2,r2,4
 8008db8:	20f0002c 	andhi	r3,r4,49152
 8008dbc:	1800021e 	bne	r3,zero,8008dc8 <__hi0bits+0x40>
 8008dc0:	200890ba 	slli	r4,r4,2
 8008dc4:	10800084 	addi	r2,r2,2
 8008dc8:	20000316 	blt	r4,zero,8008dd8 <__hi0bits+0x50>
 8008dcc:	2110002c 	andhi	r4,r4,16384
 8008dd0:	10800044 	addi	r2,r2,1
 8008dd4:	20000326 	beq	r4,zero,8008de4 <__hi0bits+0x5c>
 8008dd8:	f800283a 	ret
 8008ddc:	0005883a 	mov	r2,zero
 8008de0:	003fed06 	br	8008d98 <__hi0bits+0x10>
 8008de4:	00800804 	movi	r2,32
 8008de8:	f800283a 	ret

08008dec <__lo0bits>:
 8008dec:	20c00017 	ldw	r3,0(r4)
 8008df0:	188001cc 	andi	r2,r3,7
 8008df4:	10000826 	beq	r2,zero,8008e18 <__lo0bits+0x2c>
 8008df8:	1880004c 	andi	r2,r3,1
 8008dfc:	10001f1e 	bne	r2,zero,8008e7c <__lo0bits+0x90>
 8008e00:	1880008c 	andi	r2,r3,2
 8008e04:	10002126 	beq	r2,zero,8008e8c <__lo0bits+0xa0>
 8008e08:	1806d07a 	srli	r3,r3,1
 8008e0c:	00800044 	movi	r2,1
 8008e10:	20c00015 	stw	r3,0(r4)
 8008e14:	f800283a 	ret
 8008e18:	18bfffcc 	andi	r2,r3,65535
 8008e1c:	10001426 	beq	r2,zero,8008e70 <__lo0bits+0x84>
 8008e20:	0005883a 	mov	r2,zero
 8008e24:	19403fcc 	andi	r5,r3,255
 8008e28:	2800021e 	bne	r5,zero,8008e34 <__lo0bits+0x48>
 8008e2c:	1806d23a 	srli	r3,r3,8
 8008e30:	10800204 	addi	r2,r2,8
 8008e34:	194003cc 	andi	r5,r3,15
 8008e38:	2800021e 	bne	r5,zero,8008e44 <__lo0bits+0x58>
 8008e3c:	1806d13a 	srli	r3,r3,4
 8008e40:	10800104 	addi	r2,r2,4
 8008e44:	194000cc 	andi	r5,r3,3
 8008e48:	2800021e 	bne	r5,zero,8008e54 <__lo0bits+0x68>
 8008e4c:	1806d0ba 	srli	r3,r3,2
 8008e50:	10800084 	addi	r2,r2,2
 8008e54:	1940004c 	andi	r5,r3,1
 8008e58:	2800031e 	bne	r5,zero,8008e68 <__lo0bits+0x7c>
 8008e5c:	1806d07a 	srli	r3,r3,1
 8008e60:	10800044 	addi	r2,r2,1
 8008e64:	18000726 	beq	r3,zero,8008e84 <__lo0bits+0x98>
 8008e68:	20c00015 	stw	r3,0(r4)
 8008e6c:	f800283a 	ret
 8008e70:	1806d43a 	srli	r3,r3,16
 8008e74:	00800404 	movi	r2,16
 8008e78:	003fea06 	br	8008e24 <__lo0bits+0x38>
 8008e7c:	0005883a 	mov	r2,zero
 8008e80:	f800283a 	ret
 8008e84:	00800804 	movi	r2,32
 8008e88:	f800283a 	ret
 8008e8c:	1806d0ba 	srli	r3,r3,2
 8008e90:	00800084 	movi	r2,2
 8008e94:	20c00015 	stw	r3,0(r4)
 8008e98:	f800283a 	ret

08008e9c <__i2b>:
 8008e9c:	20c01317 	ldw	r3,76(r4)
 8008ea0:	defffd04 	addi	sp,sp,-12
 8008ea4:	dc400115 	stw	r17,4(sp)
 8008ea8:	dc000015 	stw	r16,0(sp)
 8008eac:	dfc00215 	stw	ra,8(sp)
 8008eb0:	2021883a 	mov	r16,r4
 8008eb4:	2823883a 	mov	r17,r5
 8008eb8:	18000d26 	beq	r3,zero,8008ef0 <__i2b+0x54>
 8008ebc:	18800117 	ldw	r2,4(r3)
 8008ec0:	10001826 	beq	r2,zero,8008f24 <__i2b+0x88>
 8008ec4:	11000017 	ldw	r4,0(r2)
 8008ec8:	19000115 	stw	r4,4(r3)
 8008ecc:	00c00044 	movi	r3,1
 8008ed0:	10000315 	stw	zero,12(r2)
 8008ed4:	14400515 	stw	r17,20(r2)
 8008ed8:	10c00415 	stw	r3,16(r2)
 8008edc:	dfc00217 	ldw	ra,8(sp)
 8008ee0:	dc400117 	ldw	r17,4(sp)
 8008ee4:	dc000017 	ldw	r16,0(sp)
 8008ee8:	dec00304 	addi	sp,sp,12
 8008eec:	f800283a 	ret
 8008ef0:	01800844 	movi	r6,33
 8008ef4:	01400104 	movi	r5,4
 8008ef8:	800bc840 	call	800bc84 <_calloc_r>
 8008efc:	80801315 	stw	r2,76(r16)
 8008f00:	1007883a 	mov	r3,r2
 8008f04:	103fed1e 	bne	r2,zero,8008ebc <__i2b+0x20>
 8008f08:	01c20074 	movhi	r7,2049
 8008f0c:	01020074 	movhi	r4,2049
 8008f10:	39cb6704 	addi	r7,r7,11676
 8008f14:	000d883a 	mov	r6,zero
 8008f18:	01405004 	movi	r5,320
 8008f1c:	210b7c04 	addi	r4,r4,11760
 8008f20:	800bc0c0 	call	800bc0c <__assert_func>
 8008f24:	01800704 	movi	r6,28
 8008f28:	01400044 	movi	r5,1
 8008f2c:	8009883a 	mov	r4,r16
 8008f30:	800bc840 	call	800bc84 <_calloc_r>
 8008f34:	103ff426 	beq	r2,zero,8008f08 <__i2b+0x6c>
 8008f38:	00c00044 	movi	r3,1
 8008f3c:	10c00115 	stw	r3,4(r2)
 8008f40:	00c00084 	movi	r3,2
 8008f44:	10c00215 	stw	r3,8(r2)
 8008f48:	003fe006 	br	8008ecc <__i2b+0x30>

08008f4c <__multiply>:
 8008f4c:	defff004 	addi	sp,sp,-64
 8008f50:	dd800c15 	stw	r22,48(sp)
 8008f54:	dc400715 	stw	r17,28(sp)
 8008f58:	2d800417 	ldw	r22,16(r5)
 8008f5c:	34400417 	ldw	r17,16(r6)
 8008f60:	dc800815 	stw	r18,32(sp)
 8008f64:	dc000615 	stw	r16,24(sp)
 8008f68:	dfc00f15 	stw	ra,60(sp)
 8008f6c:	df000e15 	stw	fp,56(sp)
 8008f70:	ddc00d15 	stw	r23,52(sp)
 8008f74:	dd400b15 	stw	r21,44(sp)
 8008f78:	dd000a15 	stw	r20,40(sp)
 8008f7c:	dcc00915 	stw	r19,36(sp)
 8008f80:	2825883a 	mov	r18,r5
 8008f84:	3021883a 	mov	r16,r6
 8008f88:	b4400516 	blt	r22,r17,8008fa0 <__multiply+0x54>
 8008f8c:	8807883a 	mov	r3,r17
 8008f90:	2821883a 	mov	r16,r5
 8008f94:	b023883a 	mov	r17,r22
 8008f98:	3025883a 	mov	r18,r6
 8008f9c:	182d883a 	mov	r22,r3
 8008fa0:	80800217 	ldw	r2,8(r16)
 8008fa4:	8d87883a 	add	r3,r17,r22
 8008fa8:	d8c00015 	stw	r3,0(sp)
 8008fac:	81400117 	ldw	r5,4(r16)
 8008fb0:	10c0010e 	bge	r2,r3,8008fb8 <__multiply+0x6c>
 8008fb4:	29400044 	addi	r5,r5,1
 8008fb8:	8008a2c0 	call	8008a2c <_Balloc>
 8008fbc:	d8800515 	stw	r2,20(sp)
 8008fc0:	10008c26 	beq	r2,zero,80091f4 <__multiply+0x2a8>
 8008fc4:	d8800017 	ldw	r2,0(sp)
 8008fc8:	102690ba 	slli	r19,r2,2
 8008fcc:	d8800517 	ldw	r2,20(sp)
 8008fd0:	15000504 	addi	r20,r2,20
 8008fd4:	a4c5883a 	add	r2,r20,r19
 8008fd8:	d8800115 	stw	r2,4(sp)
 8008fdc:	a0800a2e 	bgeu	r20,r2,8009008 <__multiply+0xbc>
 8008fe0:	d8800117 	ldw	r2,4(sp)
 8008fe4:	d8c00517 	ldw	r3,20(sp)
 8008fe8:	000b883a 	mov	r5,zero
 8008fec:	a009883a 	mov	r4,r20
 8008ff0:	10cdc83a 	sub	r6,r2,r3
 8008ff4:	31bffac4 	addi	r6,r6,-21
 8008ff8:	300cd0ba 	srli	r6,r6,2
 8008ffc:	31800044 	addi	r6,r6,1
 8009000:	300c90ba 	slli	r6,r6,2
 8009004:	800893c0 	call	800893c <memset>
 8009008:	b02c90ba 	slli	r22,r22,2
 800900c:	882290ba 	slli	r17,r17,2
 8009010:	94800504 	addi	r18,r18,20
 8009014:	80800504 	addi	r2,r16,20
 8009018:	9587883a 	add	r3,r18,r22
 800901c:	d8800315 	stw	r2,12(sp)
 8009020:	d8c00215 	stw	r3,8(sp)
 8009024:	1463883a 	add	r17,r2,r17
 8009028:	90c0542e 	bgeu	r18,r3,800917c <__multiply+0x230>
 800902c:	80800544 	addi	r2,r16,21
 8009030:	88806d36 	bltu	r17,r2,80091e8 <__multiply+0x29c>
 8009034:	8c05c83a 	sub	r2,r17,r16
 8009038:	10bffac4 	addi	r2,r2,-21
 800903c:	1004d0ba 	srli	r2,r2,2
 8009040:	10800044 	addi	r2,r2,1
 8009044:	100490ba 	slli	r2,r2,2
 8009048:	d8800415 	stw	r2,16(sp)
 800904c:	00000606 	br	8009068 <__multiply+0x11c>
 8009050:	102ad43a 	srli	r21,r2,16
 8009054:	a800271e 	bne	r21,zero,80090f4 <__multiply+0x1a8>
 8009058:	d8800217 	ldw	r2,8(sp)
 800905c:	94800104 	addi	r18,r18,4
 8009060:	a5000104 	addi	r20,r20,4
 8009064:	9080452e 	bgeu	r18,r2,800917c <__multiply+0x230>
 8009068:	90800017 	ldw	r2,0(r18)
 800906c:	15ffffcc 	andi	r23,r2,65535
 8009070:	b83ff726 	beq	r23,zero,8009050 <__multiply+0x104>
 8009074:	dd400317 	ldw	r21,12(sp)
 8009078:	a02d883a 	mov	r22,r20
 800907c:	0027883a 	mov	r19,zero
 8009080:	af000017 	ldw	fp,0(r21)
 8009084:	b4000017 	ldw	r16,0(r22)
 8009088:	b80b883a 	mov	r5,r23
 800908c:	e13fffcc 	andi	r4,fp,65535
 8009090:	8002c500 	call	8002c50 <__mulsi3>
 8009094:	e008d43a 	srli	r4,fp,16
 8009098:	823fffcc 	andi	r8,r16,65535
 800909c:	1205883a 	add	r2,r2,r8
 80090a0:	b80b883a 	mov	r5,r23
 80090a4:	14e7883a 	add	r19,r2,r19
 80090a8:	8020d43a 	srli	r16,r16,16
 80090ac:	8002c500 	call	8002c50 <__mulsi3>
 80090b0:	9808d43a 	srli	r4,r19,16
 80090b4:	1405883a 	add	r2,r2,r16
 80090b8:	98ffffcc 	andi	r3,r19,65535
 80090bc:	1105883a 	add	r2,r2,r4
 80090c0:	1008943a 	slli	r4,r2,16
 80090c4:	b5800104 	addi	r22,r22,4
 80090c8:	ad400104 	addi	r21,r21,4
 80090cc:	20c6b03a 	or	r3,r4,r3
 80090d0:	b0ffff15 	stw	r3,-4(r22)
 80090d4:	1026d43a 	srli	r19,r2,16
 80090d8:	ac7fe936 	bltu	r21,r17,8009080 <__multiply+0x134>
 80090dc:	d8800417 	ldw	r2,16(sp)
 80090e0:	a085883a 	add	r2,r20,r2
 80090e4:	14c00015 	stw	r19,0(r2)
 80090e8:	90800017 	ldw	r2,0(r18)
 80090ec:	102ad43a 	srli	r21,r2,16
 80090f0:	a83fd926 	beq	r21,zero,8009058 <__multiply+0x10c>
 80090f4:	a5c00017 	ldw	r23,0(r20)
 80090f8:	dd800317 	ldw	r22,12(sp)
 80090fc:	a027883a 	mov	r19,r20
 8009100:	b821883a 	mov	r16,r23
 8009104:	0039883a 	mov	fp,zero
 8009108:	b100000b 	ldhu	r4,0(r22)
 800910c:	a80b883a 	mov	r5,r21
 8009110:	9cc00104 	addi	r19,r19,4
 8009114:	8002c500 	call	8002c50 <__mulsi3>
 8009118:	800cd43a 	srli	r6,r16,16
 800911c:	b8ffffcc 	andi	r3,r23,65535
 8009120:	b5800104 	addi	r22,r22,4
 8009124:	118d883a 	add	r6,r2,r6
 8009128:	3739883a 	add	fp,r6,fp
 800912c:	e004943a 	slli	r2,fp,16
 8009130:	9c000017 	ldw	r16,0(r19)
 8009134:	a80b883a 	mov	r5,r21
 8009138:	10c6b03a 	or	r3,r2,r3
 800913c:	98ffff15 	stw	r3,-4(r19)
 8009140:	b13fff8b 	ldhu	r4,-2(r22)
 8009144:	8002c500 	call	8002c50 <__mulsi3>
 8009148:	e00cd43a 	srli	r6,fp,16
 800914c:	80ffffcc 	andi	r3,r16,65535
 8009150:	10c7883a 	add	r3,r2,r3
 8009154:	19af883a 	add	r23,r3,r6
 8009158:	b838d43a 	srli	fp,r23,16
 800915c:	b47fea36 	bltu	r22,r17,8009108 <__multiply+0x1bc>
 8009160:	d8800417 	ldw	r2,16(sp)
 8009164:	94800104 	addi	r18,r18,4
 8009168:	a085883a 	add	r2,r20,r2
 800916c:	15c00015 	stw	r23,0(r2)
 8009170:	d8800217 	ldw	r2,8(sp)
 8009174:	a5000104 	addi	r20,r20,4
 8009178:	90bfbb36 	bltu	r18,r2,8009068 <__multiply+0x11c>
 800917c:	d8800017 	ldw	r2,0(sp)
 8009180:	00800516 	blt	zero,r2,8009198 <__multiply+0x24c>
 8009184:	00000906 	br	80091ac <__multiply+0x260>
 8009188:	d8800017 	ldw	r2,0(sp)
 800918c:	10bfffc4 	addi	r2,r2,-1
 8009190:	d8800015 	stw	r2,0(sp)
 8009194:	10000526 	beq	r2,zero,80091ac <__multiply+0x260>
 8009198:	d8c00117 	ldw	r3,4(sp)
 800919c:	18bfff17 	ldw	r2,-4(r3)
 80091a0:	18ffff04 	addi	r3,r3,-4
 80091a4:	d8c00115 	stw	r3,4(sp)
 80091a8:	103ff726 	beq	r2,zero,8009188 <__multiply+0x23c>
 80091ac:	d8800517 	ldw	r2,20(sp)
 80091b0:	d8c00017 	ldw	r3,0(sp)
 80091b4:	10c00415 	stw	r3,16(r2)
 80091b8:	dfc00f17 	ldw	ra,60(sp)
 80091bc:	df000e17 	ldw	fp,56(sp)
 80091c0:	ddc00d17 	ldw	r23,52(sp)
 80091c4:	dd800c17 	ldw	r22,48(sp)
 80091c8:	dd400b17 	ldw	r21,44(sp)
 80091cc:	dd000a17 	ldw	r20,40(sp)
 80091d0:	dcc00917 	ldw	r19,36(sp)
 80091d4:	dc800817 	ldw	r18,32(sp)
 80091d8:	dc400717 	ldw	r17,28(sp)
 80091dc:	dc000617 	ldw	r16,24(sp)
 80091e0:	dec01004 	addi	sp,sp,64
 80091e4:	f800283a 	ret
 80091e8:	00800104 	movi	r2,4
 80091ec:	d8800415 	stw	r2,16(sp)
 80091f0:	003f9d06 	br	8009068 <__multiply+0x11c>
 80091f4:	01c20074 	movhi	r7,2049
 80091f8:	01020074 	movhi	r4,2049
 80091fc:	39cb6704 	addi	r7,r7,11676
 8009200:	000d883a 	mov	r6,zero
 8009204:	01405744 	movi	r5,349
 8009208:	210b7c04 	addi	r4,r4,11760
 800920c:	800bc0c0 	call	800bc0c <__assert_func>

08009210 <__pow5mult>:
 8009210:	defffb04 	addi	sp,sp,-20
 8009214:	dcc00315 	stw	r19,12(sp)
 8009218:	dc000015 	stw	r16,0(sp)
 800921c:	dfc00415 	stw	ra,16(sp)
 8009220:	dc800215 	stw	r18,8(sp)
 8009224:	dc400115 	stw	r17,4(sp)
 8009228:	308000cc 	andi	r2,r6,3
 800922c:	3021883a 	mov	r16,r6
 8009230:	2027883a 	mov	r19,r4
 8009234:	10002d1e 	bne	r2,zero,80092ec <__pow5mult+0xdc>
 8009238:	2825883a 	mov	r18,r5
 800923c:	8021d0ba 	srai	r16,r16,2
 8009240:	80001926 	beq	r16,zero,80092a8 <__pow5mult+0x98>
 8009244:	9c401217 	ldw	r17,72(r19)
 8009248:	8800061e 	bne	r17,zero,8009264 <__pow5mult+0x54>
 800924c:	00002f06 	br	800930c <__pow5mult+0xfc>
 8009250:	8021d07a 	srai	r16,r16,1
 8009254:	80001426 	beq	r16,zero,80092a8 <__pow5mult+0x98>
 8009258:	88800017 	ldw	r2,0(r17)
 800925c:	10001a26 	beq	r2,zero,80092c8 <__pow5mult+0xb8>
 8009260:	1023883a 	mov	r17,r2
 8009264:	8080004c 	andi	r2,r16,1
 8009268:	103ff926 	beq	r2,zero,8009250 <__pow5mult+0x40>
 800926c:	880d883a 	mov	r6,r17
 8009270:	900b883a 	mov	r5,r18
 8009274:	9809883a 	mov	r4,r19
 8009278:	8008f4c0 	call	8008f4c <__multiply>
 800927c:	90001926 	beq	r18,zero,80092e4 <__pow5mult+0xd4>
 8009280:	91000117 	ldw	r4,4(r18)
 8009284:	98c01317 	ldw	r3,76(r19)
 8009288:	8021d07a 	srai	r16,r16,1
 800928c:	200890ba 	slli	r4,r4,2
 8009290:	1907883a 	add	r3,r3,r4
 8009294:	19000017 	ldw	r4,0(r3)
 8009298:	91000015 	stw	r4,0(r18)
 800929c:	1c800015 	stw	r18,0(r3)
 80092a0:	1025883a 	mov	r18,r2
 80092a4:	803fec1e 	bne	r16,zero,8009258 <__pow5mult+0x48>
 80092a8:	9005883a 	mov	r2,r18
 80092ac:	dfc00417 	ldw	ra,16(sp)
 80092b0:	dcc00317 	ldw	r19,12(sp)
 80092b4:	dc800217 	ldw	r18,8(sp)
 80092b8:	dc400117 	ldw	r17,4(sp)
 80092bc:	dc000017 	ldw	r16,0(sp)
 80092c0:	dec00504 	addi	sp,sp,20
 80092c4:	f800283a 	ret
 80092c8:	880d883a 	mov	r6,r17
 80092cc:	880b883a 	mov	r5,r17
 80092d0:	9809883a 	mov	r4,r19
 80092d4:	8008f4c0 	call	8008f4c <__multiply>
 80092d8:	88800015 	stw	r2,0(r17)
 80092dc:	10000015 	stw	zero,0(r2)
 80092e0:	003fdf06 	br	8009260 <__pow5mult+0x50>
 80092e4:	1025883a 	mov	r18,r2
 80092e8:	003fd906 	br	8009250 <__pow5mult+0x40>
 80092ec:	100490ba 	slli	r2,r2,2
 80092f0:	00c20074 	movhi	r3,2049
 80092f4:	000f883a 	mov	r7,zero
 80092f8:	10c7883a 	add	r3,r2,r3
 80092fc:	198b8b17 	ldw	r6,11820(r3)
 8009300:	8008af40 	call	8008af4 <__multadd>
 8009304:	1025883a 	mov	r18,r2
 8009308:	003fcc06 	br	800923c <__pow5mult+0x2c>
 800930c:	01400044 	movi	r5,1
 8009310:	9809883a 	mov	r4,r19
 8009314:	8008a2c0 	call	8008a2c <_Balloc>
 8009318:	1023883a 	mov	r17,r2
 800931c:	10000726 	beq	r2,zero,800933c <__pow5mult+0x12c>
 8009320:	00809c44 	movi	r2,625
 8009324:	88800515 	stw	r2,20(r17)
 8009328:	00800044 	movi	r2,1
 800932c:	88800415 	stw	r2,16(r17)
 8009330:	9c401215 	stw	r17,72(r19)
 8009334:	88000015 	stw	zero,0(r17)
 8009338:	003fca06 	br	8009264 <__pow5mult+0x54>
 800933c:	01c20074 	movhi	r7,2049
 8009340:	01020074 	movhi	r4,2049
 8009344:	39cb6704 	addi	r7,r7,11676
 8009348:	000d883a 	mov	r6,zero
 800934c:	01405004 	movi	r5,320
 8009350:	210b7c04 	addi	r4,r4,11760
 8009354:	800bc0c0 	call	800bc0c <__assert_func>

08009358 <__lshift>:
 8009358:	defff804 	addi	sp,sp,-32
 800935c:	dd800615 	stw	r22,24(sp)
 8009360:	dc000015 	stw	r16,0(sp)
 8009364:	302dd17a 	srai	r22,r6,5
 8009368:	2c000417 	ldw	r16,16(r5)
 800936c:	28800217 	ldw	r2,8(r5)
 8009370:	dd000415 	stw	r20,16(sp)
 8009374:	b421883a 	add	r16,r22,r16
 8009378:	dcc00315 	stw	r19,12(sp)
 800937c:	dc800215 	stw	r18,8(sp)
 8009380:	dc400115 	stw	r17,4(sp)
 8009384:	dfc00715 	stw	ra,28(sp)
 8009388:	dd400515 	stw	r21,20(sp)
 800938c:	85000044 	addi	r20,r16,1
 8009390:	2827883a 	mov	r19,r5
 8009394:	3025883a 	mov	r18,r6
 8009398:	29400117 	ldw	r5,4(r5)
 800939c:	2023883a 	mov	r17,r4
 80093a0:	1500030e 	bge	r2,r20,80093b0 <__lshift+0x58>
 80093a4:	1085883a 	add	r2,r2,r2
 80093a8:	29400044 	addi	r5,r5,1
 80093ac:	153ffd16 	blt	r2,r20,80093a4 <__lshift+0x4c>
 80093b0:	8809883a 	mov	r4,r17
 80093b4:	8008a2c0 	call	8008a2c <_Balloc>
 80093b8:	102b883a 	mov	r21,r2
 80093bc:	10004126 	beq	r2,zero,80094c4 <__lshift+0x16c>
 80093c0:	11000504 	addi	r4,r2,20
 80093c4:	0580050e 	bge	zero,r22,80093dc <__lshift+0x84>
 80093c8:	b02c90ba 	slli	r22,r22,2
 80093cc:	000b883a 	mov	r5,zero
 80093d0:	b00d883a 	mov	r6,r22
 80093d4:	800893c0 	call	800893c <memset>
 80093d8:	1589883a 	add	r4,r2,r22
 80093dc:	9a000417 	ldw	r8,16(r19)
 80093e0:	98c00504 	addi	r3,r19,20
 80093e4:	948007cc 	andi	r18,r18,31
 80093e8:	401090ba 	slli	r8,r8,2
 80093ec:	1a11883a 	add	r8,r3,r8
 80093f0:	90002c26 	beq	r18,zero,80094a4 <__lshift+0x14c>
 80093f4:	01400804 	movi	r5,32
 80093f8:	2c8bc83a 	sub	r5,r5,r18
 80093fc:	2005883a 	mov	r2,r4
 8009400:	000f883a 	mov	r7,zero
 8009404:	19800017 	ldw	r6,0(r3)
 8009408:	10800104 	addi	r2,r2,4
 800940c:	18c00104 	addi	r3,r3,4
 8009410:	348c983a 	sll	r6,r6,r18
 8009414:	31ccb03a 	or	r6,r6,r7
 8009418:	11bfff15 	stw	r6,-4(r2)
 800941c:	19bfff17 	ldw	r6,-4(r3)
 8009420:	314ed83a 	srl	r7,r6,r5
 8009424:	1a3ff736 	bltu	r3,r8,8009404 <__lshift+0xac>
 8009428:	98800544 	addi	r2,r19,21
 800942c:	40802336 	bltu	r8,r2,80094bc <__lshift+0x164>
 8009430:	44c7c83a 	sub	r3,r8,r19
 8009434:	18fffac4 	addi	r3,r3,-21
 8009438:	1806d0ba 	srli	r3,r3,2
 800943c:	18c00044 	addi	r3,r3,1
 8009440:	180690ba 	slli	r3,r3,2
 8009444:	20c9883a 	add	r4,r4,r3
 8009448:	21c00015 	stw	r7,0(r4)
 800944c:	38000126 	beq	r7,zero,8009454 <__lshift+0xfc>
 8009450:	a021883a 	mov	r16,r20
 8009454:	ac000415 	stw	r16,16(r21)
 8009458:	98000726 	beq	r19,zero,8009478 <__lshift+0x120>
 800945c:	98c00117 	ldw	r3,4(r19)
 8009460:	88801317 	ldw	r2,76(r17)
 8009464:	180690ba 	slli	r3,r3,2
 8009468:	10c5883a 	add	r2,r2,r3
 800946c:	10c00017 	ldw	r3,0(r2)
 8009470:	98c00015 	stw	r3,0(r19)
 8009474:	14c00015 	stw	r19,0(r2)
 8009478:	a805883a 	mov	r2,r21
 800947c:	dfc00717 	ldw	ra,28(sp)
 8009480:	dd800617 	ldw	r22,24(sp)
 8009484:	dd400517 	ldw	r21,20(sp)
 8009488:	dd000417 	ldw	r20,16(sp)
 800948c:	dcc00317 	ldw	r19,12(sp)
 8009490:	dc800217 	ldw	r18,8(sp)
 8009494:	dc400117 	ldw	r17,4(sp)
 8009498:	dc000017 	ldw	r16,0(sp)
 800949c:	dec00804 	addi	sp,sp,32
 80094a0:	f800283a 	ret
 80094a4:	18800017 	ldw	r2,0(r3)
 80094a8:	18c00104 	addi	r3,r3,4
 80094ac:	21000104 	addi	r4,r4,4
 80094b0:	20bfff15 	stw	r2,-4(r4)
 80094b4:	1a3ffb36 	bltu	r3,r8,80094a4 <__lshift+0x14c>
 80094b8:	003fe606 	br	8009454 <__lshift+0xfc>
 80094bc:	00c00104 	movi	r3,4
 80094c0:	003fe006 	br	8009444 <__lshift+0xec>
 80094c4:	01c20074 	movhi	r7,2049
 80094c8:	01020074 	movhi	r4,2049
 80094cc:	39cb6704 	addi	r7,r7,11676
 80094d0:	000d883a 	mov	r6,zero
 80094d4:	01407644 	movi	r5,473
 80094d8:	210b7c04 	addi	r4,r4,11760
 80094dc:	800bc0c0 	call	800bc0c <__assert_func>

080094e0 <__mcmp>:
 80094e0:	21800417 	ldw	r6,16(r4)
 80094e4:	28c00417 	ldw	r3,16(r5)
 80094e8:	30c5c83a 	sub	r2,r6,r3
 80094ec:	30c00e1e 	bne	r6,r3,8009528 <__mcmp+0x48>
 80094f0:	180690ba 	slli	r3,r3,2
 80094f4:	21c00504 	addi	r7,r4,20
 80094f8:	29400504 	addi	r5,r5,20
 80094fc:	38c9883a 	add	r4,r7,r3
 8009500:	28c7883a 	add	r3,r5,r3
 8009504:	00000106 	br	800950c <__mcmp+0x2c>
 8009508:	3900082e 	bgeu	r7,r4,800952c <__mcmp+0x4c>
 800950c:	21bfff17 	ldw	r6,-4(r4)
 8009510:	197fff17 	ldw	r5,-4(r3)
 8009514:	213fff04 	addi	r4,r4,-4
 8009518:	18ffff04 	addi	r3,r3,-4
 800951c:	317ffa26 	beq	r6,r5,8009508 <__mcmp+0x28>
 8009520:	3140032e 	bgeu	r6,r5,8009530 <__mcmp+0x50>
 8009524:	00bfffc4 	movi	r2,-1
 8009528:	f800283a 	ret
 800952c:	f800283a 	ret
 8009530:	00800044 	movi	r2,1
 8009534:	f800283a 	ret

08009538 <__mdiff>:
 8009538:	28800417 	ldw	r2,16(r5)
 800953c:	30c00417 	ldw	r3,16(r6)
 8009540:	defffc04 	addi	sp,sp,-16
 8009544:	dc800215 	stw	r18,8(sp)
 8009548:	dc400115 	stw	r17,4(sp)
 800954c:	dc000015 	stw	r16,0(sp)
 8009550:	dfc00315 	stw	ra,12(sp)
 8009554:	2823883a 	mov	r17,r5
 8009558:	3021883a 	mov	r16,r6
 800955c:	10e5c83a 	sub	r18,r2,r3
 8009560:	10c0641e 	bne	r2,r3,80096f4 <__mdiff+0x1bc>
 8009564:	180c90ba 	slli	r6,r3,2
 8009568:	29400504 	addi	r5,r5,20
 800956c:	80c00504 	addi	r3,r16,20
 8009570:	2985883a 	add	r2,r5,r6
 8009574:	1987883a 	add	r3,r3,r6
 8009578:	00000106 	br	8009580 <__mdiff+0x48>
 800957c:	2880642e 	bgeu	r5,r2,8009710 <__mdiff+0x1d8>
 8009580:	11bfff17 	ldw	r6,-4(r2)
 8009584:	19ffff17 	ldw	r7,-4(r3)
 8009588:	10bfff04 	addi	r2,r2,-4
 800958c:	18ffff04 	addi	r3,r3,-4
 8009590:	31fffa26 	beq	r6,r7,800957c <__mdiff+0x44>
 8009594:	31c05236 	bltu	r6,r7,80096e0 <__mdiff+0x1a8>
 8009598:	89400117 	ldw	r5,4(r17)
 800959c:	8008a2c0 	call	8008a2c <_Balloc>
 80095a0:	10006226 	beq	r2,zero,800972c <__mdiff+0x1f4>
 80095a4:	8a400417 	ldw	r9,16(r17)
 80095a8:	83000417 	ldw	r12,16(r16)
 80095ac:	8ac00504 	addi	r11,r17,20
 80095b0:	481090ba 	slli	r8,r9,2
 80095b4:	601890ba 	slli	r12,r12,2
 80095b8:	81800504 	addi	r6,r16,20
 80095bc:	13400504 	addi	r13,r2,20
 80095c0:	14800315 	stw	r18,12(r2)
 80095c4:	5a11883a 	add	r8,r11,r8
 80095c8:	3319883a 	add	r12,r6,r12
 80095cc:	681d883a 	mov	r14,r13
 80095d0:	5815883a 	mov	r10,r11
 80095d4:	0007883a 	mov	r3,zero
 80095d8:	51000017 	ldw	r4,0(r10)
 80095dc:	31c00017 	ldw	r7,0(r6)
 80095e0:	73800104 	addi	r14,r14,4
 80095e4:	217fffcc 	andi	r5,r4,65535
 80095e8:	28cb883a 	add	r5,r5,r3
 80095ec:	38ffffcc 	andi	r3,r7,65535
 80095f0:	28cbc83a 	sub	r5,r5,r3
 80095f4:	380ed43a 	srli	r7,r7,16
 80095f8:	2006d43a 	srli	r3,r4,16
 80095fc:	2809d43a 	srai	r4,r5,16
 8009600:	297fffcc 	andi	r5,r5,65535
 8009604:	19c7c83a 	sub	r3,r3,r7
 8009608:	1907883a 	add	r3,r3,r4
 800960c:	1808943a 	slli	r4,r3,16
 8009610:	31800104 	addi	r6,r6,4
 8009614:	1807d43a 	srai	r3,r3,16
 8009618:	214ab03a 	or	r5,r4,r5
 800961c:	717fff15 	stw	r5,-4(r14)
 8009620:	52800104 	addi	r10,r10,4
 8009624:	333fec36 	bltu	r6,r12,80095d8 <__mdiff+0xa0>
 8009628:	640fc83a 	sub	r7,r12,r16
 800962c:	39fffac4 	addi	r7,r7,-21
 8009630:	84000544 	addi	r16,r16,21
 8009634:	380ed0ba 	srli	r7,r7,2
 8009638:	64003336 	bltu	r12,r16,8009708 <__mdiff+0x1d0>
 800963c:	380890ba 	slli	r4,r7,2
 8009640:	6909883a 	add	r4,r13,r4
 8009644:	64002e36 	bltu	r12,r16,8009700 <__mdiff+0x1c8>
 8009648:	39800044 	addi	r6,r7,1
 800964c:	300c90ba 	slli	r6,r6,2
 8009650:	5997883a 	add	r11,r11,r6
 8009654:	699b883a 	add	r13,r13,r6
 8009658:	5a00152e 	bgeu	r11,r8,80096b0 <__mdiff+0x178>
 800965c:	680f883a 	mov	r7,r13
 8009660:	580d883a 	mov	r6,r11
 8009664:	31000017 	ldw	r4,0(r6)
 8009668:	39c00104 	addi	r7,r7,4
 800966c:	31800104 	addi	r6,r6,4
 8009670:	217fffcc 	andi	r5,r4,65535
 8009674:	28cb883a 	add	r5,r5,r3
 8009678:	2815d43a 	srai	r10,r5,16
 800967c:	2006d43a 	srli	r3,r4,16
 8009680:	297fffcc 	andi	r5,r5,65535
 8009684:	1a87883a 	add	r3,r3,r10
 8009688:	1814943a 	slli	r10,r3,16
 800968c:	1807d43a 	srai	r3,r3,16
 8009690:	514ab03a 	or	r5,r10,r5
 8009694:	397fff15 	stw	r5,-4(r7)
 8009698:	323ff236 	bltu	r6,r8,8009664 <__mdiff+0x12c>
 800969c:	413fffc4 	addi	r4,r8,-1
 80096a0:	22c9c83a 	sub	r4,r4,r11
 80096a4:	2008d0ba 	srli	r4,r4,2
 80096a8:	200890ba 	slli	r4,r4,2
 80096ac:	6909883a 	add	r4,r13,r4
 80096b0:	2800041e 	bne	r5,zero,80096c4 <__mdiff+0x18c>
 80096b4:	20ffff17 	ldw	r3,-4(r4)
 80096b8:	4a7fffc4 	addi	r9,r9,-1
 80096bc:	213fff04 	addi	r4,r4,-4
 80096c0:	183ffc26 	beq	r3,zero,80096b4 <__mdiff+0x17c>
 80096c4:	12400415 	stw	r9,16(r2)
 80096c8:	dfc00317 	ldw	ra,12(sp)
 80096cc:	dc800217 	ldw	r18,8(sp)
 80096d0:	dc400117 	ldw	r17,4(sp)
 80096d4:	dc000017 	ldw	r16,0(sp)
 80096d8:	dec00404 	addi	sp,sp,16
 80096dc:	f800283a 	ret
 80096e0:	8805883a 	mov	r2,r17
 80096e4:	04800044 	movi	r18,1
 80096e8:	8023883a 	mov	r17,r16
 80096ec:	1021883a 	mov	r16,r2
 80096f0:	003fa906 	br	8009598 <__mdiff+0x60>
 80096f4:	903ffa16 	blt	r18,zero,80096e0 <__mdiff+0x1a8>
 80096f8:	0025883a 	mov	r18,zero
 80096fc:	003fa606 	br	8009598 <__mdiff+0x60>
 8009700:	01800104 	movi	r6,4
 8009704:	003fd206 	br	8009650 <__mdiff+0x118>
 8009708:	0009883a 	mov	r4,zero
 800970c:	003fcc06 	br	8009640 <__mdiff+0x108>
 8009710:	000b883a 	mov	r5,zero
 8009714:	8008a2c0 	call	8008a2c <_Balloc>
 8009718:	10000b26 	beq	r2,zero,8009748 <__mdiff+0x210>
 800971c:	00c00044 	movi	r3,1
 8009720:	10c00415 	stw	r3,16(r2)
 8009724:	10000515 	stw	zero,20(r2)
 8009728:	003fe706 	br	80096c8 <__mdiff+0x190>
 800972c:	01c20074 	movhi	r7,2049
 8009730:	01020074 	movhi	r4,2049
 8009734:	39cb6704 	addi	r7,r7,11676
 8009738:	000d883a 	mov	r6,zero
 800973c:	01409004 	movi	r5,576
 8009740:	210b7c04 	addi	r4,r4,11760
 8009744:	800bc0c0 	call	800bc0c <__assert_func>
 8009748:	01c20074 	movhi	r7,2049
 800974c:	01020074 	movhi	r4,2049
 8009750:	39cb6704 	addi	r7,r7,11676
 8009754:	000d883a 	mov	r6,zero
 8009758:	01408c84 	movi	r5,562
 800975c:	210b7c04 	addi	r4,r4,11760
 8009760:	800bc0c0 	call	800bc0c <__assert_func>

08009764 <__ulp>:
 8009764:	28dffc2c 	andhi	r3,r5,32752
 8009768:	017f3034 	movhi	r5,64704
 800976c:	1947883a 	add	r3,r3,r5
 8009770:	00c0020e 	bge	zero,r3,800977c <__ulp+0x18>
 8009774:	0005883a 	mov	r2,zero
 8009778:	f800283a 	ret
 800977c:	00c7c83a 	sub	r3,zero,r3
 8009780:	1807d53a 	srai	r3,r3,20
 8009784:	18800508 	cmpgei	r2,r3,20
 8009788:	1000041e 	bne	r2,zero,800979c <__ulp+0x38>
 800978c:	00800234 	movhi	r2,8
 8009790:	10c7d83a 	sra	r3,r2,r3
 8009794:	0005883a 	mov	r2,zero
 8009798:	f800283a 	ret
 800979c:	193ffb04 	addi	r4,r3,-20
 80097a0:	208007c8 	cmpgei	r2,r4,31
 80097a4:	0007883a 	mov	r3,zero
 80097a8:	1000031e 	bne	r2,zero,80097b8 <__ulp+0x54>
 80097ac:	00a00034 	movhi	r2,32768
 80097b0:	1104d83a 	srl	r2,r2,r4
 80097b4:	f800283a 	ret
 80097b8:	00800044 	movi	r2,1
 80097bc:	f800283a 	ret

080097c0 <__b2d>:
 80097c0:	defffa04 	addi	sp,sp,-24
 80097c4:	dc400115 	stw	r17,4(sp)
 80097c8:	24400417 	ldw	r17,16(r4)
 80097cc:	dc000015 	stw	r16,0(sp)
 80097d0:	24000504 	addi	r16,r4,20
 80097d4:	882290ba 	slli	r17,r17,2
 80097d8:	dc800215 	stw	r18,8(sp)
 80097dc:	dd000415 	stw	r20,16(sp)
 80097e0:	8463883a 	add	r17,r16,r17
 80097e4:	8cbfff17 	ldw	r18,-4(r17)
 80097e8:	dcc00315 	stw	r19,12(sp)
 80097ec:	dfc00515 	stw	ra,20(sp)
 80097f0:	9009883a 	mov	r4,r18
 80097f4:	2827883a 	mov	r19,r5
 80097f8:	8008d880 	call	8008d88 <__hi0bits>
 80097fc:	00c00804 	movi	r3,32
 8009800:	1889c83a 	sub	r4,r3,r2
 8009804:	99000015 	stw	r4,0(r19)
 8009808:	110002c8 	cmpgei	r4,r2,11
 800980c:	8d3fff04 	addi	r20,r17,-4
 8009810:	20002026 	beq	r4,zero,8009894 <__b2d+0xd4>
 8009814:	10bffd44 	addi	r2,r2,-11
 8009818:	85000e2e 	bgeu	r16,r20,8009854 <__b2d+0x94>
 800981c:	897ffe17 	ldw	r5,-8(r17)
 8009820:	10001226 	beq	r2,zero,800986c <__b2d+0xac>
 8009824:	1889c83a 	sub	r4,r3,r2
 8009828:	90a4983a 	sll	r18,r18,r2
 800982c:	2906d83a 	srl	r3,r5,r4
 8009830:	89bffe04 	addi	r6,r17,-8
 8009834:	2884983a 	sll	r2,r5,r2
 8009838:	90e4b03a 	or	r18,r18,r3
 800983c:	90cffc34 	orhi	r3,r18,16368
 8009840:	81800c2e 	bgeu	r16,r6,8009874 <__b2d+0xb4>
 8009844:	897ffd17 	ldw	r5,-12(r17)
 8009848:	2908d83a 	srl	r4,r5,r4
 800984c:	1104b03a 	or	r2,r2,r4
 8009850:	00000806 	br	8009874 <__b2d+0xb4>
 8009854:	10000426 	beq	r2,zero,8009868 <__b2d+0xa8>
 8009858:	90a4983a 	sll	r18,r18,r2
 800985c:	0005883a 	mov	r2,zero
 8009860:	90cffc34 	orhi	r3,r18,16368
 8009864:	00000306 	br	8009874 <__b2d+0xb4>
 8009868:	000b883a 	mov	r5,zero
 800986c:	90cffc34 	orhi	r3,r18,16368
 8009870:	2805883a 	mov	r2,r5
 8009874:	dfc00517 	ldw	ra,20(sp)
 8009878:	dd000417 	ldw	r20,16(sp)
 800987c:	dcc00317 	ldw	r19,12(sp)
 8009880:	dc800217 	ldw	r18,8(sp)
 8009884:	dc400117 	ldw	r17,4(sp)
 8009888:	dc000017 	ldw	r16,0(sp)
 800988c:	dec00604 	addi	sp,sp,24
 8009890:	f800283a 	ret
 8009894:	014002c4 	movi	r5,11
 8009898:	2889c83a 	sub	r4,r5,r2
 800989c:	9106d83a 	srl	r3,r18,r4
 80098a0:	18cffc34 	orhi	r3,r3,16368
 80098a4:	85000536 	bltu	r16,r20,80098bc <__b2d+0xfc>
 80098a8:	000b883a 	mov	r5,zero
 80098ac:	10800544 	addi	r2,r2,21
 80098b0:	9084983a 	sll	r2,r18,r2
 80098b4:	1144b03a 	or	r2,r2,r5
 80098b8:	003fee06 	br	8009874 <__b2d+0xb4>
 80098bc:	897ffe17 	ldw	r5,-8(r17)
 80098c0:	290ad83a 	srl	r5,r5,r4
 80098c4:	003ff906 	br	80098ac <__b2d+0xec>

080098c8 <__d2b>:
 80098c8:	defff804 	addi	sp,sp,-32
 80098cc:	dd000615 	stw	r20,24(sp)
 80098d0:	2829883a 	mov	r20,r5
 80098d4:	01400044 	movi	r5,1
 80098d8:	dcc00515 	stw	r19,20(sp)
 80098dc:	dc000215 	stw	r16,8(sp)
 80098e0:	dfc00715 	stw	ra,28(sp)
 80098e4:	dc800415 	stw	r18,16(sp)
 80098e8:	dc400315 	stw	r17,12(sp)
 80098ec:	3021883a 	mov	r16,r6
 80098f0:	3827883a 	mov	r19,r7
 80098f4:	8008a2c0 	call	8008a2c <_Balloc>
 80098f8:	10004526 	beq	r2,zero,8009a10 <__d2b+0x148>
 80098fc:	8024d53a 	srli	r18,r16,20
 8009900:	01800434 	movhi	r6,16
 8009904:	31bfffc4 	addi	r6,r6,-1
 8009908:	9481ffcc 	andi	r18,r18,2047
 800990c:	1023883a 	mov	r17,r2
 8009910:	81a0703a 	and	r16,r16,r6
 8009914:	90000126 	beq	r18,zero,800991c <__d2b+0x54>
 8009918:	84000434 	orhi	r16,r16,16
 800991c:	dc000115 	stw	r16,4(sp)
 8009920:	a0002226 	beq	r20,zero,80099ac <__d2b+0xe4>
 8009924:	d809883a 	mov	r4,sp
 8009928:	dd000015 	stw	r20,0(sp)
 800992c:	8008dec0 	call	8008dec <__lo0bits>
 8009930:	d8c00117 	ldw	r3,4(sp)
 8009934:	10003326 	beq	r2,zero,8009a04 <__d2b+0x13c>
 8009938:	01000804 	movi	r4,32
 800993c:	2089c83a 	sub	r4,r4,r2
 8009940:	1908983a 	sll	r4,r3,r4
 8009944:	d9400017 	ldw	r5,0(sp)
 8009948:	1886d83a 	srl	r3,r3,r2
 800994c:	2148b03a 	or	r4,r4,r5
 8009950:	89000515 	stw	r4,20(r17)
 8009954:	d8c00115 	stw	r3,4(sp)
 8009958:	88c00615 	stw	r3,24(r17)
 800995c:	1800271e 	bne	r3,zero,80099fc <__d2b+0x134>
 8009960:	04000044 	movi	r16,1
 8009964:	8c000415 	stw	r16,16(r17)
 8009968:	90001926 	beq	r18,zero,80099d0 <__d2b+0x108>
 800996c:	00c00d44 	movi	r3,53
 8009970:	94bef344 	addi	r18,r18,-1075
 8009974:	90a5883a 	add	r18,r18,r2
 8009978:	1885c83a 	sub	r2,r3,r2
 800997c:	d8c00817 	ldw	r3,32(sp)
 8009980:	9c800015 	stw	r18,0(r19)
 8009984:	18800015 	stw	r2,0(r3)
 8009988:	8805883a 	mov	r2,r17
 800998c:	dfc00717 	ldw	ra,28(sp)
 8009990:	dd000617 	ldw	r20,24(sp)
 8009994:	dcc00517 	ldw	r19,20(sp)
 8009998:	dc800417 	ldw	r18,16(sp)
 800999c:	dc400317 	ldw	r17,12(sp)
 80099a0:	dc000217 	ldw	r16,8(sp)
 80099a4:	dec00804 	addi	sp,sp,32
 80099a8:	f800283a 	ret
 80099ac:	d9000104 	addi	r4,sp,4
 80099b0:	8008dec0 	call	8008dec <__lo0bits>
 80099b4:	00c00044 	movi	r3,1
 80099b8:	88c00415 	stw	r3,16(r17)
 80099bc:	d8c00117 	ldw	r3,4(sp)
 80099c0:	10800804 	addi	r2,r2,32
 80099c4:	04000044 	movi	r16,1
 80099c8:	88c00515 	stw	r3,20(r17)
 80099cc:	903fe71e 	bne	r18,zero,800996c <__d2b+0xa4>
 80099d0:	800690ba 	slli	r3,r16,2
 80099d4:	10bef384 	addi	r2,r2,-1074
 80099d8:	98800015 	stw	r2,0(r19)
 80099dc:	88c5883a 	add	r2,r17,r3
 80099e0:	11000417 	ldw	r4,16(r2)
 80099e4:	8020917a 	slli	r16,r16,5
 80099e8:	8008d880 	call	8008d88 <__hi0bits>
 80099ec:	80a1c83a 	sub	r16,r16,r2
 80099f0:	d8800817 	ldw	r2,32(sp)
 80099f4:	14000015 	stw	r16,0(r2)
 80099f8:	003fe306 	br	8009988 <__d2b+0xc0>
 80099fc:	04000084 	movi	r16,2
 8009a00:	003fd806 	br	8009964 <__d2b+0x9c>
 8009a04:	d9000017 	ldw	r4,0(sp)
 8009a08:	89000515 	stw	r4,20(r17)
 8009a0c:	003fd206 	br	8009958 <__d2b+0x90>
 8009a10:	01c20074 	movhi	r7,2049
 8009a14:	01020074 	movhi	r4,2049
 8009a18:	39cb6704 	addi	r7,r7,11676
 8009a1c:	000d883a 	mov	r6,zero
 8009a20:	0140c284 	movi	r5,778
 8009a24:	210b7c04 	addi	r4,r4,11760
 8009a28:	800bc0c0 	call	800bc0c <__assert_func>

08009a2c <__ratio>:
 8009a2c:	defff904 	addi	sp,sp,-28
 8009a30:	dc400315 	stw	r17,12(sp)
 8009a34:	2823883a 	mov	r17,r5
 8009a38:	d80b883a 	mov	r5,sp
 8009a3c:	dfc00615 	stw	ra,24(sp)
 8009a40:	dcc00515 	stw	r19,20(sp)
 8009a44:	dc800415 	stw	r18,16(sp)
 8009a48:	2027883a 	mov	r19,r4
 8009a4c:	dc000215 	stw	r16,8(sp)
 8009a50:	80097c00 	call	80097c0 <__b2d>
 8009a54:	d9400104 	addi	r5,sp,4
 8009a58:	8809883a 	mov	r4,r17
 8009a5c:	1025883a 	mov	r18,r2
 8009a60:	1821883a 	mov	r16,r3
 8009a64:	80097c00 	call	80097c0 <__b2d>
 8009a68:	89000417 	ldw	r4,16(r17)
 8009a6c:	9a000417 	ldw	r8,16(r19)
 8009a70:	d9400117 	ldw	r5,4(sp)
 8009a74:	100d883a 	mov	r6,r2
 8009a78:	4111c83a 	sub	r8,r8,r4
 8009a7c:	d9000017 	ldw	r4,0(sp)
 8009a80:	4010917a 	slli	r8,r8,5
 8009a84:	180f883a 	mov	r7,r3
 8009a88:	2149c83a 	sub	r4,r4,r5
 8009a8c:	4111883a 	add	r8,r8,r4
 8009a90:	02000c0e 	bge	zero,r8,8009ac4 <__ratio+0x98>
 8009a94:	4010953a 	slli	r8,r8,20
 8009a98:	4421883a 	add	r16,r8,r16
 8009a9c:	9009883a 	mov	r4,r18
 8009aa0:	800b883a 	mov	r5,r16
 8009aa4:	800e02c0 	call	800e02c <__divdf3>
 8009aa8:	dfc00617 	ldw	ra,24(sp)
 8009aac:	dcc00517 	ldw	r19,20(sp)
 8009ab0:	dc800417 	ldw	r18,16(sp)
 8009ab4:	dc400317 	ldw	r17,12(sp)
 8009ab8:	dc000217 	ldw	r16,8(sp)
 8009abc:	dec00704 	addi	sp,sp,28
 8009ac0:	f800283a 	ret
 8009ac4:	4010953a 	slli	r8,r8,20
 8009ac8:	1a0fc83a 	sub	r7,r3,r8
 8009acc:	003ff306 	br	8009a9c <__ratio+0x70>

08009ad0 <_mprec_log10>:
 8009ad0:	defffe04 	addi	sp,sp,-8
 8009ad4:	dc000015 	stw	r16,0(sp)
 8009ad8:	dfc00115 	stw	ra,4(sp)
 8009adc:	20800608 	cmpgei	r2,r4,24
 8009ae0:	2021883a 	mov	r16,r4
 8009ae4:	10000f26 	beq	r2,zero,8009b24 <_mprec_log10+0x54>
 8009ae8:	0009883a 	mov	r4,zero
 8009aec:	014ffc34 	movhi	r5,16368
 8009af0:	000d883a 	mov	r6,zero
 8009af4:	01d00934 	movhi	r7,16420
 8009af8:	800ebac0 	call	800ebac <__muldf3>
 8009afc:	843fffc4 	addi	r16,r16,-1
 8009b00:	1009883a 	mov	r4,r2
 8009b04:	180b883a 	mov	r5,r3
 8009b08:	803ff91e 	bne	r16,zero,8009af0 <_mprec_log10+0x20>
 8009b0c:	2005883a 	mov	r2,r4
 8009b10:	2807883a 	mov	r3,r5
 8009b14:	dfc00117 	ldw	ra,4(sp)
 8009b18:	dc000017 	ldw	r16,0(sp)
 8009b1c:	dec00204 	addi	sp,sp,8
 8009b20:	f800283a 	ret
 8009b24:	202090fa 	slli	r16,r4,3
 8009b28:	00820074 	movhi	r2,2049
 8009b2c:	108ba304 	addi	r2,r2,11916
 8009b30:	1421883a 	add	r16,r2,r16
 8009b34:	81000017 	ldw	r4,0(r16)
 8009b38:	81400117 	ldw	r5,4(r16)
 8009b3c:	003ff306 	br	8009b0c <_mprec_log10+0x3c>

08009b40 <__copybits>:
 8009b40:	297fffc4 	addi	r5,r5,-1
 8009b44:	280fd17a 	srai	r7,r5,5
 8009b48:	31400417 	ldw	r5,16(r6)
 8009b4c:	30800504 	addi	r2,r6,20
 8009b50:	39c00044 	addi	r7,r7,1
 8009b54:	280a90ba 	slli	r5,r5,2
 8009b58:	380e90ba 	slli	r7,r7,2
 8009b5c:	114b883a 	add	r5,r2,r5
 8009b60:	21cf883a 	add	r7,r4,r7
 8009b64:	11400c2e 	bgeu	r2,r5,8009b98 <__copybits+0x58>
 8009b68:	2007883a 	mov	r3,r4
 8009b6c:	12000017 	ldw	r8,0(r2)
 8009b70:	10800104 	addi	r2,r2,4
 8009b74:	18c00104 	addi	r3,r3,4
 8009b78:	1a3fff15 	stw	r8,-4(r3)
 8009b7c:	117ffb36 	bltu	r2,r5,8009b6c <__copybits+0x2c>
 8009b80:	2985c83a 	sub	r2,r5,r6
 8009b84:	10bffac4 	addi	r2,r2,-21
 8009b88:	1004d0ba 	srli	r2,r2,2
 8009b8c:	10800044 	addi	r2,r2,1
 8009b90:	100490ba 	slli	r2,r2,2
 8009b94:	2089883a 	add	r4,r4,r2
 8009b98:	21c0072e 	bgeu	r4,r7,8009bb8 <__copybits+0x78>
 8009b9c:	39bfffc4 	addi	r6,r7,-1
 8009ba0:	310dc83a 	sub	r6,r6,r4
 8009ba4:	300cd0ba 	srli	r6,r6,2
 8009ba8:	000b883a 	mov	r5,zero
 8009bac:	31800044 	addi	r6,r6,1
 8009bb0:	300c90ba 	slli	r6,r6,2
 8009bb4:	800893c1 	jmpi	800893c <memset>
 8009bb8:	f800283a 	ret

08009bbc <__any_on>:
 8009bbc:	20c00417 	ldw	r3,16(r4)
 8009bc0:	280dd17a 	srai	r6,r5,5
 8009bc4:	21000504 	addi	r4,r4,20
 8009bc8:	1980080e 	bge	r3,r6,8009bec <__any_on+0x30>
 8009bcc:	180490ba 	slli	r2,r3,2
 8009bd0:	2085883a 	add	r2,r4,r2
 8009bd4:	20800f2e 	bgeu	r4,r2,8009c14 <__any_on+0x58>
 8009bd8:	10ffff17 	ldw	r3,-4(r2)
 8009bdc:	10bfff04 	addi	r2,r2,-4
 8009be0:	183ffc26 	beq	r3,zero,8009bd4 <__any_on+0x18>
 8009be4:	00800044 	movi	r2,1
 8009be8:	f800283a 	ret
 8009bec:	300490ba 	slli	r2,r6,2
 8009bf0:	2085883a 	add	r2,r4,r2
 8009bf4:	30fff70e 	bge	r6,r3,8009bd4 <__any_on+0x18>
 8009bf8:	294007cc 	andi	r5,r5,31
 8009bfc:	283ff526 	beq	r5,zero,8009bd4 <__any_on+0x18>
 8009c00:	11800017 	ldw	r6,0(r2)
 8009c04:	3146d83a 	srl	r3,r6,r5
 8009c08:	194a983a 	sll	r5,r3,r5
 8009c0c:	317ff51e 	bne	r6,r5,8009be4 <__any_on+0x28>
 8009c10:	003ff006 	br	8009bd4 <__any_on+0x18>
 8009c14:	0005883a 	mov	r2,zero
 8009c18:	f800283a 	ret

08009c1c <_putc_r>:
 8009c1c:	defffc04 	addi	sp,sp,-16
 8009c20:	dc400215 	stw	r17,8(sp)
 8009c24:	dfc00315 	stw	ra,12(sp)
 8009c28:	2023883a 	mov	r17,r4
 8009c2c:	20000226 	beq	r4,zero,8009c38 <_putc_r+0x1c>
 8009c30:	20800e17 	ldw	r2,56(r4)
 8009c34:	10000e26 	beq	r2,zero,8009c70 <_putc_r+0x54>
 8009c38:	30800217 	ldw	r2,8(r6)
 8009c3c:	10bfffc4 	addi	r2,r2,-1
 8009c40:	30800215 	stw	r2,8(r6)
 8009c44:	10001316 	blt	r2,zero,8009c94 <_putc_r+0x78>
 8009c48:	30800017 	ldw	r2,0(r6)
 8009c4c:	11400005 	stb	r5,0(r2)
 8009c50:	30800017 	ldw	r2,0(r6)
 8009c54:	10c00044 	addi	r3,r2,1
 8009c58:	30c00015 	stw	r3,0(r6)
 8009c5c:	10800003 	ldbu	r2,0(r2)
 8009c60:	dfc00317 	ldw	ra,12(sp)
 8009c64:	dc400217 	ldw	r17,8(sp)
 8009c68:	dec00404 	addi	sp,sp,16
 8009c6c:	f800283a 	ret
 8009c70:	d9800115 	stw	r6,4(sp)
 8009c74:	d9400015 	stw	r5,0(sp)
 8009c78:	80071900 	call	8007190 <__sinit>
 8009c7c:	d9800117 	ldw	r6,4(sp)
 8009c80:	d9400017 	ldw	r5,0(sp)
 8009c84:	30800217 	ldw	r2,8(r6)
 8009c88:	10bfffc4 	addi	r2,r2,-1
 8009c8c:	30800215 	stw	r2,8(r6)
 8009c90:	103fed0e 	bge	r2,zero,8009c48 <_putc_r+0x2c>
 8009c94:	30c00617 	ldw	r3,24(r6)
 8009c98:	10c00e16 	blt	r2,r3,8009cd4 <_putc_r+0xb8>
 8009c9c:	30800017 	ldw	r2,0(r6)
 8009ca0:	11400005 	stb	r5,0(r2)
 8009ca4:	30c00017 	ldw	r3,0(r6)
 8009ca8:	18800003 	ldbu	r2,0(r3)
 8009cac:	108002a0 	cmpeqi	r2,r2,10
 8009cb0:	1000071e 	bne	r2,zero,8009cd0 <_putc_r+0xb4>
 8009cb4:	18800044 	addi	r2,r3,1
 8009cb8:	30800015 	stw	r2,0(r6)
 8009cbc:	18800003 	ldbu	r2,0(r3)
 8009cc0:	dfc00317 	ldw	ra,12(sp)
 8009cc4:	dc400217 	ldw	r17,8(sp)
 8009cc8:	dec00404 	addi	sp,sp,16
 8009ccc:	f800283a 	ret
 8009cd0:	01400284 	movi	r5,10
 8009cd4:	8809883a 	mov	r4,r17
 8009cd8:	dfc00317 	ldw	ra,12(sp)
 8009cdc:	dc400217 	ldw	r17,8(sp)
 8009ce0:	dec00404 	addi	sp,sp,16
 8009ce4:	800b9f01 	jmpi	800b9f0 <__swbuf_r>

08009ce8 <putc>:
 8009ce8:	defffc04 	addi	sp,sp,-16
 8009cec:	00820074 	movhi	r2,2049
 8009cf0:	dc800215 	stw	r18,8(sp)
 8009cf4:	1493d817 	ldw	r18,20320(r2)
 8009cf8:	dc400115 	stw	r17,4(sp)
 8009cfc:	dfc00315 	stw	ra,12(sp)
 8009d00:	2023883a 	mov	r17,r4
 8009d04:	90000226 	beq	r18,zero,8009d10 <putc+0x28>
 8009d08:	90800e17 	ldw	r2,56(r18)
 8009d0c:	10000f26 	beq	r2,zero,8009d4c <putc+0x64>
 8009d10:	28800217 	ldw	r2,8(r5)
 8009d14:	10bfffc4 	addi	r2,r2,-1
 8009d18:	28800215 	stw	r2,8(r5)
 8009d1c:	10001316 	blt	r2,zero,8009d6c <putc+0x84>
 8009d20:	28800017 	ldw	r2,0(r5)
 8009d24:	14400005 	stb	r17,0(r2)
 8009d28:	28800017 	ldw	r2,0(r5)
 8009d2c:	10c00044 	addi	r3,r2,1
 8009d30:	28c00015 	stw	r3,0(r5)
 8009d34:	10800003 	ldbu	r2,0(r2)
 8009d38:	dfc00317 	ldw	ra,12(sp)
 8009d3c:	dc800217 	ldw	r18,8(sp)
 8009d40:	dc400117 	ldw	r17,4(sp)
 8009d44:	dec00404 	addi	sp,sp,16
 8009d48:	f800283a 	ret
 8009d4c:	9009883a 	mov	r4,r18
 8009d50:	d9400015 	stw	r5,0(sp)
 8009d54:	80071900 	call	8007190 <__sinit>
 8009d58:	d9400017 	ldw	r5,0(sp)
 8009d5c:	28800217 	ldw	r2,8(r5)
 8009d60:	10bfffc4 	addi	r2,r2,-1
 8009d64:	28800215 	stw	r2,8(r5)
 8009d68:	103fed0e 	bge	r2,zero,8009d20 <putc+0x38>
 8009d6c:	28c00617 	ldw	r3,24(r5)
 8009d70:	10c00a16 	blt	r2,r3,8009d9c <putc+0xb4>
 8009d74:	28800017 	ldw	r2,0(r5)
 8009d78:	14400005 	stb	r17,0(r2)
 8009d7c:	28c00017 	ldw	r3,0(r5)
 8009d80:	18800003 	ldbu	r2,0(r3)
 8009d84:	108002a0 	cmpeqi	r2,r2,10
 8009d88:	10000c1e 	bne	r2,zero,8009dbc <putc+0xd4>
 8009d8c:	18800044 	addi	r2,r3,1
 8009d90:	28800015 	stw	r2,0(r5)
 8009d94:	18800003 	ldbu	r2,0(r3)
 8009d98:	003fe706 	br	8009d38 <putc+0x50>
 8009d9c:	280d883a 	mov	r6,r5
 8009da0:	880b883a 	mov	r5,r17
 8009da4:	9009883a 	mov	r4,r18
 8009da8:	dfc00317 	ldw	ra,12(sp)
 8009dac:	dc800217 	ldw	r18,8(sp)
 8009db0:	dc400117 	ldw	r17,4(sp)
 8009db4:	dec00404 	addi	sp,sp,16
 8009db8:	800b9f01 	jmpi	800b9f0 <__swbuf_r>
 8009dbc:	280d883a 	mov	r6,r5
 8009dc0:	01400284 	movi	r5,10
 8009dc4:	003ff706 	br	8009da4 <putc+0xbc>

08009dc8 <_realloc_r>:
 8009dc8:	defff504 	addi	sp,sp,-44
 8009dcc:	dc800315 	stw	r18,12(sp)
 8009dd0:	dfc00a15 	stw	ra,40(sp)
 8009dd4:	df000915 	stw	fp,36(sp)
 8009dd8:	ddc00815 	stw	r23,32(sp)
 8009ddc:	dd800715 	stw	r22,28(sp)
 8009de0:	dd400615 	stw	r21,24(sp)
 8009de4:	dd000515 	stw	r20,20(sp)
 8009de8:	dcc00415 	stw	r19,16(sp)
 8009dec:	dc400215 	stw	r17,8(sp)
 8009df0:	dc000115 	stw	r16,4(sp)
 8009df4:	3025883a 	mov	r18,r6
 8009df8:	28008b26 	beq	r5,zero,800a028 <_realloc_r+0x260>
 8009dfc:	2821883a 	mov	r16,r5
 8009e00:	2027883a 	mov	r19,r4
 8009e04:	944002c4 	addi	r17,r18,11
 8009e08:	80105e80 	call	80105e8 <__malloc_lock>
 8009e0c:	888005f0 	cmpltui	r2,r17,23
 8009e10:	1000521e 	bne	r2,zero,8009f5c <_realloc_r+0x194>
 8009e14:	017ffe04 	movi	r5,-8
 8009e18:	8962703a 	and	r17,r17,r5
 8009e1c:	8807883a 	mov	r3,r17
 8009e20:	88005116 	blt	r17,zero,8009f68 <_realloc_r+0x1a0>
 8009e24:	8c805036 	bltu	r17,r18,8009f68 <_realloc_r+0x1a0>
 8009e28:	80bfff17 	ldw	r2,-4(r16)
 8009e2c:	017fff04 	movi	r5,-4
 8009e30:	857ffe04 	addi	r21,r16,-8
 8009e34:	1168703a 	and	r20,r2,r5
 8009e38:	ad2d883a 	add	r22,r21,r20
 8009e3c:	a0c0390e 	bge	r20,r3,8009f24 <_realloc_r+0x15c>
 8009e40:	07020074 	movhi	fp,2049
 8009e44:	e70df404 	addi	fp,fp,14288
 8009e48:	e2000217 	ldw	r8,8(fp)
 8009e4c:	b1000117 	ldw	r4,4(r22)
 8009e50:	45808e26 	beq	r8,r22,800a08c <_realloc_r+0x2c4>
 8009e54:	01bfff84 	movi	r6,-2
 8009e58:	218c703a 	and	r6,r4,r6
 8009e5c:	b18d883a 	add	r6,r22,r6
 8009e60:	31800117 	ldw	r6,4(r6)
 8009e64:	3180004c 	andi	r6,r6,1
 8009e68:	30004f1e 	bne	r6,zero,8009fa8 <_realloc_r+0x1e0>
 8009e6c:	2148703a 	and	r4,r4,r5
 8009e70:	a10b883a 	add	r5,r20,r4
 8009e74:	28c0bf0e 	bge	r5,r3,800a174 <_realloc_r+0x3ac>
 8009e78:	1080004c 	andi	r2,r2,1
 8009e7c:	10004c1e 	bne	r2,zero,8009fb0 <_realloc_r+0x1e8>
 8009e80:	81fffe17 	ldw	r7,-8(r16)
 8009e84:	00bfff04 	movi	r2,-4
 8009e88:	a9cfc83a 	sub	r7,r21,r7
 8009e8c:	39400117 	ldw	r5,4(r7)
 8009e90:	288a703a 	and	r5,r5,r2
 8009e94:	b0000426 	beq	r22,zero,8009ea8 <_realloc_r+0xe0>
 8009e98:	a16f883a 	add	r23,r20,r5
 8009e9c:	b92f883a 	add	r23,r23,r4
 8009ea0:	4580bf26 	beq	r8,r22,800a1a0 <_realloc_r+0x3d8>
 8009ea4:	b8c0930e 	bge	r23,r3,800a0f4 <_realloc_r+0x32c>
 8009ea8:	38004126 	beq	r7,zero,8009fb0 <_realloc_r+0x1e8>
 8009eac:	a16f883a 	add	r23,r20,r5
 8009eb0:	b8c03f16 	blt	r23,r3,8009fb0 <_realloc_r+0x1e8>
 8009eb4:	38800317 	ldw	r2,12(r7)
 8009eb8:	38c00217 	ldw	r3,8(r7)
 8009ebc:	a1bfff04 	addi	r6,r20,-4
 8009ec0:	31400968 	cmpgeui	r5,r6,37
 8009ec4:	18800315 	stw	r2,12(r3)
 8009ec8:	10c00215 	stw	r3,8(r2)
 8009ecc:	39000204 	addi	r4,r7,8
 8009ed0:	3ded883a 	add	r22,r7,r23
 8009ed4:	2800941e 	bne	r5,zero,800a128 <_realloc_r+0x360>
 8009ed8:	30800530 	cmpltui	r2,r6,20
 8009edc:	80c00017 	ldw	r3,0(r16)
 8009ee0:	1000df1e 	bne	r2,zero,800a260 <_realloc_r+0x498>
 8009ee4:	38c00215 	stw	r3,8(r7)
 8009ee8:	80c00117 	ldw	r3,4(r16)
 8009eec:	30800728 	cmpgeui	r2,r6,28
 8009ef0:	38c00315 	stw	r3,12(r7)
 8009ef4:	1000dc1e 	bne	r2,zero,800a268 <_realloc_r+0x4a0>
 8009ef8:	80c00217 	ldw	r3,8(r16)
 8009efc:	38800404 	addi	r2,r7,16
 8009f00:	84000204 	addi	r16,r16,8
 8009f04:	10c00015 	stw	r3,0(r2)
 8009f08:	80c00117 	ldw	r3,4(r16)
 8009f0c:	b829883a 	mov	r20,r23
 8009f10:	382b883a 	mov	r21,r7
 8009f14:	10c00115 	stw	r3,4(r2)
 8009f18:	80c00217 	ldw	r3,8(r16)
 8009f1c:	2021883a 	mov	r16,r4
 8009f20:	10c00215 	stw	r3,8(r2)
 8009f24:	a9800117 	ldw	r6,4(r21)
 8009f28:	a445c83a 	sub	r2,r20,r17
 8009f2c:	10c00430 	cmpltui	r3,r2,16
 8009f30:	3180004c 	andi	r6,r6,1
 8009f34:	18004926 	beq	r3,zero,800a05c <_realloc_r+0x294>
 8009f38:	a18cb03a 	or	r6,r20,r6
 8009f3c:	a9800115 	stw	r6,4(r21)
 8009f40:	b0800117 	ldw	r2,4(r22)
 8009f44:	10800054 	ori	r2,r2,1
 8009f48:	b0800115 	stw	r2,4(r22)
 8009f4c:	9809883a 	mov	r4,r19
 8009f50:	801060c0 	call	801060c <__malloc_unlock>
 8009f54:	8025883a 	mov	r18,r16
 8009f58:	00000606 	br	8009f74 <_realloc_r+0x1ac>
 8009f5c:	04400404 	movi	r17,16
 8009f60:	00c00404 	movi	r3,16
 8009f64:	8cbfb02e 	bgeu	r17,r18,8009e28 <_realloc_r+0x60>
 8009f68:	00800304 	movi	r2,12
 8009f6c:	98800015 	stw	r2,0(r19)
 8009f70:	0025883a 	mov	r18,zero
 8009f74:	9005883a 	mov	r2,r18
 8009f78:	dfc00a17 	ldw	ra,40(sp)
 8009f7c:	df000917 	ldw	fp,36(sp)
 8009f80:	ddc00817 	ldw	r23,32(sp)
 8009f84:	dd800717 	ldw	r22,28(sp)
 8009f88:	dd400617 	ldw	r21,24(sp)
 8009f8c:	dd000517 	ldw	r20,20(sp)
 8009f90:	dcc00417 	ldw	r19,16(sp)
 8009f94:	dc800317 	ldw	r18,12(sp)
 8009f98:	dc400217 	ldw	r17,8(sp)
 8009f9c:	dc000117 	ldw	r16,4(sp)
 8009fa0:	dec00b04 	addi	sp,sp,44
 8009fa4:	f800283a 	ret
 8009fa8:	1080004c 	andi	r2,r2,1
 8009fac:	10006c26 	beq	r2,zero,800a160 <_realloc_r+0x398>
 8009fb0:	900b883a 	mov	r5,r18
 8009fb4:	9809883a 	mov	r4,r19
 8009fb8:	8007e600 	call	8007e60 <_malloc_r>
 8009fbc:	1025883a 	mov	r18,r2
 8009fc0:	10001626 	beq	r2,zero,800a01c <_realloc_r+0x254>
 8009fc4:	80bfff17 	ldw	r2,-4(r16)
 8009fc8:	013fff84 	movi	r4,-2
 8009fcc:	90fffe04 	addi	r3,r18,-8
 8009fd0:	1104703a 	and	r2,r2,r4
 8009fd4:	a885883a 	add	r2,r21,r2
 8009fd8:	10c05b26 	beq	r2,r3,800a148 <_realloc_r+0x380>
 8009fdc:	a1bfff04 	addi	r6,r20,-4
 8009fe0:	30800968 	cmpgeui	r2,r6,37
 8009fe4:	10006a1e 	bne	r2,zero,800a190 <_realloc_r+0x3c8>
 8009fe8:	30800530 	cmpltui	r2,r6,20
 8009fec:	81000017 	ldw	r4,0(r16)
 8009ff0:	10003726 	beq	r2,zero,800a0d0 <_realloc_r+0x308>
 8009ff4:	9005883a 	mov	r2,r18
 8009ff8:	8007883a 	mov	r3,r16
 8009ffc:	11000015 	stw	r4,0(r2)
 800a000:	19000117 	ldw	r4,4(r3)
 800a004:	11000115 	stw	r4,4(r2)
 800a008:	18c00217 	ldw	r3,8(r3)
 800a00c:	10c00215 	stw	r3,8(r2)
 800a010:	800b883a 	mov	r5,r16
 800a014:	9809883a 	mov	r4,r19
 800a018:	80072f40 	call	80072f4 <_free_r>
 800a01c:	9809883a 	mov	r4,r19
 800a020:	801060c0 	call	801060c <__malloc_unlock>
 800a024:	003fd306 	br	8009f74 <_realloc_r+0x1ac>
 800a028:	300b883a 	mov	r5,r6
 800a02c:	dfc00a17 	ldw	ra,40(sp)
 800a030:	df000917 	ldw	fp,36(sp)
 800a034:	ddc00817 	ldw	r23,32(sp)
 800a038:	dd800717 	ldw	r22,28(sp)
 800a03c:	dd400617 	ldw	r21,24(sp)
 800a040:	dd000517 	ldw	r20,20(sp)
 800a044:	dcc00417 	ldw	r19,16(sp)
 800a048:	dc800317 	ldw	r18,12(sp)
 800a04c:	dc400217 	ldw	r17,8(sp)
 800a050:	dc000117 	ldw	r16,4(sp)
 800a054:	dec00b04 	addi	sp,sp,44
 800a058:	8007e601 	jmpi	8007e60 <_malloc_r>
 800a05c:	344cb03a 	or	r6,r6,r17
 800a060:	a9800115 	stw	r6,4(r21)
 800a064:	ac4b883a 	add	r5,r21,r17
 800a068:	10800054 	ori	r2,r2,1
 800a06c:	28800115 	stw	r2,4(r5)
 800a070:	b0800117 	ldw	r2,4(r22)
 800a074:	29400204 	addi	r5,r5,8
 800a078:	9809883a 	mov	r4,r19
 800a07c:	10800054 	ori	r2,r2,1
 800a080:	b0800115 	stw	r2,4(r22)
 800a084:	80072f40 	call	80072f4 <_free_r>
 800a088:	003fb006 	br	8009f4c <_realloc_r+0x184>
 800a08c:	2148703a 	and	r4,r4,r5
 800a090:	a10b883a 	add	r5,r20,r4
 800a094:	89800404 	addi	r6,r17,16
 800a098:	29bf7716 	blt	r5,r6,8009e78 <_realloc_r+0xb0>
 800a09c:	ac6b883a 	add	r21,r21,r17
 800a0a0:	2c45c83a 	sub	r2,r5,r17
 800a0a4:	e5400215 	stw	r21,8(fp)
 800a0a8:	10800054 	ori	r2,r2,1
 800a0ac:	a8800115 	stw	r2,4(r21)
 800a0b0:	80bfff17 	ldw	r2,-4(r16)
 800a0b4:	9809883a 	mov	r4,r19
 800a0b8:	8025883a 	mov	r18,r16
 800a0bc:	1080004c 	andi	r2,r2,1
 800a0c0:	1462b03a 	or	r17,r2,r17
 800a0c4:	847fff15 	stw	r17,-4(r16)
 800a0c8:	801060c0 	call	801060c <__malloc_unlock>
 800a0cc:	003fa906 	br	8009f74 <_realloc_r+0x1ac>
 800a0d0:	91000015 	stw	r4,0(r18)
 800a0d4:	80c00117 	ldw	r3,4(r16)
 800a0d8:	30800728 	cmpgeui	r2,r6,28
 800a0dc:	90c00115 	stw	r3,4(r18)
 800a0e0:	1000551e 	bne	r2,zero,800a238 <_realloc_r+0x470>
 800a0e4:	81000217 	ldw	r4,8(r16)
 800a0e8:	80c00204 	addi	r3,r16,8
 800a0ec:	90800204 	addi	r2,r18,8
 800a0f0:	003fc206 	br	8009ffc <_realloc_r+0x234>
 800a0f4:	b0800317 	ldw	r2,12(r22)
 800a0f8:	b0c00217 	ldw	r3,8(r22)
 800a0fc:	a1bfff04 	addi	r6,r20,-4
 800a100:	31400968 	cmpgeui	r5,r6,37
 800a104:	18800315 	stw	r2,12(r3)
 800a108:	10c00215 	stw	r3,8(r2)
 800a10c:	38c00217 	ldw	r3,8(r7)
 800a110:	38800317 	ldw	r2,12(r7)
 800a114:	39000204 	addi	r4,r7,8
 800a118:	3ded883a 	add	r22,r7,r23
 800a11c:	18800315 	stw	r2,12(r3)
 800a120:	10c00215 	stw	r3,8(r2)
 800a124:	283f6c26 	beq	r5,zero,8009ed8 <_realloc_r+0x110>
 800a128:	800b883a 	mov	r5,r16
 800a12c:	d9c00015 	stw	r7,0(sp)
 800a130:	80088100 	call	8008810 <memmove>
 800a134:	d9c00017 	ldw	r7,0(sp)
 800a138:	1021883a 	mov	r16,r2
 800a13c:	b829883a 	mov	r20,r23
 800a140:	382b883a 	mov	r21,r7
 800a144:	003f7706 	br	8009f24 <_realloc_r+0x15c>
 800a148:	90bfff17 	ldw	r2,-4(r18)
 800a14c:	00ffff04 	movi	r3,-4
 800a150:	10c4703a 	and	r2,r2,r3
 800a154:	a0a9883a 	add	r20,r20,r2
 800a158:	ad2d883a 	add	r22,r21,r20
 800a15c:	003f7106 	br	8009f24 <_realloc_r+0x15c>
 800a160:	81fffe17 	ldw	r7,-8(r16)
 800a164:	a9cfc83a 	sub	r7,r21,r7
 800a168:	38800117 	ldw	r2,4(r7)
 800a16c:	114a703a 	and	r5,r2,r5
 800a170:	003f4d06 	br	8009ea8 <_realloc_r+0xe0>
 800a174:	b0800317 	ldw	r2,12(r22)
 800a178:	b0c00217 	ldw	r3,8(r22)
 800a17c:	2829883a 	mov	r20,r5
 800a180:	a96d883a 	add	r22,r21,r5
 800a184:	18800315 	stw	r2,12(r3)
 800a188:	10c00215 	stw	r3,8(r2)
 800a18c:	003f6506 	br	8009f24 <_realloc_r+0x15c>
 800a190:	800b883a 	mov	r5,r16
 800a194:	9009883a 	mov	r4,r18
 800a198:	80088100 	call	8008810 <memmove>
 800a19c:	003f9c06 	br	800a010 <_realloc_r+0x248>
 800a1a0:	88800404 	addi	r2,r17,16
 800a1a4:	b8bf4016 	blt	r23,r2,8009ea8 <_realloc_r+0xe0>
 800a1a8:	38800317 	ldw	r2,12(r7)
 800a1ac:	38c00217 	ldw	r3,8(r7)
 800a1b0:	a1bfff04 	addi	r6,r20,-4
 800a1b4:	31000968 	cmpgeui	r4,r6,37
 800a1b8:	18800315 	stw	r2,12(r3)
 800a1bc:	10c00215 	stw	r3,8(r2)
 800a1c0:	3c800204 	addi	r18,r7,8
 800a1c4:	20003b1e 	bne	r4,zero,800a2b4 <_realloc_r+0x4ec>
 800a1c8:	30800530 	cmpltui	r2,r6,20
 800a1cc:	80c00017 	ldw	r3,0(r16)
 800a1d0:	1000361e 	bne	r2,zero,800a2ac <_realloc_r+0x4e4>
 800a1d4:	38c00215 	stw	r3,8(r7)
 800a1d8:	80c00117 	ldw	r3,4(r16)
 800a1dc:	30800728 	cmpgeui	r2,r6,28
 800a1e0:	38c00315 	stw	r3,12(r7)
 800a1e4:	1000401e 	bne	r2,zero,800a2e8 <_realloc_r+0x520>
 800a1e8:	80c00217 	ldw	r3,8(r16)
 800a1ec:	38800404 	addi	r2,r7,16
 800a1f0:	84000204 	addi	r16,r16,8
 800a1f4:	10c00015 	stw	r3,0(r2)
 800a1f8:	80c00117 	ldw	r3,4(r16)
 800a1fc:	10c00115 	stw	r3,4(r2)
 800a200:	80c00217 	ldw	r3,8(r16)
 800a204:	10c00215 	stw	r3,8(r2)
 800a208:	3c47883a 	add	r3,r7,r17
 800a20c:	bc45c83a 	sub	r2,r23,r17
 800a210:	e0c00215 	stw	r3,8(fp)
 800a214:	10800054 	ori	r2,r2,1
 800a218:	18800115 	stw	r2,4(r3)
 800a21c:	38800117 	ldw	r2,4(r7)
 800a220:	9809883a 	mov	r4,r19
 800a224:	1080004c 	andi	r2,r2,1
 800a228:	1462b03a 	or	r17,r2,r17
 800a22c:	3c400115 	stw	r17,4(r7)
 800a230:	801060c0 	call	801060c <__malloc_unlock>
 800a234:	003f4f06 	br	8009f74 <_realloc_r+0x1ac>
 800a238:	80800217 	ldw	r2,8(r16)
 800a23c:	31800920 	cmpeqi	r6,r6,36
 800a240:	90800215 	stw	r2,8(r18)
 800a244:	80800317 	ldw	r2,12(r16)
 800a248:	90800315 	stw	r2,12(r18)
 800a24c:	81000417 	ldw	r4,16(r16)
 800a250:	30000f1e 	bne	r6,zero,800a290 <_realloc_r+0x4c8>
 800a254:	80c00404 	addi	r3,r16,16
 800a258:	90800404 	addi	r2,r18,16
 800a25c:	003f6706 	br	8009ffc <_realloc_r+0x234>
 800a260:	2005883a 	mov	r2,r4
 800a264:	003f2706 	br	8009f04 <_realloc_r+0x13c>
 800a268:	80800217 	ldw	r2,8(r16)
 800a26c:	31800920 	cmpeqi	r6,r6,36
 800a270:	38800415 	stw	r2,16(r7)
 800a274:	80800317 	ldw	r2,12(r16)
 800a278:	38800515 	stw	r2,20(r7)
 800a27c:	80c00417 	ldw	r3,16(r16)
 800a280:	3000121e 	bne	r6,zero,800a2cc <_realloc_r+0x504>
 800a284:	38800604 	addi	r2,r7,24
 800a288:	84000404 	addi	r16,r16,16
 800a28c:	003f1d06 	br	8009f04 <_realloc_r+0x13c>
 800a290:	91000415 	stw	r4,16(r18)
 800a294:	81000517 	ldw	r4,20(r16)
 800a298:	80c00604 	addi	r3,r16,24
 800a29c:	90800604 	addi	r2,r18,24
 800a2a0:	91000515 	stw	r4,20(r18)
 800a2a4:	81000617 	ldw	r4,24(r16)
 800a2a8:	003f5406 	br	8009ffc <_realloc_r+0x234>
 800a2ac:	9005883a 	mov	r2,r18
 800a2b0:	003fd006 	br	800a1f4 <_realloc_r+0x42c>
 800a2b4:	800b883a 	mov	r5,r16
 800a2b8:	9009883a 	mov	r4,r18
 800a2bc:	d9c00015 	stw	r7,0(sp)
 800a2c0:	80088100 	call	8008810 <memmove>
 800a2c4:	d9c00017 	ldw	r7,0(sp)
 800a2c8:	003fcf06 	br	800a208 <_realloc_r+0x440>
 800a2cc:	84000604 	addi	r16,r16,24
 800a2d0:	38c00615 	stw	r3,24(r7)
 800a2d4:	80ffff17 	ldw	r3,-4(r16)
 800a2d8:	38800804 	addi	r2,r7,32
 800a2dc:	38c00715 	stw	r3,28(r7)
 800a2e0:	80c00017 	ldw	r3,0(r16)
 800a2e4:	003f0706 	br	8009f04 <_realloc_r+0x13c>
 800a2e8:	80800217 	ldw	r2,8(r16)
 800a2ec:	31800920 	cmpeqi	r6,r6,36
 800a2f0:	38800415 	stw	r2,16(r7)
 800a2f4:	80800317 	ldw	r2,12(r16)
 800a2f8:	38800515 	stw	r2,20(r7)
 800a2fc:	80c00417 	ldw	r3,16(r16)
 800a300:	3000031e 	bne	r6,zero,800a310 <_realloc_r+0x548>
 800a304:	38800604 	addi	r2,r7,24
 800a308:	84000404 	addi	r16,r16,16
 800a30c:	003fb906 	br	800a1f4 <_realloc_r+0x42c>
 800a310:	84000604 	addi	r16,r16,24
 800a314:	38c00615 	stw	r3,24(r7)
 800a318:	80ffff17 	ldw	r3,-4(r16)
 800a31c:	38800804 	addi	r2,r7,32
 800a320:	38c00715 	stw	r3,28(r7)
 800a324:	80c00017 	ldw	r3,0(r16)
 800a328:	003fb206 	br	800a1f4 <_realloc_r+0x42c>

0800a32c <_sbrk_r>:
 800a32c:	defffe04 	addi	sp,sp,-8
 800a330:	dc000015 	stw	r16,0(sp)
 800a334:	00820074 	movhi	r2,2049
 800a338:	2021883a 	mov	r16,r4
 800a33c:	2809883a 	mov	r4,r5
 800a340:	dfc00115 	stw	ra,4(sp)
 800a344:	101af415 	stw	zero,27600(r2)
 800a348:	80107e40 	call	80107e4 <sbrk>
 800a34c:	10ffffd8 	cmpnei	r3,r2,-1
 800a350:	18000426 	beq	r3,zero,800a364 <_sbrk_r+0x38>
 800a354:	dfc00117 	ldw	ra,4(sp)
 800a358:	dc000017 	ldw	r16,0(sp)
 800a35c:	dec00204 	addi	sp,sp,8
 800a360:	f800283a 	ret
 800a364:	00c20074 	movhi	r3,2049
 800a368:	18daf417 	ldw	r3,27600(r3)
 800a36c:	183ff926 	beq	r3,zero,800a354 <_sbrk_r+0x28>
 800a370:	80c00015 	stw	r3,0(r16)
 800a374:	dfc00117 	ldw	ra,4(sp)
 800a378:	dc000017 	ldw	r16,0(sp)
 800a37c:	dec00204 	addi	sp,sp,8
 800a380:	f800283a 	ret

0800a384 <__sread>:
 800a384:	defffe04 	addi	sp,sp,-8
 800a388:	dc000015 	stw	r16,0(sp)
 800a38c:	2821883a 	mov	r16,r5
 800a390:	2940038f 	ldh	r5,14(r5)
 800a394:	dfc00115 	stw	ra,4(sp)
 800a398:	800c3a00 	call	800c3a0 <_read_r>
 800a39c:	10000716 	blt	r2,zero,800a3bc <__sread+0x38>
 800a3a0:	80c01417 	ldw	r3,80(r16)
 800a3a4:	1887883a 	add	r3,r3,r2
 800a3a8:	80c01415 	stw	r3,80(r16)
 800a3ac:	dfc00117 	ldw	ra,4(sp)
 800a3b0:	dc000017 	ldw	r16,0(sp)
 800a3b4:	dec00204 	addi	sp,sp,8
 800a3b8:	f800283a 	ret
 800a3bc:	80c0030b 	ldhu	r3,12(r16)
 800a3c0:	18fbffcc 	andi	r3,r3,61439
 800a3c4:	80c0030d 	sth	r3,12(r16)
 800a3c8:	dfc00117 	ldw	ra,4(sp)
 800a3cc:	dc000017 	ldw	r16,0(sp)
 800a3d0:	dec00204 	addi	sp,sp,8
 800a3d4:	f800283a 	ret

0800a3d8 <__seofread>:
 800a3d8:	0005883a 	mov	r2,zero
 800a3dc:	f800283a 	ret

0800a3e0 <__swrite>:
 800a3e0:	2880030b 	ldhu	r2,12(r5)
 800a3e4:	defffb04 	addi	sp,sp,-20
 800a3e8:	dcc00315 	stw	r19,12(sp)
 800a3ec:	dc800215 	stw	r18,8(sp)
 800a3f0:	dc400115 	stw	r17,4(sp)
 800a3f4:	dc000015 	stw	r16,0(sp)
 800a3f8:	dfc00415 	stw	ra,16(sp)
 800a3fc:	10c0400c 	andi	r3,r2,256
 800a400:	2821883a 	mov	r16,r5
 800a404:	2023883a 	mov	r17,r4
 800a408:	2940038f 	ldh	r5,14(r5)
 800a40c:	3025883a 	mov	r18,r6
 800a410:	3827883a 	mov	r19,r7
 800a414:	18000c1e 	bne	r3,zero,800a448 <__swrite+0x68>
 800a418:	10bbffcc 	andi	r2,r2,61439
 800a41c:	980f883a 	mov	r7,r19
 800a420:	900d883a 	mov	r6,r18
 800a424:	8809883a 	mov	r4,r17
 800a428:	8080030d 	sth	r2,12(r16)
 800a42c:	dfc00417 	ldw	ra,16(sp)
 800a430:	dcc00317 	ldw	r19,12(sp)
 800a434:	dc800217 	ldw	r18,8(sp)
 800a438:	dc400117 	ldw	r17,4(sp)
 800a43c:	dc000017 	ldw	r16,0(sp)
 800a440:	dec00504 	addi	sp,sp,20
 800a444:	800bb501 	jmpi	800bb50 <_write_r>
 800a448:	01c00084 	movi	r7,2
 800a44c:	000d883a 	mov	r6,zero
 800a450:	800c2ec0 	call	800c2ec <_lseek_r>
 800a454:	8080030b 	ldhu	r2,12(r16)
 800a458:	8140038f 	ldh	r5,14(r16)
 800a45c:	003fee06 	br	800a418 <__swrite+0x38>

0800a460 <__sseek>:
 800a460:	defffe04 	addi	sp,sp,-8
 800a464:	dc000015 	stw	r16,0(sp)
 800a468:	2821883a 	mov	r16,r5
 800a46c:	2940038f 	ldh	r5,14(r5)
 800a470:	dfc00115 	stw	ra,4(sp)
 800a474:	800c2ec0 	call	800c2ec <_lseek_r>
 800a478:	10ffffd8 	cmpnei	r3,r2,-1
 800a47c:	18000826 	beq	r3,zero,800a4a0 <__sseek+0x40>
 800a480:	80c0030b 	ldhu	r3,12(r16)
 800a484:	80801415 	stw	r2,80(r16)
 800a488:	18c40014 	ori	r3,r3,4096
 800a48c:	80c0030d 	sth	r3,12(r16)
 800a490:	dfc00117 	ldw	ra,4(sp)
 800a494:	dc000017 	ldw	r16,0(sp)
 800a498:	dec00204 	addi	sp,sp,8
 800a49c:	f800283a 	ret
 800a4a0:	80c0030b 	ldhu	r3,12(r16)
 800a4a4:	18fbffcc 	andi	r3,r3,61439
 800a4a8:	80c0030d 	sth	r3,12(r16)
 800a4ac:	dfc00117 	ldw	ra,4(sp)
 800a4b0:	dc000017 	ldw	r16,0(sp)
 800a4b4:	dec00204 	addi	sp,sp,8
 800a4b8:	f800283a 	ret

0800a4bc <__sclose>:
 800a4bc:	2940038f 	ldh	r5,14(r5)
 800a4c0:	800bbb41 	jmpi	800bbb4 <_close_r>

0800a4c4 <__sprint_r.part.0>:
 800a4c4:	28801917 	ldw	r2,100(r5)
 800a4c8:	defff604 	addi	sp,sp,-40
 800a4cc:	dcc00315 	stw	r19,12(sp)
 800a4d0:	dfc00915 	stw	ra,36(sp)
 800a4d4:	df000815 	stw	fp,32(sp)
 800a4d8:	ddc00715 	stw	r23,28(sp)
 800a4dc:	dd800615 	stw	r22,24(sp)
 800a4e0:	dd400515 	stw	r21,20(sp)
 800a4e4:	dd000415 	stw	r20,16(sp)
 800a4e8:	dc800215 	stw	r18,8(sp)
 800a4ec:	dc400115 	stw	r17,4(sp)
 800a4f0:	dc000015 	stw	r16,0(sp)
 800a4f4:	1088000c 	andi	r2,r2,8192
 800a4f8:	3027883a 	mov	r19,r6
 800a4fc:	10002c26 	beq	r2,zero,800a5b0 <__sprint_r.part.0+0xec>
 800a500:	30800217 	ldw	r2,8(r6)
 800a504:	35000017 	ldw	r20,0(r6)
 800a508:	2821883a 	mov	r16,r5
 800a50c:	2023883a 	mov	r17,r4
 800a510:	05bfff04 	movi	r22,-4
 800a514:	10002426 	beq	r2,zero,800a5a8 <__sprint_r.part.0+0xe4>
 800a518:	a5400117 	ldw	r21,4(r20)
 800a51c:	a5c00017 	ldw	r23,0(r20)
 800a520:	a824d0ba 	srli	r18,r21,2
 800a524:	90001b26 	beq	r18,zero,800a594 <__sprint_r.part.0+0xd0>
 800a528:	0039883a 	mov	fp,zero
 800a52c:	00000206 	br	800a538 <__sprint_r.part.0+0x74>
 800a530:	bdc00104 	addi	r23,r23,4
 800a534:	97001626 	beq	r18,fp,800a590 <__sprint_r.part.0+0xcc>
 800a538:	b9400017 	ldw	r5,0(r23)
 800a53c:	800d883a 	mov	r6,r16
 800a540:	8809883a 	mov	r4,r17
 800a544:	800c0a40 	call	800c0a4 <_fputwc_r>
 800a548:	10bfffe0 	cmpeqi	r2,r2,-1
 800a54c:	e7000044 	addi	fp,fp,1
 800a550:	103ff726 	beq	r2,zero,800a530 <__sprint_r.part.0+0x6c>
 800a554:	00bfffc4 	movi	r2,-1
 800a558:	98000215 	stw	zero,8(r19)
 800a55c:	98000115 	stw	zero,4(r19)
 800a560:	dfc00917 	ldw	ra,36(sp)
 800a564:	df000817 	ldw	fp,32(sp)
 800a568:	ddc00717 	ldw	r23,28(sp)
 800a56c:	dd800617 	ldw	r22,24(sp)
 800a570:	dd400517 	ldw	r21,20(sp)
 800a574:	dd000417 	ldw	r20,16(sp)
 800a578:	dcc00317 	ldw	r19,12(sp)
 800a57c:	dc800217 	ldw	r18,8(sp)
 800a580:	dc400117 	ldw	r17,4(sp)
 800a584:	dc000017 	ldw	r16,0(sp)
 800a588:	dec00a04 	addi	sp,sp,40
 800a58c:	f800283a 	ret
 800a590:	98800217 	ldw	r2,8(r19)
 800a594:	adaa703a 	and	r21,r21,r22
 800a598:	1545c83a 	sub	r2,r2,r21
 800a59c:	98800215 	stw	r2,8(r19)
 800a5a0:	a5000204 	addi	r20,r20,8
 800a5a4:	103fdc1e 	bne	r2,zero,800a518 <__sprint_r.part.0+0x54>
 800a5a8:	0005883a 	mov	r2,zero
 800a5ac:	003fea06 	br	800a558 <__sprint_r.part.0+0x94>
 800a5b0:	80075f00 	call	80075f0 <__sfvwrite_r>
 800a5b4:	003fe806 	br	800a558 <__sprint_r.part.0+0x94>

0800a5b8 <__sprint_r>:
 800a5b8:	30c00217 	ldw	r3,8(r6)
 800a5bc:	18000126 	beq	r3,zero,800a5c4 <__sprint_r+0xc>
 800a5c0:	800a4c41 	jmpi	800a4c4 <__sprint_r.part.0>
 800a5c4:	30000115 	stw	zero,4(r6)
 800a5c8:	0005883a 	mov	r2,zero
 800a5cc:	f800283a 	ret

0800a5d0 <___vfiprintf_internal_r>:
 800a5d0:	deffcf04 	addi	sp,sp,-196
 800a5d4:	dd802d15 	stw	r22,180(sp)
 800a5d8:	dd402c15 	stw	r21,176(sp)
 800a5dc:	dd002b15 	stw	r20,172(sp)
 800a5e0:	dfc03015 	stw	ra,192(sp)
 800a5e4:	df002f15 	stw	fp,188(sp)
 800a5e8:	ddc02e15 	stw	r23,184(sp)
 800a5ec:	dcc02a15 	stw	r19,168(sp)
 800a5f0:	dc802915 	stw	r18,164(sp)
 800a5f4:	dc402815 	stw	r17,160(sp)
 800a5f8:	dc002715 	stw	r16,156(sp)
 800a5fc:	d9c00415 	stw	r7,16(sp)
 800a600:	202d883a 	mov	r22,r4
 800a604:	282b883a 	mov	r21,r5
 800a608:	3029883a 	mov	r20,r6
 800a60c:	20000226 	beq	r4,zero,800a618 <___vfiprintf_internal_r+0x48>
 800a610:	20800e17 	ldw	r2,56(r4)
 800a614:	1001bd26 	beq	r2,zero,800ad0c <___vfiprintf_internal_r+0x73c>
 800a618:	a880030b 	ldhu	r2,12(r21)
 800a61c:	10c8000c 	andi	r3,r2,8192
 800a620:	1800061e 	bne	r3,zero,800a63c <___vfiprintf_internal_r+0x6c>
 800a624:	a8c01917 	ldw	r3,100(r21)
 800a628:	0137ffc4 	movi	r4,-8193
 800a62c:	10880014 	ori	r2,r2,8192
 800a630:	1906703a 	and	r3,r3,r4
 800a634:	a880030d 	sth	r2,12(r21)
 800a638:	a8c01915 	stw	r3,100(r21)
 800a63c:	10c0020c 	andi	r3,r2,8
 800a640:	18010826 	beq	r3,zero,800aa64 <___vfiprintf_internal_r+0x494>
 800a644:	a8c00417 	ldw	r3,16(r21)
 800a648:	18010626 	beq	r3,zero,800aa64 <___vfiprintf_internal_r+0x494>
 800a64c:	1080068c 	andi	r2,r2,26
 800a650:	10800298 	cmpnei	r2,r2,10
 800a654:	10010b26 	beq	r2,zero,800aa84 <___vfiprintf_internal_r+0x4b4>
 800a658:	dc801704 	addi	r18,sp,92
 800a65c:	dc800a15 	stw	r18,40(sp)
 800a660:	d8000c15 	stw	zero,48(sp)
 800a664:	d8000b15 	stw	zero,44(sp)
 800a668:	9021883a 	mov	r16,r18
 800a66c:	d8000515 	stw	zero,20(sp)
 800a670:	d8000115 	stw	zero,4(sp)
 800a674:	a0800007 	ldb	r2,0(r20)
 800a678:	1000e826 	beq	r2,zero,800aa1c <___vfiprintf_internal_r+0x44c>
 800a67c:	a023883a 	mov	r17,r20
 800a680:	00000306 	br	800a690 <___vfiprintf_internal_r+0xc0>
 800a684:	88800047 	ldb	r2,1(r17)
 800a688:	8c400044 	addi	r17,r17,1
 800a68c:	10013326 	beq	r2,zero,800ab5c <___vfiprintf_internal_r+0x58c>
 800a690:	10800958 	cmpnei	r2,r2,37
 800a694:	103ffb1e 	bne	r2,zero,800a684 <___vfiprintf_internal_r+0xb4>
 800a698:	8d27c83a 	sub	r19,r17,r20
 800a69c:	8d01311e 	bne	r17,r20,800ab64 <___vfiprintf_internal_r+0x594>
 800a6a0:	88800003 	ldbu	r2,0(r17)
 800a6a4:	10803fcc 	andi	r2,r2,255
 800a6a8:	1080201c 	xori	r2,r2,128
 800a6ac:	10bfe004 	addi	r2,r2,-128
 800a6b0:	1000da26 	beq	r2,zero,800aa1c <___vfiprintf_internal_r+0x44c>
 800a6b4:	88800047 	ldb	r2,1(r17)
 800a6b8:	8d000044 	addi	r20,r17,1
 800a6bc:	d8000945 	stb	zero,37(sp)
 800a6c0:	000b883a 	mov	r5,zero
 800a6c4:	000d883a 	mov	r6,zero
 800a6c8:	023fffc4 	movi	r8,-1
 800a6cc:	0023883a 	mov	r17,zero
 800a6d0:	001b883a 	mov	r13,zero
 800a6d4:	a5000044 	addi	r20,r20,1
 800a6d8:	10fff804 	addi	r3,r2,-32
 800a6dc:	19001668 	cmpgeui	r4,r3,89
 800a6e0:	20006c1e 	bne	r4,zero,800a894 <___vfiprintf_internal_r+0x2c4>
 800a6e4:	180690ba 	slli	r3,r3,2
 800a6e8:	01020074 	movhi	r4,2049
 800a6ec:	1909883a 	add	r4,r3,r4
 800a6f0:	20e9be17 	ldw	r3,-22792(r4)
 800a6f4:	1800683a 	jmp	r3
 800a6f8:	0800b034 	orhi	zero,at,704
 800a6fc:	0800a894 	ori	zero,at,674
 800a700:	0800a894 	ori	zero,at,674
 800a704:	0800b028 	cmpgeui	zero,at,704
 800a708:	0800a894 	ori	zero,at,674
 800a70c:	0800a894 	ori	zero,at,674
 800a710:	0800a894 	ori	zero,at,674
 800a714:	0800a894 	ori	zero,at,674
 800a718:	0800a894 	ori	zero,at,674
 800a71c:	0800a894 	ori	zero,at,674
 800a720:	0800b000 	call	800b00 <__alt_mem_onchip_memory2_0+0x800b00>
 800a724:	0800aff0 	cmpltui	zero,at,703
 800a728:	0800a894 	ori	zero,at,674
 800a72c:	0800afd8 	cmpnei	zero,at,703
 800a730:	0800af8c 	andi	zero,at,702
 800a734:	0800a894 	ori	zero,at,674
 800a738:	0800af80 	call	800af8 <__alt_mem_onchip_memory2_0+0x800af8>
 800a73c:	0800a85c 	xori	zero,at,673
 800a740:	0800a85c 	xori	zero,at,673
 800a744:	0800a85c 	xori	zero,at,673
 800a748:	0800a85c 	xori	zero,at,673
 800a74c:	0800a85c 	xori	zero,at,673
 800a750:	0800a85c 	xori	zero,at,673
 800a754:	0800a85c 	xori	zero,at,673
 800a758:	0800a85c 	xori	zero,at,673
 800a75c:	0800a85c 	xori	zero,at,673
 800a760:	0800a894 	ori	zero,at,674
 800a764:	0800a894 	ori	zero,at,674
 800a768:	0800a894 	ori	zero,at,674
 800a76c:	0800a894 	ori	zero,at,674
 800a770:	0800a894 	ori	zero,at,674
 800a774:	0800a894 	ori	zero,at,674
 800a778:	0800a894 	ori	zero,at,674
 800a77c:	0800a894 	ori	zero,at,674
 800a780:	0800a894 	ori	zero,at,674
 800a784:	0800a894 	ori	zero,at,674
 800a788:	0800ae7c 	xorhi	zero,at,697
 800a78c:	0800a894 	ori	zero,at,674
 800a790:	0800a894 	ori	zero,at,674
 800a794:	0800a894 	ori	zero,at,674
 800a798:	0800a894 	ori	zero,at,674
 800a79c:	0800a894 	ori	zero,at,674
 800a7a0:	0800a894 	ori	zero,at,674
 800a7a4:	0800a894 	ori	zero,at,674
 800a7a8:	0800a894 	ori	zero,at,674
 800a7ac:	0800a894 	ori	zero,at,674
 800a7b0:	0800a894 	ori	zero,at,674
 800a7b4:	0800aaf4 	orhi	zero,at,683
 800a7b8:	0800a894 	ori	zero,at,674
 800a7bc:	0800a894 	ori	zero,at,674
 800a7c0:	0800a894 	ori	zero,at,674
 800a7c4:	0800a894 	ori	zero,at,674
 800a7c8:	0800a894 	ori	zero,at,674
 800a7cc:	0800aacc 	andi	zero,at,683
 800a7d0:	0800a894 	ori	zero,at,674
 800a7d4:	0800a894 	ori	zero,at,674
 800a7d8:	0800b088 	cmpgei	zero,at,706
 800a7dc:	0800a894 	ori	zero,at,674
 800a7e0:	0800a894 	ori	zero,at,674
 800a7e4:	0800a894 	ori	zero,at,674
 800a7e8:	0800a894 	ori	zero,at,674
 800a7ec:	0800a894 	ori	zero,at,674
 800a7f0:	0800a894 	ori	zero,at,674
 800a7f4:	0800a894 	ori	zero,at,674
 800a7f8:	0800a894 	ori	zero,at,674
 800a7fc:	0800a894 	ori	zero,at,674
 800a800:	0800a894 	ori	zero,at,674
 800a804:	0800b060 	cmpeqi	zero,at,705
 800a808:	0800ad14 	ori	zero,at,692
 800a80c:	0800a894 	ori	zero,at,674
 800a810:	0800a894 	ori	zero,at,674
 800a814:	0800a894 	ori	zero,at,674
 800a818:	0800ad88 	cmpgei	zero,at,694
 800a81c:	0800ad14 	ori	zero,at,692
 800a820:	0800a894 	ori	zero,at,674
 800a824:	0800a894 	ori	zero,at,674
 800a828:	0800b10c 	andi	zero,at,708
 800a82c:	0800a894 	ori	zero,at,674
 800a830:	0800b0d0 	cmplti	zero,at,707
 800a834:	0800aaf8 	rdprs	zero,at,683
 800a838:	0800ae40 	call	800ae4 <__alt_mem_onchip_memory2_0+0x800ae4>
 800a83c:	0800ae34 	orhi	zero,at,696
 800a840:	0800a894 	ori	zero,at,674
 800a844:	0800addc 	xori	zero,at,695
 800a848:	0800a894 	ori	zero,at,674
 800a84c:	0800aad0 	cmplti	zero,at,683
 800a850:	0800a894 	ori	zero,at,674
 800a854:	0800a894 	ori	zero,at,674
 800a858:	0800ad94 	ori	zero,at,694
 800a85c:	0023883a 	mov	r17,zero
 800a860:	113ff404 	addi	r4,r2,-48
 800a864:	880690ba 	slli	r3,r17,2
 800a868:	a0800007 	ldb	r2,0(r20)
 800a86c:	a5000044 	addi	r20,r20,1
 800a870:	1c63883a 	add	r17,r3,r17
 800a874:	8c63883a 	add	r17,r17,r17
 800a878:	2463883a 	add	r17,r4,r17
 800a87c:	113ff404 	addi	r4,r2,-48
 800a880:	20c002b0 	cmpltui	r3,r4,10
 800a884:	183ff71e 	bne	r3,zero,800a864 <___vfiprintf_internal_r+0x294>
 800a888:	10fff804 	addi	r3,r2,-32
 800a88c:	19001668 	cmpgeui	r4,r3,89
 800a890:	203f9426 	beq	r4,zero,800a6e4 <___vfiprintf_internal_r+0x114>
 800a894:	29403fcc 	andi	r5,r5,255
 800a898:	2803ed1e 	bne	r5,zero,800b850 <___vfiprintf_internal_r+0x1280>
 800a89c:	10005f26 	beq	r2,zero,800aa1c <___vfiprintf_internal_r+0x44c>
 800a8a0:	d8800d05 	stb	r2,52(sp)
 800a8a4:	d8000945 	stb	zero,37(sp)
 800a8a8:	05c00044 	movi	r23,1
 800a8ac:	07000044 	movi	fp,1
 800a8b0:	dcc00d04 	addi	r19,sp,52
 800a8b4:	db400015 	stw	r13,0(sp)
 800a8b8:	0011883a 	mov	r8,zero
 800a8bc:	d8800017 	ldw	r2,0(sp)
 800a8c0:	1380008c 	andi	r14,r2,2
 800a8c4:	70000126 	beq	r14,zero,800a8cc <___vfiprintf_internal_r+0x2fc>
 800a8c8:	bdc00084 	addi	r23,r23,2
 800a8cc:	d8800017 	ldw	r2,0(sp)
 800a8d0:	d9000b17 	ldw	r4,44(sp)
 800a8d4:	1340210c 	andi	r13,r2,132
 800a8d8:	21800044 	addi	r6,r4,1
 800a8dc:	d8800c17 	ldw	r2,48(sp)
 800a8e0:	300b883a 	mov	r5,r6
 800a8e4:	6800021e 	bne	r13,zero,800a8f0 <___vfiprintf_internal_r+0x320>
 800a8e8:	8dc7c83a 	sub	r3,r17,r23
 800a8ec:	00c2e216 	blt	zero,r3,800b478 <___vfiprintf_internal_r+0xea8>
 800a8f0:	d8c00947 	ldb	r3,37(sp)
 800a8f4:	81800204 	addi	r6,r16,8
 800a8f8:	18000d26 	beq	r3,zero,800a930 <___vfiprintf_internal_r+0x360>
 800a8fc:	d8c00944 	addi	r3,sp,37
 800a900:	10800044 	addi	r2,r2,1
 800a904:	80c00015 	stw	r3,0(r16)
 800a908:	00c00044 	movi	r3,1
 800a90c:	80c00115 	stw	r3,4(r16)
 800a910:	d8800c15 	stw	r2,48(sp)
 800a914:	d9400b15 	stw	r5,44(sp)
 800a918:	28c00208 	cmpgei	r3,r5,8
 800a91c:	18029a1e 	bne	r3,zero,800b388 <___vfiprintf_internal_r+0xdb8>
 800a920:	2809883a 	mov	r4,r5
 800a924:	3021883a 	mov	r16,r6
 800a928:	29400044 	addi	r5,r5,1
 800a92c:	31800204 	addi	r6,r6,8
 800a930:	70001826 	beq	r14,zero,800a994 <___vfiprintf_internal_r+0x3c4>
 800a934:	d8c00984 	addi	r3,sp,38
 800a938:	10800084 	addi	r2,r2,2
 800a93c:	80c00015 	stw	r3,0(r16)
 800a940:	00c00084 	movi	r3,2
 800a944:	80c00115 	stw	r3,4(r16)
 800a948:	d8800c15 	stw	r2,48(sp)
 800a94c:	d9400b15 	stw	r5,44(sp)
 800a950:	28c00208 	cmpgei	r3,r5,8
 800a954:	1802a426 	beq	r3,zero,800b3e8 <___vfiprintf_internal_r+0xe18>
 800a958:	10032226 	beq	r2,zero,800b5e4 <___vfiprintf_internal_r+0x1014>
 800a95c:	d9800a04 	addi	r6,sp,40
 800a960:	a80b883a 	mov	r5,r21
 800a964:	b009883a 	mov	r4,r22
 800a968:	da000315 	stw	r8,12(sp)
 800a96c:	db400215 	stw	r13,8(sp)
 800a970:	800a4c40 	call	800a4c4 <__sprint_r.part.0>
 800a974:	10002b1e 	bne	r2,zero,800aa24 <___vfiprintf_internal_r+0x454>
 800a978:	d9000b17 	ldw	r4,44(sp)
 800a97c:	d8800c17 	ldw	r2,48(sp)
 800a980:	da000317 	ldw	r8,12(sp)
 800a984:	db400217 	ldw	r13,8(sp)
 800a988:	d9801904 	addi	r6,sp,100
 800a98c:	21400044 	addi	r5,r4,1
 800a990:	9021883a 	mov	r16,r18
 800a994:	6b402018 	cmpnei	r13,r13,128
 800a998:	6801e526 	beq	r13,zero,800b130 <___vfiprintf_internal_r+0xb60>
 800a99c:	4711c83a 	sub	r8,r8,fp
 800a9a0:	02022416 	blt	zero,r8,800b234 <___vfiprintf_internal_r+0xc64>
 800a9a4:	e085883a 	add	r2,fp,r2
 800a9a8:	d9400b15 	stw	r5,44(sp)
 800a9ac:	84c00015 	stw	r19,0(r16)
 800a9b0:	87000115 	stw	fp,4(r16)
 800a9b4:	d8800c15 	stw	r2,48(sp)
 800a9b8:	29400210 	cmplti	r5,r5,8
 800a9bc:	2800081e 	bne	r5,zero,800a9e0 <___vfiprintf_internal_r+0x410>
 800a9c0:	10009826 	beq	r2,zero,800ac24 <___vfiprintf_internal_r+0x654>
 800a9c4:	d9800a04 	addi	r6,sp,40
 800a9c8:	a80b883a 	mov	r5,r21
 800a9cc:	b009883a 	mov	r4,r22
 800a9d0:	800a4c40 	call	800a4c4 <__sprint_r.part.0>
 800a9d4:	1000131e 	bne	r2,zero,800aa24 <___vfiprintf_internal_r+0x454>
 800a9d8:	d8800c17 	ldw	r2,48(sp)
 800a9dc:	900d883a 	mov	r6,r18
 800a9e0:	d8c00017 	ldw	r3,0(sp)
 800a9e4:	1cc0010c 	andi	r19,r3,4
 800a9e8:	98000226 	beq	r19,zero,800a9f4 <___vfiprintf_internal_r+0x424>
 800a9ec:	8de1c83a 	sub	r16,r17,r23
 800a9f0:	04009316 	blt	zero,r16,800ac40 <___vfiprintf_internal_r+0x670>
 800a9f4:	8dc0010e 	bge	r17,r23,800a9fc <___vfiprintf_internal_r+0x42c>
 800a9f8:	b823883a 	mov	r17,r23
 800a9fc:	d8c00117 	ldw	r3,4(sp)
 800aa00:	1c47883a 	add	r3,r3,r17
 800aa04:	d8c00115 	stw	r3,4(sp)
 800aa08:	1002551e 	bne	r2,zero,800b360 <___vfiprintf_internal_r+0xd90>
 800aa0c:	a0800007 	ldb	r2,0(r20)
 800aa10:	d8000b15 	stw	zero,44(sp)
 800aa14:	9021883a 	mov	r16,r18
 800aa18:	103f181e 	bne	r2,zero,800a67c <___vfiprintf_internal_r+0xac>
 800aa1c:	d8800c17 	ldw	r2,48(sp)
 800aa20:	10038d1e 	bne	r2,zero,800b858 <___vfiprintf_internal_r+0x1288>
 800aa24:	a880030b 	ldhu	r2,12(r21)
 800aa28:	1080100c 	andi	r2,r2,64
 800aa2c:	1003a51e 	bne	r2,zero,800b8c4 <___vfiprintf_internal_r+0x12f4>
 800aa30:	d8800117 	ldw	r2,4(sp)
 800aa34:	dfc03017 	ldw	ra,192(sp)
 800aa38:	df002f17 	ldw	fp,188(sp)
 800aa3c:	ddc02e17 	ldw	r23,184(sp)
 800aa40:	dd802d17 	ldw	r22,180(sp)
 800aa44:	dd402c17 	ldw	r21,176(sp)
 800aa48:	dd002b17 	ldw	r20,172(sp)
 800aa4c:	dcc02a17 	ldw	r19,168(sp)
 800aa50:	dc802917 	ldw	r18,164(sp)
 800aa54:	dc402817 	ldw	r17,160(sp)
 800aa58:	dc002717 	ldw	r16,156(sp)
 800aa5c:	dec03104 	addi	sp,sp,196
 800aa60:	f800283a 	ret
 800aa64:	a80b883a 	mov	r5,r21
 800aa68:	b009883a 	mov	r4,r22
 800aa6c:	80050540 	call	8005054 <__swsetup_r>
 800aa70:	1003941e 	bne	r2,zero,800b8c4 <___vfiprintf_internal_r+0x12f4>
 800aa74:	a880030b 	ldhu	r2,12(r21)
 800aa78:	1080068c 	andi	r2,r2,26
 800aa7c:	10800298 	cmpnei	r2,r2,10
 800aa80:	103ef51e 	bne	r2,zero,800a658 <___vfiprintf_internal_r+0x88>
 800aa84:	a880038f 	ldh	r2,14(r21)
 800aa88:	103ef316 	blt	r2,zero,800a658 <___vfiprintf_internal_r+0x88>
 800aa8c:	d9c00417 	ldw	r7,16(sp)
 800aa90:	a00d883a 	mov	r6,r20
 800aa94:	a80b883a 	mov	r5,r21
 800aa98:	b009883a 	mov	r4,r22
 800aa9c:	dfc03017 	ldw	ra,192(sp)
 800aaa0:	df002f17 	ldw	fp,188(sp)
 800aaa4:	ddc02e17 	ldw	r23,184(sp)
 800aaa8:	dd802d17 	ldw	r22,180(sp)
 800aaac:	dd402c17 	ldw	r21,176(sp)
 800aab0:	dd002b17 	ldw	r20,172(sp)
 800aab4:	dcc02a17 	ldw	r19,168(sp)
 800aab8:	dc802917 	ldw	r18,164(sp)
 800aabc:	dc402817 	ldw	r17,160(sp)
 800aac0:	dc002717 	ldw	r16,156(sp)
 800aac4:	dec03104 	addi	sp,sp,196
 800aac8:	800b9301 	jmpi	800b930 <__sbprintf>
 800aacc:	6b400414 	ori	r13,r13,16
 800aad0:	6880080c 	andi	r2,r13,32
 800aad4:	10004726 	beq	r2,zero,800abf4 <___vfiprintf_internal_r+0x624>
 800aad8:	d8c00417 	ldw	r3,16(sp)
 800aadc:	00800044 	movi	r2,1
 800aae0:	1dc00017 	ldw	r23,0(r3)
 800aae4:	1f000117 	ldw	fp,4(r3)
 800aae8:	18c00204 	addi	r3,r3,8
 800aaec:	d8c00415 	stw	r3,16(sp)
 800aaf0:	00000906 	br	800ab18 <___vfiprintf_internal_r+0x548>
 800aaf4:	6b400414 	ori	r13,r13,16
 800aaf8:	6880080c 	andi	r2,r13,32
 800aafc:	10003126 	beq	r2,zero,800abc4 <___vfiprintf_internal_r+0x5f4>
 800ab00:	d8c00417 	ldw	r3,16(sp)
 800ab04:	0005883a 	mov	r2,zero
 800ab08:	1dc00017 	ldw	r23,0(r3)
 800ab0c:	1f000117 	ldw	fp,4(r3)
 800ab10:	18c00204 	addi	r3,r3,8
 800ab14:	d8c00415 	stw	r3,16(sp)
 800ab18:	d8000945 	stb	zero,37(sp)
 800ab1c:	40ffffe0 	cmpeqi	r3,r8,-1
 800ab20:	001d883a 	mov	r14,zero
 800ab24:	1800f01e 	bne	r3,zero,800aee8 <___vfiprintf_internal_r+0x918>
 800ab28:	04ffdfc4 	movi	r19,-129
 800ab2c:	6cc8703a 	and	r4,r13,r19
 800ab30:	bf06b03a 	or	r3,r23,fp
 800ab34:	d9000015 	stw	r4,0(sp)
 800ab38:	1802301e 	bne	r3,zero,800b3fc <___vfiprintf_internal_r+0xe2c>
 800ab3c:	4001f31e 	bne	r8,zero,800b30c <___vfiprintf_internal_r+0xd3c>
 800ab40:	10029e1e 	bne	r2,zero,800b5bc <___vfiprintf_internal_r+0xfec>
 800ab44:	6f00004c 	andi	fp,r13,1
 800ab48:	e002bc26 	beq	fp,zero,800b63c <___vfiprintf_internal_r+0x106c>
 800ab4c:	00800c04 	movi	r2,48
 800ab50:	d88016c5 	stb	r2,91(sp)
 800ab54:	dcc016c4 	addi	r19,sp,91
 800ab58:	00010006 	br	800af5c <___vfiprintf_internal_r+0x98c>
 800ab5c:	8d27c83a 	sub	r19,r17,r20
 800ab60:	8d3fae26 	beq	r17,r20,800aa1c <___vfiprintf_internal_r+0x44c>
 800ab64:	d8c00c17 	ldw	r3,48(sp)
 800ab68:	d8800b17 	ldw	r2,44(sp)
 800ab6c:	85000015 	stw	r20,0(r16)
 800ab70:	98c7883a 	add	r3,r19,r3
 800ab74:	10800044 	addi	r2,r2,1
 800ab78:	d8800b15 	stw	r2,44(sp)
 800ab7c:	84c00115 	stw	r19,4(r16)
 800ab80:	d8c00c15 	stw	r3,48(sp)
 800ab84:	10800208 	cmpgei	r2,r2,8
 800ab88:	1000061e 	bne	r2,zero,800aba4 <___vfiprintf_internal_r+0x5d4>
 800ab8c:	84000204 	addi	r16,r16,8
 800ab90:	d8c00117 	ldw	r3,4(sp)
 800ab94:	88800003 	ldbu	r2,0(r17)
 800ab98:	1cc7883a 	add	r3,r3,r19
 800ab9c:	d8c00115 	stw	r3,4(sp)
 800aba0:	003ec006 	br	800a6a4 <___vfiprintf_internal_r+0xd4>
 800aba4:	18028126 	beq	r3,zero,800b5ac <___vfiprintf_internal_r+0xfdc>
 800aba8:	d9800a04 	addi	r6,sp,40
 800abac:	a80b883a 	mov	r5,r21
 800abb0:	b009883a 	mov	r4,r22
 800abb4:	800a4c40 	call	800a4c4 <__sprint_r.part.0>
 800abb8:	103f9a1e 	bne	r2,zero,800aa24 <___vfiprintf_internal_r+0x454>
 800abbc:	9021883a 	mov	r16,r18
 800abc0:	003ff306 	br	800ab90 <___vfiprintf_internal_r+0x5c0>
 800abc4:	d9000417 	ldw	r4,16(sp)
 800abc8:	6880040c 	andi	r2,r13,16
 800abcc:	20c00104 	addi	r3,r4,4
 800abd0:	1002ac1e 	bne	r2,zero,800b684 <___vfiprintf_internal_r+0x10b4>
 800abd4:	6880100c 	andi	r2,r13,64
 800abd8:	1002fb26 	beq	r2,zero,800b7c8 <___vfiprintf_internal_r+0x11f8>
 800abdc:	d8800417 	ldw	r2,16(sp)
 800abe0:	0039883a 	mov	fp,zero
 800abe4:	d8c00415 	stw	r3,16(sp)
 800abe8:	15c0000b 	ldhu	r23,0(r2)
 800abec:	0005883a 	mov	r2,zero
 800abf0:	003fc906 	br	800ab18 <___vfiprintf_internal_r+0x548>
 800abf4:	d9000417 	ldw	r4,16(sp)
 800abf8:	6880040c 	andi	r2,r13,16
 800abfc:	20c00104 	addi	r3,r4,4
 800ac00:	1002af1e 	bne	r2,zero,800b6c0 <___vfiprintf_internal_r+0x10f0>
 800ac04:	6880100c 	andi	r2,r13,64
 800ac08:	1002fb26 	beq	r2,zero,800b7f8 <___vfiprintf_internal_r+0x1228>
 800ac0c:	d8800417 	ldw	r2,16(sp)
 800ac10:	0039883a 	mov	fp,zero
 800ac14:	d8c00415 	stw	r3,16(sp)
 800ac18:	15c0000b 	ldhu	r23,0(r2)
 800ac1c:	00800044 	movi	r2,1
 800ac20:	003fbd06 	br	800ab18 <___vfiprintf_internal_r+0x548>
 800ac24:	d8c00017 	ldw	r3,0(sp)
 800ac28:	d8000b15 	stw	zero,44(sp)
 800ac2c:	1cc0010c 	andi	r19,r3,4
 800ac30:	98024c26 	beq	r19,zero,800b564 <___vfiprintf_internal_r+0xf94>
 800ac34:	8de1c83a 	sub	r16,r17,r23
 800ac38:	04024a0e 	bge	zero,r16,800b564 <___vfiprintf_internal_r+0xf94>
 800ac3c:	900d883a 	mov	r6,r18
 800ac40:	80c00450 	cmplti	r3,r16,17
 800ac44:	d9000b17 	ldw	r4,44(sp)
 800ac48:	01c20074 	movhi	r7,2049
 800ac4c:	18031a1e 	bne	r3,zero,800b8b8 <___vfiprintf_internal_r+0x12e8>
 800ac50:	39cbd904 	addi	r7,r7,12132
 800ac54:	04c00404 	movi	r19,16
 800ac58:	00000606 	br	800ac74 <___vfiprintf_internal_r+0x6a4>
 800ac5c:	21400084 	addi	r5,r4,2
 800ac60:	31800204 	addi	r6,r6,8
 800ac64:	1809883a 	mov	r4,r3
 800ac68:	843ffc04 	addi	r16,r16,-16
 800ac6c:	80c00448 	cmpgei	r3,r16,17
 800ac70:	18001726 	beq	r3,zero,800acd0 <___vfiprintf_internal_r+0x700>
 800ac74:	20c00044 	addi	r3,r4,1
 800ac78:	10800404 	addi	r2,r2,16
 800ac7c:	31c00015 	stw	r7,0(r6)
 800ac80:	34c00115 	stw	r19,4(r6)
 800ac84:	d8800c15 	stw	r2,48(sp)
 800ac88:	d8c00b15 	stw	r3,44(sp)
 800ac8c:	19400208 	cmpgei	r5,r3,8
 800ac90:	283ff226 	beq	r5,zero,800ac5c <___vfiprintf_internal_r+0x68c>
 800ac94:	d9800a04 	addi	r6,sp,40
 800ac98:	a80b883a 	mov	r5,r21
 800ac9c:	b009883a 	mov	r4,r22
 800aca0:	10011f26 	beq	r2,zero,800b120 <___vfiprintf_internal_r+0xb50>
 800aca4:	d9c00015 	stw	r7,0(sp)
 800aca8:	800a4c40 	call	800a4c4 <__sprint_r.part.0>
 800acac:	103f5d1e 	bne	r2,zero,800aa24 <___vfiprintf_internal_r+0x454>
 800acb0:	d9000b17 	ldw	r4,44(sp)
 800acb4:	843ffc04 	addi	r16,r16,-16
 800acb8:	80c00448 	cmpgei	r3,r16,17
 800acbc:	d8800c17 	ldw	r2,48(sp)
 800acc0:	d9c00017 	ldw	r7,0(sp)
 800acc4:	900d883a 	mov	r6,r18
 800acc8:	21400044 	addi	r5,r4,1
 800accc:	183fe91e 	bne	r3,zero,800ac74 <___vfiprintf_internal_r+0x6a4>
 800acd0:	1405883a 	add	r2,r2,r16
 800acd4:	d9400b15 	stw	r5,44(sp)
 800acd8:	31c00015 	stw	r7,0(r6)
 800acdc:	34000115 	stw	r16,4(r6)
 800ace0:	d8800c15 	stw	r2,48(sp)
 800ace4:	29400210 	cmplti	r5,r5,8
 800ace8:	283f421e 	bne	r5,zero,800a9f4 <___vfiprintf_internal_r+0x424>
 800acec:	10021d26 	beq	r2,zero,800b564 <___vfiprintf_internal_r+0xf94>
 800acf0:	d9800a04 	addi	r6,sp,40
 800acf4:	a80b883a 	mov	r5,r21
 800acf8:	b009883a 	mov	r4,r22
 800acfc:	800a4c40 	call	800a4c4 <__sprint_r.part.0>
 800ad00:	103f481e 	bne	r2,zero,800aa24 <___vfiprintf_internal_r+0x454>
 800ad04:	d8800c17 	ldw	r2,48(sp)
 800ad08:	003f3a06 	br	800a9f4 <___vfiprintf_internal_r+0x424>
 800ad0c:	80071900 	call	8007190 <__sinit>
 800ad10:	003e4106 	br	800a618 <___vfiprintf_internal_r+0x48>
 800ad14:	29403fcc 	andi	r5,r5,255
 800ad18:	2802da1e 	bne	r5,zero,800b884 <___vfiprintf_internal_r+0x12b4>
 800ad1c:	6880080c 	andi	r2,r13,32
 800ad20:	10005b26 	beq	r2,zero,800ae90 <___vfiprintf_internal_r+0x8c0>
 800ad24:	d8c00417 	ldw	r3,16(sp)
 800ad28:	18800117 	ldw	r2,4(r3)
 800ad2c:	1dc00017 	ldw	r23,0(r3)
 800ad30:	18c00204 	addi	r3,r3,8
 800ad34:	d8c00415 	stw	r3,16(sp)
 800ad38:	1039883a 	mov	fp,r2
 800ad3c:	10006016 	blt	r2,zero,800aec0 <___vfiprintf_internal_r+0x8f0>
 800ad40:	40bfffd8 	cmpnei	r2,r8,-1
 800ad44:	db800943 	ldbu	r14,37(sp)
 800ad48:	10000626 	beq	r2,zero,800ad64 <___vfiprintf_internal_r+0x794>
 800ad4c:	04ffdfc4 	movi	r19,-129
 800ad50:	6cc6703a 	and	r3,r13,r19
 800ad54:	bf04b03a 	or	r2,r23,fp
 800ad58:	d8c00015 	stw	r3,0(sp)
 800ad5c:	10021626 	beq	r2,zero,800b5b8 <___vfiprintf_internal_r+0xfe8>
 800ad60:	db400017 	ldw	r13,0(sp)
 800ad64:	e001a71e 	bne	fp,zero,800b404 <___vfiprintf_internal_r+0xe34>
 800ad68:	b88002a8 	cmpgeui	r2,r23,10
 800ad6c:	1001a51e 	bne	r2,zero,800b404 <___vfiprintf_internal_r+0xe34>
 800ad70:	bdc00c04 	addi	r23,r23,48
 800ad74:	ddc016c5 	stb	r23,91(sp)
 800ad78:	db400015 	stw	r13,0(sp)
 800ad7c:	07000044 	movi	fp,1
 800ad80:	dcc016c4 	addi	r19,sp,91
 800ad84:	00007506 	br	800af5c <___vfiprintf_internal_r+0x98c>
 800ad88:	a0800007 	ldb	r2,0(r20)
 800ad8c:	6b401014 	ori	r13,r13,64
 800ad90:	003e5006 	br	800a6d4 <___vfiprintf_internal_r+0x104>
 800ad94:	29403fcc 	andi	r5,r5,255
 800ad98:	2802bc1e 	bne	r5,zero,800b88c <___vfiprintf_internal_r+0x12bc>
 800ad9c:	00c20074 	movhi	r3,2049
 800ada0:	18cb4e04 	addi	r3,r3,11576
 800ada4:	d8c00515 	stw	r3,20(sp)
 800ada8:	68c0080c 	andi	r3,r13,32
 800adac:	1800bd26 	beq	r3,zero,800b0a4 <___vfiprintf_internal_r+0xad4>
 800adb0:	d8c00417 	ldw	r3,16(sp)
 800adb4:	1dc00017 	ldw	r23,0(r3)
 800adb8:	1f000117 	ldw	fp,4(r3)
 800adbc:	18c00204 	addi	r3,r3,8
 800adc0:	d8c00415 	stw	r3,16(sp)
 800adc4:	68c0004c 	andi	r3,r13,1
 800adc8:	18000226 	beq	r3,zero,800add4 <___vfiprintf_internal_r+0x804>
 800adcc:	bf06b03a 	or	r3,r23,fp
 800add0:	1802261e 	bne	r3,zero,800b66c <___vfiprintf_internal_r+0x109c>
 800add4:	00800084 	movi	r2,2
 800add8:	003f4f06 	br	800ab18 <___vfiprintf_internal_r+0x548>
 800addc:	d8800417 	ldw	r2,16(sp)
 800ade0:	d8000945 	stb	zero,37(sp)
 800ade4:	14c00017 	ldw	r19,0(r2)
 800ade8:	10c00104 	addi	r3,r2,4
 800adec:	98026926 	beq	r19,zero,800b794 <___vfiprintf_internal_r+0x11c4>
 800adf0:	40bfffe0 	cmpeqi	r2,r8,-1
 800adf4:	1002411e 	bne	r2,zero,800b6fc <___vfiprintf_internal_r+0x112c>
 800adf8:	400d883a 	mov	r6,r8
 800adfc:	000b883a 	mov	r5,zero
 800ae00:	9809883a 	mov	r4,r19
 800ae04:	d8c00315 	stw	r3,12(sp)
 800ae08:	db400215 	stw	r13,8(sp)
 800ae0c:	da000015 	stw	r8,0(sp)
 800ae10:	80086400 	call	8008640 <memchr>
 800ae14:	da000017 	ldw	r8,0(sp)
 800ae18:	db400217 	ldw	r13,8(sp)
 800ae1c:	d8c00317 	ldw	r3,12(sp)
 800ae20:	10029426 	beq	r2,zero,800b874 <___vfiprintf_internal_r+0x12a4>
 800ae24:	14f9c83a 	sub	fp,r2,r19
 800ae28:	e02f883a 	mov	r23,fp
 800ae2c:	d8c00415 	stw	r3,16(sp)
 800ae30:	003ea006 	br	800a8b4 <___vfiprintf_internal_r+0x2e4>
 800ae34:	a0800007 	ldb	r2,0(r20)
 800ae38:	6b400814 	ori	r13,r13,32
 800ae3c:	003e2506 	br	800a6d4 <___vfiprintf_internal_r+0x104>
 800ae40:	d8c00417 	ldw	r3,16(sp)
 800ae44:	00800c04 	movi	r2,48
 800ae48:	d8800985 	stb	r2,38(sp)
 800ae4c:	00801e04 	movi	r2,120
 800ae50:	01020074 	movhi	r4,2049
 800ae54:	d88009c5 	stb	r2,39(sp)
 800ae58:	18800104 	addi	r2,r3,4
 800ae5c:	d8800415 	stw	r2,16(sp)
 800ae60:	208b4e04 	addi	r2,r4,11576
 800ae64:	d8800515 	stw	r2,20(sp)
 800ae68:	1dc00017 	ldw	r23,0(r3)
 800ae6c:	0039883a 	mov	fp,zero
 800ae70:	6b400094 	ori	r13,r13,2
 800ae74:	00800084 	movi	r2,2
 800ae78:	003f2706 	br	800ab18 <___vfiprintf_internal_r+0x548>
 800ae7c:	29403fcc 	andi	r5,r5,255
 800ae80:	2802841e 	bne	r5,zero,800b894 <___vfiprintf_internal_r+0x12c4>
 800ae84:	6b400414 	ori	r13,r13,16
 800ae88:	6880080c 	andi	r2,r13,32
 800ae8c:	103fa51e 	bne	r2,zero,800ad24 <___vfiprintf_internal_r+0x754>
 800ae90:	d9000417 	ldw	r4,16(sp)
 800ae94:	6880040c 	andi	r2,r13,16
 800ae98:	20c00104 	addi	r3,r4,4
 800ae9c:	1001ee1e 	bne	r2,zero,800b658 <___vfiprintf_internal_r+0x1088>
 800aea0:	6880100c 	andi	r2,r13,64
 800aea4:	10024e26 	beq	r2,zero,800b7e0 <___vfiprintf_internal_r+0x1210>
 800aea8:	d8800417 	ldw	r2,16(sp)
 800aeac:	d8c00415 	stw	r3,16(sp)
 800aeb0:	15c0000f 	ldh	r23,0(r2)
 800aeb4:	b839d7fa 	srai	fp,r23,31
 800aeb8:	e005883a 	mov	r2,fp
 800aebc:	103fa00e 	bge	r2,zero,800ad40 <___vfiprintf_internal_r+0x770>
 800aec0:	b804c03a 	cmpne	r2,r23,zero
 800aec4:	0739c83a 	sub	fp,zero,fp
 800aec8:	e0b9c83a 	sub	fp,fp,r2
 800aecc:	00800b44 	movi	r2,45
 800aed0:	d8800945 	stb	r2,37(sp)
 800aed4:	40ffffe0 	cmpeqi	r3,r8,-1
 800aed8:	05efc83a 	sub	r23,zero,r23
 800aedc:	03800b44 	movi	r14,45
 800aee0:	00800044 	movi	r2,1
 800aee4:	183f1026 	beq	r3,zero,800ab28 <___vfiprintf_internal_r+0x558>
 800aee8:	10c00060 	cmpeqi	r3,r2,1
 800aeec:	183f9d1e 	bne	r3,zero,800ad64 <___vfiprintf_internal_r+0x794>
 800aef0:	108000a0 	cmpeqi	r2,r2,2
 800aef4:	10010a1e 	bne	r2,zero,800b320 <___vfiprintf_internal_r+0xd50>
 800aef8:	9027883a 	mov	r19,r18
 800aefc:	e008977a 	slli	r4,fp,29
 800af00:	b806d0fa 	srli	r3,r23,3
 800af04:	e038d0fa 	srli	fp,fp,3
 800af08:	b88001cc 	andi	r2,r23,7
 800af0c:	10800c04 	addi	r2,r2,48
 800af10:	20eeb03a 	or	r23,r4,r3
 800af14:	98bfffc5 	stb	r2,-1(r19)
 800af18:	bf06b03a 	or	r3,r23,fp
 800af1c:	980b883a 	mov	r5,r19
 800af20:	9cffffc4 	addi	r19,r19,-1
 800af24:	183ff51e 	bne	r3,zero,800aefc <___vfiprintf_internal_r+0x92c>
 800af28:	68c0004c 	andi	r3,r13,1
 800af2c:	18010926 	beq	r3,zero,800b354 <___vfiprintf_internal_r+0xd84>
 800af30:	10803fcc 	andi	r2,r2,255
 800af34:	1080201c 	xori	r2,r2,128
 800af38:	10bfe004 	addi	r2,r2,-128
 800af3c:	10800c18 	cmpnei	r2,r2,48
 800af40:	10010426 	beq	r2,zero,800b354 <___vfiprintf_internal_r+0xd84>
 800af44:	297fff84 	addi	r5,r5,-2
 800af48:	00800c04 	movi	r2,48
 800af4c:	98bfffc5 	stb	r2,-1(r19)
 800af50:	9179c83a 	sub	fp,r18,r5
 800af54:	db400015 	stw	r13,0(sp)
 800af58:	2827883a 	mov	r19,r5
 800af5c:	402f883a 	mov	r23,r8
 800af60:	4700010e 	bge	r8,fp,800af68 <___vfiprintf_internal_r+0x998>
 800af64:	e02f883a 	mov	r23,fp
 800af68:	73803fcc 	andi	r14,r14,255
 800af6c:	7380201c 	xori	r14,r14,128
 800af70:	73bfe004 	addi	r14,r14,-128
 800af74:	703e5126 	beq	r14,zero,800a8bc <___vfiprintf_internal_r+0x2ec>
 800af78:	bdc00044 	addi	r23,r23,1
 800af7c:	003e4f06 	br	800a8bc <___vfiprintf_internal_r+0x2ec>
 800af80:	a0800007 	ldb	r2,0(r20)
 800af84:	6b402014 	ori	r13,r13,128
 800af88:	003dd206 	br	800a6d4 <___vfiprintf_internal_r+0x104>
 800af8c:	a0800007 	ldb	r2,0(r20)
 800af90:	a0c00044 	addi	r3,r20,1
 800af94:	11000aa0 	cmpeqi	r4,r2,42
 800af98:	2002521e 	bne	r4,zero,800b8e4 <___vfiprintf_internal_r+0x1314>
 800af9c:	113ff404 	addi	r4,r2,-48
 800afa0:	21c002b0 	cmpltui	r7,r4,10
 800afa4:	1829883a 	mov	r20,r3
 800afa8:	0011883a 	mov	r8,zero
 800afac:	383dca26 	beq	r7,zero,800a6d8 <___vfiprintf_internal_r+0x108>
 800afb0:	400690ba 	slli	r3,r8,2
 800afb4:	a0800007 	ldb	r2,0(r20)
 800afb8:	a5000044 	addi	r20,r20,1
 800afbc:	1a11883a 	add	r8,r3,r8
 800afc0:	4211883a 	add	r8,r8,r8
 800afc4:	4111883a 	add	r8,r8,r4
 800afc8:	113ff404 	addi	r4,r2,-48
 800afcc:	20c002b0 	cmpltui	r3,r4,10
 800afd0:	183ff71e 	bne	r3,zero,800afb0 <___vfiprintf_internal_r+0x9e0>
 800afd4:	003dc006 	br	800a6d8 <___vfiprintf_internal_r+0x108>
 800afd8:	a0800003 	ldbu	r2,0(r20)
 800afdc:	10803fcc 	andi	r2,r2,255
 800afe0:	1080201c 	xori	r2,r2,128
 800afe4:	6b400114 	ori	r13,r13,4
 800afe8:	10bfe004 	addi	r2,r2,-128
 800afec:	003db906 	br	800a6d4 <___vfiprintf_internal_r+0x104>
 800aff0:	a0800007 	ldb	r2,0(r20)
 800aff4:	01400044 	movi	r5,1
 800aff8:	01800ac4 	movi	r6,43
 800affc:	003db506 	br	800a6d4 <___vfiprintf_internal_r+0x104>
 800b000:	d8c00417 	ldw	r3,16(sp)
 800b004:	a0800003 	ldbu	r2,0(r20)
 800b008:	1c400017 	ldw	r17,0(r3)
 800b00c:	18c00104 	addi	r3,r3,4
 800b010:	8801b716 	blt	r17,zero,800b6f0 <___vfiprintf_internal_r+0x1120>
 800b014:	d8c00415 	stw	r3,16(sp)
 800b018:	10803fcc 	andi	r2,r2,255
 800b01c:	1080201c 	xori	r2,r2,128
 800b020:	10bfe004 	addi	r2,r2,-128
 800b024:	003dab06 	br	800a6d4 <___vfiprintf_internal_r+0x104>
 800b028:	a0800007 	ldb	r2,0(r20)
 800b02c:	6b400054 	ori	r13,r13,1
 800b030:	003da806 	br	800a6d4 <___vfiprintf_internal_r+0x104>
 800b034:	30c03fcc 	andi	r3,r6,255
 800b038:	18c0201c 	xori	r3,r3,128
 800b03c:	18ffe004 	addi	r3,r3,-128
 800b040:	a0800003 	ldbu	r2,0(r20)
 800b044:	183ff41e 	bne	r3,zero,800b018 <___vfiprintf_internal_r+0xa48>
 800b048:	10803fcc 	andi	r2,r2,255
 800b04c:	1080201c 	xori	r2,r2,128
 800b050:	01400044 	movi	r5,1
 800b054:	01800804 	movi	r6,32
 800b058:	10bfe004 	addi	r2,r2,-128
 800b05c:	003d9d06 	br	800a6d4 <___vfiprintf_internal_r+0x104>
 800b060:	d8c00417 	ldw	r3,16(sp)
 800b064:	d8000945 	stb	zero,37(sp)
 800b068:	05c00044 	movi	r23,1
 800b06c:	18800017 	ldw	r2,0(r3)
 800b070:	18c00104 	addi	r3,r3,4
 800b074:	d8c00415 	stw	r3,16(sp)
 800b078:	d8800d05 	stb	r2,52(sp)
 800b07c:	07000044 	movi	fp,1
 800b080:	dcc00d04 	addi	r19,sp,52
 800b084:	003e0b06 	br	800a8b4 <___vfiprintf_internal_r+0x2e4>
 800b088:	29403fcc 	andi	r5,r5,255
 800b08c:	2802061e 	bne	r5,zero,800b8a8 <___vfiprintf_internal_r+0x12d8>
 800b090:	00c20074 	movhi	r3,2049
 800b094:	18cb5304 	addi	r3,r3,11596
 800b098:	d8c00515 	stw	r3,20(sp)
 800b09c:	68c0080c 	andi	r3,r13,32
 800b0a0:	183f431e 	bne	r3,zero,800adb0 <___vfiprintf_internal_r+0x7e0>
 800b0a4:	d9400417 	ldw	r5,16(sp)
 800b0a8:	68c0040c 	andi	r3,r13,16
 800b0ac:	29000104 	addi	r4,r5,4
 800b0b0:	18017f1e 	bne	r3,zero,800b6b0 <___vfiprintf_internal_r+0x10e0>
 800b0b4:	68c0100c 	andi	r3,r13,64
 800b0b8:	1801be26 	beq	r3,zero,800b7b4 <___vfiprintf_internal_r+0x11e4>
 800b0bc:	d8c00417 	ldw	r3,16(sp)
 800b0c0:	0039883a 	mov	fp,zero
 800b0c4:	d9000415 	stw	r4,16(sp)
 800b0c8:	1dc0000b 	ldhu	r23,0(r3)
 800b0cc:	003f3d06 	br	800adc4 <___vfiprintf_internal_r+0x7f4>
 800b0d0:	29403fcc 	andi	r5,r5,255
 800b0d4:	2801f61e 	bne	r5,zero,800b8b0 <___vfiprintf_internal_r+0x12e0>
 800b0d8:	d9000417 	ldw	r4,16(sp)
 800b0dc:	6880080c 	andi	r2,r13,32
 800b0e0:	20c00017 	ldw	r3,0(r4)
 800b0e4:	21000104 	addi	r4,r4,4
 800b0e8:	10016b1e 	bne	r2,zero,800b698 <___vfiprintf_internal_r+0x10c8>
 800b0ec:	6880040c 	andi	r2,r13,16
 800b0f0:	1001951e 	bne	r2,zero,800b748 <___vfiprintf_internal_r+0x1178>
 800b0f4:	6b40100c 	andi	r13,r13,64
 800b0f8:	68019326 	beq	r13,zero,800b748 <___vfiprintf_internal_r+0x1178>
 800b0fc:	d8800117 	ldw	r2,4(sp)
 800b100:	d9000415 	stw	r4,16(sp)
 800b104:	1880000d 	sth	r2,0(r3)
 800b108:	003d5a06 	br	800a674 <___vfiprintf_internal_r+0xa4>
 800b10c:	a0800007 	ldb	r2,0(r20)
 800b110:	10c01b18 	cmpnei	r3,r2,108
 800b114:	18019826 	beq	r3,zero,800b778 <___vfiprintf_internal_r+0x11a8>
 800b118:	6b400414 	ori	r13,r13,16
 800b11c:	003d6d06 	br	800a6d4 <___vfiprintf_internal_r+0x104>
 800b120:	01400044 	movi	r5,1
 800b124:	0009883a 	mov	r4,zero
 800b128:	900d883a 	mov	r6,r18
 800b12c:	003ece06 	br	800ac68 <___vfiprintf_internal_r+0x698>
 800b130:	8dc7c83a 	sub	r3,r17,r23
 800b134:	00fe190e 	bge	zero,r3,800a99c <___vfiprintf_internal_r+0x3cc>
 800b138:	19c00450 	cmplti	r7,r3,17
 800b13c:	3801e41e 	bne	r7,zero,800b8d0 <___vfiprintf_internal_r+0x1300>
 800b140:	01c20074 	movhi	r7,2049
 800b144:	39cbd504 	addi	r7,r7,12116
 800b148:	03400404 	movi	r13,16
 800b14c:	00000606 	br	800b168 <___vfiprintf_internal_r+0xb98>
 800b150:	23800084 	addi	r14,r4,2
 800b154:	84000204 	addi	r16,r16,8
 800b158:	2809883a 	mov	r4,r5
 800b15c:	18fffc04 	addi	r3,r3,-16
 800b160:	19400448 	cmpgei	r5,r3,17
 800b164:	28001c26 	beq	r5,zero,800b1d8 <___vfiprintf_internal_r+0xc08>
 800b168:	21400044 	addi	r5,r4,1
 800b16c:	10800404 	addi	r2,r2,16
 800b170:	81c00015 	stw	r7,0(r16)
 800b174:	83400115 	stw	r13,4(r16)
 800b178:	d8800c15 	stw	r2,48(sp)
 800b17c:	d9400b15 	stw	r5,44(sp)
 800b180:	29800208 	cmpgei	r6,r5,8
 800b184:	303ff226 	beq	r6,zero,800b150 <___vfiprintf_internal_r+0xb80>
 800b188:	d9800a04 	addi	r6,sp,40
 800b18c:	a80b883a 	mov	r5,r21
 800b190:	b009883a 	mov	r4,r22
 800b194:	10007826 	beq	r2,zero,800b378 <___vfiprintf_internal_r+0xda8>
 800b198:	d9c00615 	stw	r7,24(sp)
 800b19c:	d8c00315 	stw	r3,12(sp)
 800b1a0:	da000215 	stw	r8,8(sp)
 800b1a4:	800a4c40 	call	800a4c4 <__sprint_r.part.0>
 800b1a8:	103e1e1e 	bne	r2,zero,800aa24 <___vfiprintf_internal_r+0x454>
 800b1ac:	d8c00317 	ldw	r3,12(sp)
 800b1b0:	d9000b17 	ldw	r4,44(sp)
 800b1b4:	d8800c17 	ldw	r2,48(sp)
 800b1b8:	18fffc04 	addi	r3,r3,-16
 800b1bc:	19400448 	cmpgei	r5,r3,17
 800b1c0:	d9c00617 	ldw	r7,24(sp)
 800b1c4:	da000217 	ldw	r8,8(sp)
 800b1c8:	9021883a 	mov	r16,r18
 800b1cc:	23800044 	addi	r14,r4,1
 800b1d0:	03400404 	movi	r13,16
 800b1d4:	283fe41e 	bne	r5,zero,800b168 <___vfiprintf_internal_r+0xb98>
 800b1d8:	83400204 	addi	r13,r16,8
 800b1dc:	10c5883a 	add	r2,r2,r3
 800b1e0:	80c00115 	stw	r3,4(r16)
 800b1e4:	81c00015 	stw	r7,0(r16)
 800b1e8:	d8800c15 	stw	r2,48(sp)
 800b1ec:	db800b15 	stw	r14,44(sp)
 800b1f0:	70c00208 	cmpgei	r3,r14,8
 800b1f4:	18011326 	beq	r3,zero,800b644 <___vfiprintf_internal_r+0x1074>
 800b1f8:	10018826 	beq	r2,zero,800b81c <___vfiprintf_internal_r+0x124c>
 800b1fc:	d9800a04 	addi	r6,sp,40
 800b200:	a80b883a 	mov	r5,r21
 800b204:	b009883a 	mov	r4,r22
 800b208:	da000215 	stw	r8,8(sp)
 800b20c:	800a4c40 	call	800a4c4 <__sprint_r.part.0>
 800b210:	103e041e 	bne	r2,zero,800aa24 <___vfiprintf_internal_r+0x454>
 800b214:	da000217 	ldw	r8,8(sp)
 800b218:	d9000b17 	ldw	r4,44(sp)
 800b21c:	d8800c17 	ldw	r2,48(sp)
 800b220:	4711c83a 	sub	r8,r8,fp
 800b224:	d9801904 	addi	r6,sp,100
 800b228:	21400044 	addi	r5,r4,1
 800b22c:	9021883a 	mov	r16,r18
 800b230:	023ddc0e 	bge	zero,r8,800a9a4 <___vfiprintf_internal_r+0x3d4>
 800b234:	40c00450 	cmplti	r3,r8,17
 800b238:	01c20074 	movhi	r7,2049
 800b23c:	1801741e 	bne	r3,zero,800b810 <___vfiprintf_internal_r+0x1240>
 800b240:	39cbd504 	addi	r7,r7,12116
 800b244:	03400404 	movi	r13,16
 800b248:	00000606 	br	800b264 <___vfiprintf_internal_r+0xc94>
 800b24c:	21400084 	addi	r5,r4,2
 800b250:	84000204 	addi	r16,r16,8
 800b254:	1809883a 	mov	r4,r3
 800b258:	423ffc04 	addi	r8,r8,-16
 800b25c:	40c00448 	cmpgei	r3,r8,17
 800b260:	18001a26 	beq	r3,zero,800b2cc <___vfiprintf_internal_r+0xcfc>
 800b264:	20c00044 	addi	r3,r4,1
 800b268:	10800404 	addi	r2,r2,16
 800b26c:	81c00015 	stw	r7,0(r16)
 800b270:	83400115 	stw	r13,4(r16)
 800b274:	d8800c15 	stw	r2,48(sp)
 800b278:	d8c00b15 	stw	r3,44(sp)
 800b27c:	19400208 	cmpgei	r5,r3,8
 800b280:	283ff226 	beq	r5,zero,800b24c <___vfiprintf_internal_r+0xc7c>
 800b284:	d9800a04 	addi	r6,sp,40
 800b288:	a80b883a 	mov	r5,r21
 800b28c:	b009883a 	mov	r4,r22
 800b290:	10001a26 	beq	r2,zero,800b2fc <___vfiprintf_internal_r+0xd2c>
 800b294:	d9c00315 	stw	r7,12(sp)
 800b298:	da000215 	stw	r8,8(sp)
 800b29c:	800a4c40 	call	800a4c4 <__sprint_r.part.0>
 800b2a0:	103de01e 	bne	r2,zero,800aa24 <___vfiprintf_internal_r+0x454>
 800b2a4:	da000217 	ldw	r8,8(sp)
 800b2a8:	d9000b17 	ldw	r4,44(sp)
 800b2ac:	d8800c17 	ldw	r2,48(sp)
 800b2b0:	423ffc04 	addi	r8,r8,-16
 800b2b4:	40c00448 	cmpgei	r3,r8,17
 800b2b8:	d9c00317 	ldw	r7,12(sp)
 800b2bc:	9021883a 	mov	r16,r18
 800b2c0:	21400044 	addi	r5,r4,1
 800b2c4:	03400404 	movi	r13,16
 800b2c8:	183fe61e 	bne	r3,zero,800b264 <___vfiprintf_internal_r+0xc94>
 800b2cc:	81000204 	addi	r4,r16,8
 800b2d0:	1205883a 	add	r2,r2,r8
 800b2d4:	81c00015 	stw	r7,0(r16)
 800b2d8:	82000115 	stw	r8,4(r16)
 800b2dc:	d8800c15 	stw	r2,48(sp)
 800b2e0:	d9400b15 	stw	r5,44(sp)
 800b2e4:	28c00208 	cmpgei	r3,r5,8
 800b2e8:	1800a41e 	bne	r3,zero,800b57c <___vfiprintf_internal_r+0xfac>
 800b2ec:	29400044 	addi	r5,r5,1
 800b2f0:	21800204 	addi	r6,r4,8
 800b2f4:	2021883a 	mov	r16,r4
 800b2f8:	003daa06 	br	800a9a4 <___vfiprintf_internal_r+0x3d4>
 800b2fc:	01400044 	movi	r5,1
 800b300:	0009883a 	mov	r4,zero
 800b304:	9021883a 	mov	r16,r18
 800b308:	003fd306 	br	800b258 <___vfiprintf_internal_r+0xc88>
 800b30c:	10c00060 	cmpeqi	r3,r2,1
 800b310:	1801561e 	bne	r3,zero,800b86c <___vfiprintf_internal_r+0x129c>
 800b314:	108000a0 	cmpeqi	r2,r2,2
 800b318:	db400017 	ldw	r13,0(sp)
 800b31c:	103ef626 	beq	r2,zero,800aef8 <___vfiprintf_internal_r+0x928>
 800b320:	9027883a 	mov	r19,r18
 800b324:	d9000517 	ldw	r4,20(sp)
 800b328:	b88003cc 	andi	r2,r23,15
 800b32c:	e006973a 	slli	r3,fp,28
 800b330:	b82ed13a 	srli	r23,r23,4
 800b334:	2085883a 	add	r2,r4,r2
 800b338:	10800003 	ldbu	r2,0(r2)
 800b33c:	e038d13a 	srli	fp,fp,4
 800b340:	1deeb03a 	or	r23,r3,r23
 800b344:	98bfffc5 	stb	r2,-1(r19)
 800b348:	bf04b03a 	or	r2,r23,fp
 800b34c:	9cffffc4 	addi	r19,r19,-1
 800b350:	103ff41e 	bne	r2,zero,800b324 <___vfiprintf_internal_r+0xd54>
 800b354:	94f9c83a 	sub	fp,r18,r19
 800b358:	db400015 	stw	r13,0(sp)
 800b35c:	003eff06 	br	800af5c <___vfiprintf_internal_r+0x98c>
 800b360:	d9800a04 	addi	r6,sp,40
 800b364:	a80b883a 	mov	r5,r21
 800b368:	b009883a 	mov	r4,r22
 800b36c:	800a4c40 	call	800a4c4 <__sprint_r.part.0>
 800b370:	103da626 	beq	r2,zero,800aa0c <___vfiprintf_internal_r+0x43c>
 800b374:	003dab06 	br	800aa24 <___vfiprintf_internal_r+0x454>
 800b378:	03800044 	movi	r14,1
 800b37c:	0009883a 	mov	r4,zero
 800b380:	9021883a 	mov	r16,r18
 800b384:	003f7506 	br	800b15c <___vfiprintf_internal_r+0xb8c>
 800b388:	10009026 	beq	r2,zero,800b5cc <___vfiprintf_internal_r+0xffc>
 800b38c:	d9800a04 	addi	r6,sp,40
 800b390:	a80b883a 	mov	r5,r21
 800b394:	b009883a 	mov	r4,r22
 800b398:	da000615 	stw	r8,24(sp)
 800b39c:	db400315 	stw	r13,12(sp)
 800b3a0:	db800215 	stw	r14,8(sp)
 800b3a4:	800a4c40 	call	800a4c4 <__sprint_r.part.0>
 800b3a8:	103d9e1e 	bne	r2,zero,800aa24 <___vfiprintf_internal_r+0x454>
 800b3ac:	d9000b17 	ldw	r4,44(sp)
 800b3b0:	d8800c17 	ldw	r2,48(sp)
 800b3b4:	da000617 	ldw	r8,24(sp)
 800b3b8:	db400317 	ldw	r13,12(sp)
 800b3bc:	db800217 	ldw	r14,8(sp)
 800b3c0:	d9801904 	addi	r6,sp,100
 800b3c4:	21400044 	addi	r5,r4,1
 800b3c8:	9021883a 	mov	r16,r18
 800b3cc:	003d5806 	br	800a930 <___vfiprintf_internal_r+0x360>
 800b3d0:	d8800984 	addi	r2,sp,38
 800b3d4:	d8801715 	stw	r2,92(sp)
 800b3d8:	00800084 	movi	r2,2
 800b3dc:	d8801815 	stw	r2,96(sp)
 800b3e0:	d9801904 	addi	r6,sp,100
 800b3e4:	01400044 	movi	r5,1
 800b3e8:	3021883a 	mov	r16,r6
 800b3ec:	2809883a 	mov	r4,r5
 800b3f0:	21400044 	addi	r5,r4,1
 800b3f4:	81800204 	addi	r6,r16,8
 800b3f8:	003d6606 	br	800a994 <___vfiprintf_internal_r+0x3c4>
 800b3fc:	db400017 	ldw	r13,0(sp)
 800b400:	003eb906 	br	800aee8 <___vfiprintf_internal_r+0x918>
 800b404:	9027883a 	mov	r19,r18
 800b408:	b809883a 	mov	r4,r23
 800b40c:	e00b883a 	mov	r5,fp
 800b410:	01800284 	movi	r6,10
 800b414:	000f883a 	mov	r7,zero
 800b418:	db800315 	stw	r14,12(sp)
 800b41c:	da000215 	stw	r8,8(sp)
 800b420:	db400015 	stw	r13,0(sp)
 800b424:	800d1780 	call	800d178 <__umoddi3>
 800b428:	10800c04 	addi	r2,r2,48
 800b42c:	b809883a 	mov	r4,r23
 800b430:	e00b883a 	mov	r5,fp
 800b434:	98bfffc5 	stb	r2,-1(r19)
 800b438:	01800284 	movi	r6,10
 800b43c:	000f883a 	mov	r7,zero
 800b440:	800cb580 	call	800cb58 <__udivdi3>
 800b444:	e009883a 	mov	r4,fp
 800b448:	b80b883a 	mov	r5,r23
 800b44c:	db400017 	ldw	r13,0(sp)
 800b450:	da000217 	ldw	r8,8(sp)
 800b454:	db800317 	ldw	r14,12(sp)
 800b458:	9cffffc4 	addi	r19,r19,-1
 800b45c:	102f883a 	mov	r23,r2
 800b460:	1839883a 	mov	fp,r3
 800b464:	203fe81e 	bne	r4,zero,800b408 <___vfiprintf_internal_r+0xe38>
 800b468:	294002a8 	cmpgeui	r5,r5,10
 800b46c:	283fe61e 	bne	r5,zero,800b408 <___vfiprintf_internal_r+0xe38>
 800b470:	94f9c83a 	sub	fp,r18,r19
 800b474:	003eb906 	br	800af5c <___vfiprintf_internal_r+0x98c>
 800b478:	19400450 	cmplti	r5,r3,17
 800b47c:	01c20074 	movhi	r7,2049
 800b480:	2801061e 	bne	r5,zero,800b89c <___vfiprintf_internal_r+0x12cc>
 800b484:	39cbd904 	addi	r7,r7,12132
 800b488:	03c00404 	movi	r15,16
 800b48c:	00000706 	br	800b4ac <___vfiprintf_internal_r+0xedc>
 800b490:	27c00084 	addi	ra,r4,2
 800b494:	84000204 	addi	r16,r16,8
 800b498:	3009883a 	mov	r4,r6
 800b49c:	18fffc04 	addi	r3,r3,-16
 800b4a0:	19400448 	cmpgei	r5,r3,17
 800b4a4:	28002026 	beq	r5,zero,800b528 <___vfiprintf_internal_r+0xf58>
 800b4a8:	21800044 	addi	r6,r4,1
 800b4ac:	10800404 	addi	r2,r2,16
 800b4b0:	81c00015 	stw	r7,0(r16)
 800b4b4:	83c00115 	stw	r15,4(r16)
 800b4b8:	d8800c15 	stw	r2,48(sp)
 800b4bc:	d9800b15 	stw	r6,44(sp)
 800b4c0:	31400208 	cmpgei	r5,r6,8
 800b4c4:	283ff226 	beq	r5,zero,800b490 <___vfiprintf_internal_r+0xec0>
 800b4c8:	d9800a04 	addi	r6,sp,40
 800b4cc:	a80b883a 	mov	r5,r21
 800b4d0:	b009883a 	mov	r4,r22
 800b4d4:	10001f26 	beq	r2,zero,800b554 <___vfiprintf_internal_r+0xf84>
 800b4d8:	d9c00815 	stw	r7,32(sp)
 800b4dc:	d8c00715 	stw	r3,28(sp)
 800b4e0:	da000615 	stw	r8,24(sp)
 800b4e4:	db400315 	stw	r13,12(sp)
 800b4e8:	db800215 	stw	r14,8(sp)
 800b4ec:	800a4c40 	call	800a4c4 <__sprint_r.part.0>
 800b4f0:	103d4c1e 	bne	r2,zero,800aa24 <___vfiprintf_internal_r+0x454>
 800b4f4:	d8c00717 	ldw	r3,28(sp)
 800b4f8:	d9000b17 	ldw	r4,44(sp)
 800b4fc:	d8800c17 	ldw	r2,48(sp)
 800b500:	18fffc04 	addi	r3,r3,-16
 800b504:	19400448 	cmpgei	r5,r3,17
 800b508:	d9c00817 	ldw	r7,32(sp)
 800b50c:	da000617 	ldw	r8,24(sp)
 800b510:	db400317 	ldw	r13,12(sp)
 800b514:	db800217 	ldw	r14,8(sp)
 800b518:	9021883a 	mov	r16,r18
 800b51c:	27c00044 	addi	ra,r4,1
 800b520:	03c00404 	movi	r15,16
 800b524:	283fe01e 	bne	r5,zero,800b4a8 <___vfiprintf_internal_r+0xed8>
 800b528:	10c5883a 	add	r2,r2,r3
 800b52c:	80c00115 	stw	r3,4(r16)
 800b530:	81c00015 	stw	r7,0(r16)
 800b534:	d8800c15 	stw	r2,48(sp)
 800b538:	dfc00b15 	stw	ra,44(sp)
 800b53c:	f8c00208 	cmpgei	r3,ra,8
 800b540:	18002d1e 	bne	r3,zero,800b5f8 <___vfiprintf_internal_r+0x1028>
 800b544:	84000204 	addi	r16,r16,8
 800b548:	f9400044 	addi	r5,ra,1
 800b54c:	f809883a 	mov	r4,ra
 800b550:	003ce706 	br	800a8f0 <___vfiprintf_internal_r+0x320>
 800b554:	0009883a 	mov	r4,zero
 800b558:	07c00044 	movi	ra,1
 800b55c:	9021883a 	mov	r16,r18
 800b560:	003fce06 	br	800b49c <___vfiprintf_internal_r+0xecc>
 800b564:	8dc0010e 	bge	r17,r23,800b56c <___vfiprintf_internal_r+0xf9c>
 800b568:	b823883a 	mov	r17,r23
 800b56c:	d8800117 	ldw	r2,4(sp)
 800b570:	1445883a 	add	r2,r2,r17
 800b574:	d8800115 	stw	r2,4(sp)
 800b578:	003d2406 	br	800aa0c <___vfiprintf_internal_r+0x43c>
 800b57c:	10007626 	beq	r2,zero,800b758 <___vfiprintf_internal_r+0x1188>
 800b580:	d9800a04 	addi	r6,sp,40
 800b584:	a80b883a 	mov	r5,r21
 800b588:	b009883a 	mov	r4,r22
 800b58c:	800a4c40 	call	800a4c4 <__sprint_r.part.0>
 800b590:	103d241e 	bne	r2,zero,800aa24 <___vfiprintf_internal_r+0x454>
 800b594:	d9400b17 	ldw	r5,44(sp)
 800b598:	d8800c17 	ldw	r2,48(sp)
 800b59c:	d9801904 	addi	r6,sp,100
 800b5a0:	29400044 	addi	r5,r5,1
 800b5a4:	9021883a 	mov	r16,r18
 800b5a8:	003cfe06 	br	800a9a4 <___vfiprintf_internal_r+0x3d4>
 800b5ac:	d8000b15 	stw	zero,44(sp)
 800b5b0:	9021883a 	mov	r16,r18
 800b5b4:	003d7606 	br	800ab90 <___vfiprintf_internal_r+0x5c0>
 800b5b8:	4000ac1e 	bne	r8,zero,800b86c <___vfiprintf_internal_r+0x129c>
 800b5bc:	0011883a 	mov	r8,zero
 800b5c0:	0039883a 	mov	fp,zero
 800b5c4:	9027883a 	mov	r19,r18
 800b5c8:	003e6406 	br	800af5c <___vfiprintf_internal_r+0x98c>
 800b5cc:	7000411e 	bne	r14,zero,800b6d4 <___vfiprintf_internal_r+0x1104>
 800b5d0:	0009883a 	mov	r4,zero
 800b5d4:	d9801904 	addi	r6,sp,100
 800b5d8:	01400044 	movi	r5,1
 800b5dc:	9021883a 	mov	r16,r18
 800b5e0:	003cec06 	br	800a994 <___vfiprintf_internal_r+0x3c4>
 800b5e4:	d9801904 	addi	r6,sp,100
 800b5e8:	01400044 	movi	r5,1
 800b5ec:	0009883a 	mov	r4,zero
 800b5f0:	9021883a 	mov	r16,r18
 800b5f4:	003ce706 	br	800a994 <___vfiprintf_internal_r+0x3c4>
 800b5f8:	10004a26 	beq	r2,zero,800b724 <___vfiprintf_internal_r+0x1154>
 800b5fc:	d9800a04 	addi	r6,sp,40
 800b600:	a80b883a 	mov	r5,r21
 800b604:	b009883a 	mov	r4,r22
 800b608:	da000615 	stw	r8,24(sp)
 800b60c:	db400315 	stw	r13,12(sp)
 800b610:	db800215 	stw	r14,8(sp)
 800b614:	800a4c40 	call	800a4c4 <__sprint_r.part.0>
 800b618:	103d021e 	bne	r2,zero,800aa24 <___vfiprintf_internal_r+0x454>
 800b61c:	d9000b17 	ldw	r4,44(sp)
 800b620:	d8800c17 	ldw	r2,48(sp)
 800b624:	da000617 	ldw	r8,24(sp)
 800b628:	db400317 	ldw	r13,12(sp)
 800b62c:	db800217 	ldw	r14,8(sp)
 800b630:	9021883a 	mov	r16,r18
 800b634:	21400044 	addi	r5,r4,1
 800b638:	003cad06 	br	800a8f0 <___vfiprintf_internal_r+0x320>
 800b63c:	9027883a 	mov	r19,r18
 800b640:	003e4606 	br	800af5c <___vfiprintf_internal_r+0x98c>
 800b644:	71400044 	addi	r5,r14,1
 800b648:	69800204 	addi	r6,r13,8
 800b64c:	7009883a 	mov	r4,r14
 800b650:	6821883a 	mov	r16,r13
 800b654:	003cd106 	br	800a99c <___vfiprintf_internal_r+0x3cc>
 800b658:	25c00017 	ldw	r23,0(r4)
 800b65c:	d8c00415 	stw	r3,16(sp)
 800b660:	b839d7fa 	srai	fp,r23,31
 800b664:	e005883a 	mov	r2,fp
 800b668:	003db406 	br	800ad3c <___vfiprintf_internal_r+0x76c>
 800b66c:	00c00c04 	movi	r3,48
 800b670:	d88009c5 	stb	r2,39(sp)
 800b674:	d8c00985 	stb	r3,38(sp)
 800b678:	6b400094 	ori	r13,r13,2
 800b67c:	00800084 	movi	r2,2
 800b680:	003d2506 	br	800ab18 <___vfiprintf_internal_r+0x548>
 800b684:	25c00017 	ldw	r23,0(r4)
 800b688:	0039883a 	mov	fp,zero
 800b68c:	d8c00415 	stw	r3,16(sp)
 800b690:	0005883a 	mov	r2,zero
 800b694:	003d2006 	br	800ab18 <___vfiprintf_internal_r+0x548>
 800b698:	d9400117 	ldw	r5,4(sp)
 800b69c:	d9000415 	stw	r4,16(sp)
 800b6a0:	2805d7fa 	srai	r2,r5,31
 800b6a4:	19400015 	stw	r5,0(r3)
 800b6a8:	18800115 	stw	r2,4(r3)
 800b6ac:	003bf106 	br	800a674 <___vfiprintf_internal_r+0xa4>
 800b6b0:	2dc00017 	ldw	r23,0(r5)
 800b6b4:	0039883a 	mov	fp,zero
 800b6b8:	d9000415 	stw	r4,16(sp)
 800b6bc:	003dc106 	br	800adc4 <___vfiprintf_internal_r+0x7f4>
 800b6c0:	25c00017 	ldw	r23,0(r4)
 800b6c4:	0039883a 	mov	fp,zero
 800b6c8:	d8c00415 	stw	r3,16(sp)
 800b6cc:	00800044 	movi	r2,1
 800b6d0:	003d1106 	br	800ab18 <___vfiprintf_internal_r+0x548>
 800b6d4:	d8800984 	addi	r2,sp,38
 800b6d8:	d8801715 	stw	r2,92(sp)
 800b6dc:	00800084 	movi	r2,2
 800b6e0:	d8801815 	stw	r2,96(sp)
 800b6e4:	dc001904 	addi	r16,sp,100
 800b6e8:	01000044 	movi	r4,1
 800b6ec:	003f4006 	br	800b3f0 <___vfiprintf_internal_r+0xe20>
 800b6f0:	0463c83a 	sub	r17,zero,r17
 800b6f4:	d8c00415 	stw	r3,16(sp)
 800b6f8:	003e3806 	br	800afdc <___vfiprintf_internal_r+0xa0c>
 800b6fc:	9809883a 	mov	r4,r19
 800b700:	d8c00215 	stw	r3,8(sp)
 800b704:	db400015 	stw	r13,0(sp)
 800b708:	8002ddc0 	call	8002ddc <strlen>
 800b70c:	d8c00217 	ldw	r3,8(sp)
 800b710:	db400017 	ldw	r13,0(sp)
 800b714:	1039883a 	mov	fp,r2
 800b718:	102f883a 	mov	r23,r2
 800b71c:	d8c00415 	stw	r3,16(sp)
 800b720:	003c6406 	br	800a8b4 <___vfiprintf_internal_r+0x2e4>
 800b724:	d8c00947 	ldb	r3,37(sp)
 800b728:	18004326 	beq	r3,zero,800b838 <___vfiprintf_internal_r+0x1268>
 800b72c:	d8800944 	addi	r2,sp,37
 800b730:	d8801715 	stw	r2,92(sp)
 800b734:	00800044 	movi	r2,1
 800b738:	d8801815 	stw	r2,96(sp)
 800b73c:	d9801904 	addi	r6,sp,100
 800b740:	01400044 	movi	r5,1
 800b744:	003c7606 	br	800a920 <___vfiprintf_internal_r+0x350>
 800b748:	d8800117 	ldw	r2,4(sp)
 800b74c:	18800015 	stw	r2,0(r3)
 800b750:	d9000415 	stw	r4,16(sp)
 800b754:	003bc706 	br	800a674 <___vfiprintf_internal_r+0xa4>
 800b758:	00c00044 	movi	r3,1
 800b75c:	e005883a 	mov	r2,fp
 800b760:	dcc01715 	stw	r19,92(sp)
 800b764:	df001815 	stw	fp,96(sp)
 800b768:	df000c15 	stw	fp,48(sp)
 800b76c:	d8c00b15 	stw	r3,44(sp)
 800b770:	d9801904 	addi	r6,sp,100
 800b774:	003c9a06 	br	800a9e0 <___vfiprintf_internal_r+0x410>
 800b778:	a0800043 	ldbu	r2,1(r20)
 800b77c:	6b400814 	ori	r13,r13,32
 800b780:	a5000044 	addi	r20,r20,1
 800b784:	10803fcc 	andi	r2,r2,255
 800b788:	1080201c 	xori	r2,r2,128
 800b78c:	10bfe004 	addi	r2,r2,-128
 800b790:	003bd006 	br	800a6d4 <___vfiprintf_internal_r+0x104>
 800b794:	408001f0 	cmpltui	r2,r8,7
 800b798:	4039883a 	mov	fp,r8
 800b79c:	10002426 	beq	r2,zero,800b830 <___vfiprintf_internal_r+0x1260>
 800b7a0:	04c20074 	movhi	r19,2049
 800b7a4:	e02f883a 	mov	r23,fp
 800b7a8:	d8c00415 	stw	r3,16(sp)
 800b7ac:	9ccb5804 	addi	r19,r19,11616
 800b7b0:	003c4006 	br	800a8b4 <___vfiprintf_internal_r+0x2e4>
 800b7b4:	d8c00417 	ldw	r3,16(sp)
 800b7b8:	0039883a 	mov	fp,zero
 800b7bc:	d9000415 	stw	r4,16(sp)
 800b7c0:	1dc00017 	ldw	r23,0(r3)
 800b7c4:	003d7f06 	br	800adc4 <___vfiprintf_internal_r+0x7f4>
 800b7c8:	d8800417 	ldw	r2,16(sp)
 800b7cc:	0039883a 	mov	fp,zero
 800b7d0:	d8c00415 	stw	r3,16(sp)
 800b7d4:	15c00017 	ldw	r23,0(r2)
 800b7d8:	0005883a 	mov	r2,zero
 800b7dc:	003cce06 	br	800ab18 <___vfiprintf_internal_r+0x548>
 800b7e0:	d8800417 	ldw	r2,16(sp)
 800b7e4:	d8c00415 	stw	r3,16(sp)
 800b7e8:	15c00017 	ldw	r23,0(r2)
 800b7ec:	b839d7fa 	srai	fp,r23,31
 800b7f0:	e005883a 	mov	r2,fp
 800b7f4:	003d5106 	br	800ad3c <___vfiprintf_internal_r+0x76c>
 800b7f8:	d8800417 	ldw	r2,16(sp)
 800b7fc:	0039883a 	mov	fp,zero
 800b800:	d8c00415 	stw	r3,16(sp)
 800b804:	15c00017 	ldw	r23,0(r2)
 800b808:	00800044 	movi	r2,1
 800b80c:	003cc206 	br	800ab18 <___vfiprintf_internal_r+0x548>
 800b810:	3009883a 	mov	r4,r6
 800b814:	39cbd504 	addi	r7,r7,12116
 800b818:	003ead06 	br	800b2d0 <___vfiprintf_internal_r+0xd00>
 800b81c:	d9801904 	addi	r6,sp,100
 800b820:	01400044 	movi	r5,1
 800b824:	0009883a 	mov	r4,zero
 800b828:	9021883a 	mov	r16,r18
 800b82c:	003c5b06 	br	800a99c <___vfiprintf_internal_r+0x3cc>
 800b830:	07000184 	movi	fp,6
 800b834:	003fda06 	br	800b7a0 <___vfiprintf_internal_r+0x11d0>
 800b838:	703ee51e 	bne	r14,zero,800b3d0 <___vfiprintf_internal_r+0xe00>
 800b83c:	0009883a 	mov	r4,zero
 800b840:	d9801904 	addi	r6,sp,100
 800b844:	01400044 	movi	r5,1
 800b848:	9021883a 	mov	r16,r18
 800b84c:	003c5306 	br	800a99c <___vfiprintf_internal_r+0x3cc>
 800b850:	d9800945 	stb	r6,37(sp)
 800b854:	003c1106 	br	800a89c <___vfiprintf_internal_r+0x2cc>
 800b858:	d9800a04 	addi	r6,sp,40
 800b85c:	a80b883a 	mov	r5,r21
 800b860:	b009883a 	mov	r4,r22
 800b864:	800a4c40 	call	800a4c4 <__sprint_r.part.0>
 800b868:	003c6e06 	br	800aa24 <___vfiprintf_internal_r+0x454>
 800b86c:	db400017 	ldw	r13,0(sp)
 800b870:	003d3f06 	br	800ad70 <___vfiprintf_internal_r+0x7a0>
 800b874:	402f883a 	mov	r23,r8
 800b878:	d8c00415 	stw	r3,16(sp)
 800b87c:	4039883a 	mov	fp,r8
 800b880:	003c0c06 	br	800a8b4 <___vfiprintf_internal_r+0x2e4>
 800b884:	d9800945 	stb	r6,37(sp)
 800b888:	003d2406 	br	800ad1c <___vfiprintf_internal_r+0x74c>
 800b88c:	d9800945 	stb	r6,37(sp)
 800b890:	003d4206 	br	800ad9c <___vfiprintf_internal_r+0x7cc>
 800b894:	d9800945 	stb	r6,37(sp)
 800b898:	003d7a06 	br	800ae84 <___vfiprintf_internal_r+0x8b4>
 800b89c:	303f883a 	mov	ra,r6
 800b8a0:	39cbd904 	addi	r7,r7,12132
 800b8a4:	003f2006 	br	800b528 <___vfiprintf_internal_r+0xf58>
 800b8a8:	d9800945 	stb	r6,37(sp)
 800b8ac:	003df806 	br	800b090 <___vfiprintf_internal_r+0xac0>
 800b8b0:	d9800945 	stb	r6,37(sp)
 800b8b4:	003e0806 	br	800b0d8 <___vfiprintf_internal_r+0xb08>
 800b8b8:	21400044 	addi	r5,r4,1
 800b8bc:	39cbd904 	addi	r7,r7,12132
 800b8c0:	003d0306 	br	800acd0 <___vfiprintf_internal_r+0x700>
 800b8c4:	00bfffc4 	movi	r2,-1
 800b8c8:	d8800115 	stw	r2,4(sp)
 800b8cc:	003c5806 	br	800aa30 <___vfiprintf_internal_r+0x460>
 800b8d0:	01c20074 	movhi	r7,2049
 800b8d4:	301b883a 	mov	r13,r6
 800b8d8:	281d883a 	mov	r14,r5
 800b8dc:	39cbd504 	addi	r7,r7,12116
 800b8e0:	003e3e06 	br	800b1dc <___vfiprintf_internal_r+0xc0c>
 800b8e4:	d8800417 	ldw	r2,16(sp)
 800b8e8:	12000017 	ldw	r8,0(r2)
 800b8ec:	11000104 	addi	r4,r2,4
 800b8f0:	4000010e 	bge	r8,zero,800b8f8 <___vfiprintf_internal_r+0x1328>
 800b8f4:	023fffc4 	movi	r8,-1
 800b8f8:	a0800043 	ldbu	r2,1(r20)
 800b8fc:	d9000415 	stw	r4,16(sp)
 800b900:	1829883a 	mov	r20,r3
 800b904:	10803fcc 	andi	r2,r2,255
 800b908:	1080201c 	xori	r2,r2,128
 800b90c:	10bfe004 	addi	r2,r2,-128
 800b910:	003b7006 	br	800a6d4 <___vfiprintf_internal_r+0x104>

0800b914 <__vfiprintf_internal>:
 800b914:	00c20074 	movhi	r3,2049
 800b918:	2005883a 	mov	r2,r4
 800b91c:	1913d817 	ldw	r4,20320(r3)
 800b920:	300f883a 	mov	r7,r6
 800b924:	280d883a 	mov	r6,r5
 800b928:	100b883a 	mov	r5,r2
 800b92c:	800a5d01 	jmpi	800a5d0 <___vfiprintf_internal_r>

0800b930 <__sbprintf>:
 800b930:	2880030b 	ldhu	r2,12(r5)
 800b934:	2b001917 	ldw	r12,100(r5)
 800b938:	2ac0038b 	ldhu	r11,14(r5)
 800b93c:	2a800717 	ldw	r10,28(r5)
 800b940:	2a400917 	ldw	r9,36(r5)
 800b944:	defee204 	addi	sp,sp,-1144
 800b948:	da001a04 	addi	r8,sp,104
 800b94c:	00c10004 	movi	r3,1024
 800b950:	dc011a15 	stw	r16,1128(sp)
 800b954:	10bfff4c 	andi	r2,r2,65533
 800b958:	2821883a 	mov	r16,r5
 800b95c:	d80b883a 	mov	r5,sp
 800b960:	dc811c15 	stw	r18,1136(sp)
 800b964:	dc411b15 	stw	r17,1132(sp)
 800b968:	dfc11d15 	stw	ra,1140(sp)
 800b96c:	2025883a 	mov	r18,r4
 800b970:	d880030d 	sth	r2,12(sp)
 800b974:	db001915 	stw	r12,100(sp)
 800b978:	dac0038d 	sth	r11,14(sp)
 800b97c:	da800715 	stw	r10,28(sp)
 800b980:	da400915 	stw	r9,36(sp)
 800b984:	da000015 	stw	r8,0(sp)
 800b988:	da000415 	stw	r8,16(sp)
 800b98c:	d8c00215 	stw	r3,8(sp)
 800b990:	d8c00515 	stw	r3,20(sp)
 800b994:	d8000615 	stw	zero,24(sp)
 800b998:	800a5d00 	call	800a5d0 <___vfiprintf_internal_r>
 800b99c:	1023883a 	mov	r17,r2
 800b9a0:	10000d0e 	bge	r2,zero,800b9d8 <__sbprintf+0xa8>
 800b9a4:	d880030b 	ldhu	r2,12(sp)
 800b9a8:	1080100c 	andi	r2,r2,64
 800b9ac:	10000326 	beq	r2,zero,800b9bc <__sbprintf+0x8c>
 800b9b0:	8080030b 	ldhu	r2,12(r16)
 800b9b4:	10801014 	ori	r2,r2,64
 800b9b8:	8080030d 	sth	r2,12(r16)
 800b9bc:	8805883a 	mov	r2,r17
 800b9c0:	dfc11d17 	ldw	ra,1140(sp)
 800b9c4:	dc811c17 	ldw	r18,1136(sp)
 800b9c8:	dc411b17 	ldw	r17,1132(sp)
 800b9cc:	dc011a17 	ldw	r16,1128(sp)
 800b9d0:	dec11e04 	addi	sp,sp,1144
 800b9d4:	f800283a 	ret
 800b9d8:	d80b883a 	mov	r5,sp
 800b9dc:	9009883a 	mov	r4,r18
 800b9e0:	8006d480 	call	8006d48 <_fflush_r>
 800b9e4:	103fef26 	beq	r2,zero,800b9a4 <__sbprintf+0x74>
 800b9e8:	047fffc4 	movi	r17,-1
 800b9ec:	003fed06 	br	800b9a4 <__sbprintf+0x74>

0800b9f0 <__swbuf_r>:
 800b9f0:	defffb04 	addi	sp,sp,-20
 800b9f4:	dcc00315 	stw	r19,12(sp)
 800b9f8:	dc400115 	stw	r17,4(sp)
 800b9fc:	dc000015 	stw	r16,0(sp)
 800ba00:	dfc00415 	stw	ra,16(sp)
 800ba04:	dc800215 	stw	r18,8(sp)
 800ba08:	2027883a 	mov	r19,r4
 800ba0c:	2823883a 	mov	r17,r5
 800ba10:	3021883a 	mov	r16,r6
 800ba14:	20000226 	beq	r4,zero,800ba20 <__swbuf_r+0x30>
 800ba18:	20800e17 	ldw	r2,56(r4)
 800ba1c:	10003e26 	beq	r2,zero,800bb18 <__swbuf_r+0x128>
 800ba20:	80800617 	ldw	r2,24(r16)
 800ba24:	80c0030b 	ldhu	r3,12(r16)
 800ba28:	80800215 	stw	r2,8(r16)
 800ba2c:	1880020c 	andi	r2,r3,8
 800ba30:	10001f26 	beq	r2,zero,800bab0 <__swbuf_r+0xc0>
 800ba34:	80800417 	ldw	r2,16(r16)
 800ba38:	10001d26 	beq	r2,zero,800bab0 <__swbuf_r+0xc0>
 800ba3c:	1948000c 	andi	r5,r3,8192
 800ba40:	8c803fcc 	andi	r18,r17,255
 800ba44:	28002326 	beq	r5,zero,800bad4 <__swbuf_r+0xe4>
 800ba48:	80c00017 	ldw	r3,0(r16)
 800ba4c:	81000517 	ldw	r4,20(r16)
 800ba50:	1885c83a 	sub	r2,r3,r2
 800ba54:	1100290e 	bge	r2,r4,800bafc <__swbuf_r+0x10c>
 800ba58:	10800044 	addi	r2,r2,1
 800ba5c:	81400217 	ldw	r5,8(r16)
 800ba60:	19000044 	addi	r4,r3,1
 800ba64:	81000015 	stw	r4,0(r16)
 800ba68:	297fffc4 	addi	r5,r5,-1
 800ba6c:	81400215 	stw	r5,8(r16)
 800ba70:	1c400005 	stb	r17,0(r3)
 800ba74:	80c00517 	ldw	r3,20(r16)
 800ba78:	18802926 	beq	r3,r2,800bb20 <__swbuf_r+0x130>
 800ba7c:	8080030b 	ldhu	r2,12(r16)
 800ba80:	1080004c 	andi	r2,r2,1
 800ba84:	10000226 	beq	r2,zero,800ba90 <__swbuf_r+0xa0>
 800ba88:	90800298 	cmpnei	r2,r18,10
 800ba8c:	10002426 	beq	r2,zero,800bb20 <__swbuf_r+0x130>
 800ba90:	9005883a 	mov	r2,r18
 800ba94:	dfc00417 	ldw	ra,16(sp)
 800ba98:	dcc00317 	ldw	r19,12(sp)
 800ba9c:	dc800217 	ldw	r18,8(sp)
 800baa0:	dc400117 	ldw	r17,4(sp)
 800baa4:	dc000017 	ldw	r16,0(sp)
 800baa8:	dec00504 	addi	sp,sp,20
 800baac:	f800283a 	ret
 800bab0:	800b883a 	mov	r5,r16
 800bab4:	9809883a 	mov	r4,r19
 800bab8:	80050540 	call	8005054 <__swsetup_r>
 800babc:	10001c1e 	bne	r2,zero,800bb30 <__swbuf_r+0x140>
 800bac0:	80c0030b 	ldhu	r3,12(r16)
 800bac4:	80800417 	ldw	r2,16(r16)
 800bac8:	8c803fcc 	andi	r18,r17,255
 800bacc:	1948000c 	andi	r5,r3,8192
 800bad0:	283fdd1e 	bne	r5,zero,800ba48 <__swbuf_r+0x58>
 800bad4:	81001917 	ldw	r4,100(r16)
 800bad8:	18c80014 	ori	r3,r3,8192
 800badc:	0177ffc4 	movi	r5,-8193
 800bae0:	2148703a 	and	r4,r4,r5
 800bae4:	80c0030d 	sth	r3,12(r16)
 800bae8:	80c00017 	ldw	r3,0(r16)
 800baec:	81001915 	stw	r4,100(r16)
 800baf0:	81000517 	ldw	r4,20(r16)
 800baf4:	1885c83a 	sub	r2,r3,r2
 800baf8:	113fd716 	blt	r2,r4,800ba58 <__swbuf_r+0x68>
 800bafc:	800b883a 	mov	r5,r16
 800bb00:	9809883a 	mov	r4,r19
 800bb04:	8006d480 	call	8006d48 <_fflush_r>
 800bb08:	1000091e 	bne	r2,zero,800bb30 <__swbuf_r+0x140>
 800bb0c:	80c00017 	ldw	r3,0(r16)
 800bb10:	00800044 	movi	r2,1
 800bb14:	003fd106 	br	800ba5c <__swbuf_r+0x6c>
 800bb18:	80071900 	call	8007190 <__sinit>
 800bb1c:	003fc006 	br	800ba20 <__swbuf_r+0x30>
 800bb20:	800b883a 	mov	r5,r16
 800bb24:	9809883a 	mov	r4,r19
 800bb28:	8006d480 	call	8006d48 <_fflush_r>
 800bb2c:	103fd826 	beq	r2,zero,800ba90 <__swbuf_r+0xa0>
 800bb30:	04bfffc4 	movi	r18,-1
 800bb34:	003fd606 	br	800ba90 <__swbuf_r+0xa0>

0800bb38 <__swbuf>:
 800bb38:	00c20074 	movhi	r3,2049
 800bb3c:	2005883a 	mov	r2,r4
 800bb40:	1913d817 	ldw	r4,20320(r3)
 800bb44:	280d883a 	mov	r6,r5
 800bb48:	100b883a 	mov	r5,r2
 800bb4c:	800b9f01 	jmpi	800b9f0 <__swbuf_r>

0800bb50 <_write_r>:
 800bb50:	2807883a 	mov	r3,r5
 800bb54:	defffe04 	addi	sp,sp,-8
 800bb58:	dc000015 	stw	r16,0(sp)
 800bb5c:	300b883a 	mov	r5,r6
 800bb60:	00820074 	movhi	r2,2049
 800bb64:	380d883a 	mov	r6,r7
 800bb68:	2021883a 	mov	r16,r4
 800bb6c:	1809883a 	mov	r4,r3
 800bb70:	dfc00115 	stw	ra,4(sp)
 800bb74:	101af415 	stw	zero,27600(r2)
 800bb78:	8010ab40 	call	8010ab4 <write>
 800bb7c:	10ffffd8 	cmpnei	r3,r2,-1
 800bb80:	18000426 	beq	r3,zero,800bb94 <_write_r+0x44>
 800bb84:	dfc00117 	ldw	ra,4(sp)
 800bb88:	dc000017 	ldw	r16,0(sp)
 800bb8c:	dec00204 	addi	sp,sp,8
 800bb90:	f800283a 	ret
 800bb94:	00c20074 	movhi	r3,2049
 800bb98:	18daf417 	ldw	r3,27600(r3)
 800bb9c:	183ff926 	beq	r3,zero,800bb84 <_write_r+0x34>
 800bba0:	80c00015 	stw	r3,0(r16)
 800bba4:	dfc00117 	ldw	ra,4(sp)
 800bba8:	dc000017 	ldw	r16,0(sp)
 800bbac:	dec00204 	addi	sp,sp,8
 800bbb0:	f800283a 	ret

0800bbb4 <_close_r>:
 800bbb4:	defffe04 	addi	sp,sp,-8
 800bbb8:	dc000015 	stw	r16,0(sp)
 800bbbc:	00820074 	movhi	r2,2049
 800bbc0:	2021883a 	mov	r16,r4
 800bbc4:	2809883a 	mov	r4,r5
 800bbc8:	dfc00115 	stw	ra,4(sp)
 800bbcc:	101af415 	stw	zero,27600(r2)
 800bbd0:	800feb80 	call	800feb8 <close>
 800bbd4:	10ffffd8 	cmpnei	r3,r2,-1
 800bbd8:	18000426 	beq	r3,zero,800bbec <_close_r+0x38>
 800bbdc:	dfc00117 	ldw	ra,4(sp)
 800bbe0:	dc000017 	ldw	r16,0(sp)
 800bbe4:	dec00204 	addi	sp,sp,8
 800bbe8:	f800283a 	ret
 800bbec:	00c20074 	movhi	r3,2049
 800bbf0:	18daf417 	ldw	r3,27600(r3)
 800bbf4:	183ff926 	beq	r3,zero,800bbdc <_close_r+0x28>
 800bbf8:	80c00015 	stw	r3,0(r16)
 800bbfc:	dfc00117 	ldw	ra,4(sp)
 800bc00:	dc000017 	ldw	r16,0(sp)
 800bc04:	dec00204 	addi	sp,sp,8
 800bc08:	f800283a 	ret

0800bc0c <__assert_func>:
 800bc0c:	00820074 	movhi	r2,2049
 800bc10:	1213d817 	ldw	r8,20320(r2)
 800bc14:	defffc04 	addi	sp,sp,-16
 800bc18:	3807883a 	mov	r3,r7
 800bc1c:	3005883a 	mov	r2,r6
 800bc20:	dfc00315 	stw	ra,12(sp)
 800bc24:	42400317 	ldw	r9,12(r8)
 800bc28:	200f883a 	mov	r7,r4
 800bc2c:	2811883a 	mov	r8,r5
 800bc30:	180d883a 	mov	r6,r3
 800bc34:	10000a26 	beq	r2,zero,800bc60 <__assert_func+0x54>
 800bc38:	00c20074 	movhi	r3,2049
 800bc3c:	18cbdd04 	addi	r3,r3,12148
 800bc40:	01420074 	movhi	r5,2049
 800bc44:	294be104 	addi	r5,r5,12164
 800bc48:	4809883a 	mov	r4,r9
 800bc4c:	d8c00115 	stw	r3,4(sp)
 800bc50:	da000015 	stw	r8,0(sp)
 800bc54:	d8800215 	stw	r2,8(sp)
 800bc58:	800bf080 	call	800bf08 <fiprintf>
 800bc5c:	800c5f00 	call	800c5f0 <abort>
 800bc60:	00c20074 	movhi	r3,2049
 800bc64:	18cbe004 	addi	r3,r3,12160
 800bc68:	1805883a 	mov	r2,r3
 800bc6c:	003ff406 	br	800bc40 <__assert_func+0x34>

0800bc70 <__assert>:
 800bc70:	deffff04 	addi	sp,sp,-4
 800bc74:	300f883a 	mov	r7,r6
 800bc78:	000d883a 	mov	r6,zero
 800bc7c:	dfc00015 	stw	ra,0(sp)
 800bc80:	800bc0c0 	call	800bc0c <__assert_func>

0800bc84 <_calloc_r>:
 800bc84:	defffe04 	addi	sp,sp,-8
 800bc88:	dc000015 	stw	r16,0(sp)
 800bc8c:	2021883a 	mov	r16,r4
 800bc90:	2809883a 	mov	r4,r5
 800bc94:	300b883a 	mov	r5,r6
 800bc98:	dfc00115 	stw	ra,4(sp)
 800bc9c:	8002c500 	call	8002c50 <__mulsi3>
 800bca0:	8009883a 	mov	r4,r16
 800bca4:	100b883a 	mov	r5,r2
 800bca8:	8007e600 	call	8007e60 <_malloc_r>
 800bcac:	1009883a 	mov	r4,r2
 800bcb0:	10000c26 	beq	r2,zero,800bce4 <_calloc_r+0x60>
 800bcb4:	11bfff17 	ldw	r6,-4(r2)
 800bcb8:	00bfff04 	movi	r2,-4
 800bcbc:	308c703a 	and	r6,r6,r2
 800bcc0:	31bfff04 	addi	r6,r6,-4
 800bcc4:	30800968 	cmpgeui	r2,r6,37
 800bcc8:	1000151e 	bne	r2,zero,800bd20 <_calloc_r+0x9c>
 800bccc:	30800530 	cmpltui	r2,r6,20
 800bcd0:	10000926 	beq	r2,zero,800bcf8 <_calloc_r+0x74>
 800bcd4:	2005883a 	mov	r2,r4
 800bcd8:	10000015 	stw	zero,0(r2)
 800bcdc:	10000115 	stw	zero,4(r2)
 800bce0:	10000215 	stw	zero,8(r2)
 800bce4:	2005883a 	mov	r2,r4
 800bce8:	dfc00117 	ldw	ra,4(sp)
 800bcec:	dc000017 	ldw	r16,0(sp)
 800bcf0:	dec00204 	addi	sp,sp,8
 800bcf4:	f800283a 	ret
 800bcf8:	20000015 	stw	zero,0(r4)
 800bcfc:	20000115 	stw	zero,4(r4)
 800bd00:	30800728 	cmpgeui	r2,r6,28
 800bd04:	10000a26 	beq	r2,zero,800bd30 <_calloc_r+0xac>
 800bd08:	20000215 	stw	zero,8(r4)
 800bd0c:	20000315 	stw	zero,12(r4)
 800bd10:	31800920 	cmpeqi	r6,r6,36
 800bd14:	3000081e 	bne	r6,zero,800bd38 <_calloc_r+0xb4>
 800bd18:	20800404 	addi	r2,r4,16
 800bd1c:	003fee06 	br	800bcd8 <_calloc_r+0x54>
 800bd20:	000b883a 	mov	r5,zero
 800bd24:	800893c0 	call	800893c <memset>
 800bd28:	1009883a 	mov	r4,r2
 800bd2c:	003fed06 	br	800bce4 <_calloc_r+0x60>
 800bd30:	20800204 	addi	r2,r4,8
 800bd34:	003fe806 	br	800bcd8 <_calloc_r+0x54>
 800bd38:	20000415 	stw	zero,16(r4)
 800bd3c:	20800604 	addi	r2,r4,24
 800bd40:	20000515 	stw	zero,20(r4)
 800bd44:	003fe406 	br	800bcd8 <_calloc_r+0x54>

0800bd48 <_fclose_r.part.0>:
 800bd48:	defffc04 	addi	sp,sp,-16
 800bd4c:	dc800215 	stw	r18,8(sp)
 800bd50:	dc400115 	stw	r17,4(sp)
 800bd54:	dc000015 	stw	r16,0(sp)
 800bd58:	dfc00315 	stw	ra,12(sp)
 800bd5c:	2821883a 	mov	r16,r5
 800bd60:	2023883a 	mov	r17,r4
 800bd64:	8006b200 	call	8006b20 <__sflush_r>
 800bd68:	80c00b17 	ldw	r3,44(r16)
 800bd6c:	1025883a 	mov	r18,r2
 800bd70:	18000426 	beq	r3,zero,800bd84 <_fclose_r.part.0+0x3c>
 800bd74:	81400717 	ldw	r5,28(r16)
 800bd78:	8809883a 	mov	r4,r17
 800bd7c:	183ee83a 	callr	r3
 800bd80:	10001916 	blt	r2,zero,800bde8 <_fclose_r.part.0+0xa0>
 800bd84:	8080030b 	ldhu	r2,12(r16)
 800bd88:	1080200c 	andi	r2,r2,128
 800bd8c:	10001a1e 	bne	r2,zero,800bdf8 <_fclose_r.part.0+0xb0>
 800bd90:	81400c17 	ldw	r5,48(r16)
 800bd94:	28000526 	beq	r5,zero,800bdac <_fclose_r.part.0+0x64>
 800bd98:	80801004 	addi	r2,r16,64
 800bd9c:	28800226 	beq	r5,r2,800bda8 <_fclose_r.part.0+0x60>
 800bda0:	8809883a 	mov	r4,r17
 800bda4:	80072f40 	call	80072f4 <_free_r>
 800bda8:	80000c15 	stw	zero,48(r16)
 800bdac:	81401117 	ldw	r5,68(r16)
 800bdb0:	28000326 	beq	r5,zero,800bdc0 <_fclose_r.part.0+0x78>
 800bdb4:	8809883a 	mov	r4,r17
 800bdb8:	80072f40 	call	80072f4 <_free_r>
 800bdbc:	80001115 	stw	zero,68(r16)
 800bdc0:	80071a00 	call	80071a0 <__sfp_lock_acquire>
 800bdc4:	8000030d 	sth	zero,12(r16)
 800bdc8:	80071a40 	call	80071a4 <__sfp_lock_release>
 800bdcc:	9005883a 	mov	r2,r18
 800bdd0:	dfc00317 	ldw	ra,12(sp)
 800bdd4:	dc800217 	ldw	r18,8(sp)
 800bdd8:	dc400117 	ldw	r17,4(sp)
 800bddc:	dc000017 	ldw	r16,0(sp)
 800bde0:	dec00404 	addi	sp,sp,16
 800bde4:	f800283a 	ret
 800bde8:	8080030b 	ldhu	r2,12(r16)
 800bdec:	04bfffc4 	movi	r18,-1
 800bdf0:	1080200c 	andi	r2,r2,128
 800bdf4:	103fe626 	beq	r2,zero,800bd90 <_fclose_r.part.0+0x48>
 800bdf8:	81400417 	ldw	r5,16(r16)
 800bdfc:	8809883a 	mov	r4,r17
 800be00:	80072f40 	call	80072f4 <_free_r>
 800be04:	003fe206 	br	800bd90 <_fclose_r.part.0+0x48>

0800be08 <_fclose_r>:
 800be08:	28001926 	beq	r5,zero,800be70 <_fclose_r+0x68>
 800be0c:	defffd04 	addi	sp,sp,-12
 800be10:	dc000115 	stw	r16,4(sp)
 800be14:	dfc00215 	stw	ra,8(sp)
 800be18:	2021883a 	mov	r16,r4
 800be1c:	20000226 	beq	r4,zero,800be28 <_fclose_r+0x20>
 800be20:	20800e17 	ldw	r2,56(r4)
 800be24:	10000c26 	beq	r2,zero,800be58 <_fclose_r+0x50>
 800be28:	2880030f 	ldh	r2,12(r5)
 800be2c:	1000051e 	bne	r2,zero,800be44 <_fclose_r+0x3c>
 800be30:	0005883a 	mov	r2,zero
 800be34:	dfc00217 	ldw	ra,8(sp)
 800be38:	dc000117 	ldw	r16,4(sp)
 800be3c:	dec00304 	addi	sp,sp,12
 800be40:	f800283a 	ret
 800be44:	8009883a 	mov	r4,r16
 800be48:	dfc00217 	ldw	ra,8(sp)
 800be4c:	dc000117 	ldw	r16,4(sp)
 800be50:	dec00304 	addi	sp,sp,12
 800be54:	800bd481 	jmpi	800bd48 <_fclose_r.part.0>
 800be58:	d9400015 	stw	r5,0(sp)
 800be5c:	80071900 	call	8007190 <__sinit>
 800be60:	d9400017 	ldw	r5,0(sp)
 800be64:	2880030f 	ldh	r2,12(r5)
 800be68:	103ff126 	beq	r2,zero,800be30 <_fclose_r+0x28>
 800be6c:	003ff506 	br	800be44 <_fclose_r+0x3c>
 800be70:	0005883a 	mov	r2,zero
 800be74:	f800283a 	ret

0800be78 <fclose>:
 800be78:	20000826 	beq	r4,zero,800be9c <fclose+0x24>
 800be7c:	00820074 	movhi	r2,2049
 800be80:	200b883a 	mov	r5,r4
 800be84:	1113d817 	ldw	r4,20320(r2)
 800be88:	20000226 	beq	r4,zero,800be94 <fclose+0x1c>
 800be8c:	20800e17 	ldw	r2,56(r4)
 800be90:	10000526 	beq	r2,zero,800bea8 <fclose+0x30>
 800be94:	2880030f 	ldh	r2,12(r5)
 800be98:	1000021e 	bne	r2,zero,800bea4 <fclose+0x2c>
 800be9c:	0005883a 	mov	r2,zero
 800bea0:	f800283a 	ret
 800bea4:	800bd481 	jmpi	800bd48 <_fclose_r.part.0>
 800bea8:	defffd04 	addi	sp,sp,-12
 800beac:	d9400115 	stw	r5,4(sp)
 800beb0:	d9000015 	stw	r4,0(sp)
 800beb4:	dfc00215 	stw	ra,8(sp)
 800beb8:	80071900 	call	8007190 <__sinit>
 800bebc:	d9400117 	ldw	r5,4(sp)
 800bec0:	d9000017 	ldw	r4,0(sp)
 800bec4:	2880030f 	ldh	r2,12(r5)
 800bec8:	10000326 	beq	r2,zero,800bed8 <fclose+0x60>
 800becc:	dfc00217 	ldw	ra,8(sp)
 800bed0:	dec00304 	addi	sp,sp,12
 800bed4:	800bd481 	jmpi	800bd48 <_fclose_r.part.0>
 800bed8:	0005883a 	mov	r2,zero
 800bedc:	dfc00217 	ldw	ra,8(sp)
 800bee0:	dec00304 	addi	sp,sp,12
 800bee4:	f800283a 	ret

0800bee8 <_fiprintf_r>:
 800bee8:	defffe04 	addi	sp,sp,-8
 800beec:	dfc00015 	stw	ra,0(sp)
 800bef0:	d9c00115 	stw	r7,4(sp)
 800bef4:	d9c00104 	addi	r7,sp,4
 800bef8:	800c4bc0 	call	800c4bc <_vfiprintf_r>
 800befc:	dfc00017 	ldw	ra,0(sp)
 800bf00:	dec00204 	addi	sp,sp,8
 800bf04:	f800283a 	ret

0800bf08 <fiprintf>:
 800bf08:	defffd04 	addi	sp,sp,-12
 800bf0c:	2005883a 	mov	r2,r4
 800bf10:	dfc00015 	stw	ra,0(sp)
 800bf14:	d9800115 	stw	r6,4(sp)
 800bf18:	d9c00215 	stw	r7,8(sp)
 800bf1c:	00c20074 	movhi	r3,2049
 800bf20:	1913d817 	ldw	r4,20320(r3)
 800bf24:	280d883a 	mov	r6,r5
 800bf28:	d9c00104 	addi	r7,sp,4
 800bf2c:	100b883a 	mov	r5,r2
 800bf30:	800c4bc0 	call	800c4bc <_vfiprintf_r>
 800bf34:	dfc00017 	ldw	ra,0(sp)
 800bf38:	dec00304 	addi	sp,sp,12
 800bf3c:	f800283a 	ret

0800bf40 <__fputwc>:
 800bf40:	defff904 	addi	sp,sp,-28
 800bf44:	dcc00415 	stw	r19,16(sp)
 800bf48:	dc800315 	stw	r18,12(sp)
 800bf4c:	dc000115 	stw	r16,4(sp)
 800bf50:	dfc00615 	stw	ra,24(sp)
 800bf54:	dd000515 	stw	r20,20(sp)
 800bf58:	dc400215 	stw	r17,8(sp)
 800bf5c:	2025883a 	mov	r18,r4
 800bf60:	2827883a 	mov	r19,r5
 800bf64:	3021883a 	mov	r16,r6
 800bf68:	800c26c0 	call	800c26c <__locale_mb_cur_max>
 800bf6c:	10800058 	cmpnei	r2,r2,1
 800bf70:	1000071e 	bne	r2,zero,800bf90 <__fputwc+0x50>
 800bf74:	98bfffc4 	addi	r2,r19,-1
 800bf78:	10803fe8 	cmpgeui	r2,r2,255
 800bf7c:	1000041e 	bne	r2,zero,800bf90 <__fputwc+0x50>
 800bf80:	980b883a 	mov	r5,r19
 800bf84:	dcc000c5 	stb	r19,3(sp)
 800bf88:	05000044 	movi	r20,1
 800bf8c:	00000a06 	br	800bfb8 <__fputwc+0x78>
 800bf90:	81c01704 	addi	r7,r16,92
 800bf94:	980d883a 	mov	r6,r19
 800bf98:	d94000c4 	addi	r5,sp,3
 800bf9c:	9009883a 	mov	r4,r18
 800bfa0:	800c4c00 	call	800c4c0 <_wcrtomb_r>
 800bfa4:	1029883a 	mov	r20,r2
 800bfa8:	10bfffd8 	cmpnei	r2,r2,-1
 800bfac:	10003926 	beq	r2,zero,800c094 <__fputwc+0x154>
 800bfb0:	a0001f26 	beq	r20,zero,800c030 <__fputwc+0xf0>
 800bfb4:	d94000c3 	ldbu	r5,3(sp)
 800bfb8:	0023883a 	mov	r17,zero
 800bfbc:	00000a06 	br	800bfe8 <__fputwc+0xa8>
 800bfc0:	80800017 	ldw	r2,0(r16)
 800bfc4:	11400005 	stb	r5,0(r2)
 800bfc8:	80c00017 	ldw	r3,0(r16)
 800bfcc:	18c00044 	addi	r3,r3,1
 800bfd0:	80c00015 	stw	r3,0(r16)
 800bfd4:	8c400044 	addi	r17,r17,1
 800bfd8:	d88000c4 	addi	r2,sp,3
 800bfdc:	1447883a 	add	r3,r2,r17
 800bfe0:	8d00132e 	bgeu	r17,r20,800c030 <__fputwc+0xf0>
 800bfe4:	19400003 	ldbu	r5,0(r3)
 800bfe8:	80c00217 	ldw	r3,8(r16)
 800bfec:	18ffffc4 	addi	r3,r3,-1
 800bff0:	80c00215 	stw	r3,8(r16)
 800bff4:	183ff20e 	bge	r3,zero,800bfc0 <__fputwc+0x80>
 800bff8:	80800617 	ldw	r2,24(r16)
 800bffc:	18801616 	blt	r3,r2,800c058 <__fputwc+0x118>
 800c000:	80800017 	ldw	r2,0(r16)
 800c004:	11400005 	stb	r5,0(r2)
 800c008:	80800017 	ldw	r2,0(r16)
 800c00c:	10c00003 	ldbu	r3,0(r2)
 800c010:	10800044 	addi	r2,r2,1
 800c014:	18c002a0 	cmpeqi	r3,r3,10
 800c018:	1800171e 	bne	r3,zero,800c078 <__fputwc+0x138>
 800c01c:	80800015 	stw	r2,0(r16)
 800c020:	8c400044 	addi	r17,r17,1
 800c024:	d88000c4 	addi	r2,sp,3
 800c028:	1447883a 	add	r3,r2,r17
 800c02c:	8d3fed36 	bltu	r17,r20,800bfe4 <__fputwc+0xa4>
 800c030:	9829883a 	mov	r20,r19
 800c034:	a005883a 	mov	r2,r20
 800c038:	dfc00617 	ldw	ra,24(sp)
 800c03c:	dd000517 	ldw	r20,20(sp)
 800c040:	dcc00417 	ldw	r19,16(sp)
 800c044:	dc800317 	ldw	r18,12(sp)
 800c048:	dc400217 	ldw	r17,8(sp)
 800c04c:	dc000117 	ldw	r16,4(sp)
 800c050:	dec00704 	addi	sp,sp,28
 800c054:	f800283a 	ret
 800c058:	29403fcc 	andi	r5,r5,255
 800c05c:	800d883a 	mov	r6,r16
 800c060:	9009883a 	mov	r4,r18
 800c064:	800b9f00 	call	800b9f0 <__swbuf_r>
 800c068:	10bfffe0 	cmpeqi	r2,r2,-1
 800c06c:	103fd926 	beq	r2,zero,800bfd4 <__fputwc+0x94>
 800c070:	053fffc4 	movi	r20,-1
 800c074:	003fef06 	br	800c034 <__fputwc+0xf4>
 800c078:	800d883a 	mov	r6,r16
 800c07c:	01400284 	movi	r5,10
 800c080:	9009883a 	mov	r4,r18
 800c084:	800b9f00 	call	800b9f0 <__swbuf_r>
 800c088:	10bfffe0 	cmpeqi	r2,r2,-1
 800c08c:	103fd126 	beq	r2,zero,800bfd4 <__fputwc+0x94>
 800c090:	003ff706 	br	800c070 <__fputwc+0x130>
 800c094:	8080030b 	ldhu	r2,12(r16)
 800c098:	10801014 	ori	r2,r2,64
 800c09c:	8080030d 	sth	r2,12(r16)
 800c0a0:	003fe406 	br	800c034 <__fputwc+0xf4>

0800c0a4 <_fputwc_r>:
 800c0a4:	3080030b 	ldhu	r2,12(r6)
 800c0a8:	10c8000c 	andi	r3,r2,8192
 800c0ac:	1800051e 	bne	r3,zero,800c0c4 <_fputwc_r+0x20>
 800c0b0:	30c01917 	ldw	r3,100(r6)
 800c0b4:	10880014 	ori	r2,r2,8192
 800c0b8:	3080030d 	sth	r2,12(r6)
 800c0bc:	18880014 	ori	r2,r3,8192
 800c0c0:	30801915 	stw	r2,100(r6)
 800c0c4:	800bf401 	jmpi	800bf40 <__fputwc>

0800c0c8 <fputwc>:
 800c0c8:	defffc04 	addi	sp,sp,-16
 800c0cc:	00820074 	movhi	r2,2049
 800c0d0:	dc000215 	stw	r16,8(sp)
 800c0d4:	1413d817 	ldw	r16,20320(r2)
 800c0d8:	dfc00315 	stw	ra,12(sp)
 800c0dc:	280d883a 	mov	r6,r5
 800c0e0:	200b883a 	mov	r5,r4
 800c0e4:	80000226 	beq	r16,zero,800c0f0 <fputwc+0x28>
 800c0e8:	80800e17 	ldw	r2,56(r16)
 800c0ec:	10000d26 	beq	r2,zero,800c124 <fputwc+0x5c>
 800c0f0:	3080030b 	ldhu	r2,12(r6)
 800c0f4:	10c8000c 	andi	r3,r2,8192
 800c0f8:	1800051e 	bne	r3,zero,800c110 <fputwc+0x48>
 800c0fc:	30c01917 	ldw	r3,100(r6)
 800c100:	10880014 	ori	r2,r2,8192
 800c104:	3080030d 	sth	r2,12(r6)
 800c108:	18880014 	ori	r2,r3,8192
 800c10c:	30801915 	stw	r2,100(r6)
 800c110:	8009883a 	mov	r4,r16
 800c114:	dfc00317 	ldw	ra,12(sp)
 800c118:	dc000217 	ldw	r16,8(sp)
 800c11c:	dec00404 	addi	sp,sp,16
 800c120:	800bf401 	jmpi	800bf40 <__fputwc>
 800c124:	d9000015 	stw	r4,0(sp)
 800c128:	8009883a 	mov	r4,r16
 800c12c:	d9800115 	stw	r6,4(sp)
 800c130:	80071900 	call	8007190 <__sinit>
 800c134:	d9800117 	ldw	r6,4(sp)
 800c138:	d9400017 	ldw	r5,0(sp)
 800c13c:	003fec06 	br	800c0f0 <fputwc+0x28>

0800c140 <_fstat_r>:
 800c140:	2807883a 	mov	r3,r5
 800c144:	defffe04 	addi	sp,sp,-8
 800c148:	dc000015 	stw	r16,0(sp)
 800c14c:	00820074 	movhi	r2,2049
 800c150:	300b883a 	mov	r5,r6
 800c154:	2021883a 	mov	r16,r4
 800c158:	1809883a 	mov	r4,r3
 800c15c:	dfc00115 	stw	ra,4(sp)
 800c160:	101af415 	stw	zero,27600(r2)
 800c164:	80100340 	call	8010034 <fstat>
 800c168:	10ffffd8 	cmpnei	r3,r2,-1
 800c16c:	18000426 	beq	r3,zero,800c180 <_fstat_r+0x40>
 800c170:	dfc00117 	ldw	ra,4(sp)
 800c174:	dc000017 	ldw	r16,0(sp)
 800c178:	dec00204 	addi	sp,sp,8
 800c17c:	f800283a 	ret
 800c180:	00c20074 	movhi	r3,2049
 800c184:	18daf417 	ldw	r3,27600(r3)
 800c188:	183ff926 	beq	r3,zero,800c170 <_fstat_r+0x30>
 800c18c:	80c00015 	stw	r3,0(r16)
 800c190:	dfc00117 	ldw	ra,4(sp)
 800c194:	dc000017 	ldw	r16,0(sp)
 800c198:	dec00204 	addi	sp,sp,8
 800c19c:	f800283a 	ret

0800c1a0 <_isatty_r>:
 800c1a0:	defffe04 	addi	sp,sp,-8
 800c1a4:	dc000015 	stw	r16,0(sp)
 800c1a8:	00820074 	movhi	r2,2049
 800c1ac:	2021883a 	mov	r16,r4
 800c1b0:	2809883a 	mov	r4,r5
 800c1b4:	dfc00115 	stw	ra,4(sp)
 800c1b8:	101af415 	stw	zero,27600(r2)
 800c1bc:	801014c0 	call	801014c <isatty>
 800c1c0:	10ffffd8 	cmpnei	r3,r2,-1
 800c1c4:	18000426 	beq	r3,zero,800c1d8 <_isatty_r+0x38>
 800c1c8:	dfc00117 	ldw	ra,4(sp)
 800c1cc:	dc000017 	ldw	r16,0(sp)
 800c1d0:	dec00204 	addi	sp,sp,8
 800c1d4:	f800283a 	ret
 800c1d8:	00c20074 	movhi	r3,2049
 800c1dc:	18daf417 	ldw	r3,27600(r3)
 800c1e0:	183ff926 	beq	r3,zero,800c1c8 <_isatty_r+0x28>
 800c1e4:	80c00015 	stw	r3,0(r16)
 800c1e8:	dfc00117 	ldw	ra,4(sp)
 800c1ec:	dc000017 	ldw	r16,0(sp)
 800c1f0:	dec00204 	addi	sp,sp,8
 800c1f4:	f800283a 	ret

0800c1f8 <_setlocale_r>:
 800c1f8:	30001626 	beq	r6,zero,800c254 <_setlocale_r+0x5c>
 800c1fc:	01420074 	movhi	r5,2049
 800c200:	defffe04 	addi	sp,sp,-8
 800c204:	294bee04 	addi	r5,r5,12216
 800c208:	3009883a 	mov	r4,r6
 800c20c:	dc000015 	stw	r16,0(sp)
 800c210:	dfc00115 	stw	ra,4(sp)
 800c214:	3021883a 	mov	r16,r6
 800c218:	800c4040 	call	800c404 <strcmp>
 800c21c:	1000061e 	bne	r2,zero,800c238 <_setlocale_r+0x40>
 800c220:	00820074 	movhi	r2,2049
 800c224:	108bed04 	addi	r2,r2,12212
 800c228:	dfc00117 	ldw	ra,4(sp)
 800c22c:	dc000017 	ldw	r16,0(sp)
 800c230:	dec00204 	addi	sp,sp,8
 800c234:	f800283a 	ret
 800c238:	80800003 	ldbu	r2,0(r16)
 800c23c:	10bfef44 	addi	r2,r2,-67
 800c240:	10000726 	beq	r2,zero,800c260 <_setlocale_r+0x68>
 800c244:	80800003 	ldbu	r2,0(r16)
 800c248:	103ff526 	beq	r2,zero,800c220 <_setlocale_r+0x28>
 800c24c:	0005883a 	mov	r2,zero
 800c250:	003ff506 	br	800c228 <_setlocale_r+0x30>
 800c254:	00820074 	movhi	r2,2049
 800c258:	108bed04 	addi	r2,r2,12212
 800c25c:	f800283a 	ret
 800c260:	80800043 	ldbu	r2,1(r16)
 800c264:	103fee26 	beq	r2,zero,800c220 <_setlocale_r+0x28>
 800c268:	003ff606 	br	800c244 <_setlocale_r+0x4c>

0800c26c <__locale_mb_cur_max>:
 800c26c:	00820074 	movhi	r2,2049
 800c270:	108f4007 	ldb	r2,15616(r2)
 800c274:	f800283a 	ret

0800c278 <setlocale>:
 800c278:	28001626 	beq	r5,zero,800c2d4 <setlocale+0x5c>
 800c27c:	defffe04 	addi	sp,sp,-8
 800c280:	dc000015 	stw	r16,0(sp)
 800c284:	2821883a 	mov	r16,r5
 800c288:	01420074 	movhi	r5,2049
 800c28c:	294bee04 	addi	r5,r5,12216
 800c290:	8009883a 	mov	r4,r16
 800c294:	dfc00115 	stw	ra,4(sp)
 800c298:	800c4040 	call	800c404 <strcmp>
 800c29c:	1000061e 	bne	r2,zero,800c2b8 <setlocale+0x40>
 800c2a0:	00820074 	movhi	r2,2049
 800c2a4:	108bed04 	addi	r2,r2,12212
 800c2a8:	dfc00117 	ldw	ra,4(sp)
 800c2ac:	dc000017 	ldw	r16,0(sp)
 800c2b0:	dec00204 	addi	sp,sp,8
 800c2b4:	f800283a 	ret
 800c2b8:	80800003 	ldbu	r2,0(r16)
 800c2bc:	10bfef44 	addi	r2,r2,-67
 800c2c0:	10000726 	beq	r2,zero,800c2e0 <setlocale+0x68>
 800c2c4:	80800003 	ldbu	r2,0(r16)
 800c2c8:	103ff526 	beq	r2,zero,800c2a0 <setlocale+0x28>
 800c2cc:	0005883a 	mov	r2,zero
 800c2d0:	003ff506 	br	800c2a8 <setlocale+0x30>
 800c2d4:	00820074 	movhi	r2,2049
 800c2d8:	108bed04 	addi	r2,r2,12212
 800c2dc:	f800283a 	ret
 800c2e0:	80800043 	ldbu	r2,1(r16)
 800c2e4:	103fee26 	beq	r2,zero,800c2a0 <setlocale+0x28>
 800c2e8:	003ff606 	br	800c2c4 <setlocale+0x4c>

0800c2ec <_lseek_r>:
 800c2ec:	2807883a 	mov	r3,r5
 800c2f0:	defffe04 	addi	sp,sp,-8
 800c2f4:	dc000015 	stw	r16,0(sp)
 800c2f8:	300b883a 	mov	r5,r6
 800c2fc:	00820074 	movhi	r2,2049
 800c300:	380d883a 	mov	r6,r7
 800c304:	2021883a 	mov	r16,r4
 800c308:	1809883a 	mov	r4,r3
 800c30c:	dfc00115 	stw	ra,4(sp)
 800c310:	101af415 	stw	zero,27600(r2)
 800c314:	801048c0 	call	801048c <lseek>
 800c318:	10ffffd8 	cmpnei	r3,r2,-1
 800c31c:	18000426 	beq	r3,zero,800c330 <_lseek_r+0x44>
 800c320:	dfc00117 	ldw	ra,4(sp)
 800c324:	dc000017 	ldw	r16,0(sp)
 800c328:	dec00204 	addi	sp,sp,8
 800c32c:	f800283a 	ret
 800c330:	00c20074 	movhi	r3,2049
 800c334:	18daf417 	ldw	r3,27600(r3)
 800c338:	183ff926 	beq	r3,zero,800c320 <_lseek_r+0x34>
 800c33c:	80c00015 	stw	r3,0(r16)
 800c340:	dfc00117 	ldw	ra,4(sp)
 800c344:	dc000017 	ldw	r16,0(sp)
 800c348:	dec00204 	addi	sp,sp,8
 800c34c:	f800283a 	ret

0800c350 <_mbtowc_r>:
 800c350:	00820074 	movhi	r2,2049
 800c354:	108f2f17 	ldw	r2,15548(r2)
 800c358:	1000683a 	jmp	r2

0800c35c <__ascii_mbtowc>:
 800c35c:	deffff04 	addi	sp,sp,-4
 800c360:	28000826 	beq	r5,zero,800c384 <__ascii_mbtowc+0x28>
 800c364:	30000926 	beq	r6,zero,800c38c <__ascii_mbtowc+0x30>
 800c368:	38000b26 	beq	r7,zero,800c398 <__ascii_mbtowc+0x3c>
 800c36c:	30800003 	ldbu	r2,0(r6)
 800c370:	28800015 	stw	r2,0(r5)
 800c374:	30800003 	ldbu	r2,0(r6)
 800c378:	1004c03a 	cmpne	r2,r2,zero
 800c37c:	dec00104 	addi	sp,sp,4
 800c380:	f800283a 	ret
 800c384:	d80b883a 	mov	r5,sp
 800c388:	303ff71e 	bne	r6,zero,800c368 <__ascii_mbtowc+0xc>
 800c38c:	0005883a 	mov	r2,zero
 800c390:	dec00104 	addi	sp,sp,4
 800c394:	f800283a 	ret
 800c398:	00bfff84 	movi	r2,-2
 800c39c:	003ff706 	br	800c37c <__ascii_mbtowc+0x20>

0800c3a0 <_read_r>:
 800c3a0:	2807883a 	mov	r3,r5
 800c3a4:	defffe04 	addi	sp,sp,-8
 800c3a8:	dc000015 	stw	r16,0(sp)
 800c3ac:	300b883a 	mov	r5,r6
 800c3b0:	00820074 	movhi	r2,2049
 800c3b4:	380d883a 	mov	r6,r7
 800c3b8:	2021883a 	mov	r16,r4
 800c3bc:	1809883a 	mov	r4,r3
 800c3c0:	dfc00115 	stw	ra,4(sp)
 800c3c4:	101af415 	stw	zero,27600(r2)
 800c3c8:	801066c0 	call	801066c <read>
 800c3cc:	10ffffd8 	cmpnei	r3,r2,-1
 800c3d0:	18000426 	beq	r3,zero,800c3e4 <_read_r+0x44>
 800c3d4:	dfc00117 	ldw	ra,4(sp)
 800c3d8:	dc000017 	ldw	r16,0(sp)
 800c3dc:	dec00204 	addi	sp,sp,8
 800c3e0:	f800283a 	ret
 800c3e4:	00c20074 	movhi	r3,2049
 800c3e8:	18daf417 	ldw	r3,27600(r3)
 800c3ec:	183ff926 	beq	r3,zero,800c3d4 <_read_r+0x34>
 800c3f0:	80c00015 	stw	r3,0(r16)
 800c3f4:	dfc00117 	ldw	ra,4(sp)
 800c3f8:	dc000017 	ldw	r16,0(sp)
 800c3fc:	dec00204 	addi	sp,sp,8
 800c400:	f800283a 	ret

0800c404 <strcmp>:
 800c404:	2144b03a 	or	r2,r4,r5
 800c408:	108000cc 	andi	r2,r2,3
 800c40c:	1000141e 	bne	r2,zero,800c460 <strcmp+0x5c>
 800c410:	20800017 	ldw	r2,0(r4)
 800c414:	28c00017 	ldw	r3,0(r5)
 800c418:	10c0111e 	bne	r2,r3,800c460 <strcmp+0x5c>
 800c41c:	01ffbff4 	movhi	r7,65279
 800c420:	01a02074 	movhi	r6,32897
 800c424:	39ffbfc4 	addi	r7,r7,-257
 800c428:	31a02004 	addi	r6,r6,-32640
 800c42c:	00000306 	br	800c43c <strcmp+0x38>
 800c430:	20800017 	ldw	r2,0(r4)
 800c434:	28c00017 	ldw	r3,0(r5)
 800c438:	10c0091e 	bne	r2,r3,800c460 <strcmp+0x5c>
 800c43c:	11c7883a 	add	r3,r2,r7
 800c440:	0084303a 	nor	r2,zero,r2
 800c444:	1884703a 	and	r2,r3,r2
 800c448:	1184703a 	and	r2,r2,r6
 800c44c:	21000104 	addi	r4,r4,4
 800c450:	29400104 	addi	r5,r5,4
 800c454:	103ff626 	beq	r2,zero,800c430 <strcmp+0x2c>
 800c458:	0005883a 	mov	r2,zero
 800c45c:	f800283a 	ret
 800c460:	20c00003 	ldbu	r3,0(r4)
 800c464:	18803fcc 	andi	r2,r3,255
 800c468:	1080201c 	xori	r2,r2,128
 800c46c:	10bfe004 	addi	r2,r2,-128
 800c470:	1000071e 	bne	r2,zero,800c490 <strcmp+0x8c>
 800c474:	00000a06 	br	800c4a0 <strcmp+0x9c>
 800c478:	20c00003 	ldbu	r3,0(r4)
 800c47c:	29400044 	addi	r5,r5,1
 800c480:	18803fcc 	andi	r2,r3,255
 800c484:	1080201c 	xori	r2,r2,128
 800c488:	10bfe004 	addi	r2,r2,-128
 800c48c:	10000726 	beq	r2,zero,800c4ac <strcmp+0xa8>
 800c490:	29800007 	ldb	r6,0(r5)
 800c494:	21000044 	addi	r4,r4,1
 800c498:	30bff726 	beq	r6,r2,800c478 <strcmp+0x74>
 800c49c:	18803fcc 	andi	r2,r3,255
 800c4a0:	28c00003 	ldbu	r3,0(r5)
 800c4a4:	10c5c83a 	sub	r2,r2,r3
 800c4a8:	f800283a 	ret
 800c4ac:	28c00003 	ldbu	r3,0(r5)
 800c4b0:	0005883a 	mov	r2,zero
 800c4b4:	10c5c83a 	sub	r2,r2,r3
 800c4b8:	f800283a 	ret

0800c4bc <_vfiprintf_r>:
 800c4bc:	800a5d01 	jmpi	800a5d0 <___vfiprintf_internal_r>

0800c4c0 <_wcrtomb_r>:
 800c4c0:	defffa04 	addi	sp,sp,-24
 800c4c4:	dc400415 	stw	r17,16(sp)
 800c4c8:	dc000315 	stw	r16,12(sp)
 800c4cc:	00820074 	movhi	r2,2049
 800c4d0:	dfc00515 	stw	ra,20(sp)
 800c4d4:	108f2e17 	ldw	r2,15544(r2)
 800c4d8:	2023883a 	mov	r17,r4
 800c4dc:	3821883a 	mov	r16,r7
 800c4e0:	28000826 	beq	r5,zero,800c504 <_wcrtomb_r+0x44>
 800c4e4:	103ee83a 	callr	r2
 800c4e8:	10ffffd8 	cmpnei	r3,r2,-1
 800c4ec:	18000a26 	beq	r3,zero,800c518 <_wcrtomb_r+0x58>
 800c4f0:	dfc00517 	ldw	ra,20(sp)
 800c4f4:	dc400417 	ldw	r17,16(sp)
 800c4f8:	dc000317 	ldw	r16,12(sp)
 800c4fc:	dec00604 	addi	sp,sp,24
 800c500:	f800283a 	ret
 800c504:	000d883a 	mov	r6,zero
 800c508:	d9400084 	addi	r5,sp,2
 800c50c:	103ee83a 	callr	r2
 800c510:	10ffffd8 	cmpnei	r3,r2,-1
 800c514:	183ff61e 	bne	r3,zero,800c4f0 <_wcrtomb_r+0x30>
 800c518:	00802284 	movi	r2,138
 800c51c:	80000015 	stw	zero,0(r16)
 800c520:	88800015 	stw	r2,0(r17)
 800c524:	00bfffc4 	movi	r2,-1
 800c528:	003ff106 	br	800c4f0 <_wcrtomb_r+0x30>

0800c52c <wcrtomb>:
 800c52c:	defffa04 	addi	sp,sp,-24
 800c530:	00c20074 	movhi	r3,2049
 800c534:	dc400415 	stw	r17,16(sp)
 800c538:	dc000315 	stw	r16,12(sp)
 800c53c:	1c53d817 	ldw	r17,20320(r3)
 800c540:	dfc00515 	stw	ra,20(sp)
 800c544:	00c20074 	movhi	r3,2049
 800c548:	18cf2e17 	ldw	r3,15544(r3)
 800c54c:	3021883a 	mov	r16,r6
 800c550:	20000c26 	beq	r4,zero,800c584 <wcrtomb+0x58>
 800c554:	280d883a 	mov	r6,r5
 800c558:	800f883a 	mov	r7,r16
 800c55c:	200b883a 	mov	r5,r4
 800c560:	8809883a 	mov	r4,r17
 800c564:	183ee83a 	callr	r3
 800c568:	10ffffd8 	cmpnei	r3,r2,-1
 800c56c:	18000c26 	beq	r3,zero,800c5a0 <wcrtomb+0x74>
 800c570:	dfc00517 	ldw	ra,20(sp)
 800c574:	dc400417 	ldw	r17,16(sp)
 800c578:	dc000317 	ldw	r16,12(sp)
 800c57c:	dec00604 	addi	sp,sp,24
 800c580:	f800283a 	ret
 800c584:	300f883a 	mov	r7,r6
 800c588:	d9400084 	addi	r5,sp,2
 800c58c:	000d883a 	mov	r6,zero
 800c590:	8809883a 	mov	r4,r17
 800c594:	183ee83a 	callr	r3
 800c598:	10ffffd8 	cmpnei	r3,r2,-1
 800c59c:	183ff41e 	bne	r3,zero,800c570 <wcrtomb+0x44>
 800c5a0:	00802284 	movi	r2,138
 800c5a4:	80000015 	stw	zero,0(r16)
 800c5a8:	88800015 	stw	r2,0(r17)
 800c5ac:	00bfffc4 	movi	r2,-1
 800c5b0:	003fef06 	br	800c570 <wcrtomb+0x44>

0800c5b4 <_wctomb_r>:
 800c5b4:	00820074 	movhi	r2,2049
 800c5b8:	108f2e17 	ldw	r2,15544(r2)
 800c5bc:	1000683a 	jmp	r2

0800c5c0 <__ascii_wctomb>:
 800c5c0:	28000926 	beq	r5,zero,800c5e8 <__ascii_wctomb+0x28>
 800c5c4:	30804030 	cmpltui	r2,r6,256
 800c5c8:	10000326 	beq	r2,zero,800c5d8 <__ascii_wctomb+0x18>
 800c5cc:	29800005 	stb	r6,0(r5)
 800c5d0:	00800044 	movi	r2,1
 800c5d4:	f800283a 	ret
 800c5d8:	00802284 	movi	r2,138
 800c5dc:	20800015 	stw	r2,0(r4)
 800c5e0:	00bfffc4 	movi	r2,-1
 800c5e4:	f800283a 	ret
 800c5e8:	0005883a 	mov	r2,zero
 800c5ec:	f800283a 	ret

0800c5f0 <abort>:
 800c5f0:	deffff04 	addi	sp,sp,-4
 800c5f4:	01000184 	movi	r4,6
 800c5f8:	dfc00015 	stw	ra,0(sp)
 800c5fc:	800c87c0 	call	800c87c <raise>
 800c600:	01000044 	movi	r4,1
 800c604:	800ffc00 	call	800ffc0 <_exit>

0800c608 <_init_signal_r>:
 800c608:	2080b717 	ldw	r2,732(r4)
 800c60c:	10000226 	beq	r2,zero,800c618 <_init_signal_r+0x10>
 800c610:	0005883a 	mov	r2,zero
 800c614:	f800283a 	ret
 800c618:	defffe04 	addi	sp,sp,-8
 800c61c:	01402004 	movi	r5,128
 800c620:	dc000015 	stw	r16,0(sp)
 800c624:	dfc00115 	stw	ra,4(sp)
 800c628:	2021883a 	mov	r16,r4
 800c62c:	8007e600 	call	8007e60 <_malloc_r>
 800c630:	8080b715 	stw	r2,732(r16)
 800c634:	1009883a 	mov	r4,r2
 800c638:	10000826 	beq	r2,zero,800c65c <_init_signal_r+0x54>
 800c63c:	01802004 	movi	r6,128
 800c640:	000b883a 	mov	r5,zero
 800c644:	800893c0 	call	800893c <memset>
 800c648:	0005883a 	mov	r2,zero
 800c64c:	dfc00117 	ldw	ra,4(sp)
 800c650:	dc000017 	ldw	r16,0(sp)
 800c654:	dec00204 	addi	sp,sp,8
 800c658:	f800283a 	ret
 800c65c:	00bfffc4 	movi	r2,-1
 800c660:	003ffa06 	br	800c64c <_init_signal_r+0x44>

0800c664 <_signal_r>:
 800c664:	defffc04 	addi	sp,sp,-16
 800c668:	dc400115 	stw	r17,4(sp)
 800c66c:	dfc00315 	stw	ra,12(sp)
 800c670:	dc800215 	stw	r18,8(sp)
 800c674:	dc000015 	stw	r16,0(sp)
 800c678:	28800830 	cmpltui	r2,r5,32
 800c67c:	2023883a 	mov	r17,r4
 800c680:	10000e26 	beq	r2,zero,800c6bc <_signal_r+0x58>
 800c684:	20c0b717 	ldw	r3,732(r4)
 800c688:	2821883a 	mov	r16,r5
 800c68c:	3025883a 	mov	r18,r6
 800c690:	18000e26 	beq	r3,zero,800c6cc <_signal_r+0x68>
 800c694:	802090ba 	slli	r16,r16,2
 800c698:	1c21883a 	add	r16,r3,r16
 800c69c:	80800017 	ldw	r2,0(r16)
 800c6a0:	84800015 	stw	r18,0(r16)
 800c6a4:	dfc00317 	ldw	ra,12(sp)
 800c6a8:	dc800217 	ldw	r18,8(sp)
 800c6ac:	dc400117 	ldw	r17,4(sp)
 800c6b0:	dc000017 	ldw	r16,0(sp)
 800c6b4:	dec00404 	addi	sp,sp,16
 800c6b8:	f800283a 	ret
 800c6bc:	00800584 	movi	r2,22
 800c6c0:	20800015 	stw	r2,0(r4)
 800c6c4:	00bfffc4 	movi	r2,-1
 800c6c8:	003ff606 	br	800c6a4 <_signal_r+0x40>
 800c6cc:	01402004 	movi	r5,128
 800c6d0:	8007e600 	call	8007e60 <_malloc_r>
 800c6d4:	8880b715 	stw	r2,732(r17)
 800c6d8:	10000626 	beq	r2,zero,800c6f4 <_signal_r+0x90>
 800c6dc:	01802004 	movi	r6,128
 800c6e0:	000b883a 	mov	r5,zero
 800c6e4:	1009883a 	mov	r4,r2
 800c6e8:	800893c0 	call	800893c <memset>
 800c6ec:	1007883a 	mov	r3,r2
 800c6f0:	003fe806 	br	800c694 <_signal_r+0x30>
 800c6f4:	00bfffc4 	movi	r2,-1
 800c6f8:	003fea06 	br	800c6a4 <_signal_r+0x40>

0800c6fc <_raise_r>:
 800c6fc:	28800830 	cmpltui	r2,r5,32
 800c700:	10002b26 	beq	r2,zero,800c7b0 <_raise_r+0xb4>
 800c704:	2080b717 	ldw	r2,732(r4)
 800c708:	defffd04 	addi	sp,sp,-12
 800c70c:	dc000115 	stw	r16,4(sp)
 800c710:	dfc00215 	stw	ra,8(sp)
 800c714:	2821883a 	mov	r16,r5
 800c718:	10001026 	beq	r2,zero,800c75c <_raise_r+0x60>
 800c71c:	280690ba 	slli	r3,r5,2
 800c720:	10c5883a 	add	r2,r2,r3
 800c724:	10c00017 	ldw	r3,0(r2)
 800c728:	18000c26 	beq	r3,zero,800c75c <_raise_r+0x60>
 800c72c:	19400060 	cmpeqi	r5,r3,1
 800c730:	28001a1e 	bne	r5,zero,800c79c <_raise_r+0xa0>
 800c734:	197fffd8 	cmpnei	r5,r3,-1
 800c738:	28001126 	beq	r5,zero,800c780 <_raise_r+0x84>
 800c73c:	10000015 	stw	zero,0(r2)
 800c740:	8009883a 	mov	r4,r16
 800c744:	183ee83a 	callr	r3
 800c748:	0005883a 	mov	r2,zero
 800c74c:	dfc00217 	ldw	ra,8(sp)
 800c750:	dc000117 	ldw	r16,4(sp)
 800c754:	dec00304 	addi	sp,sp,12
 800c758:	f800283a 	ret
 800c75c:	d9000015 	stw	r4,0(sp)
 800c760:	800cb540 	call	800cb54 <_getpid_r>
 800c764:	d9000017 	ldw	r4,0(sp)
 800c768:	800d883a 	mov	r6,r16
 800c76c:	100b883a 	mov	r5,r2
 800c770:	dfc00217 	ldw	ra,8(sp)
 800c774:	dc000117 	ldw	r16,4(sp)
 800c778:	dec00304 	addi	sp,sp,12
 800c77c:	800caf41 	jmpi	800caf4 <_kill_r>
 800c780:	00800584 	movi	r2,22
 800c784:	20800015 	stw	r2,0(r4)
 800c788:	00800044 	movi	r2,1
 800c78c:	dfc00217 	ldw	ra,8(sp)
 800c790:	dc000117 	ldw	r16,4(sp)
 800c794:	dec00304 	addi	sp,sp,12
 800c798:	f800283a 	ret
 800c79c:	0005883a 	mov	r2,zero
 800c7a0:	dfc00217 	ldw	ra,8(sp)
 800c7a4:	dc000117 	ldw	r16,4(sp)
 800c7a8:	dec00304 	addi	sp,sp,12
 800c7ac:	f800283a 	ret
 800c7b0:	00800584 	movi	r2,22
 800c7b4:	20800015 	stw	r2,0(r4)
 800c7b8:	00bfffc4 	movi	r2,-1
 800c7bc:	f800283a 	ret

0800c7c0 <__sigtramp_r>:
 800c7c0:	28800830 	cmpltui	r2,r5,32
 800c7c4:	10002b26 	beq	r2,zero,800c874 <__sigtramp_r+0xb4>
 800c7c8:	20c0b717 	ldw	r3,732(r4)
 800c7cc:	defffd04 	addi	sp,sp,-12
 800c7d0:	dc400115 	stw	r17,4(sp)
 800c7d4:	dc000015 	stw	r16,0(sp)
 800c7d8:	dfc00215 	stw	ra,8(sp)
 800c7dc:	2821883a 	mov	r16,r5
 800c7e0:	2023883a 	mov	r17,r4
 800c7e4:	18001326 	beq	r3,zero,800c834 <__sigtramp_r+0x74>
 800c7e8:	800490ba 	slli	r2,r16,2
 800c7ec:	1887883a 	add	r3,r3,r2
 800c7f0:	18800017 	ldw	r2,0(r3)
 800c7f4:	10000d26 	beq	r2,zero,800c82c <__sigtramp_r+0x6c>
 800c7f8:	113fffe0 	cmpeqi	r4,r2,-1
 800c7fc:	2000191e 	bne	r4,zero,800c864 <__sigtramp_r+0xa4>
 800c800:	11000060 	cmpeqi	r4,r2,1
 800c804:	2000151e 	bne	r4,zero,800c85c <__sigtramp_r+0x9c>
 800c808:	18000015 	stw	zero,0(r3)
 800c80c:	8009883a 	mov	r4,r16
 800c810:	103ee83a 	callr	r2
 800c814:	0005883a 	mov	r2,zero
 800c818:	dfc00217 	ldw	ra,8(sp)
 800c81c:	dc400117 	ldw	r17,4(sp)
 800c820:	dc000017 	ldw	r16,0(sp)
 800c824:	dec00304 	addi	sp,sp,12
 800c828:	f800283a 	ret
 800c82c:	00800044 	movi	r2,1
 800c830:	003ff906 	br	800c818 <__sigtramp_r+0x58>
 800c834:	01402004 	movi	r5,128
 800c838:	8007e600 	call	8007e60 <_malloc_r>
 800c83c:	8880b715 	stw	r2,732(r17)
 800c840:	10000a26 	beq	r2,zero,800c86c <__sigtramp_r+0xac>
 800c844:	01802004 	movi	r6,128
 800c848:	000b883a 	mov	r5,zero
 800c84c:	1009883a 	mov	r4,r2
 800c850:	800893c0 	call	800893c <memset>
 800c854:	1007883a 	mov	r3,r2
 800c858:	003fe306 	br	800c7e8 <__sigtramp_r+0x28>
 800c85c:	008000c4 	movi	r2,3
 800c860:	003fed06 	br	800c818 <__sigtramp_r+0x58>
 800c864:	00800084 	movi	r2,2
 800c868:	003feb06 	br	800c818 <__sigtramp_r+0x58>
 800c86c:	00bfffc4 	movi	r2,-1
 800c870:	003fe906 	br	800c818 <__sigtramp_r+0x58>
 800c874:	00bfffc4 	movi	r2,-1
 800c878:	f800283a 	ret

0800c87c <raise>:
 800c87c:	defffd04 	addi	sp,sp,-12
 800c880:	dc400115 	stw	r17,4(sp)
 800c884:	00c20074 	movhi	r3,2049
 800c888:	dfc00215 	stw	ra,8(sp)
 800c88c:	dc000015 	stw	r16,0(sp)
 800c890:	20800830 	cmpltui	r2,r4,32
 800c894:	1c53d817 	ldw	r17,20320(r3)
 800c898:	10002326 	beq	r2,zero,800c928 <raise+0xac>
 800c89c:	8880b717 	ldw	r2,732(r17)
 800c8a0:	2021883a 	mov	r16,r4
 800c8a4:	10001026 	beq	r2,zero,800c8e8 <raise+0x6c>
 800c8a8:	200690ba 	slli	r3,r4,2
 800c8ac:	10c5883a 	add	r2,r2,r3
 800c8b0:	10c00017 	ldw	r3,0(r2)
 800c8b4:	18000c26 	beq	r3,zero,800c8e8 <raise+0x6c>
 800c8b8:	19400060 	cmpeqi	r5,r3,1
 800c8bc:	2800181e 	bne	r5,zero,800c920 <raise+0xa4>
 800c8c0:	197fffd8 	cmpnei	r5,r3,-1
 800c8c4:	28001226 	beq	r5,zero,800c910 <raise+0x94>
 800c8c8:	10000015 	stw	zero,0(r2)
 800c8cc:	183ee83a 	callr	r3
 800c8d0:	0005883a 	mov	r2,zero
 800c8d4:	dfc00217 	ldw	ra,8(sp)
 800c8d8:	dc400117 	ldw	r17,4(sp)
 800c8dc:	dc000017 	ldw	r16,0(sp)
 800c8e0:	dec00304 	addi	sp,sp,12
 800c8e4:	f800283a 	ret
 800c8e8:	8809883a 	mov	r4,r17
 800c8ec:	800cb540 	call	800cb54 <_getpid_r>
 800c8f0:	800d883a 	mov	r6,r16
 800c8f4:	100b883a 	mov	r5,r2
 800c8f8:	8809883a 	mov	r4,r17
 800c8fc:	dfc00217 	ldw	ra,8(sp)
 800c900:	dc400117 	ldw	r17,4(sp)
 800c904:	dc000017 	ldw	r16,0(sp)
 800c908:	dec00304 	addi	sp,sp,12
 800c90c:	800caf41 	jmpi	800caf4 <_kill_r>
 800c910:	00800584 	movi	r2,22
 800c914:	88800015 	stw	r2,0(r17)
 800c918:	00800044 	movi	r2,1
 800c91c:	003fed06 	br	800c8d4 <raise+0x58>
 800c920:	0005883a 	mov	r2,zero
 800c924:	003feb06 	br	800c8d4 <raise+0x58>
 800c928:	00800584 	movi	r2,22
 800c92c:	88800015 	stw	r2,0(r17)
 800c930:	00bfffc4 	movi	r2,-1
 800c934:	003fe706 	br	800c8d4 <raise+0x58>

0800c938 <signal>:
 800c938:	defffc04 	addi	sp,sp,-16
 800c93c:	dc800215 	stw	r18,8(sp)
 800c940:	00c20074 	movhi	r3,2049
 800c944:	dfc00315 	stw	ra,12(sp)
 800c948:	dc400115 	stw	r17,4(sp)
 800c94c:	dc000015 	stw	r16,0(sp)
 800c950:	20800830 	cmpltui	r2,r4,32
 800c954:	1c93d817 	ldw	r18,20320(r3)
 800c958:	10000e26 	beq	r2,zero,800c994 <signal+0x5c>
 800c95c:	2021883a 	mov	r16,r4
 800c960:	9100b717 	ldw	r4,732(r18)
 800c964:	2823883a 	mov	r17,r5
 800c968:	20000e26 	beq	r4,zero,800c9a4 <signal+0x6c>
 800c96c:	802090ba 	slli	r16,r16,2
 800c970:	2421883a 	add	r16,r4,r16
 800c974:	80800017 	ldw	r2,0(r16)
 800c978:	84400015 	stw	r17,0(r16)
 800c97c:	dfc00317 	ldw	ra,12(sp)
 800c980:	dc800217 	ldw	r18,8(sp)
 800c984:	dc400117 	ldw	r17,4(sp)
 800c988:	dc000017 	ldw	r16,0(sp)
 800c98c:	dec00404 	addi	sp,sp,16
 800c990:	f800283a 	ret
 800c994:	00800584 	movi	r2,22
 800c998:	90800015 	stw	r2,0(r18)
 800c99c:	00bfffc4 	movi	r2,-1
 800c9a0:	003ff606 	br	800c97c <signal+0x44>
 800c9a4:	9009883a 	mov	r4,r18
 800c9a8:	01402004 	movi	r5,128
 800c9ac:	8007e600 	call	8007e60 <_malloc_r>
 800c9b0:	9080b715 	stw	r2,732(r18)
 800c9b4:	1009883a 	mov	r4,r2
 800c9b8:	10000526 	beq	r2,zero,800c9d0 <signal+0x98>
 800c9bc:	01802004 	movi	r6,128
 800c9c0:	000b883a 	mov	r5,zero
 800c9c4:	800893c0 	call	800893c <memset>
 800c9c8:	1009883a 	mov	r4,r2
 800c9cc:	003fe706 	br	800c96c <signal+0x34>
 800c9d0:	00bfffc4 	movi	r2,-1
 800c9d4:	003fe906 	br	800c97c <signal+0x44>

0800c9d8 <_init_signal>:
 800c9d8:	defffe04 	addi	sp,sp,-8
 800c9dc:	00820074 	movhi	r2,2049
 800c9e0:	dc000015 	stw	r16,0(sp)
 800c9e4:	1413d817 	ldw	r16,20320(r2)
 800c9e8:	dfc00115 	stw	ra,4(sp)
 800c9ec:	8080b717 	ldw	r2,732(r16)
 800c9f0:	10000526 	beq	r2,zero,800ca08 <_init_signal+0x30>
 800c9f4:	0005883a 	mov	r2,zero
 800c9f8:	dfc00117 	ldw	ra,4(sp)
 800c9fc:	dc000017 	ldw	r16,0(sp)
 800ca00:	dec00204 	addi	sp,sp,8
 800ca04:	f800283a 	ret
 800ca08:	8009883a 	mov	r4,r16
 800ca0c:	01402004 	movi	r5,128
 800ca10:	8007e600 	call	8007e60 <_malloc_r>
 800ca14:	8080b715 	stw	r2,732(r16)
 800ca18:	1009883a 	mov	r4,r2
 800ca1c:	10000426 	beq	r2,zero,800ca30 <_init_signal+0x58>
 800ca20:	01802004 	movi	r6,128
 800ca24:	000b883a 	mov	r5,zero
 800ca28:	800893c0 	call	800893c <memset>
 800ca2c:	003ff106 	br	800c9f4 <_init_signal+0x1c>
 800ca30:	00bfffc4 	movi	r2,-1
 800ca34:	003ff006 	br	800c9f8 <_init_signal+0x20>

0800ca38 <__sigtramp>:
 800ca38:	defffd04 	addi	sp,sp,-12
 800ca3c:	dc400115 	stw	r17,4(sp)
 800ca40:	00c20074 	movhi	r3,2049
 800ca44:	dfc00215 	stw	ra,8(sp)
 800ca48:	dc000015 	stw	r16,0(sp)
 800ca4c:	20800830 	cmpltui	r2,r4,32
 800ca50:	1c53d817 	ldw	r17,20320(r3)
 800ca54:	10002526 	beq	r2,zero,800caec <__sigtramp+0xb4>
 800ca58:	88c0b717 	ldw	r3,732(r17)
 800ca5c:	2021883a 	mov	r16,r4
 800ca60:	18001326 	beq	r3,zero,800cab0 <__sigtramp+0x78>
 800ca64:	800890ba 	slli	r4,r16,2
 800ca68:	1907883a 	add	r3,r3,r4
 800ca6c:	18800017 	ldw	r2,0(r3)
 800ca70:	10000d26 	beq	r2,zero,800caa8 <__sigtramp+0x70>
 800ca74:	113fffe0 	cmpeqi	r4,r2,-1
 800ca78:	20001a1e 	bne	r4,zero,800cae4 <__sigtramp+0xac>
 800ca7c:	11000060 	cmpeqi	r4,r2,1
 800ca80:	2000161e 	bne	r4,zero,800cadc <__sigtramp+0xa4>
 800ca84:	18000015 	stw	zero,0(r3)
 800ca88:	8009883a 	mov	r4,r16
 800ca8c:	103ee83a 	callr	r2
 800ca90:	0005883a 	mov	r2,zero
 800ca94:	dfc00217 	ldw	ra,8(sp)
 800ca98:	dc400117 	ldw	r17,4(sp)
 800ca9c:	dc000017 	ldw	r16,0(sp)
 800caa0:	dec00304 	addi	sp,sp,12
 800caa4:	f800283a 	ret
 800caa8:	00800044 	movi	r2,1
 800caac:	003ff906 	br	800ca94 <__sigtramp+0x5c>
 800cab0:	01402004 	movi	r5,128
 800cab4:	8809883a 	mov	r4,r17
 800cab8:	8007e600 	call	8007e60 <_malloc_r>
 800cabc:	8880b715 	stw	r2,732(r17)
 800cac0:	10000a26 	beq	r2,zero,800caec <__sigtramp+0xb4>
 800cac4:	01802004 	movi	r6,128
 800cac8:	000b883a 	mov	r5,zero
 800cacc:	1009883a 	mov	r4,r2
 800cad0:	800893c0 	call	800893c <memset>
 800cad4:	1007883a 	mov	r3,r2
 800cad8:	003fe206 	br	800ca64 <__sigtramp+0x2c>
 800cadc:	008000c4 	movi	r2,3
 800cae0:	003fec06 	br	800ca94 <__sigtramp+0x5c>
 800cae4:	00800084 	movi	r2,2
 800cae8:	003fea06 	br	800ca94 <__sigtramp+0x5c>
 800caec:	00bfffc4 	movi	r2,-1
 800caf0:	003fe806 	br	800ca94 <__sigtramp+0x5c>

0800caf4 <_kill_r>:
 800caf4:	2807883a 	mov	r3,r5
 800caf8:	defffe04 	addi	sp,sp,-8
 800cafc:	dc000015 	stw	r16,0(sp)
 800cb00:	00820074 	movhi	r2,2049
 800cb04:	300b883a 	mov	r5,r6
 800cb08:	2021883a 	mov	r16,r4
 800cb0c:	1809883a 	mov	r4,r3
 800cb10:	dfc00115 	stw	ra,4(sp)
 800cb14:	101af415 	stw	zero,27600(r2)
 800cb18:	80102380 	call	8010238 <kill>
 800cb1c:	10ffffd8 	cmpnei	r3,r2,-1
 800cb20:	18000426 	beq	r3,zero,800cb34 <_kill_r+0x40>
 800cb24:	dfc00117 	ldw	ra,4(sp)
 800cb28:	dc000017 	ldw	r16,0(sp)
 800cb2c:	dec00204 	addi	sp,sp,8
 800cb30:	f800283a 	ret
 800cb34:	00c20074 	movhi	r3,2049
 800cb38:	18daf417 	ldw	r3,27600(r3)
 800cb3c:	183ff926 	beq	r3,zero,800cb24 <_kill_r+0x30>
 800cb40:	80c00015 	stw	r3,0(r16)
 800cb44:	dfc00117 	ldw	ra,4(sp)
 800cb48:	dc000017 	ldw	r16,0(sp)
 800cb4c:	dec00204 	addi	sp,sp,8
 800cb50:	f800283a 	ret

0800cb54 <_getpid_r>:
 800cb54:	80100f01 	jmpi	80100f0 <getpid>

0800cb58 <__udivdi3>:
 800cb58:	defff504 	addi	sp,sp,-44
 800cb5c:	dd000515 	stw	r20,20(sp)
 800cb60:	dc800315 	stw	r18,12(sp)
 800cb64:	dfc00a15 	stw	ra,40(sp)
 800cb68:	df000915 	stw	fp,36(sp)
 800cb6c:	ddc00815 	stw	r23,32(sp)
 800cb70:	dd800715 	stw	r22,28(sp)
 800cb74:	dd400615 	stw	r21,24(sp)
 800cb78:	dcc00415 	stw	r19,16(sp)
 800cb7c:	dc400215 	stw	r17,8(sp)
 800cb80:	dc000115 	stw	r16,4(sp)
 800cb84:	2029883a 	mov	r20,r4
 800cb88:	2825883a 	mov	r18,r5
 800cb8c:	3800461e 	bne	r7,zero,800cca8 <__udivdi3+0x150>
 800cb90:	3823883a 	mov	r17,r7
 800cb94:	3021883a 	mov	r16,r6
 800cb98:	2027883a 	mov	r19,r4
 800cb9c:	2980622e 	bgeu	r5,r6,800cd28 <__udivdi3+0x1d0>
 800cba0:	00bfffd4 	movui	r2,65535
 800cba4:	282b883a 	mov	r21,r5
 800cba8:	1180aa2e 	bgeu	r2,r6,800ce54 <__udivdi3+0x2fc>
 800cbac:	00804034 	movhi	r2,256
 800cbb0:	30815a36 	bltu	r6,r2,800d11c <__udivdi3+0x5c4>
 800cbb4:	3006d63a 	srli	r3,r6,24
 800cbb8:	04400604 	movi	r17,24
 800cbbc:	00820074 	movhi	r2,2049
 800cbc0:	1885883a 	add	r2,r3,r2
 800cbc4:	108c9203 	ldbu	r2,12872(r2)
 800cbc8:	00c00804 	movi	r3,32
 800cbcc:	1463883a 	add	r17,r2,r17
 800cbd0:	1c45c83a 	sub	r2,r3,r17
 800cbd4:	1c400526 	beq	r3,r17,800cbec <__udivdi3+0x94>
 800cbd8:	9086983a 	sll	r3,r18,r2
 800cbdc:	a462d83a 	srl	r17,r20,r17
 800cbe0:	30a0983a 	sll	r16,r6,r2
 800cbe4:	a0a6983a 	sll	r19,r20,r2
 800cbe8:	88eab03a 	or	r21,r17,r3
 800cbec:	802cd43a 	srli	r22,r16,16
 800cbf0:	a809883a 	mov	r4,r21
 800cbf4:	853fffcc 	andi	r20,r16,65535
 800cbf8:	b00b883a 	mov	r5,r22
 800cbfc:	8002bf40 	call	8002bf4 <__umodsi3>
 800cc00:	a809883a 	mov	r4,r21
 800cc04:	b00b883a 	mov	r5,r22
 800cc08:	1025883a 	mov	r18,r2
 800cc0c:	8002b900 	call	8002b90 <__udivsi3>
 800cc10:	a009883a 	mov	r4,r20
 800cc14:	100b883a 	mov	r5,r2
 800cc18:	102b883a 	mov	r21,r2
 800cc1c:	8002c500 	call	8002c50 <__mulsi3>
 800cc20:	9024943a 	slli	r18,r18,16
 800cc24:	9808d43a 	srli	r4,r19,16
 800cc28:	9108b03a 	or	r4,r18,r4
 800cc2c:	2080052e 	bgeu	r4,r2,800cc44 <__udivdi3+0xec>
 800cc30:	2409883a 	add	r4,r4,r16
 800cc34:	a8ffffc4 	addi	r3,r21,-1
 800cc38:	24000136 	bltu	r4,r16,800cc40 <__udivdi3+0xe8>
 800cc3c:	20814836 	bltu	r4,r2,800d160 <__udivdi3+0x608>
 800cc40:	182b883a 	mov	r21,r3
 800cc44:	20a3c83a 	sub	r17,r4,r2
 800cc48:	8809883a 	mov	r4,r17
 800cc4c:	b00b883a 	mov	r5,r22
 800cc50:	8002bf40 	call	8002bf4 <__umodsi3>
 800cc54:	8809883a 	mov	r4,r17
 800cc58:	1023883a 	mov	r17,r2
 800cc5c:	b00b883a 	mov	r5,r22
 800cc60:	8822943a 	slli	r17,r17,16
 800cc64:	8002b900 	call	8002b90 <__udivsi3>
 800cc68:	100b883a 	mov	r5,r2
 800cc6c:	a009883a 	mov	r4,r20
 800cc70:	9cffffcc 	andi	r19,r19,65535
 800cc74:	1025883a 	mov	r18,r2
 800cc78:	8ce6b03a 	or	r19,r17,r19
 800cc7c:	8002c500 	call	8002c50 <__mulsi3>
 800cc80:	9880052e 	bgeu	r19,r2,800cc98 <__udivdi3+0x140>
 800cc84:	84e7883a 	add	r19,r16,r19
 800cc88:	90ffffc4 	addi	r3,r18,-1
 800cc8c:	9c000136 	bltu	r19,r16,800cc94 <__udivdi3+0x13c>
 800cc90:	98813136 	bltu	r19,r2,800d158 <__udivdi3+0x600>
 800cc94:	1825883a 	mov	r18,r3
 800cc98:	a80c943a 	slli	r6,r21,16
 800cc9c:	0007883a 	mov	r3,zero
 800cca0:	3484b03a 	or	r2,r6,r18
 800cca4:	00000306 	br	800ccb4 <__udivdi3+0x15c>
 800cca8:	29c00e2e 	bgeu	r5,r7,800cce4 <__udivdi3+0x18c>
 800ccac:	0007883a 	mov	r3,zero
 800ccb0:	0005883a 	mov	r2,zero
 800ccb4:	dfc00a17 	ldw	ra,40(sp)
 800ccb8:	df000917 	ldw	fp,36(sp)
 800ccbc:	ddc00817 	ldw	r23,32(sp)
 800ccc0:	dd800717 	ldw	r22,28(sp)
 800ccc4:	dd400617 	ldw	r21,24(sp)
 800ccc8:	dd000517 	ldw	r20,20(sp)
 800cccc:	dcc00417 	ldw	r19,16(sp)
 800ccd0:	dc800317 	ldw	r18,12(sp)
 800ccd4:	dc400217 	ldw	r17,8(sp)
 800ccd8:	dc000117 	ldw	r16,4(sp)
 800ccdc:	dec00b04 	addi	sp,sp,44
 800cce0:	f800283a 	ret
 800cce4:	00bfffd4 	movui	r2,65535
 800cce8:	11c05f2e 	bgeu	r2,r7,800ce68 <__udivdi3+0x310>
 800ccec:	00804034 	movhi	r2,256
 800ccf0:	3880fc36 	bltu	r7,r2,800d0e4 <__udivdi3+0x58c>
 800ccf4:	3804d63a 	srli	r2,r7,24
 800ccf8:	01000604 	movi	r4,24
 800ccfc:	00c20074 	movhi	r3,2049
 800cd00:	10c7883a 	add	r3,r2,r3
 800cd04:	188c9203 	ldbu	r2,12872(r3)
 800cd08:	00c00804 	movi	r3,32
 800cd0c:	1105883a 	add	r2,r2,r4
 800cd10:	18a3c83a 	sub	r17,r3,r2
 800cd14:	1880901e 	bne	r3,r2,800cf58 <__udivdi3+0x400>
 800cd18:	3c80f736 	bltu	r7,r18,800d0f8 <__udivdi3+0x5a0>
 800cd1c:	a185403a 	cmpgeu	r2,r20,r6
 800cd20:	0007883a 	mov	r3,zero
 800cd24:	003fe306 	br	800ccb4 <__udivdi3+0x15c>
 800cd28:	3000041e 	bne	r6,zero,800cd3c <__udivdi3+0x1e4>
 800cd2c:	000b883a 	mov	r5,zero
 800cd30:	01000044 	movi	r4,1
 800cd34:	8002b900 	call	8002b90 <__udivsi3>
 800cd38:	1021883a 	mov	r16,r2
 800cd3c:	00bfffd4 	movui	r2,65535
 800cd40:	14003f2e 	bgeu	r2,r16,800ce40 <__udivdi3+0x2e8>
 800cd44:	00804034 	movhi	r2,256
 800cd48:	8080f136 	bltu	r16,r2,800d110 <__udivdi3+0x5b8>
 800cd4c:	8006d63a 	srli	r3,r16,24
 800cd50:	04400604 	movi	r17,24
 800cd54:	00820074 	movhi	r2,2049
 800cd58:	1885883a 	add	r2,r3,r2
 800cd5c:	108c9203 	ldbu	r2,12872(r2)
 800cd60:	00c00804 	movi	r3,32
 800cd64:	1463883a 	add	r17,r2,r17
 800cd68:	1c45c83a 	sub	r2,r3,r17
 800cd6c:	1c40431e 	bne	r3,r17,800ce7c <__udivdi3+0x324>
 800cd70:	802cd43a 	srli	r22,r16,16
 800cd74:	9423c83a 	sub	r17,r18,r16
 800cd78:	853fffcc 	andi	r20,r16,65535
 800cd7c:	00c00044 	movi	r3,1
 800cd80:	b00b883a 	mov	r5,r22
 800cd84:	8809883a 	mov	r4,r17
 800cd88:	d8c00015 	stw	r3,0(sp)
 800cd8c:	8002bf40 	call	8002bf4 <__umodsi3>
 800cd90:	b00b883a 	mov	r5,r22
 800cd94:	8809883a 	mov	r4,r17
 800cd98:	1025883a 	mov	r18,r2
 800cd9c:	8002b900 	call	8002b90 <__udivsi3>
 800cda0:	1009883a 	mov	r4,r2
 800cda4:	a00b883a 	mov	r5,r20
 800cda8:	102b883a 	mov	r21,r2
 800cdac:	8002c500 	call	8002c50 <__mulsi3>
 800cdb0:	9024943a 	slli	r18,r18,16
 800cdb4:	9808d43a 	srli	r4,r19,16
 800cdb8:	d8c00017 	ldw	r3,0(sp)
 800cdbc:	9108b03a 	or	r4,r18,r4
 800cdc0:	2080052e 	bgeu	r4,r2,800cdd8 <__udivdi3+0x280>
 800cdc4:	2409883a 	add	r4,r4,r16
 800cdc8:	a97fffc4 	addi	r5,r21,-1
 800cdcc:	24000136 	bltu	r4,r16,800cdd4 <__udivdi3+0x27c>
 800cdd0:	2080e636 	bltu	r4,r2,800d16c <__udivdi3+0x614>
 800cdd4:	282b883a 	mov	r21,r5
 800cdd8:	20a3c83a 	sub	r17,r4,r2
 800cddc:	8809883a 	mov	r4,r17
 800cde0:	b00b883a 	mov	r5,r22
 800cde4:	d8c00015 	stw	r3,0(sp)
 800cde8:	8002bf40 	call	8002bf4 <__umodsi3>
 800cdec:	8809883a 	mov	r4,r17
 800cdf0:	1023883a 	mov	r17,r2
 800cdf4:	b00b883a 	mov	r5,r22
 800cdf8:	8822943a 	slli	r17,r17,16
 800cdfc:	8002b900 	call	8002b90 <__udivsi3>
 800ce00:	a00b883a 	mov	r5,r20
 800ce04:	1009883a 	mov	r4,r2
 800ce08:	9cffffcc 	andi	r19,r19,65535
 800ce0c:	1025883a 	mov	r18,r2
 800ce10:	8ce6b03a 	or	r19,r17,r19
 800ce14:	8002c500 	call	8002c50 <__mulsi3>
 800ce18:	d8c00017 	ldw	r3,0(sp)
 800ce1c:	9880052e 	bgeu	r19,r2,800ce34 <__udivdi3+0x2dc>
 800ce20:	84e7883a 	add	r19,r16,r19
 800ce24:	913fffc4 	addi	r4,r18,-1
 800ce28:	9c000136 	bltu	r19,r16,800ce30 <__udivdi3+0x2d8>
 800ce2c:	9880c836 	bltu	r19,r2,800d150 <__udivdi3+0x5f8>
 800ce30:	2025883a 	mov	r18,r4
 800ce34:	a80c943a 	slli	r6,r21,16
 800ce38:	3484b03a 	or	r2,r6,r18
 800ce3c:	003f9d06 	br	800ccb4 <__udivdi3+0x15c>
 800ce40:	80804030 	cmpltui	r2,r16,256
 800ce44:	1000b81e 	bne	r2,zero,800d128 <__udivdi3+0x5d0>
 800ce48:	8006d23a 	srli	r3,r16,8
 800ce4c:	04400204 	movi	r17,8
 800ce50:	003fc006 	br	800cd54 <__udivdi3+0x1fc>
 800ce54:	30804030 	cmpltui	r2,r6,256
 800ce58:	1000a51e 	bne	r2,zero,800d0f0 <__udivdi3+0x598>
 800ce5c:	3006d23a 	srli	r3,r6,8
 800ce60:	04400204 	movi	r17,8
 800ce64:	003f5506 	br	800cbbc <__udivdi3+0x64>
 800ce68:	38804030 	cmpltui	r2,r7,256
 800ce6c:	1000a51e 	bne	r2,zero,800d104 <__udivdi3+0x5ac>
 800ce70:	3804d23a 	srli	r2,r7,8
 800ce74:	01000204 	movi	r4,8
 800ce78:	003fa006 	br	800ccfc <__udivdi3+0x1a4>
 800ce7c:	80a0983a 	sll	r16,r16,r2
 800ce80:	946ed83a 	srl	r23,r18,r17
 800ce84:	9086983a 	sll	r3,r18,r2
 800ce88:	802cd43a 	srli	r22,r16,16
 800ce8c:	a462d83a 	srl	r17,r20,r17
 800ce90:	b809883a 	mov	r4,r23
 800ce94:	b00b883a 	mov	r5,r22
 800ce98:	88eab03a 	or	r21,r17,r3
 800ce9c:	a0a6983a 	sll	r19,r20,r2
 800cea0:	8002bf40 	call	8002bf4 <__umodsi3>
 800cea4:	b809883a 	mov	r4,r23
 800cea8:	b00b883a 	mov	r5,r22
 800ceac:	1025883a 	mov	r18,r2
 800ceb0:	853fffcc 	andi	r20,r16,65535
 800ceb4:	8002b900 	call	8002b90 <__udivsi3>
 800ceb8:	a009883a 	mov	r4,r20
 800cebc:	100b883a 	mov	r5,r2
 800cec0:	102f883a 	mov	r23,r2
 800cec4:	8002c500 	call	8002c50 <__mulsi3>
 800cec8:	9024943a 	slli	r18,r18,16
 800cecc:	a808d43a 	srli	r4,r21,16
 800ced0:	9108b03a 	or	r4,r18,r4
 800ced4:	2080062e 	bgeu	r4,r2,800cef0 <__udivdi3+0x398>
 800ced8:	2409883a 	add	r4,r4,r16
 800cedc:	b8ffffc4 	addi	r3,r23,-1
 800cee0:	24009936 	bltu	r4,r16,800d148 <__udivdi3+0x5f0>
 800cee4:	2080982e 	bgeu	r4,r2,800d148 <__udivdi3+0x5f0>
 800cee8:	bdffff84 	addi	r23,r23,-2
 800ceec:	2409883a 	add	r4,r4,r16
 800cef0:	20a3c83a 	sub	r17,r4,r2
 800cef4:	8809883a 	mov	r4,r17
 800cef8:	b00b883a 	mov	r5,r22
 800cefc:	8002bf40 	call	8002bf4 <__umodsi3>
 800cf00:	1025883a 	mov	r18,r2
 800cf04:	8809883a 	mov	r4,r17
 800cf08:	b00b883a 	mov	r5,r22
 800cf0c:	9024943a 	slli	r18,r18,16
 800cf10:	8002b900 	call	8002b90 <__udivsi3>
 800cf14:	100b883a 	mov	r5,r2
 800cf18:	a009883a 	mov	r4,r20
 800cf1c:	ac7fffcc 	andi	r17,r21,65535
 800cf20:	1039883a 	mov	fp,r2
 800cf24:	9462b03a 	or	r17,r18,r17
 800cf28:	8002c500 	call	8002c50 <__mulsi3>
 800cf2c:	8880062e 	bgeu	r17,r2,800cf48 <__udivdi3+0x3f0>
 800cf30:	8c23883a 	add	r17,r17,r16
 800cf34:	e0ffffc4 	addi	r3,fp,-1
 800cf38:	8c007f36 	bltu	r17,r16,800d138 <__udivdi3+0x5e0>
 800cf3c:	88807e2e 	bgeu	r17,r2,800d138 <__udivdi3+0x5e0>
 800cf40:	e73fff84 	addi	fp,fp,-2
 800cf44:	8c23883a 	add	r17,r17,r16
 800cf48:	b806943a 	slli	r3,r23,16
 800cf4c:	88a3c83a 	sub	r17,r17,r2
 800cf50:	1f06b03a 	or	r3,r3,fp
 800cf54:	003f8a06 	br	800cd80 <__udivdi3+0x228>
 800cf58:	30a6d83a 	srl	r19,r6,r2
 800cf5c:	3c4e983a 	sll	r7,r7,r17
 800cf60:	90a0d83a 	srl	r16,r18,r2
 800cf64:	9446983a 	sll	r3,r18,r17
 800cf68:	99e6b03a 	or	r19,r19,r7
 800cf6c:	a084d83a 	srl	r2,r20,r2
 800cf70:	9838d43a 	srli	fp,r19,16
 800cf74:	8009883a 	mov	r4,r16
 800cf78:	10eab03a 	or	r21,r2,r3
 800cf7c:	e00b883a 	mov	r5,fp
 800cf80:	346c983a 	sll	r22,r6,r17
 800cf84:	dd400015 	stw	r21,0(sp)
 800cf88:	8002bf40 	call	8002bf4 <__umodsi3>
 800cf8c:	8009883a 	mov	r4,r16
 800cf90:	e00b883a 	mov	r5,fp
 800cf94:	102f883a 	mov	r23,r2
 800cf98:	9cbfffcc 	andi	r18,r19,65535
 800cf9c:	8002b900 	call	8002b90 <__udivsi3>
 800cfa0:	9009883a 	mov	r4,r18
 800cfa4:	100b883a 	mov	r5,r2
 800cfa8:	1021883a 	mov	r16,r2
 800cfac:	8002c500 	call	8002c50 <__mulsi3>
 800cfb0:	b82e943a 	slli	r23,r23,16
 800cfb4:	a808d43a 	srli	r4,r21,16
 800cfb8:	b908b03a 	or	r4,r23,r4
 800cfbc:	2080062e 	bgeu	r4,r2,800cfd8 <__udivdi3+0x480>
 800cfc0:	24c9883a 	add	r4,r4,r19
 800cfc4:	817fffc4 	addi	r5,r16,-1
 800cfc8:	24c05d36 	bltu	r4,r19,800d140 <__udivdi3+0x5e8>
 800cfcc:	20805c2e 	bgeu	r4,r2,800d140 <__udivdi3+0x5e8>
 800cfd0:	843fff84 	addi	r16,r16,-2
 800cfd4:	24c9883a 	add	r4,r4,r19
 800cfd8:	20abc83a 	sub	r21,r4,r2
 800cfdc:	a809883a 	mov	r4,r21
 800cfe0:	e00b883a 	mov	r5,fp
 800cfe4:	8002bf40 	call	8002bf4 <__umodsi3>
 800cfe8:	a809883a 	mov	r4,r21
 800cfec:	e00b883a 	mov	r5,fp
 800cff0:	102b883a 	mov	r21,r2
 800cff4:	8002b900 	call	8002b90 <__udivsi3>
 800cff8:	9009883a 	mov	r4,r18
 800cffc:	100b883a 	mov	r5,r2
 800d000:	102f883a 	mov	r23,r2
 800d004:	8002c500 	call	8002c50 <__mulsi3>
 800d008:	d8c00017 	ldw	r3,0(sp)
 800d00c:	a82a943a 	slli	r21,r21,16
 800d010:	100d883a 	mov	r6,r2
 800d014:	1cbfffcc 	andi	r18,r3,65535
 800d018:	aca4b03a 	or	r18,r21,r18
 800d01c:	9080062e 	bgeu	r18,r2,800d038 <__udivdi3+0x4e0>
 800d020:	94e5883a 	add	r18,r18,r19
 800d024:	b8bfffc4 	addi	r2,r23,-1
 800d028:	94c04136 	bltu	r18,r19,800d130 <__udivdi3+0x5d8>
 800d02c:	9180402e 	bgeu	r18,r6,800d130 <__udivdi3+0x5d8>
 800d030:	bdffff84 	addi	r23,r23,-2
 800d034:	94e5883a 	add	r18,r18,r19
 800d038:	8004943a 	slli	r2,r16,16
 800d03c:	bd7fffcc 	andi	r21,r23,65535
 800d040:	b73fffcc 	andi	fp,r22,65535
 800d044:	15e0b03a 	or	r16,r2,r23
 800d048:	8026d43a 	srli	r19,r16,16
 800d04c:	a809883a 	mov	r4,r21
 800d050:	e00b883a 	mov	r5,fp
 800d054:	91a5c83a 	sub	r18,r18,r6
 800d058:	b02cd43a 	srli	r22,r22,16
 800d05c:	8002c500 	call	8002c50 <__mulsi3>
 800d060:	9809883a 	mov	r4,r19
 800d064:	e00b883a 	mov	r5,fp
 800d068:	102f883a 	mov	r23,r2
 800d06c:	8002c500 	call	8002c50 <__mulsi3>
 800d070:	9809883a 	mov	r4,r19
 800d074:	b00b883a 	mov	r5,r22
 800d078:	1027883a 	mov	r19,r2
 800d07c:	8002c500 	call	8002c50 <__mulsi3>
 800d080:	a809883a 	mov	r4,r21
 800d084:	b00b883a 	mov	r5,r22
 800d088:	102b883a 	mov	r21,r2
 800d08c:	8002c500 	call	8002c50 <__mulsi3>
 800d090:	b806d43a 	srli	r3,r23,16
 800d094:	14c5883a 	add	r2,r2,r19
 800d098:	1887883a 	add	r3,r3,r2
 800d09c:	1cc0022e 	bgeu	r3,r19,800d0a8 <__udivdi3+0x550>
 800d0a0:	00800074 	movhi	r2,1
 800d0a4:	a8ab883a 	add	r21,r21,r2
 800d0a8:	1804d43a 	srli	r2,r3,16
 800d0ac:	156b883a 	add	r21,r2,r21
 800d0b0:	95400936 	bltu	r18,r21,800d0d8 <__udivdi3+0x580>
 800d0b4:	95400326 	beq	r18,r21,800d0c4 <__udivdi3+0x56c>
 800d0b8:	8005883a 	mov	r2,r16
 800d0bc:	0007883a 	mov	r3,zero
 800d0c0:	003efc06 	br	800ccb4 <__udivdi3+0x15c>
 800d0c4:	1806943a 	slli	r3,r3,16
 800d0c8:	a44c983a 	sll	r6,r20,r17
 800d0cc:	bdffffcc 	andi	r23,r23,65535
 800d0d0:	1dc7883a 	add	r3,r3,r23
 800d0d4:	30fff82e 	bgeu	r6,r3,800d0b8 <__udivdi3+0x560>
 800d0d8:	80bfffc4 	addi	r2,r16,-1
 800d0dc:	0007883a 	mov	r3,zero
 800d0e0:	003ef406 	br	800ccb4 <__udivdi3+0x15c>
 800d0e4:	3804d43a 	srli	r2,r7,16
 800d0e8:	01000404 	movi	r4,16
 800d0ec:	003f0306 	br	800ccfc <__udivdi3+0x1a4>
 800d0f0:	3007883a 	mov	r3,r6
 800d0f4:	003eb106 	br	800cbbc <__udivdi3+0x64>
 800d0f8:	0007883a 	mov	r3,zero
 800d0fc:	00800044 	movi	r2,1
 800d100:	003eec06 	br	800ccb4 <__udivdi3+0x15c>
 800d104:	3805883a 	mov	r2,r7
 800d108:	0009883a 	mov	r4,zero
 800d10c:	003efb06 	br	800ccfc <__udivdi3+0x1a4>
 800d110:	8006d43a 	srli	r3,r16,16
 800d114:	04400404 	movi	r17,16
 800d118:	003f0e06 	br	800cd54 <__udivdi3+0x1fc>
 800d11c:	3006d43a 	srli	r3,r6,16
 800d120:	04400404 	movi	r17,16
 800d124:	003ea506 	br	800cbbc <__udivdi3+0x64>
 800d128:	8007883a 	mov	r3,r16
 800d12c:	003f0906 	br	800cd54 <__udivdi3+0x1fc>
 800d130:	102f883a 	mov	r23,r2
 800d134:	003fc006 	br	800d038 <__udivdi3+0x4e0>
 800d138:	1839883a 	mov	fp,r3
 800d13c:	003f8206 	br	800cf48 <__udivdi3+0x3f0>
 800d140:	2821883a 	mov	r16,r5
 800d144:	003fa406 	br	800cfd8 <__udivdi3+0x480>
 800d148:	182f883a 	mov	r23,r3
 800d14c:	003f6806 	br	800cef0 <__udivdi3+0x398>
 800d150:	94bfff84 	addi	r18,r18,-2
 800d154:	003f3706 	br	800ce34 <__udivdi3+0x2dc>
 800d158:	94bfff84 	addi	r18,r18,-2
 800d15c:	003ece06 	br	800cc98 <__udivdi3+0x140>
 800d160:	ad7fff84 	addi	r21,r21,-2
 800d164:	2409883a 	add	r4,r4,r16
 800d168:	003eb606 	br	800cc44 <__udivdi3+0xec>
 800d16c:	ad7fff84 	addi	r21,r21,-2
 800d170:	2409883a 	add	r4,r4,r16
 800d174:	003f1806 	br	800cdd8 <__udivdi3+0x280>

0800d178 <__umoddi3>:
 800d178:	defff304 	addi	sp,sp,-52
 800d17c:	dc400415 	stw	r17,16(sp)
 800d180:	dc000315 	stw	r16,12(sp)
 800d184:	dfc00c15 	stw	ra,48(sp)
 800d188:	df000b15 	stw	fp,44(sp)
 800d18c:	ddc00a15 	stw	r23,40(sp)
 800d190:	dd800915 	stw	r22,36(sp)
 800d194:	dd400815 	stw	r21,32(sp)
 800d198:	dd000715 	stw	r20,28(sp)
 800d19c:	dcc00615 	stw	r19,24(sp)
 800d1a0:	dc800515 	stw	r18,20(sp)
 800d1a4:	2823883a 	mov	r17,r5
 800d1a8:	2021883a 	mov	r16,r4
 800d1ac:	38003b1e 	bne	r7,zero,800d29c <__umoddi3+0x124>
 800d1b0:	3825883a 	mov	r18,r7
 800d1b4:	3029883a 	mov	r20,r6
 800d1b8:	2027883a 	mov	r19,r4
 800d1bc:	29805b2e 	bgeu	r5,r6,800d32c <__umoddi3+0x1b4>
 800d1c0:	00bfffd4 	movui	r2,65535
 800d1c4:	282d883a 	mov	r22,r5
 800d1c8:	11809a2e 	bgeu	r2,r6,800d434 <__umoddi3+0x2bc>
 800d1cc:	00804034 	movhi	r2,256
 800d1d0:	30814436 	bltu	r6,r2,800d6e4 <__umoddi3+0x56c>
 800d1d4:	3006d63a 	srli	r3,r6,24
 800d1d8:	04800604 	movi	r18,24
 800d1dc:	00820074 	movhi	r2,2049
 800d1e0:	1885883a 	add	r2,r3,r2
 800d1e4:	108c9203 	ldbu	r2,12872(r2)
 800d1e8:	00c00804 	movi	r3,32
 800d1ec:	1485883a 	add	r2,r2,r18
 800d1f0:	18a5c83a 	sub	r18,r3,r2
 800d1f4:	18800526 	beq	r3,r2,800d20c <__umoddi3+0x94>
 800d1f8:	8ca2983a 	sll	r17,r17,r18
 800d1fc:	8084d83a 	srl	r2,r16,r2
 800d200:	34a8983a 	sll	r20,r6,r18
 800d204:	84a6983a 	sll	r19,r16,r18
 800d208:	146cb03a 	or	r22,r2,r17
 800d20c:	a02ed43a 	srli	r23,r20,16
 800d210:	b009883a 	mov	r4,r22
 800d214:	a57fffcc 	andi	r21,r20,65535
 800d218:	b80b883a 	mov	r5,r23
 800d21c:	8002bf40 	call	8002bf4 <__umodsi3>
 800d220:	b80b883a 	mov	r5,r23
 800d224:	b009883a 	mov	r4,r22
 800d228:	1023883a 	mov	r17,r2
 800d22c:	8002b900 	call	8002b90 <__udivsi3>
 800d230:	a809883a 	mov	r4,r21
 800d234:	100b883a 	mov	r5,r2
 800d238:	8002c500 	call	8002c50 <__mulsi3>
 800d23c:	8822943a 	slli	r17,r17,16
 800d240:	9808d43a 	srli	r4,r19,16
 800d244:	8908b03a 	or	r4,r17,r4
 800d248:	2080042e 	bgeu	r4,r2,800d25c <__umoddi3+0xe4>
 800d24c:	2509883a 	add	r4,r4,r20
 800d250:	25000236 	bltu	r4,r20,800d25c <__umoddi3+0xe4>
 800d254:	2080012e 	bgeu	r4,r2,800d25c <__umoddi3+0xe4>
 800d258:	2509883a 	add	r4,r4,r20
 800d25c:	20a1c83a 	sub	r16,r4,r2
 800d260:	b80b883a 	mov	r5,r23
 800d264:	8009883a 	mov	r4,r16
 800d268:	8002bf40 	call	8002bf4 <__umodsi3>
 800d26c:	b80b883a 	mov	r5,r23
 800d270:	8009883a 	mov	r4,r16
 800d274:	1023883a 	mov	r17,r2
 800d278:	8002b900 	call	8002b90 <__udivsi3>
 800d27c:	8822943a 	slli	r17,r17,16
 800d280:	100b883a 	mov	r5,r2
 800d284:	a809883a 	mov	r4,r21
 800d288:	8002c500 	call	8002c50 <__mulsi3>
 800d28c:	98ffffcc 	andi	r3,r19,65535
 800d290:	88c6b03a 	or	r3,r17,r3
 800d294:	18805e2e 	bgeu	r3,r2,800d410 <__umoddi3+0x298>
 800d298:	00005906 	br	800d400 <__umoddi3+0x288>
 800d29c:	2005883a 	mov	r2,r4
 800d2a0:	29c00d2e 	bgeu	r5,r7,800d2d8 <__umoddi3+0x160>
 800d2a4:	2807883a 	mov	r3,r5
 800d2a8:	dfc00c17 	ldw	ra,48(sp)
 800d2ac:	df000b17 	ldw	fp,44(sp)
 800d2b0:	ddc00a17 	ldw	r23,40(sp)
 800d2b4:	dd800917 	ldw	r22,36(sp)
 800d2b8:	dd400817 	ldw	r21,32(sp)
 800d2bc:	dd000717 	ldw	r20,28(sp)
 800d2c0:	dcc00617 	ldw	r19,24(sp)
 800d2c4:	dc800517 	ldw	r18,20(sp)
 800d2c8:	dc400417 	ldw	r17,16(sp)
 800d2cc:	dc000317 	ldw	r16,12(sp)
 800d2d0:	dec00d04 	addi	sp,sp,52
 800d2d4:	f800283a 	ret
 800d2d8:	013fffd4 	movui	r4,65535
 800d2dc:	2807883a 	mov	r3,r5
 800d2e0:	21c0592e 	bgeu	r4,r7,800d448 <__umoddi3+0x2d0>
 800d2e4:	01004034 	movhi	r4,256
 800d2e8:	39010336 	bltu	r7,r4,800d6f8 <__umoddi3+0x580>
 800d2ec:	3808d63a 	srli	r4,r7,24
 800d2f0:	02000604 	movi	r8,24
 800d2f4:	01420074 	movhi	r5,2049
 800d2f8:	214b883a 	add	r5,r4,r5
 800d2fc:	2d0c9203 	ldbu	r20,12872(r5)
 800d300:	01000804 	movi	r4,32
 800d304:	a229883a 	add	r20,r20,r8
 800d308:	252bc83a 	sub	r21,r4,r20
 800d30c:	2500531e 	bne	r4,r20,800d45c <__umoddi3+0x2e4>
 800d310:	3c400136 	bltu	r7,r17,800d318 <__umoddi3+0x1a0>
 800d314:	81bfe436 	bltu	r16,r6,800d2a8 <__umoddi3+0x130>
 800d318:	8185c83a 	sub	r2,r16,r6
 800d31c:	89cfc83a 	sub	r7,r17,r7
 800d320:	8087803a 	cmpltu	r3,r16,r2
 800d324:	38c7c83a 	sub	r3,r7,r3
 800d328:	003fdf06 	br	800d2a8 <__umoddi3+0x130>
 800d32c:	3000041e 	bne	r6,zero,800d340 <__umoddi3+0x1c8>
 800d330:	000b883a 	mov	r5,zero
 800d334:	01000044 	movi	r4,1
 800d338:	8002b900 	call	8002b90 <__udivsi3>
 800d33c:	1029883a 	mov	r20,r2
 800d340:	00bfffd4 	movui	r2,65535
 800d344:	1500362e 	bgeu	r2,r20,800d420 <__umoddi3+0x2a8>
 800d348:	00804034 	movhi	r2,256
 800d34c:	a080ed36 	bltu	r20,r2,800d704 <__umoddi3+0x58c>
 800d350:	a006d63a 	srli	r3,r20,24
 800d354:	04800604 	movi	r18,24
 800d358:	00820074 	movhi	r2,2049
 800d35c:	1885883a 	add	r2,r3,r2
 800d360:	158c9203 	ldbu	r22,12872(r2)
 800d364:	00800804 	movi	r2,32
 800d368:	b4ad883a 	add	r22,r22,r18
 800d36c:	15a5c83a 	sub	r18,r2,r22
 800d370:	1580a51e 	bne	r2,r22,800d608 <__umoddi3+0x490>
 800d374:	a02ed43a 	srli	r23,r20,16
 800d378:	8d23c83a 	sub	r17,r17,r20
 800d37c:	a57fffcc 	andi	r21,r20,65535
 800d380:	8809883a 	mov	r4,r17
 800d384:	b80b883a 	mov	r5,r23
 800d388:	8002bf40 	call	8002bf4 <__umodsi3>
 800d38c:	8809883a 	mov	r4,r17
 800d390:	b80b883a 	mov	r5,r23
 800d394:	1023883a 	mov	r17,r2
 800d398:	8002b900 	call	8002b90 <__udivsi3>
 800d39c:	1009883a 	mov	r4,r2
 800d3a0:	a80b883a 	mov	r5,r21
 800d3a4:	8002c500 	call	8002c50 <__mulsi3>
 800d3a8:	8822943a 	slli	r17,r17,16
 800d3ac:	9808d43a 	srli	r4,r19,16
 800d3b0:	8908b03a 	or	r4,r17,r4
 800d3b4:	2080032e 	bgeu	r4,r2,800d3c4 <__umoddi3+0x24c>
 800d3b8:	2509883a 	add	r4,r4,r20
 800d3bc:	25000136 	bltu	r4,r20,800d3c4 <__umoddi3+0x24c>
 800d3c0:	2080dc36 	bltu	r4,r2,800d734 <__umoddi3+0x5bc>
 800d3c4:	20a1c83a 	sub	r16,r4,r2
 800d3c8:	b80b883a 	mov	r5,r23
 800d3cc:	8009883a 	mov	r4,r16
 800d3d0:	8002bf40 	call	8002bf4 <__umodsi3>
 800d3d4:	b80b883a 	mov	r5,r23
 800d3d8:	8009883a 	mov	r4,r16
 800d3dc:	1023883a 	mov	r17,r2
 800d3e0:	8822943a 	slli	r17,r17,16
 800d3e4:	8002b900 	call	8002b90 <__udivsi3>
 800d3e8:	a80b883a 	mov	r5,r21
 800d3ec:	1009883a 	mov	r4,r2
 800d3f0:	8002c500 	call	8002c50 <__mulsi3>
 800d3f4:	9cffffcc 	andi	r19,r19,65535
 800d3f8:	8cc6b03a 	or	r3,r17,r19
 800d3fc:	1880042e 	bgeu	r3,r2,800d410 <__umoddi3+0x298>
 800d400:	1d07883a 	add	r3,r3,r20
 800d404:	1d000236 	bltu	r3,r20,800d410 <__umoddi3+0x298>
 800d408:	1880012e 	bgeu	r3,r2,800d410 <__umoddi3+0x298>
 800d40c:	1d07883a 	add	r3,r3,r20
 800d410:	1885c83a 	sub	r2,r3,r2
 800d414:	1484d83a 	srl	r2,r2,r18
 800d418:	0007883a 	mov	r3,zero
 800d41c:	003fa206 	br	800d2a8 <__umoddi3+0x130>
 800d420:	a0804030 	cmpltui	r2,r20,256
 800d424:	1000ba1e 	bne	r2,zero,800d710 <__umoddi3+0x598>
 800d428:	a006d23a 	srli	r3,r20,8
 800d42c:	04800204 	movi	r18,8
 800d430:	003fc906 	br	800d358 <__umoddi3+0x1e0>
 800d434:	30804030 	cmpltui	r2,r6,256
 800d438:	1000ad1e 	bne	r2,zero,800d6f0 <__umoddi3+0x578>
 800d43c:	3006d23a 	srli	r3,r6,8
 800d440:	04800204 	movi	r18,8
 800d444:	003f6506 	br	800d1dc <__umoddi3+0x64>
 800d448:	39004030 	cmpltui	r4,r7,256
 800d44c:	2000b21e 	bne	r4,zero,800d718 <__umoddi3+0x5a0>
 800d450:	3808d23a 	srli	r4,r7,8
 800d454:	02000204 	movi	r8,8
 800d458:	003fa606 	br	800d2f4 <__umoddi3+0x17c>
 800d45c:	3d4e983a 	sll	r7,r7,r21
 800d460:	3508d83a 	srl	r4,r6,r20
 800d464:	8d2cd83a 	srl	r22,r17,r20
 800d468:	8504d83a 	srl	r2,r16,r20
 800d46c:	21e4b03a 	or	r18,r4,r7
 800d470:	8d62983a 	sll	r17,r17,r21
 800d474:	9026d43a 	srli	r19,r18,16
 800d478:	354c983a 	sll	r6,r6,r21
 800d47c:	1444b03a 	or	r2,r2,r17
 800d480:	b009883a 	mov	r4,r22
 800d484:	980b883a 	mov	r5,r19
 800d488:	d9800115 	stw	r6,4(sp)
 800d48c:	d8800015 	stw	r2,0(sp)
 800d490:	8002bf40 	call	8002bf4 <__umodsi3>
 800d494:	980b883a 	mov	r5,r19
 800d498:	b009883a 	mov	r4,r22
 800d49c:	102f883a 	mov	r23,r2
 800d4a0:	947fffcc 	andi	r17,r18,65535
 800d4a4:	8002b900 	call	8002b90 <__udivsi3>
 800d4a8:	8809883a 	mov	r4,r17
 800d4ac:	100b883a 	mov	r5,r2
 800d4b0:	1039883a 	mov	fp,r2
 800d4b4:	8002c500 	call	8002c50 <__mulsi3>
 800d4b8:	d8c00017 	ldw	r3,0(sp)
 800d4bc:	b82e943a 	slli	r23,r23,16
 800d4c0:	8560983a 	sll	r16,r16,r21
 800d4c4:	1808d43a 	srli	r4,r3,16
 800d4c8:	b908b03a 	or	r4,r23,r4
 800d4cc:	2080062e 	bgeu	r4,r2,800d4e8 <__umoddi3+0x370>
 800d4d0:	2489883a 	add	r4,r4,r18
 800d4d4:	e17fffc4 	addi	r5,fp,-1
 800d4d8:	24809436 	bltu	r4,r18,800d72c <__umoddi3+0x5b4>
 800d4dc:	2080932e 	bgeu	r4,r2,800d72c <__umoddi3+0x5b4>
 800d4e0:	e73fff84 	addi	fp,fp,-2
 800d4e4:	2489883a 	add	r4,r4,r18
 800d4e8:	20adc83a 	sub	r22,r4,r2
 800d4ec:	980b883a 	mov	r5,r19
 800d4f0:	b009883a 	mov	r4,r22
 800d4f4:	8002bf40 	call	8002bf4 <__umodsi3>
 800d4f8:	980b883a 	mov	r5,r19
 800d4fc:	b009883a 	mov	r4,r22
 800d500:	102f883a 	mov	r23,r2
 800d504:	8002b900 	call	8002b90 <__udivsi3>
 800d508:	100b883a 	mov	r5,r2
 800d50c:	8809883a 	mov	r4,r17
 800d510:	d8800215 	stw	r2,8(sp)
 800d514:	8002c500 	call	8002c50 <__mulsi3>
 800d518:	d8c00017 	ldw	r3,0(sp)
 800d51c:	b82e943a 	slli	r23,r23,16
 800d520:	d9400217 	ldw	r5,8(sp)
 800d524:	1c7fffcc 	andi	r17,r3,65535
 800d528:	bc62b03a 	or	r17,r23,r17
 800d52c:	8880062e 	bgeu	r17,r2,800d548 <__umoddi3+0x3d0>
 800d530:	8ca3883a 	add	r17,r17,r18
 800d534:	28ffffc4 	addi	r3,r5,-1
 800d538:	8c807a36 	bltu	r17,r18,800d724 <__umoddi3+0x5ac>
 800d53c:	8880792e 	bgeu	r17,r2,800d724 <__umoddi3+0x5ac>
 800d540:	297fff84 	addi	r5,r5,-2
 800d544:	8ca3883a 	add	r17,r17,r18
 800d548:	e02c943a 	slli	r22,fp,16
 800d54c:	d9c00117 	ldw	r7,4(sp)
 800d550:	29bfffcc 	andi	r6,r5,65535
 800d554:	b16cb03a 	or	r22,r22,r5
 800d558:	38ffffcc 	andi	r3,r7,65535
 800d55c:	b02cd43a 	srli	r22,r22,16
 800d560:	180b883a 	mov	r5,r3
 800d564:	3009883a 	mov	r4,r6
 800d568:	3838d43a 	srli	fp,r7,16
 800d56c:	182f883a 	mov	r23,r3
 800d570:	d9800015 	stw	r6,0(sp)
 800d574:	88a3c83a 	sub	r17,r17,r2
 800d578:	8002c500 	call	8002c50 <__mulsi3>
 800d57c:	b80b883a 	mov	r5,r23
 800d580:	b009883a 	mov	r4,r22
 800d584:	102f883a 	mov	r23,r2
 800d588:	8002c500 	call	8002c50 <__mulsi3>
 800d58c:	e00b883a 	mov	r5,fp
 800d590:	b009883a 	mov	r4,r22
 800d594:	102d883a 	mov	r22,r2
 800d598:	8002c500 	call	8002c50 <__mulsi3>
 800d59c:	d9800017 	ldw	r6,0(sp)
 800d5a0:	e00b883a 	mov	r5,fp
 800d5a4:	1039883a 	mov	fp,r2
 800d5a8:	3009883a 	mov	r4,r6
 800d5ac:	8002c500 	call	8002c50 <__mulsi3>
 800d5b0:	b808d43a 	srli	r4,r23,16
 800d5b4:	1585883a 	add	r2,r2,r22
 800d5b8:	2089883a 	add	r4,r4,r2
 800d5bc:	2580022e 	bgeu	r4,r22,800d5c8 <__umoddi3+0x450>
 800d5c0:	00800074 	movhi	r2,1
 800d5c4:	e0b9883a 	add	fp,fp,r2
 800d5c8:	2006d43a 	srli	r3,r4,16
 800d5cc:	2008943a 	slli	r4,r4,16
 800d5d0:	bdffffcc 	andi	r23,r23,65535
 800d5d4:	1f07883a 	add	r3,r3,fp
 800d5d8:	25c9883a 	add	r4,r4,r23
 800d5dc:	88c03a36 	bltu	r17,r3,800d6c8 <__umoddi3+0x550>
 800d5e0:	88c03826 	beq	r17,r3,800d6c4 <__umoddi3+0x54c>
 800d5e4:	8109c83a 	sub	r4,r16,r4
 800d5e8:	8121803a 	cmpltu	r16,r16,r4
 800d5ec:	88c7c83a 	sub	r3,r17,r3
 800d5f0:	1c07c83a 	sub	r3,r3,r16
 800d5f4:	1d04983a 	sll	r2,r3,r20
 800d5f8:	2548d83a 	srl	r4,r4,r21
 800d5fc:	1d46d83a 	srl	r3,r3,r21
 800d600:	1104b03a 	or	r2,r2,r4
 800d604:	003f2806 	br	800d2a8 <__umoddi3+0x130>
 800d608:	a4a8983a 	sll	r20,r20,r18
 800d60c:	8da6d83a 	srl	r19,r17,r22
 800d610:	8ca2983a 	sll	r17,r17,r18
 800d614:	a02ed43a 	srli	r23,r20,16
 800d618:	9809883a 	mov	r4,r19
 800d61c:	85acd83a 	srl	r22,r16,r22
 800d620:	b80b883a 	mov	r5,r23
 800d624:	8002bf40 	call	8002bf4 <__umodsi3>
 800d628:	9809883a 	mov	r4,r19
 800d62c:	b80b883a 	mov	r5,r23
 800d630:	b46cb03a 	or	r22,r22,r17
 800d634:	a57fffcc 	andi	r21,r20,65535
 800d638:	1023883a 	mov	r17,r2
 800d63c:	8002b900 	call	8002b90 <__udivsi3>
 800d640:	a809883a 	mov	r4,r21
 800d644:	100b883a 	mov	r5,r2
 800d648:	8002c500 	call	8002c50 <__mulsi3>
 800d64c:	8822943a 	slli	r17,r17,16
 800d650:	b008d43a 	srli	r4,r22,16
 800d654:	84a6983a 	sll	r19,r16,r18
 800d658:	8908b03a 	or	r4,r17,r4
 800d65c:	2080042e 	bgeu	r4,r2,800d670 <__umoddi3+0x4f8>
 800d660:	2509883a 	add	r4,r4,r20
 800d664:	25000236 	bltu	r4,r20,800d670 <__umoddi3+0x4f8>
 800d668:	2080012e 	bgeu	r4,r2,800d670 <__umoddi3+0x4f8>
 800d66c:	2509883a 	add	r4,r4,r20
 800d670:	20a1c83a 	sub	r16,r4,r2
 800d674:	8009883a 	mov	r4,r16
 800d678:	b80b883a 	mov	r5,r23
 800d67c:	8002bf40 	call	8002bf4 <__umodsi3>
 800d680:	8009883a 	mov	r4,r16
 800d684:	1021883a 	mov	r16,r2
 800d688:	b80b883a 	mov	r5,r23
 800d68c:	8020943a 	slli	r16,r16,16
 800d690:	8002b900 	call	8002b90 <__udivsi3>
 800d694:	100b883a 	mov	r5,r2
 800d698:	a809883a 	mov	r4,r21
 800d69c:	b47fffcc 	andi	r17,r22,65535
 800d6a0:	8002c500 	call	8002c50 <__mulsi3>
 800d6a4:	8462b03a 	or	r17,r16,r17
 800d6a8:	8880042e 	bgeu	r17,r2,800d6bc <__umoddi3+0x544>
 800d6ac:	8d23883a 	add	r17,r17,r20
 800d6b0:	8d000236 	bltu	r17,r20,800d6bc <__umoddi3+0x544>
 800d6b4:	8880012e 	bgeu	r17,r2,800d6bc <__umoddi3+0x544>
 800d6b8:	8d23883a 	add	r17,r17,r20
 800d6bc:	88a3c83a 	sub	r17,r17,r2
 800d6c0:	003f2f06 	br	800d380 <__umoddi3+0x208>
 800d6c4:	813fc72e 	bgeu	r16,r4,800d5e4 <__umoddi3+0x46c>
 800d6c8:	d8800117 	ldw	r2,4(sp)
 800d6cc:	20a7c83a 	sub	r19,r4,r2
 800d6d0:	24c9803a 	cmpltu	r4,r4,r19
 800d6d4:	2489883a 	add	r4,r4,r18
 800d6d8:	1907c83a 	sub	r3,r3,r4
 800d6dc:	9809883a 	mov	r4,r19
 800d6e0:	003fc006 	br	800d5e4 <__umoddi3+0x46c>
 800d6e4:	3006d43a 	srli	r3,r6,16
 800d6e8:	04800404 	movi	r18,16
 800d6ec:	003ebb06 	br	800d1dc <__umoddi3+0x64>
 800d6f0:	3007883a 	mov	r3,r6
 800d6f4:	003eb906 	br	800d1dc <__umoddi3+0x64>
 800d6f8:	3808d43a 	srli	r4,r7,16
 800d6fc:	02000404 	movi	r8,16
 800d700:	003efc06 	br	800d2f4 <__umoddi3+0x17c>
 800d704:	a006d43a 	srli	r3,r20,16
 800d708:	04800404 	movi	r18,16
 800d70c:	003f1206 	br	800d358 <__umoddi3+0x1e0>
 800d710:	a007883a 	mov	r3,r20
 800d714:	003f1006 	br	800d358 <__umoddi3+0x1e0>
 800d718:	3809883a 	mov	r4,r7
 800d71c:	0011883a 	mov	r8,zero
 800d720:	003ef406 	br	800d2f4 <__umoddi3+0x17c>
 800d724:	180b883a 	mov	r5,r3
 800d728:	003f8706 	br	800d548 <__umoddi3+0x3d0>
 800d72c:	2839883a 	mov	fp,r5
 800d730:	003f6d06 	br	800d4e8 <__umoddi3+0x370>
 800d734:	2509883a 	add	r4,r4,r20
 800d738:	003f2206 	br	800d3c4 <__umoddi3+0x24c>

0800d73c <__adddf3>:
 800d73c:	02000434 	movhi	r8,16
 800d740:	423fffc4 	addi	r8,r8,-1
 800d744:	2806d53a 	srli	r3,r5,20
 800d748:	3804d53a 	srli	r2,r7,20
 800d74c:	2a14703a 	and	r10,r5,r8
 800d750:	3a12703a 	and	r9,r7,r8
 800d754:	280ad7fa 	srli	r5,r5,31
 800d758:	501490fa 	slli	r10,r10,3
 800d75c:	2018d77a 	srli	r12,r4,29
 800d760:	481290fa 	slli	r9,r9,3
 800d764:	3016d77a 	srli	r11,r6,29
 800d768:	380ed7fa 	srli	r7,r7,31
 800d76c:	defffb04 	addi	sp,sp,-20
 800d770:	dc800215 	stw	r18,8(sp)
 800d774:	dc000015 	stw	r16,0(sp)
 800d778:	1c81ffcc 	andi	r18,r3,2047
 800d77c:	1081ffcc 	andi	r2,r2,2047
 800d780:	dfc00415 	stw	ra,16(sp)
 800d784:	dcc00315 	stw	r19,12(sp)
 800d788:	dc400115 	stw	r17,4(sp)
 800d78c:	201c90fa 	slli	r14,r4,3
 800d790:	301a90fa 	slli	r13,r6,3
 800d794:	2821883a 	mov	r16,r5
 800d798:	6294b03a 	or	r10,r12,r10
 800d79c:	5a52b03a 	or	r9,r11,r9
 800d7a0:	9087c83a 	sub	r3,r18,r2
 800d7a4:	29c06126 	beq	r5,r7,800d92c <__adddf3+0x1f0>
 800d7a8:	00c0550e 	bge	zero,r3,800d900 <__adddf3+0x1c4>
 800d7ac:	10007326 	beq	r2,zero,800d97c <__adddf3+0x240>
 800d7b0:	9081ffd8 	cmpnei	r2,r18,2047
 800d7b4:	1000bd26 	beq	r2,zero,800daac <__adddf3+0x370>
 800d7b8:	4a402034 	orhi	r9,r9,128
 800d7bc:	18800e48 	cmpgei	r2,r3,57
 800d7c0:	1000ef1e 	bne	r2,zero,800db80 <__adddf3+0x444>
 800d7c4:	18800808 	cmpgei	r2,r3,32
 800d7c8:	1001321e 	bne	r2,zero,800dc94 <__adddf3+0x558>
 800d7cc:	00800804 	movi	r2,32
 800d7d0:	10c5c83a 	sub	r2,r2,r3
 800d7d4:	68c8d83a 	srl	r4,r13,r3
 800d7d8:	48a2983a 	sll	r17,r9,r2
 800d7dc:	689a983a 	sll	r13,r13,r2
 800d7e0:	48c6d83a 	srl	r3,r9,r3
 800d7e4:	8922b03a 	or	r17,r17,r4
 800d7e8:	681ac03a 	cmpne	r13,r13,zero
 800d7ec:	8b62b03a 	or	r17,r17,r13
 800d7f0:	50d5c83a 	sub	r10,r10,r3
 800d7f4:	7463c83a 	sub	r17,r14,r17
 800d7f8:	7451803a 	cmpltu	r8,r14,r17
 800d7fc:	5211c83a 	sub	r8,r10,r8
 800d800:	4080202c 	andhi	r2,r8,128
 800d804:	10008d26 	beq	r2,zero,800da3c <__adddf3+0x300>
 800d808:	02402034 	movhi	r9,128
 800d80c:	4a7fffc4 	addi	r9,r9,-1
 800d810:	4266703a 	and	r19,r8,r9
 800d814:	9800b326 	beq	r19,zero,800dae4 <__adddf3+0x3a8>
 800d818:	9809883a 	mov	r4,r19
 800d81c:	800fe280 	call	800fe28 <__clzsi2>
 800d820:	10fffe04 	addi	r3,r2,-8
 800d824:	02000804 	movi	r8,32
 800d828:	40d1c83a 	sub	r8,r8,r3
 800d82c:	8a10d83a 	srl	r8,r17,r8
 800d830:	98d2983a 	sll	r9,r19,r3
 800d834:	88e2983a 	sll	r17,r17,r3
 800d838:	4250b03a 	or	r8,r8,r9
 800d83c:	1c80b216 	blt	r3,r18,800db08 <__adddf3+0x3cc>
 800d840:	1c87c83a 	sub	r3,r3,r18
 800d844:	19000044 	addi	r4,r3,1
 800d848:	20800808 	cmpgei	r2,r4,32
 800d84c:	10006f1e 	bne	r2,zero,800da0c <__adddf3+0x2d0>
 800d850:	00800804 	movi	r2,32
 800d854:	1105c83a 	sub	r2,r2,r4
 800d858:	8906d83a 	srl	r3,r17,r4
 800d85c:	88a2983a 	sll	r17,r17,r2
 800d860:	4084983a 	sll	r2,r8,r2
 800d864:	4110d83a 	srl	r8,r8,r4
 800d868:	8822c03a 	cmpne	r17,r17,zero
 800d86c:	10c4b03a 	or	r2,r2,r3
 800d870:	1462b03a 	or	r17,r2,r17
 800d874:	0025883a 	mov	r18,zero
 800d878:	888001cc 	andi	r2,r17,7
 800d87c:	10000726 	beq	r2,zero,800d89c <__adddf3+0x160>
 800d880:	888003cc 	andi	r2,r17,15
 800d884:	10800120 	cmpeqi	r2,r2,4
 800d888:	1000041e 	bne	r2,zero,800d89c <__adddf3+0x160>
 800d88c:	88c00104 	addi	r3,r17,4
 800d890:	1c63803a 	cmpltu	r17,r3,r17
 800d894:	4451883a 	add	r8,r8,r17
 800d898:	1823883a 	mov	r17,r3
 800d89c:	4080202c 	andhi	r2,r8,128
 800d8a0:	10006826 	beq	r2,zero,800da44 <__adddf3+0x308>
 800d8a4:	90c00044 	addi	r3,r18,1
 800d8a8:	1881ffe0 	cmpeqi	r2,r3,2047
 800d8ac:	18c1ffcc 	andi	r3,r3,2047
 800d8b0:	10007a1e 	bne	r2,zero,800da9c <__adddf3+0x360>
 800d8b4:	00bfe034 	movhi	r2,65408
 800d8b8:	10bfffc4 	addi	r2,r2,-1
 800d8bc:	4090703a 	and	r8,r8,r2
 800d8c0:	4004977a 	slli	r2,r8,29
 800d8c4:	4010927a 	slli	r8,r8,9
 800d8c8:	8822d0fa 	srli	r17,r17,3
 800d8cc:	4010d33a 	srli	r8,r8,12
 800d8d0:	1444b03a 	or	r2,r2,r17
 800d8d4:	1806953a 	slli	r3,r3,20
 800d8d8:	802097fa 	slli	r16,r16,31
 800d8dc:	1a06b03a 	or	r3,r3,r8
 800d8e0:	1c06b03a 	or	r3,r3,r16
 800d8e4:	dfc00417 	ldw	ra,16(sp)
 800d8e8:	dcc00317 	ldw	r19,12(sp)
 800d8ec:	dc800217 	ldw	r18,8(sp)
 800d8f0:	dc400117 	ldw	r17,4(sp)
 800d8f4:	dc000017 	ldw	r16,0(sp)
 800d8f8:	dec00504 	addi	sp,sp,20
 800d8fc:	f800283a 	ret
 800d900:	18002626 	beq	r3,zero,800d99c <__adddf3+0x260>
 800d904:	1487c83a 	sub	r3,r2,r18
 800d908:	9000ba1e 	bne	r18,zero,800dbf4 <__adddf3+0x4b8>
 800d90c:	5388b03a 	or	r4,r10,r14
 800d910:	20011826 	beq	r4,zero,800dd74 <__adddf3+0x638>
 800d914:	193fffc4 	addi	r4,r3,-1
 800d918:	20015726 	beq	r4,zero,800de78 <__adddf3+0x73c>
 800d91c:	18c1ffd8 	cmpnei	r3,r3,2047
 800d920:	18013026 	beq	r3,zero,800dde4 <__adddf3+0x6a8>
 800d924:	2007883a 	mov	r3,r4
 800d928:	0000b506 	br	800dc00 <__adddf3+0x4c4>
 800d92c:	00c07b0e 	bge	zero,r3,800db1c <__adddf3+0x3e0>
 800d930:	10002e26 	beq	r2,zero,800d9ec <__adddf3+0x2b0>
 800d934:	9081ffd8 	cmpnei	r2,r18,2047
 800d938:	10005c26 	beq	r2,zero,800daac <__adddf3+0x370>
 800d93c:	4a402034 	orhi	r9,r9,128
 800d940:	18800e48 	cmpgei	r2,r3,57
 800d944:	10004b1e 	bne	r2,zero,800da74 <__adddf3+0x338>
 800d948:	18800808 	cmpgei	r2,r3,32
 800d94c:	1000ec26 	beq	r2,zero,800dd00 <__adddf3+0x5c4>
 800d950:	1c7ff804 	addi	r17,r3,-32
 800d954:	19000820 	cmpeqi	r4,r3,32
 800d958:	4c44d83a 	srl	r2,r9,r17
 800d95c:	2000041e 	bne	r4,zero,800d970 <__adddf3+0x234>
 800d960:	01001004 	movi	r4,64
 800d964:	20c7c83a 	sub	r3,r4,r3
 800d968:	48d2983a 	sll	r9,r9,r3
 800d96c:	6a5ab03a 	or	r13,r13,r9
 800d970:	6822c03a 	cmpne	r17,r13,zero
 800d974:	88a2b03a 	or	r17,r17,r2
 800d978:	00004006 	br	800da7c <__adddf3+0x340>
 800d97c:	4b44b03a 	or	r2,r9,r13
 800d980:	10008226 	beq	r2,zero,800db8c <__adddf3+0x450>
 800d984:	18bfffc4 	addi	r2,r3,-1
 800d988:	10011026 	beq	r2,zero,800ddcc <__adddf3+0x690>
 800d98c:	18c1ffd8 	cmpnei	r3,r3,2047
 800d990:	18004626 	beq	r3,zero,800daac <__adddf3+0x370>
 800d994:	1007883a 	mov	r3,r2
 800d998:	003f8806 	br	800d7bc <__adddf3+0x80>
 800d99c:	90800044 	addi	r2,r18,1
 800d9a0:	1081ff8c 	andi	r2,r2,2046
 800d9a4:	1000a51e 	bne	r2,zero,800dc3c <__adddf3+0x500>
 800d9a8:	538ab03a 	or	r5,r10,r14
 800d9ac:	4b44b03a 	or	r2,r9,r13
 800d9b0:	9000f81e 	bne	r18,zero,800dd94 <__adddf3+0x658>
 800d9b4:	28013726 	beq	r5,zero,800de94 <__adddf3+0x758>
 800d9b8:	10011226 	beq	r2,zero,800de04 <__adddf3+0x6c8>
 800d9bc:	7363c83a 	sub	r17,r14,r13
 800d9c0:	7445803a 	cmpltu	r2,r14,r17
 800d9c4:	5251c83a 	sub	r8,r10,r9
 800d9c8:	4091c83a 	sub	r8,r8,r2
 800d9cc:	4080202c 	andhi	r2,r8,128
 800d9d0:	10018f26 	beq	r2,zero,800e010 <__adddf3+0x8d4>
 800d9d4:	6ba3c83a 	sub	r17,r13,r14
 800d9d8:	4a95c83a 	sub	r10,r9,r10
 800d9dc:	6c51803a 	cmpltu	r8,r13,r17
 800d9e0:	5211c83a 	sub	r8,r10,r8
 800d9e4:	3821883a 	mov	r16,r7
 800d9e8:	003fa306 	br	800d878 <__adddf3+0x13c>
 800d9ec:	4b44b03a 	or	r2,r9,r13
 800d9f0:	10006626 	beq	r2,zero,800db8c <__adddf3+0x450>
 800d9f4:	18bfffc4 	addi	r2,r3,-1
 800d9f8:	1000ec26 	beq	r2,zero,800ddac <__adddf3+0x670>
 800d9fc:	18c1ffd8 	cmpnei	r3,r3,2047
 800da00:	18012d26 	beq	r3,zero,800deb8 <__adddf3+0x77c>
 800da04:	1007883a 	mov	r3,r2
 800da08:	003fcd06 	br	800d940 <__adddf3+0x204>
 800da0c:	18fff844 	addi	r3,r3,-31
 800da10:	20800820 	cmpeqi	r2,r4,32
 800da14:	40c6d83a 	srl	r3,r8,r3
 800da18:	1000041e 	bne	r2,zero,800da2c <__adddf3+0x2f0>
 800da1c:	00801004 	movi	r2,64
 800da20:	1109c83a 	sub	r4,r2,r4
 800da24:	4110983a 	sll	r8,r8,r4
 800da28:	8a22b03a 	or	r17,r17,r8
 800da2c:	8822c03a 	cmpne	r17,r17,zero
 800da30:	88e2b03a 	or	r17,r17,r3
 800da34:	0011883a 	mov	r8,zero
 800da38:	0025883a 	mov	r18,zero
 800da3c:	888001cc 	andi	r2,r17,7
 800da40:	103f8f1e 	bne	r2,zero,800d880 <__adddf3+0x144>
 800da44:	8822d0fa 	srli	r17,r17,3
 800da48:	4004977a 	slli	r2,r8,29
 800da4c:	4014d0fa 	srli	r10,r8,3
 800da50:	9007883a 	mov	r3,r18
 800da54:	8884b03a 	or	r2,r17,r2
 800da58:	1901ffe0 	cmpeqi	r4,r3,2047
 800da5c:	2000191e 	bne	r4,zero,800dac4 <__adddf3+0x388>
 800da60:	02000434 	movhi	r8,16
 800da64:	423fffc4 	addi	r8,r8,-1
 800da68:	5210703a 	and	r8,r10,r8
 800da6c:	18c1ffcc 	andi	r3,r3,2047
 800da70:	003f9806 	br	800d8d4 <__adddf3+0x198>
 800da74:	4b62b03a 	or	r17,r9,r13
 800da78:	8822c03a 	cmpne	r17,r17,zero
 800da7c:	8ba3883a 	add	r17,r17,r14
 800da80:	8b91803a 	cmpltu	r8,r17,r14
 800da84:	4291883a 	add	r8,r8,r10
 800da88:	4080202c 	andhi	r2,r8,128
 800da8c:	103feb26 	beq	r2,zero,800da3c <__adddf3+0x300>
 800da90:	94800044 	addi	r18,r18,1
 800da94:	9081ffe0 	cmpeqi	r2,r18,2047
 800da98:	10007426 	beq	r2,zero,800dc6c <__adddf3+0x530>
 800da9c:	00c1ffc4 	movi	r3,2047
 800daa0:	0011883a 	mov	r8,zero
 800daa4:	0005883a 	mov	r2,zero
 800daa8:	003f8a06 	br	800d8d4 <__adddf3+0x198>
 800daac:	500a977a 	slli	r5,r10,29
 800dab0:	00c80034 	movhi	r3,8192
 800dab4:	18ffffc4 	addi	r3,r3,-1
 800dab8:	5014d0fa 	srli	r10,r10,3
 800dabc:	20c4703a 	and	r2,r4,r3
 800dac0:	1144b03a 	or	r2,r2,r5
 800dac4:	1286b03a 	or	r3,r2,r10
 800dac8:	18015426 	beq	r3,zero,800e01c <__adddf3+0x8e0>
 800dacc:	00c00434 	movhi	r3,16
 800dad0:	18ffffc4 	addi	r3,r3,-1
 800dad4:	52000234 	orhi	r8,r10,8
 800dad8:	40d0703a 	and	r8,r8,r3
 800dadc:	00c1ffc4 	movi	r3,2047
 800dae0:	003f7c06 	br	800d8d4 <__adddf3+0x198>
 800dae4:	8809883a 	mov	r4,r17
 800dae8:	800fe280 	call	800fe28 <__clzsi2>
 800daec:	10c00604 	addi	r3,r2,24
 800daf0:	19000808 	cmpgei	r4,r3,32
 800daf4:	203f4b26 	beq	r4,zero,800d824 <__adddf3+0xe8>
 800daf8:	123ffe04 	addi	r8,r2,-8
 800dafc:	8a10983a 	sll	r8,r17,r8
 800db00:	0023883a 	mov	r17,zero
 800db04:	1cbf4e0e 	bge	r3,r18,800d840 <__adddf3+0x104>
 800db08:	00bfe034 	movhi	r2,65408
 800db0c:	10bfffc4 	addi	r2,r2,-1
 800db10:	90e5c83a 	sub	r18,r18,r3
 800db14:	4090703a 	and	r8,r8,r2
 800db18:	003f5706 	br	800d878 <__adddf3+0x13c>
 800db1c:	18002226 	beq	r3,zero,800dba8 <__adddf3+0x46c>
 800db20:	1487c83a 	sub	r3,r2,r18
 800db24:	90006e26 	beq	r18,zero,800dce0 <__adddf3+0x5a4>
 800db28:	1101ffd8 	cmpnei	r4,r2,2047
 800db2c:	2000e926 	beq	r4,zero,800ded4 <__adddf3+0x798>
 800db30:	52802034 	orhi	r10,r10,128
 800db34:	19000e48 	cmpgei	r4,r3,57
 800db38:	2000b91e 	bne	r4,zero,800de20 <__adddf3+0x6e4>
 800db3c:	19000808 	cmpgei	r4,r3,32
 800db40:	2001101e 	bne	r4,zero,800df84 <__adddf3+0x848>
 800db44:	01000804 	movi	r4,32
 800db48:	20c9c83a 	sub	r4,r4,r3
 800db4c:	5122983a 	sll	r17,r10,r4
 800db50:	70cad83a 	srl	r5,r14,r3
 800db54:	7108983a 	sll	r4,r14,r4
 800db58:	50d4d83a 	srl	r10,r10,r3
 800db5c:	8962b03a 	or	r17,r17,r5
 800db60:	2008c03a 	cmpne	r4,r4,zero
 800db64:	8922b03a 	or	r17,r17,r4
 800db68:	4a93883a 	add	r9,r9,r10
 800db6c:	8b63883a 	add	r17,r17,r13
 800db70:	8b51803a 	cmpltu	r8,r17,r13
 800db74:	4251883a 	add	r8,r8,r9
 800db78:	1025883a 	mov	r18,r2
 800db7c:	003fc206 	br	800da88 <__adddf3+0x34c>
 800db80:	4b62b03a 	or	r17,r9,r13
 800db84:	8822c03a 	cmpne	r17,r17,zero
 800db88:	003f1a06 	br	800d7f4 <__adddf3+0xb8>
 800db8c:	500c977a 	slli	r6,r10,29
 800db90:	01480034 	movhi	r5,8192
 800db94:	297fffc4 	addi	r5,r5,-1
 800db98:	2144703a 	and	r2,r4,r5
 800db9c:	5014d0fa 	srli	r10,r10,3
 800dba0:	1184b03a 	or	r2,r2,r6
 800dba4:	003fac06 	br	800da58 <__adddf3+0x31c>
 800dba8:	90800044 	addi	r2,r18,1
 800dbac:	1141ff8c 	andi	r5,r2,2046
 800dbb0:	28005e1e 	bne	r5,zero,800dd2c <__adddf3+0x5f0>
 800dbb4:	5384b03a 	or	r2,r10,r14
 800dbb8:	9000a71e 	bne	r18,zero,800de58 <__adddf3+0x71c>
 800dbbc:	1000e526 	beq	r2,zero,800df54 <__adddf3+0x818>
 800dbc0:	4b44b03a 	or	r2,r9,r13
 800dbc4:	10008f26 	beq	r2,zero,800de04 <__adddf3+0x6c8>
 800dbc8:	7363883a 	add	r17,r14,r13
 800dbcc:	5255883a 	add	r10,r10,r9
 800dbd0:	8b91803a 	cmpltu	r8,r17,r14
 800dbd4:	5211883a 	add	r8,r10,r8
 800dbd8:	4080202c 	andhi	r2,r8,128
 800dbdc:	103f9726 	beq	r2,zero,800da3c <__adddf3+0x300>
 800dbe0:	00bfe034 	movhi	r2,65408
 800dbe4:	10bfffc4 	addi	r2,r2,-1
 800dbe8:	4090703a 	and	r8,r8,r2
 800dbec:	04800044 	movi	r18,1
 800dbf0:	003f9206 	br	800da3c <__adddf3+0x300>
 800dbf4:	1101ffd8 	cmpnei	r4,r2,2047
 800dbf8:	20007a26 	beq	r4,zero,800dde4 <__adddf3+0x6a8>
 800dbfc:	52802034 	orhi	r10,r10,128
 800dc00:	19000e48 	cmpgei	r4,r3,57
 800dc04:	20002e1e 	bne	r4,zero,800dcc0 <__adddf3+0x584>
 800dc08:	19000808 	cmpgei	r4,r3,32
 800dc0c:	2000871e 	bne	r4,zero,800de2c <__adddf3+0x6f0>
 800dc10:	01000804 	movi	r4,32
 800dc14:	20c9c83a 	sub	r4,r4,r3
 800dc18:	5122983a 	sll	r17,r10,r4
 800dc1c:	70cad83a 	srl	r5,r14,r3
 800dc20:	711c983a 	sll	r14,r14,r4
 800dc24:	50d4d83a 	srl	r10,r10,r3
 800dc28:	8962b03a 	or	r17,r17,r5
 800dc2c:	701cc03a 	cmpne	r14,r14,zero
 800dc30:	8ba2b03a 	or	r17,r17,r14
 800dc34:	4a93c83a 	sub	r9,r9,r10
 800dc38:	00002306 	br	800dcc8 <__adddf3+0x58c>
 800dc3c:	7363c83a 	sub	r17,r14,r13
 800dc40:	5267c83a 	sub	r19,r10,r9
 800dc44:	7451803a 	cmpltu	r8,r14,r17
 800dc48:	9a27c83a 	sub	r19,r19,r8
 800dc4c:	9880202c 	andhi	r2,r19,128
 800dc50:	1000421e 	bne	r2,zero,800dd5c <__adddf3+0x620>
 800dc54:	8cc4b03a 	or	r2,r17,r19
 800dc58:	103eee1e 	bne	r2,zero,800d814 <__adddf3+0xd8>
 800dc5c:	0015883a 	mov	r10,zero
 800dc60:	0021883a 	mov	r16,zero
 800dc64:	003f7e06 	br	800da60 <__adddf3+0x324>
 800dc68:	04800084 	movi	r18,2
 800dc6c:	00bfe034 	movhi	r2,65408
 800dc70:	10bfffc4 	addi	r2,r2,-1
 800dc74:	8806d07a 	srli	r3,r17,1
 800dc78:	4090703a 	and	r8,r8,r2
 800dc7c:	400497fa 	slli	r2,r8,31
 800dc80:	8c40004c 	andi	r17,r17,1
 800dc84:	1c62b03a 	or	r17,r3,r17
 800dc88:	4010d07a 	srli	r8,r8,1
 800dc8c:	1462b03a 	or	r17,r2,r17
 800dc90:	003ef906 	br	800d878 <__adddf3+0x13c>
 800dc94:	1c7ff804 	addi	r17,r3,-32
 800dc98:	19000820 	cmpeqi	r4,r3,32
 800dc9c:	4c44d83a 	srl	r2,r9,r17
 800dca0:	2000041e 	bne	r4,zero,800dcb4 <__adddf3+0x578>
 800dca4:	01001004 	movi	r4,64
 800dca8:	20c7c83a 	sub	r3,r4,r3
 800dcac:	48d2983a 	sll	r9,r9,r3
 800dcb0:	6a5ab03a 	or	r13,r13,r9
 800dcb4:	6822c03a 	cmpne	r17,r13,zero
 800dcb8:	88a2b03a 	or	r17,r17,r2
 800dcbc:	003ecd06 	br	800d7f4 <__adddf3+0xb8>
 800dcc0:	5394b03a 	or	r10,r10,r14
 800dcc4:	5022c03a 	cmpne	r17,r10,zero
 800dcc8:	6c63c83a 	sub	r17,r13,r17
 800dccc:	6c51803a 	cmpltu	r8,r13,r17
 800dcd0:	4a11c83a 	sub	r8,r9,r8
 800dcd4:	3821883a 	mov	r16,r7
 800dcd8:	1025883a 	mov	r18,r2
 800dcdc:	003ec806 	br	800d800 <__adddf3+0xc4>
 800dce0:	5388b03a 	or	r4,r10,r14
 800dce4:	20008226 	beq	r4,zero,800def0 <__adddf3+0x7b4>
 800dce8:	193fffc4 	addi	r4,r3,-1
 800dcec:	2000b026 	beq	r4,zero,800dfb0 <__adddf3+0x874>
 800dcf0:	18c1ffd8 	cmpnei	r3,r3,2047
 800dcf4:	18007726 	beq	r3,zero,800ded4 <__adddf3+0x798>
 800dcf8:	2007883a 	mov	r3,r4
 800dcfc:	003f8d06 	br	800db34 <__adddf3+0x3f8>
 800dd00:	00800804 	movi	r2,32
 800dd04:	10c5c83a 	sub	r2,r2,r3
 800dd08:	68c8d83a 	srl	r4,r13,r3
 800dd0c:	48a2983a 	sll	r17,r9,r2
 800dd10:	689a983a 	sll	r13,r13,r2
 800dd14:	48c6d83a 	srl	r3,r9,r3
 800dd18:	8922b03a 	or	r17,r17,r4
 800dd1c:	681ac03a 	cmpne	r13,r13,zero
 800dd20:	8b62b03a 	or	r17,r17,r13
 800dd24:	50d5883a 	add	r10,r10,r3
 800dd28:	003f5406 	br	800da7c <__adddf3+0x340>
 800dd2c:	10c1ffe0 	cmpeqi	r3,r2,2047
 800dd30:	183f5a1e 	bne	r3,zero,800da9c <__adddf3+0x360>
 800dd34:	7351883a 	add	r8,r14,r13
 800dd38:	4387803a 	cmpltu	r3,r8,r14
 800dd3c:	5255883a 	add	r10,r10,r9
 800dd40:	50c7883a 	add	r3,r10,r3
 800dd44:	401ad07a 	srli	r13,r8,1
 800dd48:	182297fa 	slli	r17,r3,31
 800dd4c:	1810d07a 	srli	r8,r3,1
 800dd50:	1025883a 	mov	r18,r2
 800dd54:	8b62b03a 	or	r17,r17,r13
 800dd58:	003f3806 	br	800da3c <__adddf3+0x300>
 800dd5c:	6ba3c83a 	sub	r17,r13,r14
 800dd60:	4a93c83a 	sub	r9,r9,r10
 800dd64:	6c51803a 	cmpltu	r8,r13,r17
 800dd68:	4a27c83a 	sub	r19,r9,r8
 800dd6c:	3821883a 	mov	r16,r7
 800dd70:	003ea806 	br	800d814 <__adddf3+0xd8>
 800dd74:	480a977a 	slli	r5,r9,29
 800dd78:	01080034 	movhi	r4,8192
 800dd7c:	213fffc4 	addi	r4,r4,-1
 800dd80:	3104703a 	and	r2,r6,r4
 800dd84:	4814d0fa 	srli	r10,r9,3
 800dd88:	1144b03a 	or	r2,r2,r5
 800dd8c:	3821883a 	mov	r16,r7
 800dd90:	003f3106 	br	800da58 <__adddf3+0x31c>
 800dd94:	28005d1e 	bne	r5,zero,800df0c <__adddf3+0x7d0>
 800dd98:	1000121e 	bne	r2,zero,800dde4 <__adddf3+0x6a8>
 800dd9c:	0021883a 	mov	r16,zero
 800dda0:	4015883a 	mov	r10,r8
 800dda4:	00bfffc4 	movi	r2,-1
 800dda8:	003f4806 	br	800dacc <__adddf3+0x390>
 800ddac:	7363883a 	add	r17,r14,r13
 800ddb0:	5255883a 	add	r10,r10,r9
 800ddb4:	8b91803a 	cmpltu	r8,r17,r14
 800ddb8:	5211883a 	add	r8,r10,r8
 800ddbc:	4080202c 	andhi	r2,r8,128
 800ddc0:	103fa91e 	bne	r2,zero,800dc68 <__adddf3+0x52c>
 800ddc4:	04800044 	movi	r18,1
 800ddc8:	003f1c06 	br	800da3c <__adddf3+0x300>
 800ddcc:	7363c83a 	sub	r17,r14,r13
 800ddd0:	5255c83a 	sub	r10,r10,r9
 800ddd4:	7451803a 	cmpltu	r8,r14,r17
 800ddd8:	5211c83a 	sub	r8,r10,r8
 800dddc:	04800044 	movi	r18,1
 800dde0:	003e8706 	br	800d800 <__adddf3+0xc4>
 800dde4:	4806977a 	slli	r3,r9,29
 800dde8:	00880034 	movhi	r2,8192
 800ddec:	10bfffc4 	addi	r2,r2,-1
 800ddf0:	3084703a 	and	r2,r6,r2
 800ddf4:	4814d0fa 	srli	r10,r9,3
 800ddf8:	10c4b03a 	or	r2,r2,r3
 800ddfc:	3821883a 	mov	r16,r7
 800de00:	003f3006 	br	800dac4 <__adddf3+0x388>
 800de04:	500a977a 	slli	r5,r10,29
 800de08:	00880034 	movhi	r2,8192
 800de0c:	10bfffc4 	addi	r2,r2,-1
 800de10:	2084703a 	and	r2,r4,r2
 800de14:	5014d0fa 	srli	r10,r10,3
 800de18:	1144b03a 	or	r2,r2,r5
 800de1c:	003f1006 	br	800da60 <__adddf3+0x324>
 800de20:	5394b03a 	or	r10,r10,r14
 800de24:	5022c03a 	cmpne	r17,r10,zero
 800de28:	003f5006 	br	800db6c <__adddf3+0x430>
 800de2c:	1c7ff804 	addi	r17,r3,-32
 800de30:	19400820 	cmpeqi	r5,r3,32
 800de34:	5448d83a 	srl	r4,r10,r17
 800de38:	2800041e 	bne	r5,zero,800de4c <__adddf3+0x710>
 800de3c:	01401004 	movi	r5,64
 800de40:	28c7c83a 	sub	r3,r5,r3
 800de44:	50d4983a 	sll	r10,r10,r3
 800de48:	729cb03a 	or	r14,r14,r10
 800de4c:	7022c03a 	cmpne	r17,r14,zero
 800de50:	8922b03a 	or	r17,r17,r4
 800de54:	003f9c06 	br	800dcc8 <__adddf3+0x58c>
 800de58:	10005a1e 	bne	r2,zero,800dfc4 <__adddf3+0x888>
 800de5c:	4804977a 	slli	r2,r9,29
 800de60:	00c80034 	movhi	r3,8192
 800de64:	18ffffc4 	addi	r3,r3,-1
 800de68:	30cc703a 	and	r6,r6,r3
 800de6c:	4814d0fa 	srli	r10,r9,3
 800de70:	1184b03a 	or	r2,r2,r6
 800de74:	003f1306 	br	800dac4 <__adddf3+0x388>
 800de78:	6ba3c83a 	sub	r17,r13,r14
 800de7c:	4a95c83a 	sub	r10,r9,r10
 800de80:	6c51803a 	cmpltu	r8,r13,r17
 800de84:	5211c83a 	sub	r8,r10,r8
 800de88:	3821883a 	mov	r16,r7
 800de8c:	04800044 	movi	r18,1
 800de90:	003e5b06 	br	800d800 <__adddf3+0xc4>
 800de94:	103f7126 	beq	r2,zero,800dc5c <__adddf3+0x520>
 800de98:	4808977a 	slli	r4,r9,29
 800de9c:	00880034 	movhi	r2,8192
 800dea0:	10bfffc4 	addi	r2,r2,-1
 800dea4:	3084703a 	and	r2,r6,r2
 800dea8:	4814d0fa 	srli	r10,r9,3
 800deac:	1104b03a 	or	r2,r2,r4
 800deb0:	3821883a 	mov	r16,r7
 800deb4:	003eea06 	br	800da60 <__adddf3+0x324>
 800deb8:	5006977a 	slli	r3,r10,29
 800debc:	00880034 	movhi	r2,8192
 800dec0:	10bfffc4 	addi	r2,r2,-1
 800dec4:	2084703a 	and	r2,r4,r2
 800dec8:	5014d0fa 	srli	r10,r10,3
 800decc:	10c4b03a 	or	r2,r2,r3
 800ded0:	003efc06 	br	800dac4 <__adddf3+0x388>
 800ded4:	4806977a 	slli	r3,r9,29
 800ded8:	00880034 	movhi	r2,8192
 800dedc:	10bfffc4 	addi	r2,r2,-1
 800dee0:	3084703a 	and	r2,r6,r2
 800dee4:	4814d0fa 	srli	r10,r9,3
 800dee8:	10c4b03a 	or	r2,r2,r3
 800deec:	003ef506 	br	800dac4 <__adddf3+0x388>
 800def0:	4808977a 	slli	r4,r9,29
 800def4:	00880034 	movhi	r2,8192
 800def8:	10bfffc4 	addi	r2,r2,-1
 800defc:	3084703a 	and	r2,r6,r2
 800df00:	4814d0fa 	srli	r10,r9,3
 800df04:	1104b03a 	or	r2,r2,r4
 800df08:	003ed306 	br	800da58 <__adddf3+0x31c>
 800df0c:	500a977a 	slli	r5,r10,29
 800df10:	5014d0fa 	srli	r10,r10,3
 800df14:	10001626 	beq	r2,zero,800df70 <__adddf3+0x834>
 800df18:	00c80034 	movhi	r3,8192
 800df1c:	18ffffc4 	addi	r3,r3,-1
 800df20:	20c4703a 	and	r2,r4,r3
 800df24:	5100022c 	andhi	r4,r10,8
 800df28:	1144b03a 	or	r2,r2,r5
 800df2c:	203ee526 	beq	r4,zero,800dac4 <__adddf3+0x388>
 800df30:	4808d0fa 	srli	r4,r9,3
 800df34:	2140022c 	andhi	r5,r4,8
 800df38:	283ee21e 	bne	r5,zero,800dac4 <__adddf3+0x388>
 800df3c:	4812977a 	slli	r9,r9,29
 800df40:	30c4703a 	and	r2,r6,r3
 800df44:	3821883a 	mov	r16,r7
 800df48:	1244b03a 	or	r2,r2,r9
 800df4c:	2015883a 	mov	r10,r4
 800df50:	003edc06 	br	800dac4 <__adddf3+0x388>
 800df54:	4804977a 	slli	r2,r9,29
 800df58:	01080034 	movhi	r4,8192
 800df5c:	213fffc4 	addi	r4,r4,-1
 800df60:	310c703a 	and	r6,r6,r4
 800df64:	4814d0fa 	srli	r10,r9,3
 800df68:	1184b03a 	or	r2,r2,r6
 800df6c:	003ebc06 	br	800da60 <__adddf3+0x324>
 800df70:	00880034 	movhi	r2,8192
 800df74:	10bfffc4 	addi	r2,r2,-1
 800df78:	2084703a 	and	r2,r4,r2
 800df7c:	1144b03a 	or	r2,r2,r5
 800df80:	003ed006 	br	800dac4 <__adddf3+0x388>
 800df84:	193ff804 	addi	r4,r3,-32
 800df88:	19400820 	cmpeqi	r5,r3,32
 800df8c:	5108d83a 	srl	r4,r10,r4
 800df90:	2800041e 	bne	r5,zero,800dfa4 <__adddf3+0x868>
 800df94:	01401004 	movi	r5,64
 800df98:	28c7c83a 	sub	r3,r5,r3
 800df9c:	50d4983a 	sll	r10,r10,r3
 800dfa0:	729cb03a 	or	r14,r14,r10
 800dfa4:	7022c03a 	cmpne	r17,r14,zero
 800dfa8:	8922b03a 	or	r17,r17,r4
 800dfac:	003eef06 	br	800db6c <__adddf3+0x430>
 800dfb0:	7363883a 	add	r17,r14,r13
 800dfb4:	5255883a 	add	r10,r10,r9
 800dfb8:	8b51803a 	cmpltu	r8,r17,r13
 800dfbc:	5211883a 	add	r8,r10,r8
 800dfc0:	003f7e06 	br	800ddbc <__adddf3+0x680>
 800dfc4:	4b50b03a 	or	r8,r9,r13
 800dfc8:	500a977a 	slli	r5,r10,29
 800dfcc:	5014d0fa 	srli	r10,r10,3
 800dfd0:	403fe726 	beq	r8,zero,800df70 <__adddf3+0x834>
 800dfd4:	00c80034 	movhi	r3,8192
 800dfd8:	18ffffc4 	addi	r3,r3,-1
 800dfdc:	20c4703a 	and	r2,r4,r3
 800dfe0:	5100022c 	andhi	r4,r10,8
 800dfe4:	1144b03a 	or	r2,r2,r5
 800dfe8:	203eb626 	beq	r4,zero,800dac4 <__adddf3+0x388>
 800dfec:	4808d0fa 	srli	r4,r9,3
 800dff0:	2140022c 	andhi	r5,r4,8
 800dff4:	283eb31e 	bne	r5,zero,800dac4 <__adddf3+0x388>
 800dff8:	4804977a 	slli	r2,r9,29
 800dffc:	30cc703a 	and	r6,r6,r3
 800e000:	3821883a 	mov	r16,r7
 800e004:	3084b03a 	or	r2,r6,r2
 800e008:	2015883a 	mov	r10,r4
 800e00c:	003ead06 	br	800dac4 <__adddf3+0x388>
 800e010:	8a04b03a 	or	r2,r17,r8
 800e014:	103f1126 	beq	r2,zero,800dc5c <__adddf3+0x520>
 800e018:	003e8806 	br	800da3c <__adddf3+0x300>
 800e01c:	0005883a 	mov	r2,zero
 800e020:	00c1ffc4 	movi	r3,2047
 800e024:	0011883a 	mov	r8,zero
 800e028:	003e2a06 	br	800d8d4 <__adddf3+0x198>

0800e02c <__divdf3>:
 800e02c:	2810d53a 	srli	r8,r5,20
 800e030:	defff004 	addi	sp,sp,-64
 800e034:	dc000615 	stw	r16,24(sp)
 800e038:	04000434 	movhi	r16,16
 800e03c:	df000e15 	stw	fp,56(sp)
 800e040:	ddc00d15 	stw	r23,52(sp)
 800e044:	dd800c15 	stw	r22,48(sp)
 800e048:	dd000a15 	stw	r20,40(sp)
 800e04c:	843fffc4 	addi	r16,r16,-1
 800e050:	dfc00f15 	stw	ra,60(sp)
 800e054:	dd400b15 	stw	r21,44(sp)
 800e058:	dcc00915 	stw	r19,36(sp)
 800e05c:	dc800815 	stw	r18,32(sp)
 800e060:	dc400715 	stw	r17,28(sp)
 800e064:	4201ffcc 	andi	r8,r8,2047
 800e068:	282ed7fa 	srli	r23,r5,31
 800e06c:	3039883a 	mov	fp,r6
 800e070:	382d883a 	mov	r22,r7
 800e074:	2029883a 	mov	r20,r4
 800e078:	2c20703a 	and	r16,r5,r16
 800e07c:	40006826 	beq	r8,zero,800e220 <__divdf3+0x1f4>
 800e080:	4081ffe0 	cmpeqi	r2,r8,2047
 800e084:	1000791e 	bne	r2,zero,800e26c <__divdf3+0x240>
 800e088:	2026d77a 	srli	r19,r4,29
 800e08c:	800a90fa 	slli	r5,r16,3
 800e090:	202890fa 	slli	r20,r4,3
 800e094:	44bf0044 	addi	r18,r8,-1023
 800e098:	994ab03a 	or	r5,r19,r5
 800e09c:	2cc02034 	orhi	r19,r5,128
 800e0a0:	0021883a 	mov	r16,zero
 800e0a4:	0023883a 	mov	r17,zero
 800e0a8:	b010d53a 	srli	r8,r22,20
 800e0ac:	00c00434 	movhi	r3,16
 800e0b0:	18ffffc4 	addi	r3,r3,-1
 800e0b4:	4201ffcc 	andi	r8,r8,2047
 800e0b8:	b02ad7fa 	srli	r21,r22,31
 800e0bc:	b0ec703a 	and	r22,r22,r3
 800e0c0:	40004626 	beq	r8,zero,800e1dc <__divdf3+0x1b0>
 800e0c4:	4081ffe0 	cmpeqi	r2,r8,2047
 800e0c8:	10006f1e 	bne	r2,zero,800e288 <__divdf3+0x25c>
 800e0cc:	b00690fa 	slli	r3,r22,3
 800e0d0:	e004d77a 	srli	r2,fp,29
 800e0d4:	e01290fa 	slli	r9,fp,3
 800e0d8:	423f0044 	addi	r8,r8,-1023
 800e0dc:	10c6b03a 	or	r3,r2,r3
 800e0e0:	1d802034 	orhi	r22,r3,128
 800e0e4:	9225c83a 	sub	r18,r18,r8
 800e0e8:	0007883a 	mov	r3,zero
 800e0ec:	80800428 	cmpgeui	r2,r16,16
 800e0f0:	bd4ef03a 	xor	r7,r23,r21
 800e0f4:	1000a71e 	bne	r2,zero,800e394 <__divdf3+0x368>
 800e0f8:	800c90ba 	slli	r6,r16,2
 800e0fc:	00820074 	movhi	r2,2049
 800e100:	3085883a 	add	r2,r6,r2
 800e104:	10b84317 	ldw	r2,-7924(r2)
 800e108:	1000683a 	jmp	r2
 800e10c:	0800e394 	ori	zero,at,910
 800e110:	0800e1b8 	rdprs	zero,at,902
 800e114:	0800e168 	cmpgeui	zero,at,901
 800e118:	0800e1c8 	cmpgei	zero,at,903
 800e11c:	0800e168 	cmpgeui	zero,at,901
 800e120:	0800e338 	rdprs	zero,at,908
 800e124:	0800e168 	cmpgeui	zero,at,901
 800e128:	0800e1c8 	cmpgei	zero,at,903
 800e12c:	0800e1b8 	rdprs	zero,at,902
 800e130:	0800e1b8 	rdprs	zero,at,902
 800e134:	0800e338 	rdprs	zero,at,908
 800e138:	0800e1c8 	cmpgei	zero,at,903
 800e13c:	0800e14c 	andi	zero,at,901
 800e140:	0800e14c 	andi	zero,at,901
 800e144:	0800e14c 	andi	zero,at,901
 800e148:	0800e350 	cmplti	zero,at,909
 800e14c:	b80f883a 	mov	r7,r23
 800e150:	888000a0 	cmpeqi	r2,r17,2
 800e154:	1000181e 	bne	r2,zero,800e1b8 <__divdf3+0x18c>
 800e158:	888000e0 	cmpeqi	r2,r17,3
 800e15c:	1001f61e 	bne	r2,zero,800e938 <__divdf3+0x90c>
 800e160:	88800060 	cmpeqi	r2,r17,1
 800e164:	10006126 	beq	r2,zero,800e2ec <__divdf3+0x2c0>
 800e168:	0007883a 	mov	r3,zero
 800e16c:	000b883a 	mov	r5,zero
 800e170:	0029883a 	mov	r20,zero
 800e174:	1806953a 	slli	r3,r3,20
 800e178:	380e97fa 	slli	r7,r7,31
 800e17c:	a005883a 	mov	r2,r20
 800e180:	1946b03a 	or	r3,r3,r5
 800e184:	19c6b03a 	or	r3,r3,r7
 800e188:	dfc00f17 	ldw	ra,60(sp)
 800e18c:	df000e17 	ldw	fp,56(sp)
 800e190:	ddc00d17 	ldw	r23,52(sp)
 800e194:	dd800c17 	ldw	r22,48(sp)
 800e198:	dd400b17 	ldw	r21,44(sp)
 800e19c:	dd000a17 	ldw	r20,40(sp)
 800e1a0:	dcc00917 	ldw	r19,36(sp)
 800e1a4:	dc800817 	ldw	r18,32(sp)
 800e1a8:	dc400717 	ldw	r17,28(sp)
 800e1ac:	dc000617 	ldw	r16,24(sp)
 800e1b0:	dec01004 	addi	sp,sp,64
 800e1b4:	f800283a 	ret
 800e1b8:	00c1ffc4 	movi	r3,2047
 800e1bc:	000b883a 	mov	r5,zero
 800e1c0:	0029883a 	mov	r20,zero
 800e1c4:	003feb06 	br	800e174 <__divdf3+0x148>
 800e1c8:	a80f883a 	mov	r7,r21
 800e1cc:	b027883a 	mov	r19,r22
 800e1d0:	4829883a 	mov	r20,r9
 800e1d4:	1823883a 	mov	r17,r3
 800e1d8:	003fdd06 	br	800e150 <__divdf3+0x124>
 800e1dc:	b712b03a 	or	r9,r22,fp
 800e1e0:	48003e26 	beq	r9,zero,800e2dc <__divdf3+0x2b0>
 800e1e4:	b0017726 	beq	r22,zero,800e7c4 <__divdf3+0x798>
 800e1e8:	b009883a 	mov	r4,r22
 800e1ec:	800fe280 	call	800fe28 <__clzsi2>
 800e1f0:	117ffd44 	addi	r5,r2,-11
 800e1f4:	01000744 	movi	r4,29
 800e1f8:	127ffe04 	addi	r9,r2,-8
 800e1fc:	2149c83a 	sub	r4,r4,r5
 800e200:	b246983a 	sll	r3,r22,r9
 800e204:	e108d83a 	srl	r4,fp,r4
 800e208:	e252983a 	sll	r9,fp,r9
 800e20c:	20ecb03a 	or	r22,r4,r3
 800e210:	1491883a 	add	r8,r2,r18
 800e214:	4480fcc4 	addi	r18,r8,1011
 800e218:	0007883a 	mov	r3,zero
 800e21c:	003fb306 	br	800e0ec <__divdf3+0xc0>
 800e220:	8126b03a 	or	r19,r16,r4
 800e224:	2023883a 	mov	r17,r4
 800e228:	98002726 	beq	r19,zero,800e2c8 <__divdf3+0x29c>
 800e22c:	80017026 	beq	r16,zero,800e7f0 <__divdf3+0x7c4>
 800e230:	8009883a 	mov	r4,r16
 800e234:	800fe280 	call	800fe28 <__clzsi2>
 800e238:	113ffd44 	addi	r4,r2,-11
 800e23c:	00c00744 	movi	r3,29
 800e240:	14fffe04 	addi	r19,r2,-8
 800e244:	1907c83a 	sub	r3,r3,r4
 800e248:	84ca983a 	sll	r5,r16,r19
 800e24c:	88c6d83a 	srl	r3,r17,r3
 800e250:	8ce8983a 	sll	r20,r17,r19
 800e254:	1966b03a 	or	r19,r3,r5
 800e258:	023f0344 	movi	r8,-1011
 800e25c:	40a5c83a 	sub	r18,r8,r2
 800e260:	0021883a 	mov	r16,zero
 800e264:	0023883a 	mov	r17,zero
 800e268:	003f8f06 	br	800e0a8 <__divdf3+0x7c>
 800e26c:	8126b03a 	or	r19,r16,r4
 800e270:	9800101e 	bne	r19,zero,800e2b4 <__divdf3+0x288>
 800e274:	0029883a 	mov	r20,zero
 800e278:	04000204 	movi	r16,8
 800e27c:	0481ffc4 	movi	r18,2047
 800e280:	04400084 	movi	r17,2
 800e284:	003f8806 	br	800e0a8 <__divdf3+0x7c>
 800e288:	b712b03a 	or	r9,r22,fp
 800e28c:	94be0044 	addi	r18,r18,-2047
 800e290:	4800041e 	bne	r9,zero,800e2a4 <__divdf3+0x278>
 800e294:	84000094 	ori	r16,r16,2
 800e298:	002d883a 	mov	r22,zero
 800e29c:	00c00084 	movi	r3,2
 800e2a0:	003f9206 	br	800e0ec <__divdf3+0xc0>
 800e2a4:	840000d4 	ori	r16,r16,3
 800e2a8:	e013883a 	mov	r9,fp
 800e2ac:	00c000c4 	movi	r3,3
 800e2b0:	003f8e06 	br	800e0ec <__divdf3+0xc0>
 800e2b4:	8027883a 	mov	r19,r16
 800e2b8:	0481ffc4 	movi	r18,2047
 800e2bc:	04000304 	movi	r16,12
 800e2c0:	044000c4 	movi	r17,3
 800e2c4:	003f7806 	br	800e0a8 <__divdf3+0x7c>
 800e2c8:	0029883a 	mov	r20,zero
 800e2cc:	04000104 	movi	r16,4
 800e2d0:	0025883a 	mov	r18,zero
 800e2d4:	04400044 	movi	r17,1
 800e2d8:	003f7306 	br	800e0a8 <__divdf3+0x7c>
 800e2dc:	84000054 	ori	r16,r16,1
 800e2e0:	002d883a 	mov	r22,zero
 800e2e4:	00c00044 	movi	r3,1
 800e2e8:	003f8006 	br	800e0ec <__divdf3+0xc0>
 800e2ec:	9440ffc4 	addi	r17,r18,1023
 800e2f0:	0441050e 	bge	zero,r17,800e708 <__divdf3+0x6dc>
 800e2f4:	a08001cc 	andi	r2,r20,7
 800e2f8:	10016c1e 	bne	r2,zero,800e8ac <__divdf3+0x880>
 800e2fc:	a008d0fa 	srli	r4,r20,3
 800e300:	9880402c 	andhi	r2,r19,256
 800e304:	10000426 	beq	r2,zero,800e318 <__divdf3+0x2ec>
 800e308:	00bfc034 	movhi	r2,65280
 800e30c:	10bfffc4 	addi	r2,r2,-1
 800e310:	98a6703a 	and	r19,r19,r2
 800e314:	94410004 	addi	r17,r18,1024
 800e318:	8881ffc8 	cmpgei	r2,r17,2047
 800e31c:	103fa61e 	bne	r2,zero,800e1b8 <__divdf3+0x18c>
 800e320:	9828977a 	slli	r20,r19,29
 800e324:	980a927a 	slli	r5,r19,9
 800e328:	88c1ffcc 	andi	r3,r17,2047
 800e32c:	a128b03a 	or	r20,r20,r4
 800e330:	280ad33a 	srli	r5,r5,12
 800e334:	003f8f06 	br	800e174 <__divdf3+0x148>
 800e338:	01400434 	movhi	r5,16
 800e33c:	000f883a 	mov	r7,zero
 800e340:	297fffc4 	addi	r5,r5,-1
 800e344:	053fffc4 	movi	r20,-1
 800e348:	00c1ffc4 	movi	r3,2047
 800e34c:	003f8906 	br	800e174 <__divdf3+0x148>
 800e350:	9880022c 	andhi	r2,r19,8
 800e354:	10000926 	beq	r2,zero,800e37c <__divdf3+0x350>
 800e358:	b080022c 	andhi	r2,r22,8
 800e35c:	1000071e 	bne	r2,zero,800e37c <__divdf3+0x350>
 800e360:	00800434 	movhi	r2,16
 800e364:	b1400234 	orhi	r5,r22,8
 800e368:	10bfffc4 	addi	r2,r2,-1
 800e36c:	288a703a 	and	r5,r5,r2
 800e370:	a80f883a 	mov	r7,r21
 800e374:	4829883a 	mov	r20,r9
 800e378:	003ff306 	br	800e348 <__divdf3+0x31c>
 800e37c:	00800434 	movhi	r2,16
 800e380:	99400234 	orhi	r5,r19,8
 800e384:	10bfffc4 	addi	r2,r2,-1
 800e388:	288a703a 	and	r5,r5,r2
 800e38c:	b80f883a 	mov	r7,r23
 800e390:	003fed06 	br	800e348 <__divdf3+0x31c>
 800e394:	b4c10536 	bltu	r22,r19,800e7ac <__divdf3+0x780>
 800e398:	b4c10326 	beq	r22,r19,800e7a8 <__divdf3+0x77c>
 800e39c:	94bfffc4 	addi	r18,r18,-1
 800e3a0:	a039883a 	mov	fp,r20
 800e3a4:	9821883a 	mov	r16,r19
 800e3a8:	0023883a 	mov	r17,zero
 800e3ac:	b006923a 	slli	r3,r22,8
 800e3b0:	482cd63a 	srli	r22,r9,24
 800e3b4:	8009883a 	mov	r4,r16
 800e3b8:	182ed43a 	srli	r23,r3,16
 800e3bc:	b0ecb03a 	or	r22,r22,r3
 800e3c0:	d9c00015 	stw	r7,0(sp)
 800e3c4:	b80b883a 	mov	r5,r23
 800e3c8:	482a923a 	slli	r21,r9,8
 800e3cc:	b53fffcc 	andi	r20,r22,65535
 800e3d0:	8002b900 	call	8002b90 <__udivsi3>
 800e3d4:	100b883a 	mov	r5,r2
 800e3d8:	a009883a 	mov	r4,r20
 800e3dc:	1027883a 	mov	r19,r2
 800e3e0:	8002c500 	call	8002c50 <__mulsi3>
 800e3e4:	8009883a 	mov	r4,r16
 800e3e8:	b80b883a 	mov	r5,r23
 800e3ec:	1021883a 	mov	r16,r2
 800e3f0:	8002bf40 	call	8002bf4 <__umodsi3>
 800e3f4:	1004943a 	slli	r2,r2,16
 800e3f8:	e008d43a 	srli	r4,fp,16
 800e3fc:	d9c00017 	ldw	r7,0(sp)
 800e400:	2088b03a 	or	r4,r4,r2
 800e404:	2400042e 	bgeu	r4,r16,800e418 <__divdf3+0x3ec>
 800e408:	2589883a 	add	r4,r4,r22
 800e40c:	98bfffc4 	addi	r2,r19,-1
 800e410:	2581082e 	bgeu	r4,r22,800e834 <__divdf3+0x808>
 800e414:	1027883a 	mov	r19,r2
 800e418:	2421c83a 	sub	r16,r4,r16
 800e41c:	b80b883a 	mov	r5,r23
 800e420:	8009883a 	mov	r4,r16
 800e424:	d9c00215 	stw	r7,8(sp)
 800e428:	8002b900 	call	8002b90 <__udivsi3>
 800e42c:	100b883a 	mov	r5,r2
 800e430:	a009883a 	mov	r4,r20
 800e434:	d8800115 	stw	r2,4(sp)
 800e438:	8002c500 	call	8002c50 <__mulsi3>
 800e43c:	b80b883a 	mov	r5,r23
 800e440:	8009883a 	mov	r4,r16
 800e444:	d8800015 	stw	r2,0(sp)
 800e448:	8002bf40 	call	8002bf4 <__umodsi3>
 800e44c:	100c943a 	slli	r6,r2,16
 800e450:	d8c00017 	ldw	r3,0(sp)
 800e454:	e73fffcc 	andi	fp,fp,65535
 800e458:	e18cb03a 	or	r6,fp,r6
 800e45c:	da000117 	ldw	r8,4(sp)
 800e460:	d9c00217 	ldw	r7,8(sp)
 800e464:	30c0042e 	bgeu	r6,r3,800e478 <__divdf3+0x44c>
 800e468:	358d883a 	add	r6,r6,r22
 800e46c:	40bfffc4 	addi	r2,r8,-1
 800e470:	3580ec2e 	bgeu	r6,r22,800e824 <__divdf3+0x7f8>
 800e474:	1011883a 	mov	r8,r2
 800e478:	9826943a 	slli	r19,r19,16
 800e47c:	af3fffcc 	andi	fp,r21,65535
 800e480:	30c7c83a 	sub	r3,r6,r3
 800e484:	9a26b03a 	or	r19,r19,r8
 800e488:	9810d43a 	srli	r8,r19,16
 800e48c:	9abfffcc 	andi	r10,r19,65535
 800e490:	5009883a 	mov	r4,r10
 800e494:	e00b883a 	mov	r5,fp
 800e498:	d9c00515 	stw	r7,20(sp)
 800e49c:	d8c00315 	stw	r3,12(sp)
 800e4a0:	da800415 	stw	r10,16(sp)
 800e4a4:	da000015 	stw	r8,0(sp)
 800e4a8:	8002c500 	call	8002c50 <__mulsi3>
 800e4ac:	da000017 	ldw	r8,0(sp)
 800e4b0:	e00b883a 	mov	r5,fp
 800e4b4:	d8800215 	stw	r2,8(sp)
 800e4b8:	4009883a 	mov	r4,r8
 800e4bc:	8002c500 	call	8002c50 <__mulsi3>
 800e4c0:	da000017 	ldw	r8,0(sp)
 800e4c4:	a820d43a 	srli	r16,r21,16
 800e4c8:	d8800115 	stw	r2,4(sp)
 800e4cc:	4009883a 	mov	r4,r8
 800e4d0:	800b883a 	mov	r5,r16
 800e4d4:	8002c500 	call	8002c50 <__mulsi3>
 800e4d8:	da800417 	ldw	r10,16(sp)
 800e4dc:	8009883a 	mov	r4,r16
 800e4e0:	d8800015 	stw	r2,0(sp)
 800e4e4:	500b883a 	mov	r5,r10
 800e4e8:	8002c500 	call	8002c50 <__mulsi3>
 800e4ec:	d9800217 	ldw	r6,8(sp)
 800e4f0:	da000117 	ldw	r8,4(sp)
 800e4f4:	da400017 	ldw	r9,0(sp)
 800e4f8:	3008d43a 	srli	r4,r6,16
 800e4fc:	1205883a 	add	r2,r2,r8
 800e500:	d8c00317 	ldw	r3,12(sp)
 800e504:	2089883a 	add	r4,r4,r2
 800e508:	d9c00517 	ldw	r7,20(sp)
 800e50c:	2200022e 	bgeu	r4,r8,800e518 <__divdf3+0x4ec>
 800e510:	00800074 	movhi	r2,1
 800e514:	4893883a 	add	r9,r9,r2
 800e518:	200ad43a 	srli	r5,r4,16
 800e51c:	2008943a 	slli	r4,r4,16
 800e520:	31bfffcc 	andi	r6,r6,65535
 800e524:	2a4b883a 	add	r5,r5,r9
 800e528:	218d883a 	add	r6,r4,r6
 800e52c:	19409436 	bltu	r3,r5,800e780 <__divdf3+0x754>
 800e530:	19409226 	beq	r3,r5,800e77c <__divdf3+0x750>
 800e534:	898dc83a 	sub	r6,r17,r6
 800e538:	89a3803a 	cmpltu	r17,r17,r6
 800e53c:	1947c83a 	sub	r3,r3,r5
 800e540:	1c47c83a 	sub	r3,r3,r17
 800e544:	9440ffc4 	addi	r17,r18,1023
 800e548:	b0c0d326 	beq	r22,r3,800e898 <__divdf3+0x86c>
 800e54c:	1809883a 	mov	r4,r3
 800e550:	b80b883a 	mov	r5,r23
 800e554:	d9800315 	stw	r6,12(sp)
 800e558:	d9c00215 	stw	r7,8(sp)
 800e55c:	d8c00015 	stw	r3,0(sp)
 800e560:	8002b900 	call	8002b90 <__udivsi3>
 800e564:	100b883a 	mov	r5,r2
 800e568:	a009883a 	mov	r4,r20
 800e56c:	d8800115 	stw	r2,4(sp)
 800e570:	8002c500 	call	8002c50 <__mulsi3>
 800e574:	d8c00017 	ldw	r3,0(sp)
 800e578:	b80b883a 	mov	r5,r23
 800e57c:	d8800015 	stw	r2,0(sp)
 800e580:	1809883a 	mov	r4,r3
 800e584:	8002bf40 	call	8002bf4 <__umodsi3>
 800e588:	d9800317 	ldw	r6,12(sp)
 800e58c:	1006943a 	slli	r3,r2,16
 800e590:	da400017 	ldw	r9,0(sp)
 800e594:	3008d43a 	srli	r4,r6,16
 800e598:	da000117 	ldw	r8,4(sp)
 800e59c:	d9c00217 	ldw	r7,8(sp)
 800e5a0:	20c6b03a 	or	r3,r4,r3
 800e5a4:	1a40062e 	bgeu	r3,r9,800e5c0 <__divdf3+0x594>
 800e5a8:	1d87883a 	add	r3,r3,r22
 800e5ac:	40bfffc4 	addi	r2,r8,-1
 800e5b0:	1d80c836 	bltu	r3,r22,800e8d4 <__divdf3+0x8a8>
 800e5b4:	1a40c72e 	bgeu	r3,r9,800e8d4 <__divdf3+0x8a8>
 800e5b8:	423fff84 	addi	r8,r8,-2
 800e5bc:	1d87883a 	add	r3,r3,r22
 800e5c0:	1a47c83a 	sub	r3,r3,r9
 800e5c4:	1809883a 	mov	r4,r3
 800e5c8:	b80b883a 	mov	r5,r23
 800e5cc:	d9800415 	stw	r6,16(sp)
 800e5d0:	d9c00315 	stw	r7,12(sp)
 800e5d4:	da000215 	stw	r8,8(sp)
 800e5d8:	d8c00115 	stw	r3,4(sp)
 800e5dc:	8002b900 	call	8002b90 <__udivsi3>
 800e5e0:	100b883a 	mov	r5,r2
 800e5e4:	a009883a 	mov	r4,r20
 800e5e8:	d8800015 	stw	r2,0(sp)
 800e5ec:	8002c500 	call	8002c50 <__mulsi3>
 800e5f0:	d8c00117 	ldw	r3,4(sp)
 800e5f4:	b80b883a 	mov	r5,r23
 800e5f8:	102f883a 	mov	r23,r2
 800e5fc:	1809883a 	mov	r4,r3
 800e600:	8002bf40 	call	8002bf4 <__umodsi3>
 800e604:	d9800417 	ldw	r6,16(sp)
 800e608:	1004943a 	slli	r2,r2,16
 800e60c:	da400017 	ldw	r9,0(sp)
 800e610:	31bfffcc 	andi	r6,r6,65535
 800e614:	308cb03a 	or	r6,r6,r2
 800e618:	da000217 	ldw	r8,8(sp)
 800e61c:	d9c00317 	ldw	r7,12(sp)
 800e620:	35c0062e 	bgeu	r6,r23,800e63c <__divdf3+0x610>
 800e624:	358d883a 	add	r6,r6,r22
 800e628:	48bfffc4 	addi	r2,r9,-1
 800e62c:	3580a736 	bltu	r6,r22,800e8cc <__divdf3+0x8a0>
 800e630:	35c0a62e 	bgeu	r6,r23,800e8cc <__divdf3+0x8a0>
 800e634:	4a7fff84 	addi	r9,r9,-2
 800e638:	358d883a 	add	r6,r6,r22
 800e63c:	4028943a 	slli	r20,r8,16
 800e640:	35d5c83a 	sub	r10,r6,r23
 800e644:	e009883a 	mov	r4,fp
 800e648:	a268b03a 	or	r20,r20,r9
 800e64c:	a23fffcc 	andi	r8,r20,65535
 800e650:	a02ed43a 	srli	r23,r20,16
 800e654:	400b883a 	mov	r5,r8
 800e658:	d9c00315 	stw	r7,12(sp)
 800e65c:	da800215 	stw	r10,8(sp)
 800e660:	da000115 	stw	r8,4(sp)
 800e664:	8002c500 	call	8002c50 <__mulsi3>
 800e668:	e00b883a 	mov	r5,fp
 800e66c:	b809883a 	mov	r4,r23
 800e670:	1039883a 	mov	fp,r2
 800e674:	8002c500 	call	8002c50 <__mulsi3>
 800e678:	8009883a 	mov	r4,r16
 800e67c:	b80b883a 	mov	r5,r23
 800e680:	d8800015 	stw	r2,0(sp)
 800e684:	8002c500 	call	8002c50 <__mulsi3>
 800e688:	da000117 	ldw	r8,4(sp)
 800e68c:	8009883a 	mov	r4,r16
 800e690:	1021883a 	mov	r16,r2
 800e694:	400b883a 	mov	r5,r8
 800e698:	8002c500 	call	8002c50 <__mulsi3>
 800e69c:	d9800017 	ldw	r6,0(sp)
 800e6a0:	e006d43a 	srli	r3,fp,16
 800e6a4:	da800217 	ldw	r10,8(sp)
 800e6a8:	1185883a 	add	r2,r2,r6
 800e6ac:	1887883a 	add	r3,r3,r2
 800e6b0:	d9c00317 	ldw	r7,12(sp)
 800e6b4:	1980022e 	bgeu	r3,r6,800e6c0 <__divdf3+0x694>
 800e6b8:	00800074 	movhi	r2,1
 800e6bc:	80a1883a 	add	r16,r16,r2
 800e6c0:	1808d43a 	srli	r4,r3,16
 800e6c4:	1806943a 	slli	r3,r3,16
 800e6c8:	e73fffcc 	andi	fp,fp,65535
 800e6cc:	2409883a 	add	r4,r4,r16
 800e6d0:	1f07883a 	add	r3,r3,fp
 800e6d4:	51000436 	bltu	r10,r4,800e6e8 <__divdf3+0x6bc>
 800e6d8:	51000226 	beq	r10,r4,800e6e4 <__divdf3+0x6b8>
 800e6dc:	a5000054 	ori	r20,r20,1
 800e6e0:	003f0306 	br	800e2f0 <__divdf3+0x2c4>
 800e6e4:	183f0226 	beq	r3,zero,800e2f0 <__divdf3+0x2c4>
 800e6e8:	b28d883a 	add	r6,r22,r10
 800e6ec:	a0bfffc4 	addi	r2,r20,-1
 800e6f0:	35806536 	bltu	r6,r22,800e888 <__divdf3+0x85c>
 800e6f4:	31008036 	bltu	r6,r4,800e8f8 <__divdf3+0x8cc>
 800e6f8:	31009426 	beq	r6,r4,800e94c <__divdf3+0x920>
 800e6fc:	1029883a 	mov	r20,r2
 800e700:	003ff606 	br	800e6dc <__divdf3+0x6b0>
 800e704:	053fffc4 	movi	r20,-1
 800e708:	01400044 	movi	r5,1
 800e70c:	2c4bc83a 	sub	r5,r5,r17
 800e710:	28800e48 	cmpgei	r2,r5,57
 800e714:	103e941e 	bne	r2,zero,800e168 <__divdf3+0x13c>
 800e718:	28800808 	cmpgei	r2,r5,32
 800e71c:	1000491e 	bne	r2,zero,800e844 <__divdf3+0x818>
 800e720:	92010784 	addi	r8,r18,1054
 800e724:	9a04983a 	sll	r2,r19,r8
 800e728:	a146d83a 	srl	r3,r20,r5
 800e72c:	a210983a 	sll	r8,r20,r8
 800e730:	994ad83a 	srl	r5,r19,r5
 800e734:	10e8b03a 	or	r20,r2,r3
 800e738:	4010c03a 	cmpne	r8,r8,zero
 800e73c:	a228b03a 	or	r20,r20,r8
 800e740:	a08001cc 	andi	r2,r20,7
 800e744:	10000726 	beq	r2,zero,800e764 <__divdf3+0x738>
 800e748:	a08003cc 	andi	r2,r20,15
 800e74c:	10800120 	cmpeqi	r2,r2,4
 800e750:	1000041e 	bne	r2,zero,800e764 <__divdf3+0x738>
 800e754:	a0800104 	addi	r2,r20,4
 800e758:	1529803a 	cmpltu	r20,r2,r20
 800e75c:	2d0b883a 	add	r5,r5,r20
 800e760:	1029883a 	mov	r20,r2
 800e764:	2880202c 	andhi	r2,r5,128
 800e768:	10006f26 	beq	r2,zero,800e928 <__divdf3+0x8fc>
 800e76c:	00c00044 	movi	r3,1
 800e770:	000b883a 	mov	r5,zero
 800e774:	0029883a 	mov	r20,zero
 800e778:	003e7e06 	br	800e174 <__divdf3+0x148>
 800e77c:	89bf6d2e 	bgeu	r17,r6,800e534 <__divdf3+0x508>
 800e780:	8d63883a 	add	r17,r17,r21
 800e784:	8d45803a 	cmpltu	r2,r17,r21
 800e788:	1585883a 	add	r2,r2,r22
 800e78c:	1887883a 	add	r3,r3,r2
 800e790:	98bfffc4 	addi	r2,r19,-1
 800e794:	b0c0202e 	bgeu	r22,r3,800e818 <__divdf3+0x7ec>
 800e798:	19405136 	bltu	r3,r5,800e8e0 <__divdf3+0x8b4>
 800e79c:	28c04f26 	beq	r5,r3,800e8dc <__divdf3+0x8b0>
 800e7a0:	1027883a 	mov	r19,r2
 800e7a4:	003f6306 	br	800e534 <__divdf3+0x508>
 800e7a8:	a27efc36 	bltu	r20,r9,800e39c <__divdf3+0x370>
 800e7ac:	983897fa 	slli	fp,r19,31
 800e7b0:	a004d07a 	srli	r2,r20,1
 800e7b4:	9820d07a 	srli	r16,r19,1
 800e7b8:	a02297fa 	slli	r17,r20,31
 800e7bc:	e0b8b03a 	or	fp,fp,r2
 800e7c0:	003efa06 	br	800e3ac <__divdf3+0x380>
 800e7c4:	e009883a 	mov	r4,fp
 800e7c8:	800fe280 	call	800fe28 <__clzsi2>
 800e7cc:	11400544 	addi	r5,r2,21
 800e7d0:	29000748 	cmpgei	r4,r5,29
 800e7d4:	1007883a 	mov	r3,r2
 800e7d8:	10800804 	addi	r2,r2,32
 800e7dc:	203e8526 	beq	r4,zero,800e1f4 <__divdf3+0x1c8>
 800e7e0:	18fffe04 	addi	r3,r3,-8
 800e7e4:	e0ec983a 	sll	r22,fp,r3
 800e7e8:	0013883a 	mov	r9,zero
 800e7ec:	003e8806 	br	800e210 <__divdf3+0x1e4>
 800e7f0:	800fe280 	call	800fe28 <__clzsi2>
 800e7f4:	11000544 	addi	r4,r2,21
 800e7f8:	20c00748 	cmpgei	r3,r4,29
 800e7fc:	100b883a 	mov	r5,r2
 800e800:	10800804 	addi	r2,r2,32
 800e804:	183e8d26 	beq	r3,zero,800e23c <__divdf3+0x210>
 800e808:	297ffe04 	addi	r5,r5,-8
 800e80c:	a166983a 	sll	r19,r20,r5
 800e810:	0029883a 	mov	r20,zero
 800e814:	003e9006 	br	800e258 <__divdf3+0x22c>
 800e818:	b0ffe11e 	bne	r22,r3,800e7a0 <__divdf3+0x774>
 800e81c:	8d7fe036 	bltu	r17,r21,800e7a0 <__divdf3+0x774>
 800e820:	003fdd06 	br	800e798 <__divdf3+0x76c>
 800e824:	30ff132e 	bgeu	r6,r3,800e474 <__divdf3+0x448>
 800e828:	423fff84 	addi	r8,r8,-2
 800e82c:	358d883a 	add	r6,r6,r22
 800e830:	003f1106 	br	800e478 <__divdf3+0x44c>
 800e834:	243ef72e 	bgeu	r4,r16,800e414 <__divdf3+0x3e8>
 800e838:	9cffff84 	addi	r19,r19,-2
 800e83c:	2589883a 	add	r4,r4,r22
 800e840:	003ef506 	br	800e418 <__divdf3+0x3ec>
 800e844:	00fff844 	movi	r3,-31
 800e848:	1c47c83a 	sub	r3,r3,r17
 800e84c:	29400820 	cmpeqi	r5,r5,32
 800e850:	98c6d83a 	srl	r3,r19,r3
 800e854:	2800031e 	bne	r5,zero,800e864 <__divdf3+0x838>
 800e858:	91410f84 	addi	r5,r18,1086
 800e85c:	994a983a 	sll	r5,r19,r5
 800e860:	a168b03a 	or	r20,r20,r5
 800e864:	a028c03a 	cmpne	r20,r20,zero
 800e868:	a0e8b03a 	or	r20,r20,r3
 800e86c:	a4c001cc 	andi	r19,r20,7
 800e870:	9800291e 	bne	r19,zero,800e918 <__divdf3+0x8ec>
 800e874:	000b883a 	mov	r5,zero
 800e878:	a028d0fa 	srli	r20,r20,3
 800e87c:	0007883a 	mov	r3,zero
 800e880:	a4e8b03a 	or	r20,r20,r19
 800e884:	003e3b06 	br	800e174 <__divdf3+0x148>
 800e888:	1029883a 	mov	r20,r2
 800e88c:	313f931e 	bne	r6,r4,800e6dc <__divdf3+0x6b0>
 800e890:	1d7f921e 	bne	r3,r21,800e6dc <__divdf3+0x6b0>
 800e894:	003e9606 	br	800e2f0 <__divdf3+0x2c4>
 800e898:	047f9a0e 	bge	zero,r17,800e704 <__divdf3+0x6d8>
 800e89c:	0009883a 	mov	r4,zero
 800e8a0:	05000044 	movi	r20,1
 800e8a4:	9d27883a 	add	r19,r19,r20
 800e8a8:	003e9506 	br	800e300 <__divdf3+0x2d4>
 800e8ac:	a08003cc 	andi	r2,r20,15
 800e8b0:	10800118 	cmpnei	r2,r2,4
 800e8b4:	103e9126 	beq	r2,zero,800e2fc <__divdf3+0x2d0>
 800e8b8:	a1000104 	addi	r4,r20,4
 800e8bc:	00bffec4 	movi	r2,-5
 800e8c0:	2008d0fa 	srli	r4,r4,3
 800e8c4:	1529803a 	cmpltu	r20,r2,r20
 800e8c8:	003ff606 	br	800e8a4 <__divdf3+0x878>
 800e8cc:	1013883a 	mov	r9,r2
 800e8d0:	003f5a06 	br	800e63c <__divdf3+0x610>
 800e8d4:	1011883a 	mov	r8,r2
 800e8d8:	003f3906 	br	800e5c0 <__divdf3+0x594>
 800e8dc:	89bfb02e 	bgeu	r17,r6,800e7a0 <__divdf3+0x774>
 800e8e0:	8d63883a 	add	r17,r17,r21
 800e8e4:	8d45803a 	cmpltu	r2,r17,r21
 800e8e8:	1585883a 	add	r2,r2,r22
 800e8ec:	9cffff84 	addi	r19,r19,-2
 800e8f0:	1887883a 	add	r3,r3,r2
 800e8f4:	003f0f06 	br	800e534 <__divdf3+0x508>
 800e8f8:	ad45883a 	add	r2,r21,r21
 800e8fc:	156b803a 	cmpltu	r21,r2,r21
 800e900:	adad883a 	add	r22,r21,r22
 800e904:	358d883a 	add	r6,r6,r22
 800e908:	a53fff84 	addi	r20,r20,-2
 800e90c:	102b883a 	mov	r21,r2
 800e910:	313fdf26 	beq	r6,r4,800e890 <__divdf3+0x864>
 800e914:	003f7106 	br	800e6dc <__divdf3+0x6b0>
 800e918:	a08003cc 	andi	r2,r20,15
 800e91c:	10800118 	cmpnei	r2,r2,4
 800e920:	000b883a 	mov	r5,zero
 800e924:	103f8b1e 	bne	r2,zero,800e754 <__divdf3+0x728>
 800e928:	2804927a 	slli	r2,r5,9
 800e92c:	2826977a 	slli	r19,r5,29
 800e930:	100ad33a 	srli	r5,r2,12
 800e934:	003fd006 	br	800e878 <__divdf3+0x84c>
 800e938:	00800434 	movhi	r2,16
 800e93c:	99400234 	orhi	r5,r19,8
 800e940:	10bfffc4 	addi	r2,r2,-1
 800e944:	288a703a 	and	r5,r5,r2
 800e948:	003e7f06 	br	800e348 <__divdf3+0x31c>
 800e94c:	a8ffea36 	bltu	r21,r3,800e8f8 <__divdf3+0x8cc>
 800e950:	1029883a 	mov	r20,r2
 800e954:	1d7f611e 	bne	r3,r21,800e6dc <__divdf3+0x6b0>
 800e958:	003e6506 	br	800e2f0 <__divdf3+0x2c4>

0800e95c <__eqdf2>:
 800e95c:	2810d53a 	srli	r8,r5,20
 800e960:	3806d53a 	srli	r3,r7,20
 800e964:	00800434 	movhi	r2,16
 800e968:	4201ffcc 	andi	r8,r8,2047
 800e96c:	10bfffc4 	addi	r2,r2,-1
 800e970:	4241ffd8 	cmpnei	r9,r8,2047
 800e974:	2814d7fa 	srli	r10,r5,31
 800e978:	3816d7fa 	srli	r11,r7,31
 800e97c:	288a703a 	and	r5,r5,r2
 800e980:	388e703a 	and	r7,r7,r2
 800e984:	1881ffcc 	andi	r2,r3,2047
 800e988:	48000626 	beq	r9,zero,800e9a4 <__eqdf2+0x48>
 800e98c:	10c1ffe0 	cmpeqi	r3,r2,2047
 800e990:	1800021e 	bne	r3,zero,800e99c <__eqdf2+0x40>
 800e994:	4080011e 	bne	r8,r2,800e99c <__eqdf2+0x40>
 800e998:	29c00826 	beq	r5,r7,800e9bc <__eqdf2+0x60>
 800e99c:	00800044 	movi	r2,1
 800e9a0:	f800283a 	ret
 800e9a4:	2906b03a 	or	r3,r5,r4
 800e9a8:	183ffc1e 	bne	r3,zero,800e99c <__eqdf2+0x40>
 800e9ac:	1081ffd8 	cmpnei	r2,r2,2047
 800e9b0:	103ffa1e 	bne	r2,zero,800e99c <__eqdf2+0x40>
 800e9b4:	398eb03a 	or	r7,r7,r6
 800e9b8:	383ff81e 	bne	r7,zero,800e99c <__eqdf2+0x40>
 800e9bc:	21bff71e 	bne	r4,r6,800e99c <__eqdf2+0x40>
 800e9c0:	52c00426 	beq	r10,r11,800e9d4 <__eqdf2+0x78>
 800e9c4:	403ff51e 	bne	r8,zero,800e99c <__eqdf2+0x40>
 800e9c8:	290ab03a 	or	r5,r5,r4
 800e9cc:	2804c03a 	cmpne	r2,r5,zero
 800e9d0:	f800283a 	ret
 800e9d4:	0005883a 	mov	r2,zero
 800e9d8:	f800283a 	ret

0800e9dc <__gedf2>:
 800e9dc:	2810d53a 	srli	r8,r5,20
 800e9e0:	3812d53a 	srli	r9,r7,20
 800e9e4:	00c00434 	movhi	r3,16
 800e9e8:	4201ffcc 	andi	r8,r8,2047
 800e9ec:	18ffffc4 	addi	r3,r3,-1
 800e9f0:	4281ffd8 	cmpnei	r10,r8,2047
 800e9f4:	2816d7fa 	srli	r11,r5,31
 800e9f8:	3804d7fa 	srli	r2,r7,31
 800e9fc:	28ca703a 	and	r5,r5,r3
 800ea00:	38ce703a 	and	r7,r7,r3
 800ea04:	48c1ffcc 	andi	r3,r9,2047
 800ea08:	50000a26 	beq	r10,zero,800ea34 <__gedf2+0x58>
 800ea0c:	1a41ffd8 	cmpnei	r9,r3,2047
 800ea10:	48000c26 	beq	r9,zero,800ea44 <__gedf2+0x68>
 800ea14:	4000171e 	bne	r8,zero,800ea74 <__gedf2+0x98>
 800ea18:	2912b03a 	or	r9,r5,r4
 800ea1c:	1800121e 	bne	r3,zero,800ea68 <__gedf2+0x8c>
 800ea20:	3994b03a 	or	r10,r7,r6
 800ea24:	5000101e 	bne	r10,zero,800ea68 <__gedf2+0x8c>
 800ea28:	48000a1e 	bne	r9,zero,800ea54 <__gedf2+0x78>
 800ea2c:	0005883a 	mov	r2,zero
 800ea30:	f800283a 	ret
 800ea34:	2912b03a 	or	r9,r5,r4
 800ea38:	48001d1e 	bne	r9,zero,800eab0 <__gedf2+0xd4>
 800ea3c:	1a41ffe0 	cmpeqi	r9,r3,2047
 800ea40:	48000c26 	beq	r9,zero,800ea74 <__gedf2+0x98>
 800ea44:	3992b03a 	or	r9,r7,r6
 800ea48:	4800191e 	bne	r9,zero,800eab0 <__gedf2+0xd4>
 800ea4c:	40000526 	beq	r8,zero,800ea64 <__gedf2+0x88>
 800ea50:	58800c26 	beq	r11,r2,800ea84 <__gedf2+0xa8>
 800ea54:	00800044 	movi	r2,1
 800ea58:	58000526 	beq	r11,zero,800ea70 <__gedf2+0x94>
 800ea5c:	00bfffc4 	movi	r2,-1
 800ea60:	f800283a 	ret
 800ea64:	2912b03a 	or	r9,r5,r4
 800ea68:	483ff91e 	bne	r9,zero,800ea50 <__gedf2+0x74>
 800ea6c:	103ffb26 	beq	r2,zero,800ea5c <__gedf2+0x80>
 800ea70:	f800283a 	ret
 800ea74:	183ff61e 	bne	r3,zero,800ea50 <__gedf2+0x74>
 800ea78:	3992b03a 	or	r9,r7,r6
 800ea7c:	483ff41e 	bne	r9,zero,800ea50 <__gedf2+0x74>
 800ea80:	003ff406 	br	800ea54 <__gedf2+0x78>
 800ea84:	1a000716 	blt	r3,r8,800eaa4 <__gedf2+0xc8>
 800ea88:	40fff816 	blt	r8,r3,800ea6c <__gedf2+0x90>
 800ea8c:	397ff136 	bltu	r7,r5,800ea54 <__gedf2+0x78>
 800ea90:	29c00926 	beq	r5,r7,800eab8 <__gedf2+0xdc>
 800ea94:	29ffe52e 	bgeu	r5,r7,800ea2c <__gedf2+0x50>
 800ea98:	583ff026 	beq	r11,zero,800ea5c <__gedf2+0x80>
 800ea9c:	5805883a 	mov	r2,r11
 800eaa0:	f800283a 	ret
 800eaa4:	103fed1e 	bne	r2,zero,800ea5c <__gedf2+0x80>
 800eaa8:	00800044 	movi	r2,1
 800eaac:	f800283a 	ret
 800eab0:	00bfff84 	movi	r2,-2
 800eab4:	f800283a 	ret
 800eab8:	313fe636 	bltu	r6,r4,800ea54 <__gedf2+0x78>
 800eabc:	21bfdb2e 	bgeu	r4,r6,800ea2c <__gedf2+0x50>
 800eac0:	003ff506 	br	800ea98 <__gedf2+0xbc>

0800eac4 <__ledf2>:
 800eac4:	2810d53a 	srli	r8,r5,20
 800eac8:	3812d53a 	srli	r9,r7,20
 800eacc:	00c00434 	movhi	r3,16
 800ead0:	4201ffcc 	andi	r8,r8,2047
 800ead4:	18ffffc4 	addi	r3,r3,-1
 800ead8:	4281ffd8 	cmpnei	r10,r8,2047
 800eadc:	2816d7fa 	srli	r11,r5,31
 800eae0:	3804d7fa 	srli	r2,r7,31
 800eae4:	28ca703a 	and	r5,r5,r3
 800eae8:	38ce703a 	and	r7,r7,r3
 800eaec:	48c1ffcc 	andi	r3,r9,2047
 800eaf0:	50000a26 	beq	r10,zero,800eb1c <__ledf2+0x58>
 800eaf4:	1a41ffd8 	cmpnei	r9,r3,2047
 800eaf8:	48000c26 	beq	r9,zero,800eb2c <__ledf2+0x68>
 800eafc:	4000191e 	bne	r8,zero,800eb64 <__ledf2+0xa0>
 800eb00:	2912b03a 	or	r9,r5,r4
 800eb04:	18000d1e 	bne	r3,zero,800eb3c <__ledf2+0x78>
 800eb08:	3994b03a 	or	r10,r7,r6
 800eb0c:	50000b1e 	bne	r10,zero,800eb3c <__ledf2+0x78>
 800eb10:	48000c1e 	bne	r9,zero,800eb44 <__ledf2+0x80>
 800eb14:	0005883a 	mov	r2,zero
 800eb18:	f800283a 	ret
 800eb1c:	2912b03a 	or	r9,r5,r4
 800eb20:	48000c1e 	bne	r9,zero,800eb54 <__ledf2+0x90>
 800eb24:	1a41ffe0 	cmpeqi	r9,r3,2047
 800eb28:	48000e26 	beq	r9,zero,800eb64 <__ledf2+0xa0>
 800eb2c:	3992b03a 	or	r9,r7,r6
 800eb30:	4800081e 	bne	r9,zero,800eb54 <__ledf2+0x90>
 800eb34:	4000021e 	bne	r8,zero,800eb40 <__ledf2+0x7c>
 800eb38:	2912b03a 	or	r9,r5,r4
 800eb3c:	48000726 	beq	r9,zero,800eb5c <__ledf2+0x98>
 800eb40:	58800c26 	beq	r11,r2,800eb74 <__ledf2+0xb0>
 800eb44:	00800044 	movi	r2,1
 800eb48:	58000526 	beq	r11,zero,800eb60 <__ledf2+0x9c>
 800eb4c:	00bfffc4 	movi	r2,-1
 800eb50:	f800283a 	ret
 800eb54:	00800084 	movi	r2,2
 800eb58:	f800283a 	ret
 800eb5c:	103ffb26 	beq	r2,zero,800eb4c <__ledf2+0x88>
 800eb60:	f800283a 	ret
 800eb64:	183ff61e 	bne	r3,zero,800eb40 <__ledf2+0x7c>
 800eb68:	3992b03a 	or	r9,r7,r6
 800eb6c:	483ff41e 	bne	r9,zero,800eb40 <__ledf2+0x7c>
 800eb70:	003ff406 	br	800eb44 <__ledf2+0x80>
 800eb74:	1a00030e 	bge	r3,r8,800eb84 <__ledf2+0xc0>
 800eb78:	103ff41e 	bne	r2,zero,800eb4c <__ledf2+0x88>
 800eb7c:	00800044 	movi	r2,1
 800eb80:	f800283a 	ret
 800eb84:	40fff516 	blt	r8,r3,800eb5c <__ledf2+0x98>
 800eb88:	397fee36 	bltu	r7,r5,800eb44 <__ledf2+0x80>
 800eb8c:	29c00426 	beq	r5,r7,800eba0 <__ledf2+0xdc>
 800eb90:	29ffe02e 	bgeu	r5,r7,800eb14 <__ledf2+0x50>
 800eb94:	583fed26 	beq	r11,zero,800eb4c <__ledf2+0x88>
 800eb98:	5805883a 	mov	r2,r11
 800eb9c:	f800283a 	ret
 800eba0:	313fe836 	bltu	r6,r4,800eb44 <__ledf2+0x80>
 800eba4:	21bfdb2e 	bgeu	r4,r6,800eb14 <__ledf2+0x50>
 800eba8:	003ffa06 	br	800eb94 <__ledf2+0xd0>

0800ebac <__muldf3>:
 800ebac:	2810d53a 	srli	r8,r5,20
 800ebb0:	defff004 	addi	sp,sp,-64
 800ebb4:	00800434 	movhi	r2,16
 800ebb8:	df000e15 	stw	fp,56(sp)
 800ebbc:	dd000a15 	stw	r20,40(sp)
 800ebc0:	dcc00915 	stw	r19,36(sp)
 800ebc4:	dc400715 	stw	r17,28(sp)
 800ebc8:	10bfffc4 	addi	r2,r2,-1
 800ebcc:	dfc00f15 	stw	ra,60(sp)
 800ebd0:	ddc00d15 	stw	r23,52(sp)
 800ebd4:	dd800c15 	stw	r22,48(sp)
 800ebd8:	dd400b15 	stw	r21,44(sp)
 800ebdc:	dc800815 	stw	r18,32(sp)
 800ebe0:	dc000615 	stw	r16,24(sp)
 800ebe4:	4201ffcc 	andi	r8,r8,2047
 800ebe8:	2828d7fa 	srli	r20,r5,31
 800ebec:	2023883a 	mov	r17,r4
 800ebf0:	3039883a 	mov	fp,r6
 800ebf4:	28a6703a 	and	r19,r5,r2
 800ebf8:	40013426 	beq	r8,zero,800f0cc <__muldf3+0x520>
 800ebfc:	4081ffe0 	cmpeqi	r2,r8,2047
 800ec00:	1001461e 	bne	r2,zero,800f11c <__muldf3+0x570>
 800ec04:	980a90fa 	slli	r5,r19,3
 800ec08:	2026d77a 	srli	r19,r4,29
 800ec0c:	202490fa 	slli	r18,r4,3
 800ec10:	423f0044 	addi	r8,r8,-1023
 800ec14:	9966b03a 	or	r19,r19,r5
 800ec18:	9cc02034 	orhi	r19,r19,128
 800ec1c:	002b883a 	mov	r21,zero
 800ec20:	002d883a 	mov	r22,zero
 800ec24:	3804d53a 	srli	r2,r7,20
 800ec28:	00c00434 	movhi	r3,16
 800ec2c:	18ffffc4 	addi	r3,r3,-1
 800ec30:	1081ffcc 	andi	r2,r2,2047
 800ec34:	382ed7fa 	srli	r23,r7,31
 800ec38:	38e0703a 	and	r16,r7,r3
 800ec3c:	10011026 	beq	r2,zero,800f080 <__muldf3+0x4d4>
 800ec40:	10c1ffe0 	cmpeqi	r3,r2,2047
 800ec44:	18013c1e 	bne	r3,zero,800f138 <__muldf3+0x58c>
 800ec48:	e008d77a 	srli	r4,fp,29
 800ec4c:	802090fa 	slli	r16,r16,3
 800ec50:	e02290fa 	slli	r17,fp,3
 800ec54:	10bf0044 	addi	r2,r2,-1023
 800ec58:	2420b03a 	or	r16,r4,r16
 800ec5c:	84002034 	orhi	r16,r16,128
 800ec60:	4091883a 	add	r8,r8,r2
 800ec64:	0009883a 	mov	r4,zero
 800ec68:	a8800428 	cmpgeui	r2,r21,16
 800ec6c:	a5ccf03a 	xor	r6,r20,r23
 800ec70:	41c00044 	addi	r7,r8,1
 800ec74:	1000371e 	bne	r2,zero,800ed54 <__muldf3+0x1a8>
 800ec78:	a80490ba 	slli	r2,r21,2
 800ec7c:	00c20074 	movhi	r3,2049
 800ec80:	10c7883a 	add	r3,r2,r3
 800ec84:	18bb2317 	ldw	r2,-4980(r3)
 800ec88:	1000683a 	jmp	r2
 800ec8c:	0800ed54 	ori	zero,at,949
 800ec90:	0800ecd0 	cmplti	zero,at,947
 800ec94:	0800ecd0 	cmplti	zero,at,947
 800ec98:	0800eccc 	andi	zero,at,947
 800ec9c:	0800ecdc 	xori	zero,at,947
 800eca0:	0800ecdc 	xori	zero,at,947
 800eca4:	0800f1ac 	andhi	zero,at,966
 800eca8:	0800eccc 	andi	zero,at,947
 800ecac:	0800ecdc 	xori	zero,at,947
 800ecb0:	0800f1ac 	andhi	zero,at,966
 800ecb4:	0800ecdc 	xori	zero,at,947
 800ecb8:	0800eccc 	andi	zero,at,947
 800ecbc:	0800f154 	ori	zero,at,965
 800ecc0:	0800f154 	ori	zero,at,965
 800ecc4:	0800f154 	ori	zero,at,965
 800ecc8:	0800f238 	rdprs	zero,at,968
 800eccc:	b80d883a 	mov	r6,r23
 800ecd0:	8027883a 	mov	r19,r16
 800ecd4:	8825883a 	mov	r18,r17
 800ecd8:	202d883a 	mov	r22,r4
 800ecdc:	b08000a0 	cmpeqi	r2,r22,2
 800ece0:	1000181e 	bne	r2,zero,800ed44 <__muldf3+0x198>
 800ece4:	b08000e0 	cmpeqi	r2,r22,3
 800ece8:	1001961e 	bne	r2,zero,800f344 <__muldf3+0x798>
 800ecec:	b0800060 	cmpeqi	r2,r22,1
 800ecf0:	1000c926 	beq	r2,zero,800f018 <__muldf3+0x46c>
 800ecf4:	0007883a 	mov	r3,zero
 800ecf8:	0027883a 	mov	r19,zero
 800ecfc:	0025883a 	mov	r18,zero
 800ed00:	1806953a 	slli	r3,r3,20
 800ed04:	300c97fa 	slli	r6,r6,31
 800ed08:	9005883a 	mov	r2,r18
 800ed0c:	1cc6b03a 	or	r3,r3,r19
 800ed10:	1986b03a 	or	r3,r3,r6
 800ed14:	dfc00f17 	ldw	ra,60(sp)
 800ed18:	df000e17 	ldw	fp,56(sp)
 800ed1c:	ddc00d17 	ldw	r23,52(sp)
 800ed20:	dd800c17 	ldw	r22,48(sp)
 800ed24:	dd400b17 	ldw	r21,44(sp)
 800ed28:	dd000a17 	ldw	r20,40(sp)
 800ed2c:	dcc00917 	ldw	r19,36(sp)
 800ed30:	dc800817 	ldw	r18,32(sp)
 800ed34:	dc400717 	ldw	r17,28(sp)
 800ed38:	dc000617 	ldw	r16,24(sp)
 800ed3c:	dec01004 	addi	sp,sp,64
 800ed40:	f800283a 	ret
 800ed44:	00c1ffc4 	movi	r3,2047
 800ed48:	0027883a 	mov	r19,zero
 800ed4c:	0025883a 	mov	r18,zero
 800ed50:	003feb06 	br	800ed00 <__muldf3+0x154>
 800ed54:	9028d43a 	srli	r20,r18,16
 800ed58:	8f3fffcc 	andi	fp,r17,65535
 800ed5c:	957fffcc 	andi	r21,r18,65535
 800ed60:	a80b883a 	mov	r5,r21
 800ed64:	e009883a 	mov	r4,fp
 800ed68:	d9800315 	stw	r6,12(sp)
 800ed6c:	da000215 	stw	r8,8(sp)
 800ed70:	d9c00115 	stw	r7,4(sp)
 800ed74:	8822d43a 	srli	r17,r17,16
 800ed78:	8002c500 	call	8002c50 <__mulsi3>
 800ed7c:	e00b883a 	mov	r5,fp
 800ed80:	a009883a 	mov	r4,r20
 800ed84:	102d883a 	mov	r22,r2
 800ed88:	8002c500 	call	8002c50 <__mulsi3>
 800ed8c:	880b883a 	mov	r5,r17
 800ed90:	a009883a 	mov	r4,r20
 800ed94:	102f883a 	mov	r23,r2
 800ed98:	8002c500 	call	8002c50 <__mulsi3>
 800ed9c:	a80b883a 	mov	r5,r21
 800eda0:	8809883a 	mov	r4,r17
 800eda4:	d8800015 	stw	r2,0(sp)
 800eda8:	8002c500 	call	8002c50 <__mulsi3>
 800edac:	b006d43a 	srli	r3,r22,16
 800edb0:	15e5883a 	add	r18,r2,r23
 800edb4:	d9c00117 	ldw	r7,4(sp)
 800edb8:	1c87883a 	add	r3,r3,r18
 800edbc:	da000217 	ldw	r8,8(sp)
 800edc0:	d9800317 	ldw	r6,12(sp)
 800edc4:	1dc0042e 	bgeu	r3,r23,800edd8 <__muldf3+0x22c>
 800edc8:	d9000017 	ldw	r4,0(sp)
 800edcc:	00800074 	movhi	r2,1
 800edd0:	2085883a 	add	r2,r4,r2
 800edd4:	d8800015 	stw	r2,0(sp)
 800edd8:	1804943a 	slli	r2,r3,16
 800eddc:	85ffffcc 	andi	r23,r16,65535
 800ede0:	b5bfffcc 	andi	r22,r22,65535
 800ede4:	1585883a 	add	r2,r2,r22
 800ede8:	a80b883a 	mov	r5,r21
 800edec:	b809883a 	mov	r4,r23
 800edf0:	1824d43a 	srli	r18,r3,16
 800edf4:	d9800515 	stw	r6,20(sp)
 800edf8:	da000415 	stw	r8,16(sp)
 800edfc:	d9c00315 	stw	r7,12(sp)
 800ee00:	8020d43a 	srli	r16,r16,16
 800ee04:	d8800115 	stw	r2,4(sp)
 800ee08:	8002c500 	call	8002c50 <__mulsi3>
 800ee0c:	a009883a 	mov	r4,r20
 800ee10:	b80b883a 	mov	r5,r23
 800ee14:	d8800215 	stw	r2,8(sp)
 800ee18:	8002c500 	call	8002c50 <__mulsi3>
 800ee1c:	a009883a 	mov	r4,r20
 800ee20:	800b883a 	mov	r5,r16
 800ee24:	102d883a 	mov	r22,r2
 800ee28:	8002c500 	call	8002c50 <__mulsi3>
 800ee2c:	a80b883a 	mov	r5,r21
 800ee30:	8009883a 	mov	r4,r16
 800ee34:	1029883a 	mov	r20,r2
 800ee38:	8002c500 	call	8002c50 <__mulsi3>
 800ee3c:	da800217 	ldw	r10,8(sp)
 800ee40:	1585883a 	add	r2,r2,r22
 800ee44:	d9c00317 	ldw	r7,12(sp)
 800ee48:	5006d43a 	srli	r3,r10,16
 800ee4c:	da000417 	ldw	r8,16(sp)
 800ee50:	d9800517 	ldw	r6,20(sp)
 800ee54:	1887883a 	add	r3,r3,r2
 800ee58:	1d80022e 	bgeu	r3,r22,800ee64 <__muldf3+0x2b8>
 800ee5c:	00800074 	movhi	r2,1
 800ee60:	a0a9883a 	add	r20,r20,r2
 800ee64:	1804d43a 	srli	r2,r3,16
 800ee68:	1806943a 	slli	r3,r3,16
 800ee6c:	982cd43a 	srli	r22,r19,16
 800ee70:	9d7fffcc 	andi	r21,r19,65535
 800ee74:	e009883a 	mov	r4,fp
 800ee78:	54ffffcc 	andi	r19,r10,65535
 800ee7c:	a80b883a 	mov	r5,r21
 800ee80:	1ce7883a 	add	r19,r3,r19
 800ee84:	d9800515 	stw	r6,20(sp)
 800ee88:	da000415 	stw	r8,16(sp)
 800ee8c:	d9c00315 	stw	r7,12(sp)
 800ee90:	1529883a 	add	r20,r2,r20
 800ee94:	8002c500 	call	8002c50 <__mulsi3>
 800ee98:	e00b883a 	mov	r5,fp
 800ee9c:	b009883a 	mov	r4,r22
 800eea0:	d8800215 	stw	r2,8(sp)
 800eea4:	8002c500 	call	8002c50 <__mulsi3>
 800eea8:	8809883a 	mov	r4,r17
 800eeac:	b00b883a 	mov	r5,r22
 800eeb0:	1039883a 	mov	fp,r2
 800eeb4:	8002c500 	call	8002c50 <__mulsi3>
 800eeb8:	8809883a 	mov	r4,r17
 800eebc:	a80b883a 	mov	r5,r21
 800eec0:	1023883a 	mov	r17,r2
 800eec4:	8002c500 	call	8002c50 <__mulsi3>
 800eec8:	d8c00217 	ldw	r3,8(sp)
 800eecc:	1705883a 	add	r2,r2,fp
 800eed0:	d9c00317 	ldw	r7,12(sp)
 800eed4:	1808d43a 	srli	r4,r3,16
 800eed8:	da000417 	ldw	r8,16(sp)
 800eedc:	d9800517 	ldw	r6,20(sp)
 800eee0:	2089883a 	add	r4,r4,r2
 800eee4:	94e5883a 	add	r18,r18,r19
 800eee8:	2700022e 	bgeu	r4,fp,800eef4 <__muldf3+0x348>
 800eeec:	00800074 	movhi	r2,1
 800eef0:	88a3883a 	add	r17,r17,r2
 800eef4:	2004d43a 	srli	r2,r4,16
 800eef8:	2038943a 	slli	fp,r4,16
 800eefc:	18ffffcc 	andi	r3,r3,65535
 800ef00:	b809883a 	mov	r4,r23
 800ef04:	a80b883a 	mov	r5,r21
 800ef08:	d9800415 	stw	r6,16(sp)
 800ef0c:	da000315 	stw	r8,12(sp)
 800ef10:	d9c00215 	stw	r7,8(sp)
 800ef14:	e0f9883a 	add	fp,fp,r3
 800ef18:	1463883a 	add	r17,r2,r17
 800ef1c:	8002c500 	call	8002c50 <__mulsi3>
 800ef20:	b80b883a 	mov	r5,r23
 800ef24:	b009883a 	mov	r4,r22
 800ef28:	102f883a 	mov	r23,r2
 800ef2c:	8002c500 	call	8002c50 <__mulsi3>
 800ef30:	b00b883a 	mov	r5,r22
 800ef34:	8009883a 	mov	r4,r16
 800ef38:	102d883a 	mov	r22,r2
 800ef3c:	8002c500 	call	8002c50 <__mulsi3>
 800ef40:	a80b883a 	mov	r5,r21
 800ef44:	8009883a 	mov	r4,r16
 800ef48:	1021883a 	mov	r16,r2
 800ef4c:	8002c500 	call	8002c50 <__mulsi3>
 800ef50:	b80ad43a 	srli	r5,r23,16
 800ef54:	1585883a 	add	r2,r2,r22
 800ef58:	d9c00217 	ldw	r7,8(sp)
 800ef5c:	288b883a 	add	r5,r5,r2
 800ef60:	da000317 	ldw	r8,12(sp)
 800ef64:	d9800417 	ldw	r6,16(sp)
 800ef68:	2d80022e 	bgeu	r5,r22,800ef74 <__muldf3+0x3c8>
 800ef6c:	00800074 	movhi	r2,1
 800ef70:	80a1883a 	add	r16,r16,r2
 800ef74:	2806943a 	slli	r3,r5,16
 800ef78:	d8800017 	ldw	r2,0(sp)
 800ef7c:	bdffffcc 	andi	r23,r23,65535
 800ef80:	1dc7883a 	add	r3,r3,r23
 800ef84:	90ab883a 	add	r21,r18,r2
 800ef88:	acd5803a 	cmpltu	r10,r21,r19
 800ef8c:	1d07883a 	add	r3,r3,r20
 800ef90:	af2b883a 	add	r21,r21,fp
 800ef94:	1a97883a 	add	r11,r3,r10
 800ef98:	af09803a 	cmpltu	r4,r21,fp
 800ef9c:	2826d43a 	srli	r19,r5,16
 800efa0:	5c53883a 	add	r9,r11,r17
 800efa4:	4905883a 	add	r2,r9,r4
 800efa8:	1d07803a 	cmpltu	r3,r3,r20
 800efac:	5a95803a 	cmpltu	r10,r11,r10
 800efb0:	1a86b03a 	or	r3,r3,r10
 800efb4:	1109803a 	cmpltu	r4,r2,r4
 800efb8:	4c53803a 	cmpltu	r9,r9,r17
 800efbc:	1ce7883a 	add	r19,r3,r19
 800efc0:	4908b03a 	or	r4,r9,r4
 800efc4:	a824927a 	slli	r18,r21,9
 800efc8:	d8c00117 	ldw	r3,4(sp)
 800efcc:	9927883a 	add	r19,r19,r4
 800efd0:	9c27883a 	add	r19,r19,r16
 800efd4:	9826927a 	slli	r19,r19,9
 800efd8:	a82ad5fa 	srli	r21,r21,23
 800efdc:	100ad5fa 	srli	r5,r2,23
 800efe0:	90e4b03a 	or	r18,r18,r3
 800efe4:	1004927a 	slli	r2,r2,9
 800efe8:	9024c03a 	cmpne	r18,r18,zero
 800efec:	9564b03a 	or	r18,r18,r21
 800eff0:	98c0402c 	andhi	r3,r19,256
 800eff4:	90a4b03a 	or	r18,r18,r2
 800eff8:	9966b03a 	or	r19,r19,r5
 800effc:	1800b626 	beq	r3,zero,800f2d8 <__muldf3+0x72c>
 800f000:	9006d07a 	srli	r3,r18,1
 800f004:	980497fa 	slli	r2,r19,31
 800f008:	9480004c 	andi	r18,r18,1
 800f00c:	9826d07a 	srli	r19,r19,1
 800f010:	1c86b03a 	or	r3,r3,r18
 800f014:	18a4b03a 	or	r18,r3,r2
 800f018:	3900ffc4 	addi	r4,r7,1023
 800f01c:	0100690e 	bge	zero,r4,800f1c4 <__muldf3+0x618>
 800f020:	908001cc 	andi	r2,r18,7
 800f024:	10000726 	beq	r2,zero,800f044 <__muldf3+0x498>
 800f028:	908003cc 	andi	r2,r18,15
 800f02c:	10800120 	cmpeqi	r2,r2,4
 800f030:	1000041e 	bne	r2,zero,800f044 <__muldf3+0x498>
 800f034:	90800104 	addi	r2,r18,4
 800f038:	14a5803a 	cmpltu	r18,r2,r18
 800f03c:	9ca7883a 	add	r19,r19,r18
 800f040:	1025883a 	mov	r18,r2
 800f044:	9880402c 	andhi	r2,r19,256
 800f048:	10000426 	beq	r2,zero,800f05c <__muldf3+0x4b0>
 800f04c:	00bfc034 	movhi	r2,65280
 800f050:	10bfffc4 	addi	r2,r2,-1
 800f054:	98a6703a 	and	r19,r19,r2
 800f058:	39010004 	addi	r4,r7,1024
 800f05c:	2081ffc8 	cmpgei	r2,r4,2047
 800f060:	103f381e 	bne	r2,zero,800ed44 <__muldf3+0x198>
 800f064:	9804977a 	slli	r2,r19,29
 800f068:	9024d0fa 	srli	r18,r18,3
 800f06c:	9826927a 	slli	r19,r19,9
 800f070:	20c1ffcc 	andi	r3,r4,2047
 800f074:	14a4b03a 	or	r18,r2,r18
 800f078:	9826d33a 	srli	r19,r19,12
 800f07c:	003f2006 	br	800ed00 <__muldf3+0x154>
 800f080:	8722b03a 	or	r17,r16,fp
 800f084:	88004526 	beq	r17,zero,800f19c <__muldf3+0x5f0>
 800f088:	da000015 	stw	r8,0(sp)
 800f08c:	80008626 	beq	r16,zero,800f2a8 <__muldf3+0x6fc>
 800f090:	8009883a 	mov	r4,r16
 800f094:	800fe280 	call	800fe28 <__clzsi2>
 800f098:	da000017 	ldw	r8,0(sp)
 800f09c:	117ffd44 	addi	r5,r2,-11
 800f0a0:	01000744 	movi	r4,29
 800f0a4:	147ffe04 	addi	r17,r2,-8
 800f0a8:	2149c83a 	sub	r4,r4,r5
 800f0ac:	8460983a 	sll	r16,r16,r17
 800f0b0:	e108d83a 	srl	r4,fp,r4
 800f0b4:	e462983a 	sll	r17,fp,r17
 800f0b8:	2420b03a 	or	r16,r4,r16
 800f0bc:	4091c83a 	sub	r8,r8,r2
 800f0c0:	423f0344 	addi	r8,r8,-1011
 800f0c4:	0009883a 	mov	r4,zero
 800f0c8:	003ee706 	br	800ec68 <__muldf3+0xbc>
 800f0cc:	9924b03a 	or	r18,r19,r4
 800f0d0:	90002d26 	beq	r18,zero,800f188 <__muldf3+0x5dc>
 800f0d4:	d9c00015 	stw	r7,0(sp)
 800f0d8:	98006826 	beq	r19,zero,800f27c <__muldf3+0x6d0>
 800f0dc:	9809883a 	mov	r4,r19
 800f0e0:	800fe280 	call	800fe28 <__clzsi2>
 800f0e4:	d9c00017 	ldw	r7,0(sp)
 800f0e8:	113ffd44 	addi	r4,r2,-11
 800f0ec:	00c00744 	movi	r3,29
 800f0f0:	14bffe04 	addi	r18,r2,-8
 800f0f4:	1907c83a 	sub	r3,r3,r4
 800f0f8:	9ca6983a 	sll	r19,r19,r18
 800f0fc:	88c6d83a 	srl	r3,r17,r3
 800f100:	8ca4983a 	sll	r18,r17,r18
 800f104:	1ce6b03a 	or	r19,r3,r19
 800f108:	023f0344 	movi	r8,-1011
 800f10c:	4091c83a 	sub	r8,r8,r2
 800f110:	002b883a 	mov	r21,zero
 800f114:	002d883a 	mov	r22,zero
 800f118:	003ec206 	br	800ec24 <__muldf3+0x78>
 800f11c:	9924b03a 	or	r18,r19,r4
 800f120:	9000141e 	bne	r18,zero,800f174 <__muldf3+0x5c8>
 800f124:	0027883a 	mov	r19,zero
 800f128:	05400204 	movi	r21,8
 800f12c:	0201ffc4 	movi	r8,2047
 800f130:	05800084 	movi	r22,2
 800f134:	003ebb06 	br	800ec24 <__muldf3+0x78>
 800f138:	8722b03a 	or	r17,r16,fp
 800f13c:	4201ffc4 	addi	r8,r8,2047
 800f140:	8800081e 	bne	r17,zero,800f164 <__muldf3+0x5b8>
 800f144:	ad400094 	ori	r21,r21,2
 800f148:	0021883a 	mov	r16,zero
 800f14c:	01000084 	movi	r4,2
 800f150:	003ec506 	br	800ec68 <__muldf3+0xbc>
 800f154:	b08000a0 	cmpeqi	r2,r22,2
 800f158:	a00d883a 	mov	r6,r20
 800f15c:	103ee126 	beq	r2,zero,800ece4 <__muldf3+0x138>
 800f160:	003ef806 	br	800ed44 <__muldf3+0x198>
 800f164:	ad4000d4 	ori	r21,r21,3
 800f168:	e023883a 	mov	r17,fp
 800f16c:	010000c4 	movi	r4,3
 800f170:	003ebd06 	br	800ec68 <__muldf3+0xbc>
 800f174:	2025883a 	mov	r18,r4
 800f178:	05400304 	movi	r21,12
 800f17c:	0201ffc4 	movi	r8,2047
 800f180:	058000c4 	movi	r22,3
 800f184:	003ea706 	br	800ec24 <__muldf3+0x78>
 800f188:	0027883a 	mov	r19,zero
 800f18c:	05400104 	movi	r21,4
 800f190:	0011883a 	mov	r8,zero
 800f194:	05800044 	movi	r22,1
 800f198:	003ea206 	br	800ec24 <__muldf3+0x78>
 800f19c:	ad400054 	ori	r21,r21,1
 800f1a0:	0021883a 	mov	r16,zero
 800f1a4:	01000044 	movi	r4,1
 800f1a8:	003eaf06 	br	800ec68 <__muldf3+0xbc>
 800f1ac:	04c00434 	movhi	r19,16
 800f1b0:	000d883a 	mov	r6,zero
 800f1b4:	9cffffc4 	addi	r19,r19,-1
 800f1b8:	04bfffc4 	movi	r18,-1
 800f1bc:	00c1ffc4 	movi	r3,2047
 800f1c0:	003ecf06 	br	800ed00 <__muldf3+0x154>
 800f1c4:	00800044 	movi	r2,1
 800f1c8:	1105c83a 	sub	r2,r2,r4
 800f1cc:	10c00e48 	cmpgei	r3,r2,57
 800f1d0:	183ec81e 	bne	r3,zero,800ecf4 <__muldf3+0x148>
 800f1d4:	10c00808 	cmpgei	r3,r2,32
 800f1d8:	1800411e 	bne	r3,zero,800f2e0 <__muldf3+0x734>
 800f1dc:	39c10784 	addi	r7,r7,1054
 800f1e0:	99c6983a 	sll	r3,r19,r7
 800f1e4:	9088d83a 	srl	r4,r18,r2
 800f1e8:	91ce983a 	sll	r7,r18,r7
 800f1ec:	98a6d83a 	srl	r19,r19,r2
 800f1f0:	1904b03a 	or	r2,r3,r4
 800f1f4:	3824c03a 	cmpne	r18,r7,zero
 800f1f8:	1484b03a 	or	r2,r2,r18
 800f1fc:	10c001cc 	andi	r3,r2,7
 800f200:	18000726 	beq	r3,zero,800f220 <__muldf3+0x674>
 800f204:	10c003cc 	andi	r3,r2,15
 800f208:	18c00120 	cmpeqi	r3,r3,4
 800f20c:	1800041e 	bne	r3,zero,800f220 <__muldf3+0x674>
 800f210:	10c00104 	addi	r3,r2,4
 800f214:	1885803a 	cmpltu	r2,r3,r2
 800f218:	98a7883a 	add	r19,r19,r2
 800f21c:	1805883a 	mov	r2,r3
 800f220:	98c0202c 	andhi	r3,r19,128
 800f224:	18004326 	beq	r3,zero,800f334 <__muldf3+0x788>
 800f228:	00c00044 	movi	r3,1
 800f22c:	0027883a 	mov	r19,zero
 800f230:	0025883a 	mov	r18,zero
 800f234:	003eb206 	br	800ed00 <__muldf3+0x154>
 800f238:	9880022c 	andhi	r2,r19,8
 800f23c:	10000926 	beq	r2,zero,800f264 <__muldf3+0x6b8>
 800f240:	8080022c 	andhi	r2,r16,8
 800f244:	1000071e 	bne	r2,zero,800f264 <__muldf3+0x6b8>
 800f248:	00800434 	movhi	r2,16
 800f24c:	84c00234 	orhi	r19,r16,8
 800f250:	10bfffc4 	addi	r2,r2,-1
 800f254:	98a6703a 	and	r19,r19,r2
 800f258:	b80d883a 	mov	r6,r23
 800f25c:	8825883a 	mov	r18,r17
 800f260:	003fd606 	br	800f1bc <__muldf3+0x610>
 800f264:	00800434 	movhi	r2,16
 800f268:	9cc00234 	orhi	r19,r19,8
 800f26c:	10bfffc4 	addi	r2,r2,-1
 800f270:	98a6703a 	and	r19,r19,r2
 800f274:	a00d883a 	mov	r6,r20
 800f278:	003fd006 	br	800f1bc <__muldf3+0x610>
 800f27c:	800fe280 	call	800fe28 <__clzsi2>
 800f280:	11000544 	addi	r4,r2,21
 800f284:	21400748 	cmpgei	r5,r4,29
 800f288:	1007883a 	mov	r3,r2
 800f28c:	d9c00017 	ldw	r7,0(sp)
 800f290:	10800804 	addi	r2,r2,32
 800f294:	283f9526 	beq	r5,zero,800f0ec <__muldf3+0x540>
 800f298:	18fffe04 	addi	r3,r3,-8
 800f29c:	88e6983a 	sll	r19,r17,r3
 800f2a0:	0025883a 	mov	r18,zero
 800f2a4:	003f9806 	br	800f108 <__muldf3+0x55c>
 800f2a8:	e009883a 	mov	r4,fp
 800f2ac:	800fe280 	call	800fe28 <__clzsi2>
 800f2b0:	11400544 	addi	r5,r2,21
 800f2b4:	29000748 	cmpgei	r4,r5,29
 800f2b8:	1007883a 	mov	r3,r2
 800f2bc:	da000017 	ldw	r8,0(sp)
 800f2c0:	10800804 	addi	r2,r2,32
 800f2c4:	203f7626 	beq	r4,zero,800f0a0 <__muldf3+0x4f4>
 800f2c8:	1c3ffe04 	addi	r16,r3,-8
 800f2cc:	e420983a 	sll	r16,fp,r16
 800f2d0:	0023883a 	mov	r17,zero
 800f2d4:	003f7906 	br	800f0bc <__muldf3+0x510>
 800f2d8:	400f883a 	mov	r7,r8
 800f2dc:	003f4e06 	br	800f018 <__muldf3+0x46c>
 800f2e0:	00fff844 	movi	r3,-31
 800f2e4:	1907c83a 	sub	r3,r3,r4
 800f2e8:	10800820 	cmpeqi	r2,r2,32
 800f2ec:	98c6d83a 	srl	r3,r19,r3
 800f2f0:	1000031e 	bne	r2,zero,800f300 <__muldf3+0x754>
 800f2f4:	39c10f84 	addi	r7,r7,1086
 800f2f8:	99e6983a 	sll	r19,r19,r7
 800f2fc:	94e4b03a 	or	r18,r18,r19
 800f300:	9024c03a 	cmpne	r18,r18,zero
 800f304:	90c4b03a 	or	r2,r18,r3
 800f308:	148001cc 	andi	r18,r2,7
 800f30c:	9000051e 	bne	r18,zero,800f324 <__muldf3+0x778>
 800f310:	0027883a 	mov	r19,zero
 800f314:	1004d0fa 	srli	r2,r2,3
 800f318:	0007883a 	mov	r3,zero
 800f31c:	14a4b03a 	or	r18,r2,r18
 800f320:	003e7706 	br	800ed00 <__muldf3+0x154>
 800f324:	10c003cc 	andi	r3,r2,15
 800f328:	18c00118 	cmpnei	r3,r3,4
 800f32c:	0027883a 	mov	r19,zero
 800f330:	183fb71e 	bne	r3,zero,800f210 <__muldf3+0x664>
 800f334:	9806927a 	slli	r3,r19,9
 800f338:	9824977a 	slli	r18,r19,29
 800f33c:	1826d33a 	srli	r19,r3,12
 800f340:	003ff406 	br	800f314 <__muldf3+0x768>
 800f344:	00800434 	movhi	r2,16
 800f348:	9cc00234 	orhi	r19,r19,8
 800f34c:	10bfffc4 	addi	r2,r2,-1
 800f350:	98a6703a 	and	r19,r19,r2
 800f354:	003f9906 	br	800f1bc <__muldf3+0x610>

0800f358 <__subdf3>:
 800f358:	00800434 	movhi	r2,16
 800f35c:	3810d53a 	srli	r8,r7,20
 800f360:	10bfffc4 	addi	r2,r2,-1
 800f364:	2806d53a 	srli	r3,r5,20
 800f368:	2892703a 	and	r9,r5,r2
 800f36c:	3884703a 	and	r2,r7,r2
 800f370:	280ad7fa 	srli	r5,r5,31
 800f374:	481290fa 	slli	r9,r9,3
 800f378:	2018d77a 	srli	r12,r4,29
 800f37c:	100490fa 	slli	r2,r2,3
 800f380:	3016d77a 	srli	r11,r6,29
 800f384:	defffb04 	addi	sp,sp,-20
 800f388:	4201ffcc 	andi	r8,r8,2047
 800f38c:	dc800215 	stw	r18,8(sp)
 800f390:	dc400115 	stw	r17,4(sp)
 800f394:	1c81ffcc 	andi	r18,r3,2047
 800f398:	dfc00415 	stw	ra,16(sp)
 800f39c:	dcc00315 	stw	r19,12(sp)
 800f3a0:	dc000015 	stw	r16,0(sp)
 800f3a4:	4281ffd8 	cmpnei	r10,r8,2047
 800f3a8:	2823883a 	mov	r17,r5
 800f3ac:	201c90fa 	slli	r14,r4,3
 800f3b0:	380ed7fa 	srli	r7,r7,31
 800f3b4:	301a90fa 	slli	r13,r6,3
 800f3b8:	29403fcc 	andi	r5,r5,255
 800f3bc:	6252b03a 	or	r9,r12,r9
 800f3c0:	589eb03a 	or	r15,r11,r2
 800f3c4:	9207c83a 	sub	r3,r18,r8
 800f3c8:	50006826 	beq	r10,zero,800f56c <__subdf3+0x214>
 800f3cc:	3ac0005c 	xori	r11,r7,1
 800f3d0:	2ac07326 	beq	r5,r11,800f5a0 <__subdf3+0x248>
 800f3d4:	00c0590e 	bge	zero,r3,800f53c <__subdf3+0x1e4>
 800f3d8:	4000691e 	bne	r8,zero,800f580 <__subdf3+0x228>
 800f3dc:	7b44b03a 	or	r2,r15,r13
 800f3e0:	1000fb26 	beq	r2,zero,800f7d0 <__subdf3+0x478>
 800f3e4:	18bfffc4 	addi	r2,r3,-1
 800f3e8:	10019126 	beq	r2,zero,800fa30 <__subdf3+0x6d8>
 800f3ec:	18c1ffd8 	cmpnei	r3,r3,2047
 800f3f0:	1800c326 	beq	r3,zero,800f700 <__subdf3+0x3a8>
 800f3f4:	1007883a 	mov	r3,r2
 800f3f8:	18800e48 	cmpgei	r2,r3,57
 800f3fc:	1000651e 	bne	r2,zero,800f594 <__subdf3+0x23c>
 800f400:	18800808 	cmpgei	r2,r3,32
 800f404:	1001331e 	bne	r2,zero,800f8d4 <__subdf3+0x57c>
 800f408:	00800804 	movi	r2,32
 800f40c:	10c5c83a 	sub	r2,r2,r3
 800f410:	78a0983a 	sll	r16,r15,r2
 800f414:	68c8d83a 	srl	r4,r13,r3
 800f418:	689a983a 	sll	r13,r13,r2
 800f41c:	78c4d83a 	srl	r2,r15,r3
 800f420:	8120b03a 	or	r16,r16,r4
 800f424:	681ac03a 	cmpne	r13,r13,zero
 800f428:	8360b03a 	or	r16,r16,r13
 800f42c:	4893c83a 	sub	r9,r9,r2
 800f430:	7421c83a 	sub	r16,r14,r16
 800f434:	7409803a 	cmpltu	r4,r14,r16
 800f438:	4909c83a 	sub	r4,r9,r4
 800f43c:	2080202c 	andhi	r2,r4,128
 800f440:	10009326 	beq	r2,zero,800f690 <__subdf3+0x338>
 800f444:	04c02034 	movhi	r19,128
 800f448:	9cffffc4 	addi	r19,r19,-1
 800f44c:	24e6703a 	and	r19,r4,r19
 800f450:	9800b926 	beq	r19,zero,800f738 <__subdf3+0x3e0>
 800f454:	9809883a 	mov	r4,r19
 800f458:	800fe280 	call	800fe28 <__clzsi2>
 800f45c:	10fffe04 	addi	r3,r2,-8
 800f460:	01000804 	movi	r4,32
 800f464:	20c9c83a 	sub	r4,r4,r3
 800f468:	8108d83a 	srl	r4,r16,r4
 800f46c:	98e6983a 	sll	r19,r19,r3
 800f470:	80e0983a 	sll	r16,r16,r3
 800f474:	24c8b03a 	or	r4,r4,r19
 800f478:	1c80b816 	blt	r3,r18,800f75c <__subdf3+0x404>
 800f47c:	1c87c83a 	sub	r3,r3,r18
 800f480:	19400044 	addi	r5,r3,1
 800f484:	28800808 	cmpgei	r2,r5,32
 800f488:	1000751e 	bne	r2,zero,800f660 <__subdf3+0x308>
 800f48c:	00800804 	movi	r2,32
 800f490:	1145c83a 	sub	r2,r2,r5
 800f494:	8146d83a 	srl	r3,r16,r5
 800f498:	80a0983a 	sll	r16,r16,r2
 800f49c:	2084983a 	sll	r2,r4,r2
 800f4a0:	2148d83a 	srl	r4,r4,r5
 800f4a4:	8020c03a 	cmpne	r16,r16,zero
 800f4a8:	10c4b03a 	or	r2,r2,r3
 800f4ac:	1420b03a 	or	r16,r2,r16
 800f4b0:	0025883a 	mov	r18,zero
 800f4b4:	808001cc 	andi	r2,r16,7
 800f4b8:	10000726 	beq	r2,zero,800f4d8 <__subdf3+0x180>
 800f4bc:	808003cc 	andi	r2,r16,15
 800f4c0:	10800120 	cmpeqi	r2,r2,4
 800f4c4:	1000041e 	bne	r2,zero,800f4d8 <__subdf3+0x180>
 800f4c8:	80800104 	addi	r2,r16,4
 800f4cc:	1421803a 	cmpltu	r16,r2,r16
 800f4d0:	2409883a 	add	r4,r4,r16
 800f4d4:	1021883a 	mov	r16,r2
 800f4d8:	2080202c 	andhi	r2,r4,128
 800f4dc:	10006e26 	beq	r2,zero,800f698 <__subdf3+0x340>
 800f4e0:	90c00044 	addi	r3,r18,1
 800f4e4:	1881ffe0 	cmpeqi	r2,r3,2047
 800f4e8:	18c1ffcc 	andi	r3,r3,2047
 800f4ec:	1000801e 	bne	r2,zero,800f6f0 <__subdf3+0x398>
 800f4f0:	00bfe034 	movhi	r2,65408
 800f4f4:	10bfffc4 	addi	r2,r2,-1
 800f4f8:	2088703a 	and	r4,r4,r2
 800f4fc:	2004977a 	slli	r2,r4,29
 800f500:	2008927a 	slli	r4,r4,9
 800f504:	8020d0fa 	srli	r16,r16,3
 800f508:	2008d33a 	srli	r4,r4,12
 800f50c:	1404b03a 	or	r2,r2,r16
 800f510:	1806953a 	slli	r3,r3,20
 800f514:	882297fa 	slli	r17,r17,31
 800f518:	1906b03a 	or	r3,r3,r4
 800f51c:	1c46b03a 	or	r3,r3,r17
 800f520:	dfc00417 	ldw	ra,16(sp)
 800f524:	dcc00317 	ldw	r19,12(sp)
 800f528:	dc800217 	ldw	r18,8(sp)
 800f52c:	dc400117 	ldw	r17,4(sp)
 800f530:	dc000017 	ldw	r16,0(sp)
 800f534:	dec00504 	addi	sp,sp,20
 800f538:	f800283a 	ret
 800f53c:	18002c26 	beq	r3,zero,800f5f0 <__subdf3+0x298>
 800f540:	4487c83a 	sub	r3,r8,r18
 800f544:	5823883a 	mov	r17,r11
 800f548:	9000bb1e 	bne	r18,zero,800f838 <__subdf3+0x4e0>
 800f54c:	4b84b03a 	or	r2,r9,r14
 800f550:	10011726 	beq	r2,zero,800f9b0 <__subdf3+0x658>
 800f554:	18bfffc4 	addi	r2,r3,-1
 800f558:	10016326 	beq	r2,zero,800fae8 <__subdf3+0x790>
 800f55c:	18c1ffd8 	cmpnei	r3,r3,2047
 800f560:	18012c26 	beq	r3,zero,800fa14 <__subdf3+0x6bc>
 800f564:	1007883a 	mov	r3,r2
 800f568:	0000b506 	br	800f840 <__subdf3+0x4e8>
 800f56c:	7b44b03a 	or	r2,r15,r13
 800f570:	103f9626 	beq	r2,zero,800f3cc <__subdf3+0x74>
 800f574:	3ac03fcc 	andi	r11,r7,255
 800f578:	29c07d26 	beq	r5,r7,800f770 <__subdf3+0x418>
 800f57c:	00ffef0e 	bge	zero,r3,800f53c <__subdf3+0x1e4>
 800f580:	9081ffd8 	cmpnei	r2,r18,2047
 800f584:	10005e26 	beq	r2,zero,800f700 <__subdf3+0x3a8>
 800f588:	18800e48 	cmpgei	r2,r3,57
 800f58c:	7bc02034 	orhi	r15,r15,128
 800f590:	103f9b26 	beq	r2,zero,800f400 <__subdf3+0xa8>
 800f594:	7b60b03a 	or	r16,r15,r13
 800f598:	8020c03a 	cmpne	r16,r16,zero
 800f59c:	003fa406 	br	800f430 <__subdf3+0xd8>
 800f5a0:	00c0730e 	bge	zero,r3,800f770 <__subdf3+0x418>
 800f5a4:	40002626 	beq	r8,zero,800f640 <__subdf3+0x2e8>
 800f5a8:	9081ffd8 	cmpnei	r2,r18,2047
 800f5ac:	10005426 	beq	r2,zero,800f700 <__subdf3+0x3a8>
 800f5b0:	7bc02034 	orhi	r15,r15,128
 800f5b4:	18800e48 	cmpgei	r2,r3,57
 800f5b8:	1000431e 	bne	r2,zero,800f6c8 <__subdf3+0x370>
 800f5bc:	18800808 	cmpgei	r2,r3,32
 800f5c0:	1000de26 	beq	r2,zero,800f93c <__subdf3+0x5e4>
 800f5c4:	1c3ff804 	addi	r16,r3,-32
 800f5c8:	18800820 	cmpeqi	r2,r3,32
 800f5cc:	7c0ad83a 	srl	r5,r15,r16
 800f5d0:	1000041e 	bne	r2,zero,800f5e4 <__subdf3+0x28c>
 800f5d4:	00801004 	movi	r2,64
 800f5d8:	10c5c83a 	sub	r2,r2,r3
 800f5dc:	7884983a 	sll	r2,r15,r2
 800f5e0:	689ab03a 	or	r13,r13,r2
 800f5e4:	6820c03a 	cmpne	r16,r13,zero
 800f5e8:	8160b03a 	or	r16,r16,r5
 800f5ec:	00003806 	br	800f6d0 <__subdf3+0x378>
 800f5f0:	90800044 	addi	r2,r18,1
 800f5f4:	1081ff8c 	andi	r2,r2,2046
 800f5f8:	1000a01e 	bne	r2,zero,800f87c <__subdf3+0x524>
 800f5fc:	4b8ab03a 	or	r5,r9,r14
 800f600:	7b44b03a 	or	r2,r15,r13
 800f604:	9000f11e 	bne	r18,zero,800f9cc <__subdf3+0x674>
 800f608:	28012e26 	beq	r5,zero,800fac4 <__subdf3+0x76c>
 800f60c:	10010e26 	beq	r2,zero,800fa48 <__subdf3+0x6f0>
 800f610:	7361c83a 	sub	r16,r14,r13
 800f614:	7405803a 	cmpltu	r2,r14,r16
 800f618:	4bc9c83a 	sub	r4,r9,r15
 800f61c:	2089c83a 	sub	r4,r4,r2
 800f620:	2080202c 	andhi	r2,r4,128
 800f624:	10016d26 	beq	r2,zero,800fbdc <__subdf3+0x884>
 800f628:	6ba1c83a 	sub	r16,r13,r14
 800f62c:	7a49c83a 	sub	r4,r15,r9
 800f630:	6c1b803a 	cmpltu	r13,r13,r16
 800f634:	2349c83a 	sub	r4,r4,r13
 800f638:	5823883a 	mov	r17,r11
 800f63c:	003f9d06 	br	800f4b4 <__subdf3+0x15c>
 800f640:	7b44b03a 	or	r2,r15,r13
 800f644:	10006226 	beq	r2,zero,800f7d0 <__subdf3+0x478>
 800f648:	18bfffc4 	addi	r2,r3,-1
 800f64c:	1000e926 	beq	r2,zero,800f9f4 <__subdf3+0x69c>
 800f650:	18c1ffd8 	cmpnei	r3,r3,2047
 800f654:	18012a26 	beq	r3,zero,800fb00 <__subdf3+0x7a8>
 800f658:	1007883a 	mov	r3,r2
 800f65c:	003fd506 	br	800f5b4 <__subdf3+0x25c>
 800f660:	18fff844 	addi	r3,r3,-31
 800f664:	28800820 	cmpeqi	r2,r5,32
 800f668:	20c6d83a 	srl	r3,r4,r3
 800f66c:	1000041e 	bne	r2,zero,800f680 <__subdf3+0x328>
 800f670:	00801004 	movi	r2,64
 800f674:	114bc83a 	sub	r5,r2,r5
 800f678:	2148983a 	sll	r4,r4,r5
 800f67c:	8120b03a 	or	r16,r16,r4
 800f680:	8020c03a 	cmpne	r16,r16,zero
 800f684:	80e0b03a 	or	r16,r16,r3
 800f688:	0009883a 	mov	r4,zero
 800f68c:	0025883a 	mov	r18,zero
 800f690:	808001cc 	andi	r2,r16,7
 800f694:	103f891e 	bne	r2,zero,800f4bc <__subdf3+0x164>
 800f698:	8020d0fa 	srli	r16,r16,3
 800f69c:	2004977a 	slli	r2,r4,29
 800f6a0:	2012d0fa 	srli	r9,r4,3
 800f6a4:	9007883a 	mov	r3,r18
 800f6a8:	8084b03a 	or	r2,r16,r2
 800f6ac:	1901ffe0 	cmpeqi	r4,r3,2047
 800f6b0:	2000191e 	bne	r4,zero,800f718 <__subdf3+0x3c0>
 800f6b4:	01000434 	movhi	r4,16
 800f6b8:	213fffc4 	addi	r4,r4,-1
 800f6bc:	4908703a 	and	r4,r9,r4
 800f6c0:	18c1ffcc 	andi	r3,r3,2047
 800f6c4:	003f9206 	br	800f510 <__subdf3+0x1b8>
 800f6c8:	7b60b03a 	or	r16,r15,r13
 800f6cc:	8020c03a 	cmpne	r16,r16,zero
 800f6d0:	83a1883a 	add	r16,r16,r14
 800f6d4:	8389803a 	cmpltu	r4,r16,r14
 800f6d8:	2249883a 	add	r4,r4,r9
 800f6dc:	2080202c 	andhi	r2,r4,128
 800f6e0:	103feb26 	beq	r2,zero,800f690 <__subdf3+0x338>
 800f6e4:	94800044 	addi	r18,r18,1
 800f6e8:	9081ffe0 	cmpeqi	r2,r18,2047
 800f6ec:	10006f26 	beq	r2,zero,800f8ac <__subdf3+0x554>
 800f6f0:	00c1ffc4 	movi	r3,2047
 800f6f4:	0009883a 	mov	r4,zero
 800f6f8:	0005883a 	mov	r2,zero
 800f6fc:	003f8406 	br	800f510 <__subdf3+0x1b8>
 800f700:	4806977a 	slli	r3,r9,29
 800f704:	00880034 	movhi	r2,8192
 800f708:	10bfffc4 	addi	r2,r2,-1
 800f70c:	4812d0fa 	srli	r9,r9,3
 800f710:	2088703a 	and	r4,r4,r2
 800f714:	20c4b03a 	or	r2,r4,r3
 800f718:	4886b03a 	or	r3,r9,r2
 800f71c:	18013726 	beq	r3,zero,800fbfc <__subdf3+0x8a4>
 800f720:	00c00434 	movhi	r3,16
 800f724:	18ffffc4 	addi	r3,r3,-1
 800f728:	49000234 	orhi	r4,r9,8
 800f72c:	20c8703a 	and	r4,r4,r3
 800f730:	00c1ffc4 	movi	r3,2047
 800f734:	003f7606 	br	800f510 <__subdf3+0x1b8>
 800f738:	8009883a 	mov	r4,r16
 800f73c:	800fe280 	call	800fe28 <__clzsi2>
 800f740:	10c00604 	addi	r3,r2,24
 800f744:	19000808 	cmpgei	r4,r3,32
 800f748:	203f4526 	beq	r4,zero,800f460 <__subdf3+0x108>
 800f74c:	113ffe04 	addi	r4,r2,-8
 800f750:	8108983a 	sll	r4,r16,r4
 800f754:	0021883a 	mov	r16,zero
 800f758:	1cbf480e 	bge	r3,r18,800f47c <__subdf3+0x124>
 800f75c:	00bfe034 	movhi	r2,65408
 800f760:	10bfffc4 	addi	r2,r2,-1
 800f764:	90e5c83a 	sub	r18,r18,r3
 800f768:	2088703a 	and	r4,r4,r2
 800f76c:	003f5106 	br	800f4b4 <__subdf3+0x15c>
 800f770:	18001e26 	beq	r3,zero,800f7ec <__subdf3+0x494>
 800f774:	4487c83a 	sub	r3,r8,r18
 800f778:	90006826 	beq	r18,zero,800f91c <__subdf3+0x5c4>
 800f77c:	5000a526 	beq	r10,zero,800fa14 <__subdf3+0x6bc>
 800f780:	4a402034 	orhi	r9,r9,128
 800f784:	18800e48 	cmpgei	r2,r3,57
 800f788:	1000b61e 	bne	r2,zero,800fa64 <__subdf3+0x70c>
 800f78c:	18800808 	cmpgei	r2,r3,32
 800f790:	1001021e 	bne	r2,zero,800fb9c <__subdf3+0x844>
 800f794:	00800804 	movi	r2,32
 800f798:	10c5c83a 	sub	r2,r2,r3
 800f79c:	48a0983a 	sll	r16,r9,r2
 800f7a0:	70c8d83a 	srl	r4,r14,r3
 800f7a4:	7084983a 	sll	r2,r14,r2
 800f7a8:	48d2d83a 	srl	r9,r9,r3
 800f7ac:	8120b03a 	or	r16,r16,r4
 800f7b0:	1004c03a 	cmpne	r2,r2,zero
 800f7b4:	80a0b03a 	or	r16,r16,r2
 800f7b8:	7a5f883a 	add	r15,r15,r9
 800f7bc:	8361883a 	add	r16,r16,r13
 800f7c0:	8349803a 	cmpltu	r4,r16,r13
 800f7c4:	23c9883a 	add	r4,r4,r15
 800f7c8:	4025883a 	mov	r18,r8
 800f7cc:	003fc306 	br	800f6dc <__subdf3+0x384>
 800f7d0:	480a977a 	slli	r5,r9,29
 800f7d4:	00880034 	movhi	r2,8192
 800f7d8:	10bfffc4 	addi	r2,r2,-1
 800f7dc:	2088703a 	and	r4,r4,r2
 800f7e0:	4812d0fa 	srli	r9,r9,3
 800f7e4:	2144b03a 	or	r2,r4,r5
 800f7e8:	003fb006 	br	800f6ac <__subdf3+0x354>
 800f7ec:	90800044 	addi	r2,r18,1
 800f7f0:	1141ff8c 	andi	r5,r2,2046
 800f7f4:	28005c1e 	bne	r5,zero,800f968 <__subdf3+0x610>
 800f7f8:	4b84b03a 	or	r2,r9,r14
 800f7fc:	9000a71e 	bne	r18,zero,800fa9c <__subdf3+0x744>
 800f800:	1000df26 	beq	r2,zero,800fb80 <__subdf3+0x828>
 800f804:	7b44b03a 	or	r2,r15,r13
 800f808:	10008f26 	beq	r2,zero,800fa48 <__subdf3+0x6f0>
 800f80c:	7361883a 	add	r16,r14,r13
 800f810:	4bc9883a 	add	r4,r9,r15
 800f814:	839d803a 	cmpltu	r14,r16,r14
 800f818:	2389883a 	add	r4,r4,r14
 800f81c:	2080202c 	andhi	r2,r4,128
 800f820:	103f9b26 	beq	r2,zero,800f690 <__subdf3+0x338>
 800f824:	00bfe034 	movhi	r2,65408
 800f828:	10bfffc4 	addi	r2,r2,-1
 800f82c:	2088703a 	and	r4,r4,r2
 800f830:	04800044 	movi	r18,1
 800f834:	003f9606 	br	800f690 <__subdf3+0x338>
 800f838:	50007626 	beq	r10,zero,800fa14 <__subdf3+0x6bc>
 800f83c:	4a402034 	orhi	r9,r9,128
 800f840:	18800e48 	cmpgei	r2,r3,57
 800f844:	10002e1e 	bne	r2,zero,800f900 <__subdf3+0x5a8>
 800f848:	18800808 	cmpgei	r2,r3,32
 800f84c:	1000881e 	bne	r2,zero,800fa70 <__subdf3+0x718>
 800f850:	00800804 	movi	r2,32
 800f854:	10c5c83a 	sub	r2,r2,r3
 800f858:	48a0983a 	sll	r16,r9,r2
 800f85c:	70c8d83a 	srl	r4,r14,r3
 800f860:	709c983a 	sll	r14,r14,r2
 800f864:	48d2d83a 	srl	r9,r9,r3
 800f868:	8120b03a 	or	r16,r16,r4
 800f86c:	701cc03a 	cmpne	r14,r14,zero
 800f870:	83a0b03a 	or	r16,r16,r14
 800f874:	7a5fc83a 	sub	r15,r15,r9
 800f878:	00002306 	br	800f908 <__subdf3+0x5b0>
 800f87c:	7361c83a 	sub	r16,r14,r13
 800f880:	4be7c83a 	sub	r19,r9,r15
 800f884:	7409803a 	cmpltu	r4,r14,r16
 800f888:	9927c83a 	sub	r19,r19,r4
 800f88c:	9880202c 	andhi	r2,r19,128
 800f890:	1000411e 	bne	r2,zero,800f998 <__subdf3+0x640>
 800f894:	84c4b03a 	or	r2,r16,r19
 800f898:	103eed1e 	bne	r2,zero,800f450 <__subdf3+0xf8>
 800f89c:	0013883a 	mov	r9,zero
 800f8a0:	0023883a 	mov	r17,zero
 800f8a4:	003f8306 	br	800f6b4 <__subdf3+0x35c>
 800f8a8:	04800084 	movi	r18,2
 800f8ac:	00bfe034 	movhi	r2,65408
 800f8b0:	10bfffc4 	addi	r2,r2,-1
 800f8b4:	8006d07a 	srli	r3,r16,1
 800f8b8:	2088703a 	and	r4,r4,r2
 800f8bc:	200497fa 	slli	r2,r4,31
 800f8c0:	8400004c 	andi	r16,r16,1
 800f8c4:	1c20b03a 	or	r16,r3,r16
 800f8c8:	2008d07a 	srli	r4,r4,1
 800f8cc:	1420b03a 	or	r16,r2,r16
 800f8d0:	003ef806 	br	800f4b4 <__subdf3+0x15c>
 800f8d4:	1c3ff804 	addi	r16,r3,-32
 800f8d8:	18800820 	cmpeqi	r2,r3,32
 800f8dc:	7c0ad83a 	srl	r5,r15,r16
 800f8e0:	1000041e 	bne	r2,zero,800f8f4 <__subdf3+0x59c>
 800f8e4:	00801004 	movi	r2,64
 800f8e8:	10c5c83a 	sub	r2,r2,r3
 800f8ec:	7884983a 	sll	r2,r15,r2
 800f8f0:	689ab03a 	or	r13,r13,r2
 800f8f4:	6820c03a 	cmpne	r16,r13,zero
 800f8f8:	8160b03a 	or	r16,r16,r5
 800f8fc:	003ecc06 	br	800f430 <__subdf3+0xd8>
 800f900:	4b92b03a 	or	r9,r9,r14
 800f904:	4820c03a 	cmpne	r16,r9,zero
 800f908:	6c21c83a 	sub	r16,r13,r16
 800f90c:	6c09803a 	cmpltu	r4,r13,r16
 800f910:	7909c83a 	sub	r4,r15,r4
 800f914:	4025883a 	mov	r18,r8
 800f918:	003ec806 	br	800f43c <__subdf3+0xe4>
 800f91c:	4b84b03a 	or	r2,r9,r14
 800f920:	10007e26 	beq	r2,zero,800fb1c <__subdf3+0x7c4>
 800f924:	18bfffc4 	addi	r2,r3,-1
 800f928:	1000a726 	beq	r2,zero,800fbc8 <__subdf3+0x870>
 800f92c:	18c1ffd8 	cmpnei	r3,r3,2047
 800f930:	18003826 	beq	r3,zero,800fa14 <__subdf3+0x6bc>
 800f934:	1007883a 	mov	r3,r2
 800f938:	003f9206 	br	800f784 <__subdf3+0x42c>
 800f93c:	00800804 	movi	r2,32
 800f940:	10c5c83a 	sub	r2,r2,r3
 800f944:	78a0983a 	sll	r16,r15,r2
 800f948:	68c8d83a 	srl	r4,r13,r3
 800f94c:	689a983a 	sll	r13,r13,r2
 800f950:	78c4d83a 	srl	r2,r15,r3
 800f954:	8120b03a 	or	r16,r16,r4
 800f958:	681ac03a 	cmpne	r13,r13,zero
 800f95c:	8360b03a 	or	r16,r16,r13
 800f960:	4893883a 	add	r9,r9,r2
 800f964:	003f5a06 	br	800f6d0 <__subdf3+0x378>
 800f968:	10c1ffe0 	cmpeqi	r3,r2,2047
 800f96c:	183f601e 	bne	r3,zero,800f6f0 <__subdf3+0x398>
 800f970:	735b883a 	add	r13,r14,r13
 800f974:	6b9d803a 	cmpltu	r14,r13,r14
 800f978:	4bc9883a 	add	r4,r9,r15
 800f97c:	2389883a 	add	r4,r4,r14
 800f980:	202097fa 	slli	r16,r4,31
 800f984:	681ad07a 	srli	r13,r13,1
 800f988:	2008d07a 	srli	r4,r4,1
 800f98c:	1025883a 	mov	r18,r2
 800f990:	8360b03a 	or	r16,r16,r13
 800f994:	003f3e06 	br	800f690 <__subdf3+0x338>
 800f998:	6ba1c83a 	sub	r16,r13,r14
 800f99c:	7a49c83a 	sub	r4,r15,r9
 800f9a0:	6c1b803a 	cmpltu	r13,r13,r16
 800f9a4:	2367c83a 	sub	r19,r4,r13
 800f9a8:	5823883a 	mov	r17,r11
 800f9ac:	003ea806 	br	800f450 <__subdf3+0xf8>
 800f9b0:	7808977a 	slli	r4,r15,29
 800f9b4:	00880034 	movhi	r2,8192
 800f9b8:	10bfffc4 	addi	r2,r2,-1
 800f9bc:	308c703a 	and	r6,r6,r2
 800f9c0:	7812d0fa 	srli	r9,r15,3
 800f9c4:	3104b03a 	or	r2,r6,r4
 800f9c8:	003f3806 	br	800f6ac <__subdf3+0x354>
 800f9cc:	28005a1e 	bne	r5,zero,800fb38 <__subdf3+0x7e0>
 800f9d0:	10008526 	beq	r2,zero,800fbe8 <__subdf3+0x890>
 800f9d4:	7806977a 	slli	r3,r15,29
 800f9d8:	00880034 	movhi	r2,8192
 800f9dc:	10bfffc4 	addi	r2,r2,-1
 800f9e0:	3084703a 	and	r2,r6,r2
 800f9e4:	7812d0fa 	srli	r9,r15,3
 800f9e8:	10c4b03a 	or	r2,r2,r3
 800f9ec:	5823883a 	mov	r17,r11
 800f9f0:	003f4906 	br	800f718 <__subdf3+0x3c0>
 800f9f4:	7361883a 	add	r16,r14,r13
 800f9f8:	4bc9883a 	add	r4,r9,r15
 800f9fc:	839d803a 	cmpltu	r14,r16,r14
 800fa00:	2389883a 	add	r4,r4,r14
 800fa04:	2080202c 	andhi	r2,r4,128
 800fa08:	103fa71e 	bne	r2,zero,800f8a8 <__subdf3+0x550>
 800fa0c:	04800044 	movi	r18,1
 800fa10:	003f1f06 	br	800f690 <__subdf3+0x338>
 800fa14:	7806977a 	slli	r3,r15,29
 800fa18:	00880034 	movhi	r2,8192
 800fa1c:	10bfffc4 	addi	r2,r2,-1
 800fa20:	3084703a 	and	r2,r6,r2
 800fa24:	7812d0fa 	srli	r9,r15,3
 800fa28:	10c4b03a 	or	r2,r2,r3
 800fa2c:	003f3a06 	br	800f718 <__subdf3+0x3c0>
 800fa30:	7361c83a 	sub	r16,r14,r13
 800fa34:	4bc9c83a 	sub	r4,r9,r15
 800fa38:	741d803a 	cmpltu	r14,r14,r16
 800fa3c:	2389c83a 	sub	r4,r4,r14
 800fa40:	04800044 	movi	r18,1
 800fa44:	003e7d06 	br	800f43c <__subdf3+0xe4>
 800fa48:	480a977a 	slli	r5,r9,29
 800fa4c:	00880034 	movhi	r2,8192
 800fa50:	10bfffc4 	addi	r2,r2,-1
 800fa54:	2084703a 	and	r2,r4,r2
 800fa58:	4812d0fa 	srli	r9,r9,3
 800fa5c:	1144b03a 	or	r2,r2,r5
 800fa60:	003f1406 	br	800f6b4 <__subdf3+0x35c>
 800fa64:	4b92b03a 	or	r9,r9,r14
 800fa68:	4820c03a 	cmpne	r16,r9,zero
 800fa6c:	003f5306 	br	800f7bc <__subdf3+0x464>
 800fa70:	1c3ff804 	addi	r16,r3,-32
 800fa74:	19000820 	cmpeqi	r4,r3,32
 800fa78:	4c04d83a 	srl	r2,r9,r16
 800fa7c:	2000041e 	bne	r4,zero,800fa90 <__subdf3+0x738>
 800fa80:	01001004 	movi	r4,64
 800fa84:	20c7c83a 	sub	r3,r4,r3
 800fa88:	48d2983a 	sll	r9,r9,r3
 800fa8c:	725cb03a 	or	r14,r14,r9
 800fa90:	7020c03a 	cmpne	r16,r14,zero
 800fa94:	80a0b03a 	or	r16,r16,r2
 800fa98:	003f9b06 	br	800f908 <__subdf3+0x5b0>
 800fa9c:	103fdd26 	beq	r2,zero,800fa14 <__subdf3+0x6bc>
 800faa0:	7b5ab03a 	or	r13,r15,r13
 800faa4:	480a977a 	slli	r5,r9,29
 800faa8:	4812d0fa 	srli	r9,r9,3
 800faac:	6800251e 	bne	r13,zero,800fb44 <__subdf3+0x7ec>
 800fab0:	00880034 	movhi	r2,8192
 800fab4:	10bfffc4 	addi	r2,r2,-1
 800fab8:	2084703a 	and	r2,r4,r2
 800fabc:	1144b03a 	or	r2,r2,r5
 800fac0:	003f1506 	br	800f718 <__subdf3+0x3c0>
 800fac4:	103f7526 	beq	r2,zero,800f89c <__subdf3+0x544>
 800fac8:	7808977a 	slli	r4,r15,29
 800facc:	00880034 	movhi	r2,8192
 800fad0:	10bfffc4 	addi	r2,r2,-1
 800fad4:	3084703a 	and	r2,r6,r2
 800fad8:	7812d0fa 	srli	r9,r15,3
 800fadc:	1104b03a 	or	r2,r2,r4
 800fae0:	5823883a 	mov	r17,r11
 800fae4:	003ef306 	br	800f6b4 <__subdf3+0x35c>
 800fae8:	6ba1c83a 	sub	r16,r13,r14
 800faec:	7a49c83a 	sub	r4,r15,r9
 800faf0:	6c1b803a 	cmpltu	r13,r13,r16
 800faf4:	2349c83a 	sub	r4,r4,r13
 800faf8:	04800044 	movi	r18,1
 800fafc:	003e4f06 	br	800f43c <__subdf3+0xe4>
 800fb00:	4806977a 	slli	r3,r9,29
 800fb04:	00880034 	movhi	r2,8192
 800fb08:	10bfffc4 	addi	r2,r2,-1
 800fb0c:	2084703a 	and	r2,r4,r2
 800fb10:	4812d0fa 	srli	r9,r9,3
 800fb14:	10c4b03a 	or	r2,r2,r3
 800fb18:	003eff06 	br	800f718 <__subdf3+0x3c0>
 800fb1c:	7808977a 	slli	r4,r15,29
 800fb20:	00880034 	movhi	r2,8192
 800fb24:	10bfffc4 	addi	r2,r2,-1
 800fb28:	3084703a 	and	r2,r6,r2
 800fb2c:	7812d0fa 	srli	r9,r15,3
 800fb30:	1104b03a 	or	r2,r2,r4
 800fb34:	003edd06 	br	800f6ac <__subdf3+0x354>
 800fb38:	480a977a 	slli	r5,r9,29
 800fb3c:	4812d0fa 	srli	r9,r9,3
 800fb40:	103fdb26 	beq	r2,zero,800fab0 <__subdf3+0x758>
 800fb44:	00c80034 	movhi	r3,8192
 800fb48:	18ffffc4 	addi	r3,r3,-1
 800fb4c:	20c4703a 	and	r2,r4,r3
 800fb50:	4900022c 	andhi	r4,r9,8
 800fb54:	1144b03a 	or	r2,r2,r5
 800fb58:	203eef26 	beq	r4,zero,800f718 <__subdf3+0x3c0>
 800fb5c:	7808d0fa 	srli	r4,r15,3
 800fb60:	2140022c 	andhi	r5,r4,8
 800fb64:	283eec1e 	bne	r5,zero,800f718 <__subdf3+0x3c0>
 800fb68:	7804977a 	slli	r2,r15,29
 800fb6c:	30cc703a 	and	r6,r6,r3
 800fb70:	5823883a 	mov	r17,r11
 800fb74:	3084b03a 	or	r2,r6,r2
 800fb78:	2013883a 	mov	r9,r4
 800fb7c:	003ee606 	br	800f718 <__subdf3+0x3c0>
 800fb80:	7808977a 	slli	r4,r15,29
 800fb84:	00880034 	movhi	r2,8192
 800fb88:	10bfffc4 	addi	r2,r2,-1
 800fb8c:	3084703a 	and	r2,r6,r2
 800fb90:	7812d0fa 	srli	r9,r15,3
 800fb94:	1104b03a 	or	r2,r2,r4
 800fb98:	003ec606 	br	800f6b4 <__subdf3+0x35c>
 800fb9c:	18bff804 	addi	r2,r3,-32
 800fba0:	19000820 	cmpeqi	r4,r3,32
 800fba4:	4884d83a 	srl	r2,r9,r2
 800fba8:	2000041e 	bne	r4,zero,800fbbc <__subdf3+0x864>
 800fbac:	01001004 	movi	r4,64
 800fbb0:	20c7c83a 	sub	r3,r4,r3
 800fbb4:	48d2983a 	sll	r9,r9,r3
 800fbb8:	725cb03a 	or	r14,r14,r9
 800fbbc:	7020c03a 	cmpne	r16,r14,zero
 800fbc0:	80a0b03a 	or	r16,r16,r2
 800fbc4:	003efd06 	br	800f7bc <__subdf3+0x464>
 800fbc8:	7361883a 	add	r16,r14,r13
 800fbcc:	4bc9883a 	add	r4,r9,r15
 800fbd0:	835b803a 	cmpltu	r13,r16,r13
 800fbd4:	2349883a 	add	r4,r4,r13
 800fbd8:	003f8a06 	br	800fa04 <__subdf3+0x6ac>
 800fbdc:	8104b03a 	or	r2,r16,r4
 800fbe0:	103f2e26 	beq	r2,zero,800f89c <__subdf3+0x544>
 800fbe4:	003eaa06 	br	800f690 <__subdf3+0x338>
 800fbe8:	02400434 	movhi	r9,16
 800fbec:	0023883a 	mov	r17,zero
 800fbf0:	00bfffc4 	movi	r2,-1
 800fbf4:	4a7fffc4 	addi	r9,r9,-1
 800fbf8:	003ec906 	br	800f720 <__subdf3+0x3c8>
 800fbfc:	0005883a 	mov	r2,zero
 800fc00:	00c1ffc4 	movi	r3,2047
 800fc04:	0009883a 	mov	r4,zero
 800fc08:	003e4106 	br	800f510 <__subdf3+0x1b8>

0800fc0c <__unorddf2>:
 800fc0c:	2806d53a 	srli	r3,r5,20
 800fc10:	3810d53a 	srli	r8,r7,20
 800fc14:	02400434 	movhi	r9,16
 800fc18:	18c1ffcc 	andi	r3,r3,2047
 800fc1c:	4a7fffc4 	addi	r9,r9,-1
 800fc20:	18c1ffd8 	cmpnei	r3,r3,2047
 800fc24:	2a4a703a 	and	r5,r5,r9
 800fc28:	3a4e703a 	and	r7,r7,r9
 800fc2c:	4201ffcc 	andi	r8,r8,2047
 800fc30:	18000426 	beq	r3,zero,800fc44 <__unorddf2+0x38>
 800fc34:	4201ffd8 	cmpnei	r8,r8,2047
 800fc38:	40000626 	beq	r8,zero,800fc54 <__unorddf2+0x48>
 800fc3c:	0005883a 	mov	r2,zero
 800fc40:	f800283a 	ret
 800fc44:	290ab03a 	or	r5,r5,r4
 800fc48:	283ffa26 	beq	r5,zero,800fc34 <__unorddf2+0x28>
 800fc4c:	00800044 	movi	r2,1
 800fc50:	f800283a 	ret
 800fc54:	398eb03a 	or	r7,r7,r6
 800fc58:	3804c03a 	cmpne	r2,r7,zero
 800fc5c:	f800283a 	ret

0800fc60 <__fixdfsi>:
 800fc60:	2806d53a 	srli	r3,r5,20
 800fc64:	01800434 	movhi	r6,16
 800fc68:	31bfffc4 	addi	r6,r6,-1
 800fc6c:	18c1ffcc 	andi	r3,r3,2047
 800fc70:	19c0ffd0 	cmplti	r7,r3,1023
 800fc74:	2810d7fa 	srli	r8,r5,31
 800fc78:	298a703a 	and	r5,r5,r6
 800fc7c:	3800061e 	bne	r7,zero,800fc98 <__fixdfsi+0x38>
 800fc80:	18810790 	cmplti	r2,r3,1054
 800fc84:	1000061e 	bne	r2,zero,800fca0 <__fixdfsi+0x40>
 800fc88:	00a00034 	movhi	r2,32768
 800fc8c:	10bfffc4 	addi	r2,r2,-1
 800fc90:	4085883a 	add	r2,r8,r2
 800fc94:	f800283a 	ret
 800fc98:	0005883a 	mov	r2,zero
 800fc9c:	f800283a 	ret
 800fca0:	01810cc4 	movi	r6,1075
 800fca4:	30cdc83a 	sub	r6,r6,r3
 800fca8:	30800808 	cmpgei	r2,r6,32
 800fcac:	29400434 	orhi	r5,r5,16
 800fcb0:	1000071e 	bne	r2,zero,800fcd0 <__fixdfsi+0x70>
 800fcb4:	18befb44 	addi	r2,r3,-1043
 800fcb8:	2884983a 	sll	r2,r5,r2
 800fcbc:	2188d83a 	srl	r4,r4,r6
 800fcc0:	1104b03a 	or	r2,r2,r4
 800fcc4:	403ff526 	beq	r8,zero,800fc9c <__fixdfsi+0x3c>
 800fcc8:	0085c83a 	sub	r2,zero,r2
 800fccc:	f800283a 	ret
 800fcd0:	008104c4 	movi	r2,1043
 800fcd4:	10c5c83a 	sub	r2,r2,r3
 800fcd8:	2884d83a 	srl	r2,r5,r2
 800fcdc:	003ff906 	br	800fcc4 <__fixdfsi+0x64>

0800fce0 <__floatsidf>:
 800fce0:	defffd04 	addi	sp,sp,-12
 800fce4:	dfc00215 	stw	ra,8(sp)
 800fce8:	dc400115 	stw	r17,4(sp)
 800fcec:	dc000015 	stw	r16,0(sp)
 800fcf0:	20001326 	beq	r4,zero,800fd40 <__floatsidf+0x60>
 800fcf4:	2022d7fa 	srli	r17,r4,31
 800fcf8:	2021883a 	mov	r16,r4
 800fcfc:	20002416 	blt	r4,zero,800fd90 <__floatsidf+0xb0>
 800fd00:	8009883a 	mov	r4,r16
 800fd04:	800fe280 	call	800fe28 <__clzsi2>
 800fd08:	01010784 	movi	r4,1054
 800fd0c:	2089c83a 	sub	r4,r4,r2
 800fd10:	114002c8 	cmpgei	r5,r2,11
 800fd14:	20c1ffcc 	andi	r3,r4,2047
 800fd18:	2800161e 	bne	r5,zero,800fd74 <__floatsidf+0x94>
 800fd1c:	010002c4 	movi	r4,11
 800fd20:	2089c83a 	sub	r4,r4,r2
 800fd24:	810ad83a 	srl	r5,r16,r4
 800fd28:	01000434 	movhi	r4,16
 800fd2c:	10800544 	addi	r2,r2,21
 800fd30:	213fffc4 	addi	r4,r4,-1
 800fd34:	8084983a 	sll	r2,r16,r2
 800fd38:	290a703a 	and	r5,r5,r4
 800fd3c:	00000406 	br	800fd50 <__floatsidf+0x70>
 800fd40:	0023883a 	mov	r17,zero
 800fd44:	0007883a 	mov	r3,zero
 800fd48:	000b883a 	mov	r5,zero
 800fd4c:	0005883a 	mov	r2,zero
 800fd50:	1808953a 	slli	r4,r3,20
 800fd54:	880697fa 	slli	r3,r17,31
 800fd58:	2148b03a 	or	r4,r4,r5
 800fd5c:	20c6b03a 	or	r3,r4,r3
 800fd60:	dfc00217 	ldw	ra,8(sp)
 800fd64:	dc400117 	ldw	r17,4(sp)
 800fd68:	dc000017 	ldw	r16,0(sp)
 800fd6c:	dec00304 	addi	sp,sp,12
 800fd70:	f800283a 	ret
 800fd74:	10bffd44 	addi	r2,r2,-11
 800fd78:	808a983a 	sll	r5,r16,r2
 800fd7c:	00800434 	movhi	r2,16
 800fd80:	10bfffc4 	addi	r2,r2,-1
 800fd84:	288a703a 	and	r5,r5,r2
 800fd88:	0005883a 	mov	r2,zero
 800fd8c:	003ff006 	br	800fd50 <__floatsidf+0x70>
 800fd90:	0121c83a 	sub	r16,zero,r4
 800fd94:	003fda06 	br	800fd00 <__floatsidf+0x20>

0800fd98 <__floatunsidf>:
 800fd98:	defffe04 	addi	sp,sp,-8
 800fd9c:	dc000015 	stw	r16,0(sp)
 800fda0:	dfc00115 	stw	ra,4(sp)
 800fda4:	2021883a 	mov	r16,r4
 800fda8:	20000f26 	beq	r4,zero,800fde8 <__floatunsidf+0x50>
 800fdac:	800fe280 	call	800fe28 <__clzsi2>
 800fdb0:	00c10784 	movi	r3,1054
 800fdb4:	1887c83a 	sub	r3,r3,r2
 800fdb8:	110002c8 	cmpgei	r4,r2,11
 800fdbc:	18c1ffcc 	andi	r3,r3,2047
 800fdc0:	2000121e 	bne	r4,zero,800fe0c <__floatunsidf+0x74>
 800fdc4:	014002c4 	movi	r5,11
 800fdc8:	288bc83a 	sub	r5,r5,r2
 800fdcc:	814ad83a 	srl	r5,r16,r5
 800fdd0:	01000434 	movhi	r4,16
 800fdd4:	10800544 	addi	r2,r2,21
 800fdd8:	213fffc4 	addi	r4,r4,-1
 800fddc:	80a0983a 	sll	r16,r16,r2
 800fde0:	290a703a 	and	r5,r5,r4
 800fde4:	00000206 	br	800fdf0 <__floatunsidf+0x58>
 800fde8:	0007883a 	mov	r3,zero
 800fdec:	000b883a 	mov	r5,zero
 800fdf0:	1806953a 	slli	r3,r3,20
 800fdf4:	8005883a 	mov	r2,r16
 800fdf8:	1946b03a 	or	r3,r3,r5
 800fdfc:	dfc00117 	ldw	ra,4(sp)
 800fe00:	dc000017 	ldw	r16,0(sp)
 800fe04:	dec00204 	addi	sp,sp,8
 800fe08:	f800283a 	ret
 800fe0c:	117ffd44 	addi	r5,r2,-11
 800fe10:	814a983a 	sll	r5,r16,r5
 800fe14:	00800434 	movhi	r2,16
 800fe18:	10bfffc4 	addi	r2,r2,-1
 800fe1c:	288a703a 	and	r5,r5,r2
 800fe20:	0021883a 	mov	r16,zero
 800fe24:	003ff206 	br	800fdf0 <__floatunsidf+0x58>

0800fe28 <__clzsi2>:
 800fe28:	00bfffd4 	movui	r2,65535
 800fe2c:	11000436 	bltu	r2,r4,800fe40 <__clzsi2+0x18>
 800fe30:	20804030 	cmpltui	r2,r4,256
 800fe34:	10000e26 	beq	r2,zero,800fe70 <__clzsi2+0x48>
 800fe38:	01400804 	movi	r5,32
 800fe3c:	00000406 	br	800fe50 <__clzsi2+0x28>
 800fe40:	00804034 	movhi	r2,256
 800fe44:	20800736 	bltu	r4,r2,800fe64 <__clzsi2+0x3c>
 800fe48:	2008d63a 	srli	r4,r4,24
 800fe4c:	01400204 	movi	r5,8
 800fe50:	00c20074 	movhi	r3,2049
 800fe54:	20c7883a 	add	r3,r4,r3
 800fe58:	188c9203 	ldbu	r2,12872(r3)
 800fe5c:	2885c83a 	sub	r2,r5,r2
 800fe60:	f800283a 	ret
 800fe64:	2008d43a 	srli	r4,r4,16
 800fe68:	01400404 	movi	r5,16
 800fe6c:	003ff806 	br	800fe50 <__clzsi2+0x28>
 800fe70:	2008d23a 	srli	r4,r4,8
 800fe74:	01400604 	movi	r5,24
 800fe78:	003ff506 	br	800fe50 <__clzsi2+0x28>

0800fe7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fe7c:	defffe04 	addi	sp,sp,-8
 800fe80:	dfc00115 	stw	ra,4(sp)
 800fe84:	df000015 	stw	fp,0(sp)
 800fe88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fe8c:	d0a00d17 	ldw	r2,-32716(gp)
 800fe90:	10000326 	beq	r2,zero,800fea0 <alt_get_errno+0x24>
 800fe94:	d0a00d17 	ldw	r2,-32716(gp)
 800fe98:	103ee83a 	callr	r2
 800fe9c:	00000106 	br	800fea4 <alt_get_errno+0x28>
 800fea0:	d0a72104 	addi	r2,gp,-25468
}
 800fea4:	e037883a 	mov	sp,fp
 800fea8:	dfc00117 	ldw	ra,4(sp)
 800feac:	df000017 	ldw	fp,0(sp)
 800feb0:	dec00204 	addi	sp,sp,8
 800feb4:	f800283a 	ret

0800feb8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800feb8:	defffb04 	addi	sp,sp,-20
 800febc:	dfc00415 	stw	ra,16(sp)
 800fec0:	df000315 	stw	fp,12(sp)
 800fec4:	df000304 	addi	fp,sp,12
 800fec8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800fecc:	e0bffd17 	ldw	r2,-12(fp)
 800fed0:	10000916 	blt	r2,zero,800fef8 <close+0x40>
 800fed4:	e0fffd17 	ldw	r3,-12(fp)
 800fed8:	1805883a 	mov	r2,r3
 800fedc:	1085883a 	add	r2,r2,r2
 800fee0:	10c5883a 	add	r2,r2,r3
 800fee4:	100490ba 	slli	r2,r2,2
 800fee8:	00c20074 	movhi	r3,2049
 800feec:	18cf5b04 	addi	r3,r3,15724
 800fef0:	10c5883a 	add	r2,r2,r3
 800fef4:	00000106 	br	800fefc <close+0x44>
 800fef8:	0005883a 	mov	r2,zero
 800fefc:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 800ff00:	e0bfff17 	ldw	r2,-4(fp)
 800ff04:	10001926 	beq	r2,zero,800ff6c <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800ff08:	e0bfff17 	ldw	r2,-4(fp)
 800ff0c:	10800017 	ldw	r2,0(r2)
 800ff10:	10800417 	ldw	r2,16(r2)
 800ff14:	10000626 	beq	r2,zero,800ff30 <close+0x78>
 800ff18:	e0bfff17 	ldw	r2,-4(fp)
 800ff1c:	10800017 	ldw	r2,0(r2)
 800ff20:	10800417 	ldw	r2,16(r2)
 800ff24:	e13fff17 	ldw	r4,-4(fp)
 800ff28:	103ee83a 	callr	r2
 800ff2c:	00000106 	br	800ff34 <close+0x7c>
 800ff30:	0005883a 	mov	r2,zero
 800ff34:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800ff38:	e13ffd17 	ldw	r4,-12(fp)
 800ff3c:	80107740 	call	8010774 <alt_release_fd>
    if (rval < 0)
 800ff40:	e0bffe17 	ldw	r2,-8(fp)
 800ff44:	1000070e 	bge	r2,zero,800ff64 <close+0xac>
    {
      ALT_ERRNO = -rval;
 800ff48:	800fe7c0 	call	800fe7c <alt_get_errno>
 800ff4c:	1007883a 	mov	r3,r2
 800ff50:	e0bffe17 	ldw	r2,-8(fp)
 800ff54:	0085c83a 	sub	r2,zero,r2
 800ff58:	18800015 	stw	r2,0(r3)
      return -1;
 800ff5c:	00bfffc4 	movi	r2,-1
 800ff60:	00000706 	br	800ff80 <close+0xc8>
    }
    return 0;
 800ff64:	0005883a 	mov	r2,zero
 800ff68:	00000506 	br	800ff80 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ff6c:	800fe7c0 	call	800fe7c <alt_get_errno>
 800ff70:	1007883a 	mov	r3,r2
 800ff74:	00801444 	movi	r2,81
 800ff78:	18800015 	stw	r2,0(r3)
    return -1;
 800ff7c:	00bfffc4 	movi	r2,-1
  }
}
 800ff80:	e037883a 	mov	sp,fp
 800ff84:	dfc00117 	ldw	ra,4(sp)
 800ff88:	df000017 	ldw	fp,0(sp)
 800ff8c:	dec00204 	addi	sp,sp,8
 800ff90:	f800283a 	ret

0800ff94 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800ff94:	defffc04 	addi	sp,sp,-16
 800ff98:	df000315 	stw	fp,12(sp)
 800ff9c:	df000304 	addi	fp,sp,12
 800ffa0:	e13fff15 	stw	r4,-4(fp)
 800ffa4:	e17ffe15 	stw	r5,-8(fp)
 800ffa8:	e1bffd15 	stw	r6,-12(fp)
  return len;
 800ffac:	e0bffd17 	ldw	r2,-12(fp)
}
 800ffb0:	e037883a 	mov	sp,fp
 800ffb4:	df000017 	ldw	fp,0(sp)
 800ffb8:	dec00104 	addi	sp,sp,4
 800ffbc:	f800283a 	ret

0800ffc0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800ffc0:	defffd04 	addi	sp,sp,-12
 800ffc4:	df000215 	stw	fp,8(sp)
 800ffc8:	df000204 	addi	fp,sp,8
 800ffcc:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800ffd0:	0001883a 	nop
 800ffd4:	e0bffe17 	ldw	r2,-8(fp)
 800ffd8:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800ffdc:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800ffe0:	10000226 	beq	r2,zero,800ffec <_exit+0x2c>
    ALT_SIM_FAIL();
 800ffe4:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 800ffe8:	00000106 	br	800fff0 <_exit+0x30>
    ALT_SIM_PASS();
 800ffec:	002af0b0 	cmpltui	zero,zero,43970
}
 800fff0:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800fff4:	003fff06 	br	800fff4 <_exit+0x34>

0800fff8 <alt_get_errno>:
{
 800fff8:	defffe04 	addi	sp,sp,-8
 800fffc:	dfc00115 	stw	ra,4(sp)
 8010000:	df000015 	stw	fp,0(sp)
 8010004:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010008:	d0a00d17 	ldw	r2,-32716(gp)
 801000c:	10000326 	beq	r2,zero,801001c <alt_get_errno+0x24>
 8010010:	d0a00d17 	ldw	r2,-32716(gp)
 8010014:	103ee83a 	callr	r2
 8010018:	00000106 	br	8010020 <alt_get_errno+0x28>
 801001c:	d0a72104 	addi	r2,gp,-25468
}
 8010020:	e037883a 	mov	sp,fp
 8010024:	dfc00117 	ldw	ra,4(sp)
 8010028:	df000017 	ldw	fp,0(sp)
 801002c:	dec00204 	addi	sp,sp,8
 8010030:	f800283a 	ret

08010034 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8010034:	defffb04 	addi	sp,sp,-20
 8010038:	dfc00415 	stw	ra,16(sp)
 801003c:	df000315 	stw	fp,12(sp)
 8010040:	df000304 	addi	fp,sp,12
 8010044:	e13ffe15 	stw	r4,-8(fp)
 8010048:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801004c:	e0bffe17 	ldw	r2,-8(fp)
 8010050:	10000916 	blt	r2,zero,8010078 <fstat+0x44>
 8010054:	e0fffe17 	ldw	r3,-8(fp)
 8010058:	1805883a 	mov	r2,r3
 801005c:	1085883a 	add	r2,r2,r2
 8010060:	10c5883a 	add	r2,r2,r3
 8010064:	100490ba 	slli	r2,r2,2
 8010068:	00c20074 	movhi	r3,2049
 801006c:	18cf5b04 	addi	r3,r3,15724
 8010070:	10c5883a 	add	r2,r2,r3
 8010074:	00000106 	br	801007c <fstat+0x48>
 8010078:	0005883a 	mov	r2,zero
 801007c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 8010080:	e0bfff17 	ldw	r2,-4(fp)
 8010084:	10001026 	beq	r2,zero,80100c8 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8010088:	e0bfff17 	ldw	r2,-4(fp)
 801008c:	10800017 	ldw	r2,0(r2)
 8010090:	10800817 	ldw	r2,32(r2)
 8010094:	10000726 	beq	r2,zero,80100b4 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
 8010098:	e0bfff17 	ldw	r2,-4(fp)
 801009c:	10800017 	ldw	r2,0(r2)
 80100a0:	10800817 	ldw	r2,32(r2)
 80100a4:	e17ffd17 	ldw	r5,-12(fp)
 80100a8:	e13fff17 	ldw	r4,-4(fp)
 80100ac:	103ee83a 	callr	r2
 80100b0:	00000a06 	br	80100dc <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 80100b4:	e0bffd17 	ldw	r2,-12(fp)
 80100b8:	00c80004 	movi	r3,8192
 80100bc:	10c00115 	stw	r3,4(r2)
      return 0;
 80100c0:	0005883a 	mov	r2,zero
 80100c4:	00000506 	br	80100dc <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80100c8:	800fff80 	call	800fff8 <alt_get_errno>
 80100cc:	1007883a 	mov	r3,r2
 80100d0:	00801444 	movi	r2,81
 80100d4:	18800015 	stw	r2,0(r3)
    return -1;
 80100d8:	00bfffc4 	movi	r2,-1
  }
}
 80100dc:	e037883a 	mov	sp,fp
 80100e0:	dfc00117 	ldw	ra,4(sp)
 80100e4:	df000017 	ldw	fp,0(sp)
 80100e8:	dec00204 	addi	sp,sp,8
 80100ec:	f800283a 	ret

080100f0 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 80100f0:	deffff04 	addi	sp,sp,-4
 80100f4:	df000015 	stw	fp,0(sp)
 80100f8:	d839883a 	mov	fp,sp
  return 0;
 80100fc:	0005883a 	mov	r2,zero
}
 8010100:	e037883a 	mov	sp,fp
 8010104:	df000017 	ldw	fp,0(sp)
 8010108:	dec00104 	addi	sp,sp,4
 801010c:	f800283a 	ret

08010110 <alt_get_errno>:
{
 8010110:	defffe04 	addi	sp,sp,-8
 8010114:	dfc00115 	stw	ra,4(sp)
 8010118:	df000015 	stw	fp,0(sp)
 801011c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010120:	d0a00d17 	ldw	r2,-32716(gp)
 8010124:	10000326 	beq	r2,zero,8010134 <alt_get_errno+0x24>
 8010128:	d0a00d17 	ldw	r2,-32716(gp)
 801012c:	103ee83a 	callr	r2
 8010130:	00000106 	br	8010138 <alt_get_errno+0x28>
 8010134:	d0a72104 	addi	r2,gp,-25468
}
 8010138:	e037883a 	mov	sp,fp
 801013c:	dfc00117 	ldw	ra,4(sp)
 8010140:	df000017 	ldw	fp,0(sp)
 8010144:	dec00204 	addi	sp,sp,8
 8010148:	f800283a 	ret

0801014c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 801014c:	deffea04 	addi	sp,sp,-88
 8010150:	dfc01515 	stw	ra,84(sp)
 8010154:	df001415 	stw	fp,80(sp)
 8010158:	df001404 	addi	fp,sp,80
 801015c:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8010160:	e0bfec17 	ldw	r2,-80(fp)
 8010164:	10000916 	blt	r2,zero,801018c <isatty+0x40>
 8010168:	e0ffec17 	ldw	r3,-80(fp)
 801016c:	1805883a 	mov	r2,r3
 8010170:	1085883a 	add	r2,r2,r2
 8010174:	10c5883a 	add	r2,r2,r3
 8010178:	100490ba 	slli	r2,r2,2
 801017c:	00c20074 	movhi	r3,2049
 8010180:	18cf5b04 	addi	r3,r3,15724
 8010184:	10c5883a 	add	r2,r2,r3
 8010188:	00000106 	br	8010190 <isatty+0x44>
 801018c:	0005883a 	mov	r2,zero
 8010190:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 8010194:	e0bfff17 	ldw	r2,-4(fp)
 8010198:	10000e26 	beq	r2,zero,80101d4 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 801019c:	e0bfff17 	ldw	r2,-4(fp)
 80101a0:	10800017 	ldw	r2,0(r2)
 80101a4:	10800817 	ldw	r2,32(r2)
 80101a8:	1000021e 	bne	r2,zero,80101b4 <isatty+0x68>
    {
      return 1;
 80101ac:	00800044 	movi	r2,1
 80101b0:	00000d06 	br	80101e8 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 80101b4:	e0bfed04 	addi	r2,fp,-76
 80101b8:	100b883a 	mov	r5,r2
 80101bc:	e13fec17 	ldw	r4,-80(fp)
 80101c0:	80100340 	call	8010034 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 80101c4:	e0bfee17 	ldw	r2,-72(fp)
 80101c8:	10880020 	cmpeqi	r2,r2,8192
 80101cc:	10803fcc 	andi	r2,r2,255
 80101d0:	00000506 	br	80101e8 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80101d4:	80101100 	call	8010110 <alt_get_errno>
 80101d8:	1007883a 	mov	r3,r2
 80101dc:	00801444 	movi	r2,81
 80101e0:	18800015 	stw	r2,0(r3)
    return 0;
 80101e4:	0005883a 	mov	r2,zero
  }
}
 80101e8:	e037883a 	mov	sp,fp
 80101ec:	dfc00117 	ldw	ra,4(sp)
 80101f0:	df000017 	ldw	fp,0(sp)
 80101f4:	dec00204 	addi	sp,sp,8
 80101f8:	f800283a 	ret

080101fc <alt_get_errno>:
{
 80101fc:	defffe04 	addi	sp,sp,-8
 8010200:	dfc00115 	stw	ra,4(sp)
 8010204:	df000015 	stw	fp,0(sp)
 8010208:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801020c:	d0a00d17 	ldw	r2,-32716(gp)
 8010210:	10000326 	beq	r2,zero,8010220 <alt_get_errno+0x24>
 8010214:	d0a00d17 	ldw	r2,-32716(gp)
 8010218:	103ee83a 	callr	r2
 801021c:	00000106 	br	8010224 <alt_get_errno+0x28>
 8010220:	d0a72104 	addi	r2,gp,-25468
}
 8010224:	e037883a 	mov	sp,fp
 8010228:	dfc00117 	ldw	ra,4(sp)
 801022c:	df000017 	ldw	fp,0(sp)
 8010230:	dec00204 	addi	sp,sp,8
 8010234:	f800283a 	ret

08010238 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 8010238:	defffb04 	addi	sp,sp,-20
 801023c:	dfc00415 	stw	ra,16(sp)
 8010240:	df000315 	stw	fp,12(sp)
 8010244:	df000304 	addi	fp,sp,12
 8010248:	e13ffe15 	stw	r4,-8(fp)
 801024c:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
 8010250:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
 8010254:	e0bffe17 	ldw	r2,-8(fp)
 8010258:	00802e16 	blt	zero,r2,8010314 <kill+0xdc>
 801025c:	e0bffd17 	ldw	r2,-12(fp)
 8010260:	10800828 	cmpgeui	r2,r2,32
 8010264:	1000281e 	bne	r2,zero,8010308 <kill+0xd0>
 8010268:	e0bffd17 	ldw	r2,-12(fp)
 801026c:	100690ba 	slli	r3,r2,2
 8010270:	00820074 	movhi	r2,2049
 8010274:	1885883a 	add	r2,r3,r2
 8010278:	1080a017 	ldw	r2,640(r2)
 801027c:	1000683a 	jmp	r2
 8010280:	08010328 	cmpgeui	zero,at,1036
 8010284:	08010308 	cmpgei	zero,at,1036
 8010288:	08010308 	cmpgei	zero,at,1036
 801028c:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
 8010290:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
 8010294:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
 8010298:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
 801029c:	08010308 	cmpgei	zero,at,1036
 80102a0:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
 80102a4:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
 80102a8:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
 80102ac:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
 80102b0:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
 80102b4:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
 80102b8:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
 80102bc:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
 80102c0:	08010328 	cmpgeui	zero,at,1036
 80102c4:	08010308 	cmpgei	zero,at,1036
 80102c8:	08010308 	cmpgei	zero,at,1036
 80102cc:	08010308 	cmpgei	zero,at,1036
 80102d0:	08010328 	cmpgeui	zero,at,1036
 80102d4:	08010308 	cmpgei	zero,at,1036
 80102d8:	08010308 	cmpgei	zero,at,1036
 80102dc:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
 80102e0:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
 80102e4:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
 80102e8:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
 80102ec:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
 80102f0:	08010308 	cmpgei	zero,at,1036
 80102f4:	08010308 	cmpgei	zero,at,1036
 80102f8:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
 80102fc:	08010300 	call	801030 <__alt_mem_onchip_memory2_0+0x801030>
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 8010300:	0009883a 	mov	r4,zero
 8010304:	800ffc00 	call	800ffc0 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 8010308:	00800584 	movi	r2,22
 801030c:	e0bfff15 	stw	r2,-4(fp)
 8010310:	00000606 	br	801032c <kill+0xf4>
    }
  }

  else if (pid > 0)
 8010314:	e0bffe17 	ldw	r2,-8(fp)
 8010318:	0080040e 	bge	zero,r2,801032c <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 801031c:	008000c4 	movi	r2,3
 8010320:	e0bfff15 	stw	r2,-4(fp)
 8010324:	00000106 	br	801032c <kill+0xf4>
      break;
 8010328:	0001883a 	nop
  }

  if (status)
 801032c:	e0bfff17 	ldw	r2,-4(fp)
 8010330:	10000626 	beq	r2,zero,801034c <kill+0x114>
  {
    ALT_ERRNO = status;
 8010334:	80101fc0 	call	80101fc <alt_get_errno>
 8010338:	1007883a 	mov	r3,r2
 801033c:	e0bfff17 	ldw	r2,-4(fp)
 8010340:	18800015 	stw	r2,0(r3)
    return -1;
 8010344:	00bfffc4 	movi	r2,-1
 8010348:	00000106 	br	8010350 <kill+0x118>
  }

  return 0;
 801034c:	0005883a 	mov	r2,zero
}
 8010350:	e037883a 	mov	sp,fp
 8010354:	dfc00117 	ldw	ra,4(sp)
 8010358:	df000017 	ldw	fp,0(sp)
 801035c:	dec00204 	addi	sp,sp,8
 8010360:	f800283a 	ret

08010364 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8010364:	defffc04 	addi	sp,sp,-16
 8010368:	df000315 	stw	fp,12(sp)
 801036c:	df000304 	addi	fp,sp,12
 8010370:	e13fff15 	stw	r4,-4(fp)
 8010374:	e17ffe15 	stw	r5,-8(fp)
 8010378:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 801037c:	e0fffe17 	ldw	r3,-8(fp)
 8010380:	e0bfff17 	ldw	r2,-4(fp)
 8010384:	18800c26 	beq	r3,r2,80103b8 <alt_load_section+0x54>
  {
    while( to != end )
 8010388:	00000806 	br	80103ac <alt_load_section+0x48>
    {
      *to++ = *from++;
 801038c:	e0ffff17 	ldw	r3,-4(fp)
 8010390:	18800104 	addi	r2,r3,4
 8010394:	e0bfff15 	stw	r2,-4(fp)
 8010398:	e0bffe17 	ldw	r2,-8(fp)
 801039c:	11000104 	addi	r4,r2,4
 80103a0:	e13ffe15 	stw	r4,-8(fp)
 80103a4:	18c00017 	ldw	r3,0(r3)
 80103a8:	10c00015 	stw	r3,0(r2)
    while( to != end )
 80103ac:	e0fffe17 	ldw	r3,-8(fp)
 80103b0:	e0bffd17 	ldw	r2,-12(fp)
 80103b4:	18bff51e 	bne	r3,r2,801038c <alt_load_section+0x28>
    }
  }
}
 80103b8:	0001883a 	nop
 80103bc:	e037883a 	mov	sp,fp
 80103c0:	df000017 	ldw	fp,0(sp)
 80103c4:	dec00104 	addi	sp,sp,4
 80103c8:	f800283a 	ret

080103cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80103cc:	defffe04 	addi	sp,sp,-8
 80103d0:	dfc00115 	stw	ra,4(sp)
 80103d4:	df000015 	stw	fp,0(sp)
 80103d8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80103dc:	01820074 	movhi	r6,2049
 80103e0:	3193e504 	addi	r6,r6,20372
 80103e4:	01420074 	movhi	r5,2049
 80103e8:	294cdf04 	addi	r5,r5,13180
 80103ec:	01020074 	movhi	r4,2049
 80103f0:	2113e504 	addi	r4,r4,20372
 80103f4:	80103640 	call	8010364 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80103f8:	01820034 	movhi	r6,2048
 80103fc:	31808904 	addi	r6,r6,548
 8010400:	01420034 	movhi	r5,2048
 8010404:	29400804 	addi	r5,r5,32
 8010408:	01020034 	movhi	r4,2048
 801040c:	21000804 	addi	r4,r4,32
 8010410:	80103640 	call	8010364 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8010414:	01820074 	movhi	r6,2049
 8010418:	318cdf04 	addi	r6,r6,13180
 801041c:	01420074 	movhi	r5,2049
 8010420:	294a9404 	addi	r5,r5,10832
 8010424:	01020074 	movhi	r4,2049
 8010428:	210a9404 	addi	r4,r4,10832
 801042c:	80103640 	call	8010364 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8010430:	8011c880 	call	8011c88 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8010434:	8011e540 	call	8011e54 <alt_icache_flush_all>
}
 8010438:	0001883a 	nop
 801043c:	e037883a 	mov	sp,fp
 8010440:	dfc00117 	ldw	ra,4(sp)
 8010444:	df000017 	ldw	fp,0(sp)
 8010448:	dec00204 	addi	sp,sp,8
 801044c:	f800283a 	ret

08010450 <alt_get_errno>:
{
 8010450:	defffe04 	addi	sp,sp,-8
 8010454:	dfc00115 	stw	ra,4(sp)
 8010458:	df000015 	stw	fp,0(sp)
 801045c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010460:	d0a00d17 	ldw	r2,-32716(gp)
 8010464:	10000326 	beq	r2,zero,8010474 <alt_get_errno+0x24>
 8010468:	d0a00d17 	ldw	r2,-32716(gp)
 801046c:	103ee83a 	callr	r2
 8010470:	00000106 	br	8010478 <alt_get_errno+0x28>
 8010474:	d0a72104 	addi	r2,gp,-25468
}
 8010478:	e037883a 	mov	sp,fp
 801047c:	dfc00117 	ldw	ra,4(sp)
 8010480:	df000017 	ldw	fp,0(sp)
 8010484:	dec00204 	addi	sp,sp,8
 8010488:	f800283a 	ret

0801048c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 801048c:	defff904 	addi	sp,sp,-28
 8010490:	dfc00615 	stw	ra,24(sp)
 8010494:	df000515 	stw	fp,20(sp)
 8010498:	df000504 	addi	fp,sp,20
 801049c:	e13ffd15 	stw	r4,-12(fp)
 80104a0:	e17ffc15 	stw	r5,-16(fp)
 80104a4:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80104a8:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80104ac:	e0bffd17 	ldw	r2,-12(fp)
 80104b0:	10000916 	blt	r2,zero,80104d8 <lseek+0x4c>
 80104b4:	e0fffd17 	ldw	r3,-12(fp)
 80104b8:	1805883a 	mov	r2,r3
 80104bc:	1085883a 	add	r2,r2,r2
 80104c0:	10c5883a 	add	r2,r2,r3
 80104c4:	100490ba 	slli	r2,r2,2
 80104c8:	00c20074 	movhi	r3,2049
 80104cc:	18cf5b04 	addi	r3,r3,15724
 80104d0:	10c5883a 	add	r2,r2,r3
 80104d4:	00000106 	br	80104dc <lseek+0x50>
 80104d8:	0005883a 	mov	r2,zero
 80104dc:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 80104e0:	e0bffe17 	ldw	r2,-8(fp)
 80104e4:	10001026 	beq	r2,zero,8010528 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 80104e8:	e0bffe17 	ldw	r2,-8(fp)
 80104ec:	10800017 	ldw	r2,0(r2)
 80104f0:	10800717 	ldw	r2,28(r2)
 80104f4:	10000926 	beq	r2,zero,801051c <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 80104f8:	e0bffe17 	ldw	r2,-8(fp)
 80104fc:	10800017 	ldw	r2,0(r2)
 8010500:	10800717 	ldw	r2,28(r2)
 8010504:	e1bffb17 	ldw	r6,-20(fp)
 8010508:	e17ffc17 	ldw	r5,-16(fp)
 801050c:	e13ffe17 	ldw	r4,-8(fp)
 8010510:	103ee83a 	callr	r2
 8010514:	e0bfff15 	stw	r2,-4(fp)
 8010518:	00000506 	br	8010530 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 801051c:	00bfde84 	movi	r2,-134
 8010520:	e0bfff15 	stw	r2,-4(fp)
 8010524:	00000206 	br	8010530 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
 8010528:	00bfebc4 	movi	r2,-81
 801052c:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 8010530:	e0bfff17 	ldw	r2,-4(fp)
 8010534:	1000070e 	bge	r2,zero,8010554 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
 8010538:	80104500 	call	8010450 <alt_get_errno>
 801053c:	1007883a 	mov	r3,r2
 8010540:	e0bfff17 	ldw	r2,-4(fp)
 8010544:	0085c83a 	sub	r2,zero,r2
 8010548:	18800015 	stw	r2,0(r3)
    rc = -1;
 801054c:	00bfffc4 	movi	r2,-1
 8010550:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 8010554:	e0bfff17 	ldw	r2,-4(fp)
}
 8010558:	e037883a 	mov	sp,fp
 801055c:	dfc00117 	ldw	ra,4(sp)
 8010560:	df000017 	ldw	fp,0(sp)
 8010564:	dec00204 	addi	sp,sp,8
 8010568:	f800283a 	ret

0801056c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 801056c:	defffd04 	addi	sp,sp,-12
 8010570:	dfc00215 	stw	ra,8(sp)
 8010574:	df000115 	stw	fp,4(sp)
 8010578:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 801057c:	0009883a 	mov	r4,zero
 8010580:	8010bec0 	call	8010bec <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8010584:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8010588:	8010c280 	call	8010c28 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 801058c:	01820074 	movhi	r6,2049
 8010590:	318cd504 	addi	r6,r6,13140
 8010594:	01420074 	movhi	r5,2049
 8010598:	294cd504 	addi	r5,r5,13140
 801059c:	01020074 	movhi	r4,2049
 80105a0:	210cd504 	addi	r4,r4,13140
 80105a4:	80121e00 	call	80121e0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80105a8:	8011d8c0 	call	8011d8c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80105ac:	01020074 	movhi	r4,2049
 80105b0:	21077c04 	addi	r4,r4,7664
 80105b4:	80127e00 	call	80127e0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80105b8:	d0a72317 	ldw	r2,-25460(gp)
 80105bc:	d0e72417 	ldw	r3,-25456(gp)
 80105c0:	d1272517 	ldw	r4,-25452(gp)
 80105c4:	200d883a 	mov	r6,r4
 80105c8:	180b883a 	mov	r5,r3
 80105cc:	1009883a 	mov	r4,r2
 80105d0:	80018640 	call	8001864 <main>
 80105d4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80105d8:	01000044 	movi	r4,1
 80105dc:	800feb80 	call	800feb8 <close>
  exit (result);
 80105e0:	e13fff17 	ldw	r4,-4(fp)
 80105e4:	80127f40 	call	80127f4 <exit>

080105e8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 80105e8:	defffe04 	addi	sp,sp,-8
 80105ec:	df000115 	stw	fp,4(sp)
 80105f0:	df000104 	addi	fp,sp,4
 80105f4:	e13fff15 	stw	r4,-4(fp)
}
 80105f8:	0001883a 	nop
 80105fc:	e037883a 	mov	sp,fp
 8010600:	df000017 	ldw	fp,0(sp)
 8010604:	dec00104 	addi	sp,sp,4
 8010608:	f800283a 	ret

0801060c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 801060c:	defffe04 	addi	sp,sp,-8
 8010610:	df000115 	stw	fp,4(sp)
 8010614:	df000104 	addi	fp,sp,4
 8010618:	e13fff15 	stw	r4,-4(fp)
}
 801061c:	0001883a 	nop
 8010620:	e037883a 	mov	sp,fp
 8010624:	df000017 	ldw	fp,0(sp)
 8010628:	dec00104 	addi	sp,sp,4
 801062c:	f800283a 	ret

08010630 <alt_get_errno>:
{
 8010630:	defffe04 	addi	sp,sp,-8
 8010634:	dfc00115 	stw	ra,4(sp)
 8010638:	df000015 	stw	fp,0(sp)
 801063c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010640:	d0a00d17 	ldw	r2,-32716(gp)
 8010644:	10000326 	beq	r2,zero,8010654 <alt_get_errno+0x24>
 8010648:	d0a00d17 	ldw	r2,-32716(gp)
 801064c:	103ee83a 	callr	r2
 8010650:	00000106 	br	8010658 <alt_get_errno+0x28>
 8010654:	d0a72104 	addi	r2,gp,-25468
}
 8010658:	e037883a 	mov	sp,fp
 801065c:	dfc00117 	ldw	ra,4(sp)
 8010660:	df000017 	ldw	fp,0(sp)
 8010664:	dec00204 	addi	sp,sp,8
 8010668:	f800283a 	ret

0801066c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 801066c:	defff904 	addi	sp,sp,-28
 8010670:	dfc00615 	stw	ra,24(sp)
 8010674:	df000515 	stw	fp,20(sp)
 8010678:	df000504 	addi	fp,sp,20
 801067c:	e13ffd15 	stw	r4,-12(fp)
 8010680:	e17ffc15 	stw	r5,-16(fp)
 8010684:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8010688:	e0bffd17 	ldw	r2,-12(fp)
 801068c:	10000916 	blt	r2,zero,80106b4 <read+0x48>
 8010690:	e0fffd17 	ldw	r3,-12(fp)
 8010694:	1805883a 	mov	r2,r3
 8010698:	1085883a 	add	r2,r2,r2
 801069c:	10c5883a 	add	r2,r2,r3
 80106a0:	100490ba 	slli	r2,r2,2
 80106a4:	00c20074 	movhi	r3,2049
 80106a8:	18cf5b04 	addi	r3,r3,15724
 80106ac:	10c5883a 	add	r2,r2,r3
 80106b0:	00000106 	br	80106b8 <read+0x4c>
 80106b4:	0005883a 	mov	r2,zero
 80106b8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 80106bc:	e0bfff17 	ldw	r2,-4(fp)
 80106c0:	10002226 	beq	r2,zero,801074c <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80106c4:	e0bfff17 	ldw	r2,-4(fp)
 80106c8:	10800217 	ldw	r2,8(r2)
 80106cc:	108000cc 	andi	r2,r2,3
 80106d0:	10800060 	cmpeqi	r2,r2,1
 80106d4:	1000181e 	bne	r2,zero,8010738 <read+0xcc>
        (fd->dev->read))
 80106d8:	e0bfff17 	ldw	r2,-4(fp)
 80106dc:	10800017 	ldw	r2,0(r2)
 80106e0:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80106e4:	10001426 	beq	r2,zero,8010738 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 80106e8:	e0bfff17 	ldw	r2,-4(fp)
 80106ec:	10800017 	ldw	r2,0(r2)
 80106f0:	10800517 	ldw	r2,20(r2)
 80106f4:	e0fffb17 	ldw	r3,-20(fp)
 80106f8:	180d883a 	mov	r6,r3
 80106fc:	e17ffc17 	ldw	r5,-16(fp)
 8010700:	e13fff17 	ldw	r4,-4(fp)
 8010704:	103ee83a 	callr	r2
 8010708:	e0bffe15 	stw	r2,-8(fp)
 801070c:	e0bffe17 	ldw	r2,-8(fp)
 8010710:	1000070e 	bge	r2,zero,8010730 <read+0xc4>
        {
          ALT_ERRNO = -rval;
 8010714:	80106300 	call	8010630 <alt_get_errno>
 8010718:	1007883a 	mov	r3,r2
 801071c:	e0bffe17 	ldw	r2,-8(fp)
 8010720:	0085c83a 	sub	r2,zero,r2
 8010724:	18800015 	stw	r2,0(r3)
          return -1;
 8010728:	00bfffc4 	movi	r2,-1
 801072c:	00000c06 	br	8010760 <read+0xf4>
        }
        return rval;
 8010730:	e0bffe17 	ldw	r2,-8(fp)
 8010734:	00000a06 	br	8010760 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8010738:	80106300 	call	8010630 <alt_get_errno>
 801073c:	1007883a 	mov	r3,r2
 8010740:	00800344 	movi	r2,13
 8010744:	18800015 	stw	r2,0(r3)
 8010748:	00000406 	br	801075c <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 801074c:	80106300 	call	8010630 <alt_get_errno>
 8010750:	1007883a 	mov	r3,r2
 8010754:	00801444 	movi	r2,81
 8010758:	18800015 	stw	r2,0(r3)
  }
  return -1;
 801075c:	00bfffc4 	movi	r2,-1
}
 8010760:	e037883a 	mov	sp,fp
 8010764:	dfc00117 	ldw	ra,4(sp)
 8010768:	df000017 	ldw	fp,0(sp)
 801076c:	dec00204 	addi	sp,sp,8
 8010770:	f800283a 	ret

08010774 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8010774:	defffe04 	addi	sp,sp,-8
 8010778:	df000115 	stw	fp,4(sp)
 801077c:	df000104 	addi	fp,sp,4
 8010780:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8010784:	e0bfff17 	ldw	r2,-4(fp)
 8010788:	108000d0 	cmplti	r2,r2,3
 801078c:	1000101e 	bne	r2,zero,80107d0 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 8010790:	e0ffff17 	ldw	r3,-4(fp)
 8010794:	1805883a 	mov	r2,r3
 8010798:	1085883a 	add	r2,r2,r2
 801079c:	10c5883a 	add	r2,r2,r3
 80107a0:	100490ba 	slli	r2,r2,2
 80107a4:	00c20074 	movhi	r3,2049
 80107a8:	10c7883a 	add	r3,r2,r3
 80107ac:	180f5d15 	stw	zero,15732(r3)
    alt_fd_list[fd].dev      = 0;
 80107b0:	e0ffff17 	ldw	r3,-4(fp)
 80107b4:	1805883a 	mov	r2,r3
 80107b8:	1085883a 	add	r2,r2,r2
 80107bc:	10c5883a 	add	r2,r2,r3
 80107c0:	100490ba 	slli	r2,r2,2
 80107c4:	00c20074 	movhi	r3,2049
 80107c8:	10c7883a 	add	r3,r2,r3
 80107cc:	180f5b15 	stw	zero,15724(r3)
  }
}
 80107d0:	0001883a 	nop
 80107d4:	e037883a 	mov	sp,fp
 80107d8:	df000017 	ldw	fp,0(sp)
 80107dc:	dec00104 	addi	sp,sp,4
 80107e0:	f800283a 	ret

080107e4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 80107e4:	defff904 	addi	sp,sp,-28
 80107e8:	df000615 	stw	fp,24(sp)
 80107ec:	df000604 	addi	fp,sp,24
 80107f0:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 80107f4:	0005303a 	rdctl	r2,status
 80107f8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80107fc:	e0fffd17 	ldw	r3,-12(fp)
 8010800:	00bfff84 	movi	r2,-2
 8010804:	1884703a 	and	r2,r3,r2
 8010808:	1001703a 	wrctl	status,r2
  return context;
 801080c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8010810:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8010814:	d0a00e17 	ldw	r2,-32712(gp)
 8010818:	10c000c4 	addi	r3,r2,3
 801081c:	00bfff04 	movi	r2,-4
 8010820:	1884703a 	and	r2,r3,r2
 8010824:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8010828:	d0e00e17 	ldw	r3,-32712(gp)
 801082c:	e0bffa17 	ldw	r2,-24(fp)
 8010830:	1887883a 	add	r3,r3,r2
 8010834:	00830034 	movhi	r2,3072
 8010838:	10800004 	addi	r2,r2,0
 801083c:	10c0072e 	bgeu	r2,r3,801085c <sbrk+0x78>
 8010840:	e0bfff17 	ldw	r2,-4(fp)
 8010844:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8010848:	e0bffc17 	ldw	r2,-16(fp)
 801084c:	1001703a 	wrctl	status,r2
}
 8010850:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8010854:	00bfffc4 	movi	r2,-1
 8010858:	00000c06 	br	801088c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 801085c:	d0a00e17 	ldw	r2,-32712(gp)
 8010860:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 8010864:	d0e00e17 	ldw	r3,-32712(gp)
 8010868:	e0bffa17 	ldw	r2,-24(fp)
 801086c:	1885883a 	add	r2,r3,r2
 8010870:	d0a00e15 	stw	r2,-32712(gp)
 8010874:	e0bfff17 	ldw	r2,-4(fp)
 8010878:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 801087c:	e0bffb17 	ldw	r2,-20(fp)
 8010880:	1001703a 	wrctl	status,r2
}
 8010884:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8010888:	e0bffe17 	ldw	r2,-8(fp)
} 
 801088c:	e037883a 	mov	sp,fp
 8010890:	df000017 	ldw	fp,0(sp)
 8010894:	dec00104 	addi	sp,sp,4
 8010898:	f800283a 	ret

0801089c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 801089c:	defffa04 	addi	sp,sp,-24
 80108a0:	df000515 	stw	fp,20(sp)
 80108a4:	df000504 	addi	fp,sp,20
 80108a8:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 80108ac:	0005303a 	rdctl	r2,status
 80108b0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80108b4:	e0fffc17 	ldw	r3,-16(fp)
 80108b8:	00bfff84 	movi	r2,-2
 80108bc:	1884703a 	and	r2,r3,r2
 80108c0:	1001703a 	wrctl	status,r2
  return context;
 80108c4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80108c8:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 80108cc:	e0bffb17 	ldw	r2,-20(fp)
 80108d0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80108d4:	e0bffd17 	ldw	r2,-12(fp)
 80108d8:	10800017 	ldw	r2,0(r2)
 80108dc:	e0fffd17 	ldw	r3,-12(fp)
 80108e0:	18c00117 	ldw	r3,4(r3)
 80108e4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80108e8:	e0bffd17 	ldw	r2,-12(fp)
 80108ec:	10800117 	ldw	r2,4(r2)
 80108f0:	e0fffd17 	ldw	r3,-12(fp)
 80108f4:	18c00017 	ldw	r3,0(r3)
 80108f8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80108fc:	e0bffd17 	ldw	r2,-12(fp)
 8010900:	e0fffd17 	ldw	r3,-12(fp)
 8010904:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8010908:	e0bffd17 	ldw	r2,-12(fp)
 801090c:	e0fffd17 	ldw	r3,-12(fp)
 8010910:	10c00015 	stw	r3,0(r2)
} 
 8010914:	0001883a 	nop
 8010918:	e0bfff17 	ldw	r2,-4(fp)
 801091c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 8010920:	e0bffe17 	ldw	r2,-8(fp)
 8010924:	1001703a 	wrctl	status,r2
}
 8010928:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 801092c:	0001883a 	nop
 8010930:	e037883a 	mov	sp,fp
 8010934:	df000017 	ldw	fp,0(sp)
 8010938:	dec00104 	addi	sp,sp,4
 801093c:	f800283a 	ret

08010940 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8010940:	defffb04 	addi	sp,sp,-20
 8010944:	dfc00415 	stw	ra,16(sp)
 8010948:	df000315 	stw	fp,12(sp)
 801094c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8010950:	d0a00f17 	ldw	r2,-32708(gp)
 8010954:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8010958:	d0a72717 	ldw	r2,-25444(gp)
 801095c:	10800044 	addi	r2,r2,1
 8010960:	d0a72715 	stw	r2,-25444(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010964:	00002e06 	br	8010a20 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8010968:	e0bfff17 	ldw	r2,-4(fp)
 801096c:	10800017 	ldw	r2,0(r2)
 8010970:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8010974:	e0bfff17 	ldw	r2,-4(fp)
 8010978:	10800403 	ldbu	r2,16(r2)
 801097c:	10803fcc 	andi	r2,r2,255
 8010980:	10000426 	beq	r2,zero,8010994 <alt_tick+0x54>
 8010984:	d0a72717 	ldw	r2,-25444(gp)
 8010988:	1000021e 	bne	r2,zero,8010994 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 801098c:	e0bfff17 	ldw	r2,-4(fp)
 8010990:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8010994:	e0bfff17 	ldw	r2,-4(fp)
 8010998:	10800217 	ldw	r2,8(r2)
 801099c:	d0e72717 	ldw	r3,-25444(gp)
 80109a0:	18801d36 	bltu	r3,r2,8010a18 <alt_tick+0xd8>
 80109a4:	e0bfff17 	ldw	r2,-4(fp)
 80109a8:	10800403 	ldbu	r2,16(r2)
 80109ac:	10803fcc 	andi	r2,r2,255
 80109b0:	1000191e 	bne	r2,zero,8010a18 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80109b4:	e0bfff17 	ldw	r2,-4(fp)
 80109b8:	10800317 	ldw	r2,12(r2)
 80109bc:	e0ffff17 	ldw	r3,-4(fp)
 80109c0:	18c00517 	ldw	r3,20(r3)
 80109c4:	1809883a 	mov	r4,r3
 80109c8:	103ee83a 	callr	r2
 80109cc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80109d0:	e0bffd17 	ldw	r2,-12(fp)
 80109d4:	1000031e 	bne	r2,zero,80109e4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80109d8:	e13fff17 	ldw	r4,-4(fp)
 80109dc:	801089c0 	call	801089c <alt_alarm_stop>
 80109e0:	00000d06 	br	8010a18 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80109e4:	e0bfff17 	ldw	r2,-4(fp)
 80109e8:	10c00217 	ldw	r3,8(r2)
 80109ec:	e0bffd17 	ldw	r2,-12(fp)
 80109f0:	1887883a 	add	r3,r3,r2
 80109f4:	e0bfff17 	ldw	r2,-4(fp)
 80109f8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80109fc:	e0bfff17 	ldw	r2,-4(fp)
 8010a00:	10c00217 	ldw	r3,8(r2)
 8010a04:	d0a72717 	ldw	r2,-25444(gp)
 8010a08:	1880032e 	bgeu	r3,r2,8010a18 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8010a0c:	e0bfff17 	ldw	r2,-4(fp)
 8010a10:	00c00044 	movi	r3,1
 8010a14:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8010a18:	e0bffe17 	ldw	r2,-8(fp)
 8010a1c:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010a20:	e0ffff17 	ldw	r3,-4(fp)
 8010a24:	d0a00f04 	addi	r2,gp,-32708
 8010a28:	18bfcf1e 	bne	r3,r2,8010968 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8010a2c:	0001883a 	nop
}
 8010a30:	0001883a 	nop
 8010a34:	e037883a 	mov	sp,fp
 8010a38:	dfc00117 	ldw	ra,4(sp)
 8010a3c:	df000017 	ldw	fp,0(sp)
 8010a40:	dec00204 	addi	sp,sp,8
 8010a44:	f800283a 	ret

08010a48 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8010a48:	defffd04 	addi	sp,sp,-12
 8010a4c:	dfc00215 	stw	ra,8(sp)
 8010a50:	df000115 	stw	fp,4(sp)
 8010a54:	df000104 	addi	fp,sp,4
 8010a58:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8010a5c:	e13fff17 	ldw	r4,-4(fp)
 8010a60:	8011b300 	call	8011b30 <alt_busy_sleep>
}
 8010a64:	e037883a 	mov	sp,fp
 8010a68:	dfc00117 	ldw	ra,4(sp)
 8010a6c:	df000017 	ldw	fp,0(sp)
 8010a70:	dec00204 	addi	sp,sp,8
 8010a74:	f800283a 	ret

08010a78 <alt_get_errno>:
{
 8010a78:	defffe04 	addi	sp,sp,-8
 8010a7c:	dfc00115 	stw	ra,4(sp)
 8010a80:	df000015 	stw	fp,0(sp)
 8010a84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010a88:	d0a00d17 	ldw	r2,-32716(gp)
 8010a8c:	10000326 	beq	r2,zero,8010a9c <alt_get_errno+0x24>
 8010a90:	d0a00d17 	ldw	r2,-32716(gp)
 8010a94:	103ee83a 	callr	r2
 8010a98:	00000106 	br	8010aa0 <alt_get_errno+0x28>
 8010a9c:	d0a72104 	addi	r2,gp,-25468
}
 8010aa0:	e037883a 	mov	sp,fp
 8010aa4:	dfc00117 	ldw	ra,4(sp)
 8010aa8:	df000017 	ldw	fp,0(sp)
 8010aac:	dec00204 	addi	sp,sp,8
 8010ab0:	f800283a 	ret

08010ab4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8010ab4:	defff904 	addi	sp,sp,-28
 8010ab8:	dfc00615 	stw	ra,24(sp)
 8010abc:	df000515 	stw	fp,20(sp)
 8010ac0:	df000504 	addi	fp,sp,20
 8010ac4:	e13ffd15 	stw	r4,-12(fp)
 8010ac8:	e17ffc15 	stw	r5,-16(fp)
 8010acc:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8010ad0:	e0bffd17 	ldw	r2,-12(fp)
 8010ad4:	10000916 	blt	r2,zero,8010afc <write+0x48>
 8010ad8:	e0fffd17 	ldw	r3,-12(fp)
 8010adc:	1805883a 	mov	r2,r3
 8010ae0:	1085883a 	add	r2,r2,r2
 8010ae4:	10c5883a 	add	r2,r2,r3
 8010ae8:	100490ba 	slli	r2,r2,2
 8010aec:	00c20074 	movhi	r3,2049
 8010af0:	18cf5b04 	addi	r3,r3,15724
 8010af4:	10c5883a 	add	r2,r2,r3
 8010af8:	00000106 	br	8010b00 <write+0x4c>
 8010afc:	0005883a 	mov	r2,zero
 8010b00:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 8010b04:	e0bfff17 	ldw	r2,-4(fp)
 8010b08:	10002126 	beq	r2,zero,8010b90 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8010b0c:	e0bfff17 	ldw	r2,-4(fp)
 8010b10:	10800217 	ldw	r2,8(r2)
 8010b14:	108000cc 	andi	r2,r2,3
 8010b18:	10001826 	beq	r2,zero,8010b7c <write+0xc8>
 8010b1c:	e0bfff17 	ldw	r2,-4(fp)
 8010b20:	10800017 	ldw	r2,0(r2)
 8010b24:	10800617 	ldw	r2,24(r2)
 8010b28:	10001426 	beq	r2,zero,8010b7c <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8010b2c:	e0bfff17 	ldw	r2,-4(fp)
 8010b30:	10800017 	ldw	r2,0(r2)
 8010b34:	10800617 	ldw	r2,24(r2)
 8010b38:	e0fffb17 	ldw	r3,-20(fp)
 8010b3c:	180d883a 	mov	r6,r3
 8010b40:	e17ffc17 	ldw	r5,-16(fp)
 8010b44:	e13fff17 	ldw	r4,-4(fp)
 8010b48:	103ee83a 	callr	r2
 8010b4c:	e0bffe15 	stw	r2,-8(fp)
 8010b50:	e0bffe17 	ldw	r2,-8(fp)
 8010b54:	1000070e 	bge	r2,zero,8010b74 <write+0xc0>
      {
        ALT_ERRNO = -rval;
 8010b58:	8010a780 	call	8010a78 <alt_get_errno>
 8010b5c:	1007883a 	mov	r3,r2
 8010b60:	e0bffe17 	ldw	r2,-8(fp)
 8010b64:	0085c83a 	sub	r2,zero,r2
 8010b68:	18800015 	stw	r2,0(r3)
        return -1;
 8010b6c:	00bfffc4 	movi	r2,-1
 8010b70:	00000c06 	br	8010ba4 <write+0xf0>
      }
      return rval;
 8010b74:	e0bffe17 	ldw	r2,-8(fp)
 8010b78:	00000a06 	br	8010ba4 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8010b7c:	8010a780 	call	8010a78 <alt_get_errno>
 8010b80:	1007883a 	mov	r3,r2
 8010b84:	00800344 	movi	r2,13
 8010b88:	18800015 	stw	r2,0(r3)
 8010b8c:	00000406 	br	8010ba0 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8010b90:	8010a780 	call	8010a78 <alt_get_errno>
 8010b94:	1007883a 	mov	r3,r2
 8010b98:	00801444 	movi	r2,81
 8010b9c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8010ba0:	00bfffc4 	movi	r2,-1
}
 8010ba4:	e037883a 	mov	sp,fp
 8010ba8:	dfc00117 	ldw	ra,4(sp)
 8010bac:	df000017 	ldw	fp,0(sp)
 8010bb0:	dec00204 	addi	sp,sp,8
 8010bb4:	f800283a 	ret

08010bb8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8010bb8:	defffd04 	addi	sp,sp,-12
 8010bbc:	dfc00215 	stw	ra,8(sp)
 8010bc0:	df000115 	stw	fp,4(sp)
 8010bc4:	df000104 	addi	fp,sp,4
 8010bc8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8010bcc:	d1600a04 	addi	r5,gp,-32728
 8010bd0:	e13fff17 	ldw	r4,-4(fp)
 8010bd4:	8011ce40 	call	8011ce4 <alt_dev_llist_insert>
}
 8010bd8:	e037883a 	mov	sp,fp
 8010bdc:	dfc00117 	ldw	ra,4(sp)
 8010be0:	df000017 	ldw	fp,0(sp)
 8010be4:	dec00204 	addi	sp,sp,8
 8010be8:	f800283a 	ret

08010bec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8010bec:	defffd04 	addi	sp,sp,-12
 8010bf0:	dfc00215 	stw	ra,8(sp)
 8010bf4:	df000115 	stw	fp,4(sp)
 8010bf8:	df000104 	addi	fp,sp,4
 8010bfc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8010c00:	80124d40 	call	80124d4 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8010c04:	00800044 	movi	r2,1
 8010c08:	1001703a 	wrctl	status,r2
}
 8010c0c:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 8010c10:	0001883a 	nop
 8010c14:	e037883a 	mov	sp,fp
 8010c18:	dfc00117 	ldw	ra,4(sp)
 8010c1c:	df000017 	ldw	fp,0(sp)
 8010c20:	dec00204 	addi	sp,sp,8
 8010c24:	f800283a 	ret

08010c28 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8010c28:	defffe04 	addi	sp,sp,-8
 8010c2c:	dfc00115 	stw	ra,4(sp)
 8010c30:	df000015 	stw	fp,0(sp)
 8010c34:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8010c38:	01c0fa04 	movi	r7,1000
 8010c3c:	01800084 	movi	r6,2
 8010c40:	000b883a 	mov	r5,zero
 8010c44:	01002004 	movi	r4,128
 8010c48:	80119780 	call	8011978 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8010c4c:	01800044 	movi	r6,1
 8010c50:	000b883a 	mov	r5,zero
 8010c54:	01020074 	movhi	r4,2049
 8010c58:	210fc504 	addi	r4,r4,16148
 8010c5c:	8010df00 	call	8010df0 <altera_avalon_jtag_uart_init>
 8010c60:	01020074 	movhi	r4,2049
 8010c64:	210fbb04 	addi	r4,r4,16108
 8010c68:	8010bb80 	call	8010bb8 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 8010c6c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8010c70:	0001883a 	nop
}
 8010c74:	0001883a 	nop
 8010c78:	e037883a 	mov	sp,fp
 8010c7c:	dfc00117 	ldw	ra,4(sp)
 8010c80:	df000017 	ldw	fp,0(sp)
 8010c84:	dec00204 	addi	sp,sp,8
 8010c88:	f800283a 	ret

08010c8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8010c8c:	defffa04 	addi	sp,sp,-24
 8010c90:	dfc00515 	stw	ra,20(sp)
 8010c94:	df000415 	stw	fp,16(sp)
 8010c98:	df000404 	addi	fp,sp,16
 8010c9c:	e13ffe15 	stw	r4,-8(fp)
 8010ca0:	e17ffd15 	stw	r5,-12(fp)
 8010ca4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8010ca8:	e0bffe17 	ldw	r2,-8(fp)
 8010cac:	10800017 	ldw	r2,0(r2)
 8010cb0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8010cb4:	e0bfff17 	ldw	r2,-4(fp)
 8010cb8:	10c00a04 	addi	r3,r2,40
 8010cbc:	e0bffe17 	ldw	r2,-8(fp)
 8010cc0:	10800217 	ldw	r2,8(r2)
 8010cc4:	100f883a 	mov	r7,r2
 8010cc8:	e1bffc17 	ldw	r6,-16(fp)
 8010ccc:	e17ffd17 	ldw	r5,-12(fp)
 8010cd0:	1809883a 	mov	r4,r3
 8010cd4:	80112b80 	call	80112b8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8010cd8:	e037883a 	mov	sp,fp
 8010cdc:	dfc00117 	ldw	ra,4(sp)
 8010ce0:	df000017 	ldw	fp,0(sp)
 8010ce4:	dec00204 	addi	sp,sp,8
 8010ce8:	f800283a 	ret

08010cec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8010cec:	defffa04 	addi	sp,sp,-24
 8010cf0:	dfc00515 	stw	ra,20(sp)
 8010cf4:	df000415 	stw	fp,16(sp)
 8010cf8:	df000404 	addi	fp,sp,16
 8010cfc:	e13ffe15 	stw	r4,-8(fp)
 8010d00:	e17ffd15 	stw	r5,-12(fp)
 8010d04:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8010d08:	e0bffe17 	ldw	r2,-8(fp)
 8010d0c:	10800017 	ldw	r2,0(r2)
 8010d10:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8010d14:	e0bfff17 	ldw	r2,-4(fp)
 8010d18:	10c00a04 	addi	r3,r2,40
 8010d1c:	e0bffe17 	ldw	r2,-8(fp)
 8010d20:	10800217 	ldw	r2,8(r2)
 8010d24:	100f883a 	mov	r7,r2
 8010d28:	e1bffc17 	ldw	r6,-16(fp)
 8010d2c:	e17ffd17 	ldw	r5,-12(fp)
 8010d30:	1809883a 	mov	r4,r3
 8010d34:	80114d80 	call	80114d8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8010d38:	e037883a 	mov	sp,fp
 8010d3c:	dfc00117 	ldw	ra,4(sp)
 8010d40:	df000017 	ldw	fp,0(sp)
 8010d44:	dec00204 	addi	sp,sp,8
 8010d48:	f800283a 	ret

08010d4c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8010d4c:	defffc04 	addi	sp,sp,-16
 8010d50:	dfc00315 	stw	ra,12(sp)
 8010d54:	df000215 	stw	fp,8(sp)
 8010d58:	df000204 	addi	fp,sp,8
 8010d5c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8010d60:	e0bffe17 	ldw	r2,-8(fp)
 8010d64:	10800017 	ldw	r2,0(r2)
 8010d68:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8010d6c:	e0bfff17 	ldw	r2,-4(fp)
 8010d70:	10c00a04 	addi	r3,r2,40
 8010d74:	e0bffe17 	ldw	r2,-8(fp)
 8010d78:	10800217 	ldw	r2,8(r2)
 8010d7c:	100b883a 	mov	r5,r2
 8010d80:	1809883a 	mov	r4,r3
 8010d84:	801115c0 	call	801115c <altera_avalon_jtag_uart_close>
}
 8010d88:	e037883a 	mov	sp,fp
 8010d8c:	dfc00117 	ldw	ra,4(sp)
 8010d90:	df000017 	ldw	fp,0(sp)
 8010d94:	dec00204 	addi	sp,sp,8
 8010d98:	f800283a 	ret

08010d9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8010d9c:	defffa04 	addi	sp,sp,-24
 8010da0:	dfc00515 	stw	ra,20(sp)
 8010da4:	df000415 	stw	fp,16(sp)
 8010da8:	df000404 	addi	fp,sp,16
 8010dac:	e13ffe15 	stw	r4,-8(fp)
 8010db0:	e17ffd15 	stw	r5,-12(fp)
 8010db4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8010db8:	e0bffe17 	ldw	r2,-8(fp)
 8010dbc:	10800017 	ldw	r2,0(r2)
 8010dc0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8010dc4:	e0bfff17 	ldw	r2,-4(fp)
 8010dc8:	10800a04 	addi	r2,r2,40
 8010dcc:	e1bffc17 	ldw	r6,-16(fp)
 8010dd0:	e17ffd17 	ldw	r5,-12(fp)
 8010dd4:	1009883a 	mov	r4,r2
 8010dd8:	80111c40 	call	80111c4 <altera_avalon_jtag_uart_ioctl>
}
 8010ddc:	e037883a 	mov	sp,fp
 8010de0:	dfc00117 	ldw	ra,4(sp)
 8010de4:	df000017 	ldw	fp,0(sp)
 8010de8:	dec00204 	addi	sp,sp,8
 8010dec:	f800283a 	ret

08010df0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8010df0:	defffa04 	addi	sp,sp,-24
 8010df4:	dfc00515 	stw	ra,20(sp)
 8010df8:	df000415 	stw	fp,16(sp)
 8010dfc:	df000404 	addi	fp,sp,16
 8010e00:	e13fff15 	stw	r4,-4(fp)
 8010e04:	e17ffe15 	stw	r5,-8(fp)
 8010e08:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010e0c:	e0bfff17 	ldw	r2,-4(fp)
 8010e10:	00c00044 	movi	r3,1
 8010e14:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8010e18:	e0bfff17 	ldw	r2,-4(fp)
 8010e1c:	10800017 	ldw	r2,0(r2)
 8010e20:	10800104 	addi	r2,r2,4
 8010e24:	1007883a 	mov	r3,r2
 8010e28:	e0bfff17 	ldw	r2,-4(fp)
 8010e2c:	10800817 	ldw	r2,32(r2)
 8010e30:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8010e34:	e0bffe17 	ldw	r2,-8(fp)
 8010e38:	e0fffd17 	ldw	r3,-12(fp)
 8010e3c:	d8000015 	stw	zero,0(sp)
 8010e40:	e1ffff17 	ldw	r7,-4(fp)
 8010e44:	01820074 	movhi	r6,2049
 8010e48:	3183ac04 	addi	r6,r6,3760
 8010e4c:	180b883a 	mov	r5,r3
 8010e50:	1009883a 	mov	r4,r2
 8010e54:	8011e740 	call	8011e74 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8010e58:	e0bfff17 	ldw	r2,-4(fp)
 8010e5c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8010e60:	e0bfff17 	ldw	r2,-4(fp)
 8010e64:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8010e68:	d0e72617 	ldw	r3,-25448(gp)
 8010e6c:	e1ffff17 	ldw	r7,-4(fp)
 8010e70:	01820074 	movhi	r6,2049
 8010e74:	31842f04 	addi	r6,r6,4284
 8010e78:	180b883a 	mov	r5,r3
 8010e7c:	1009883a 	mov	r4,r2
 8010e80:	80119fc0 	call	80119fc <alt_alarm_start>
 8010e84:	1000040e 	bge	r2,zero,8010e98 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8010e88:	e0ffff17 	ldw	r3,-4(fp)
 8010e8c:	00a00034 	movhi	r2,32768
 8010e90:	10bfffc4 	addi	r2,r2,-1
 8010e94:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8010e98:	0001883a 	nop
 8010e9c:	e037883a 	mov	sp,fp
 8010ea0:	dfc00117 	ldw	ra,4(sp)
 8010ea4:	df000017 	ldw	fp,0(sp)
 8010ea8:	dec00204 	addi	sp,sp,8
 8010eac:	f800283a 	ret

08010eb0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8010eb0:	defff804 	addi	sp,sp,-32
 8010eb4:	df000715 	stw	fp,28(sp)
 8010eb8:	df000704 	addi	fp,sp,28
 8010ebc:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8010ec0:	e0bff917 	ldw	r2,-28(fp)
 8010ec4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 8010ec8:	e0bffd17 	ldw	r2,-12(fp)
 8010ecc:	10800017 	ldw	r2,0(r2)
 8010ed0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8010ed4:	e0bffc17 	ldw	r2,-16(fp)
 8010ed8:	10800104 	addi	r2,r2,4
 8010edc:	10800037 	ldwio	r2,0(r2)
 8010ee0:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8010ee4:	e0bffb17 	ldw	r2,-20(fp)
 8010ee8:	1080c00c 	andi	r2,r2,768
 8010eec:	10006d26 	beq	r2,zero,80110a4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8010ef0:	e0bffb17 	ldw	r2,-20(fp)
 8010ef4:	1080400c 	andi	r2,r2,256
 8010ef8:	10003526 	beq	r2,zero,8010fd0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8010efc:	00800074 	movhi	r2,1
 8010f00:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010f04:	e0bffd17 	ldw	r2,-12(fp)
 8010f08:	10800a17 	ldw	r2,40(r2)
 8010f0c:	10800044 	addi	r2,r2,1
 8010f10:	1081ffcc 	andi	r2,r2,2047
 8010f14:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 8010f18:	e0bffd17 	ldw	r2,-12(fp)
 8010f1c:	10800b17 	ldw	r2,44(r2)
 8010f20:	e0fffa17 	ldw	r3,-24(fp)
 8010f24:	18801526 	beq	r3,r2,8010f7c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8010f28:	e0bffc17 	ldw	r2,-16(fp)
 8010f2c:	10800037 	ldwio	r2,0(r2)
 8010f30:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8010f34:	e0bfff17 	ldw	r2,-4(fp)
 8010f38:	10a0000c 	andi	r2,r2,32768
 8010f3c:	10001126 	beq	r2,zero,8010f84 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8010f40:	e0bffd17 	ldw	r2,-12(fp)
 8010f44:	10800a17 	ldw	r2,40(r2)
 8010f48:	e0ffff17 	ldw	r3,-4(fp)
 8010f4c:	1809883a 	mov	r4,r3
 8010f50:	e0fffd17 	ldw	r3,-12(fp)
 8010f54:	1885883a 	add	r2,r3,r2
 8010f58:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010f5c:	e0bffd17 	ldw	r2,-12(fp)
 8010f60:	10800a17 	ldw	r2,40(r2)
 8010f64:	10800044 	addi	r2,r2,1
 8010f68:	10c1ffcc 	andi	r3,r2,2047
 8010f6c:	e0bffd17 	ldw	r2,-12(fp)
 8010f70:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 8010f74:	0001883a 	nop
      {
 8010f78:	003fe206 	br	8010f04 <altera_avalon_jtag_uart_irq+0x54>
          break;
 8010f7c:	0001883a 	nop
 8010f80:	00000106 	br	8010f88 <altera_avalon_jtag_uart_irq+0xd8>
          break;
 8010f84:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8010f88:	e0bfff17 	ldw	r2,-4(fp)
 8010f8c:	10bfffec 	andhi	r2,r2,65535
 8010f90:	10000f26 	beq	r2,zero,8010fd0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010f94:	e0bffd17 	ldw	r2,-12(fp)
 8010f98:	10c00817 	ldw	r3,32(r2)
 8010f9c:	00bfff84 	movi	r2,-2
 8010fa0:	1886703a 	and	r3,r3,r2
 8010fa4:	e0bffd17 	ldw	r2,-12(fp)
 8010fa8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8010fac:	e0bffc17 	ldw	r2,-16(fp)
 8010fb0:	10800104 	addi	r2,r2,4
 8010fb4:	1007883a 	mov	r3,r2
 8010fb8:	e0bffd17 	ldw	r2,-12(fp)
 8010fbc:	10800817 	ldw	r2,32(r2)
 8010fc0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8010fc4:	e0bffc17 	ldw	r2,-16(fp)
 8010fc8:	10800104 	addi	r2,r2,4
 8010fcc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8010fd0:	e0bffb17 	ldw	r2,-20(fp)
 8010fd4:	1080800c 	andi	r2,r2,512
 8010fd8:	103fbe26 	beq	r2,zero,8010ed4 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8010fdc:	e0bffb17 	ldw	r2,-20(fp)
 8010fe0:	1004d43a 	srli	r2,r2,16
 8010fe4:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8010fe8:	00001406 	br	801103c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8010fec:	e0bffc17 	ldw	r2,-16(fp)
 8010ff0:	e0fffd17 	ldw	r3,-12(fp)
 8010ff4:	18c00d17 	ldw	r3,52(r3)
 8010ff8:	e13ffd17 	ldw	r4,-12(fp)
 8010ffc:	20c7883a 	add	r3,r4,r3
 8011000:	18c20e03 	ldbu	r3,2104(r3)
 8011004:	18c03fcc 	andi	r3,r3,255
 8011008:	18c0201c 	xori	r3,r3,128
 801100c:	18ffe004 	addi	r3,r3,-128
 8011010:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8011014:	e0bffd17 	ldw	r2,-12(fp)
 8011018:	10800d17 	ldw	r2,52(r2)
 801101c:	10800044 	addi	r2,r2,1
 8011020:	10c1ffcc 	andi	r3,r2,2047
 8011024:	e0bffd17 	ldw	r2,-12(fp)
 8011028:	10c00d15 	stw	r3,52(r2)
 801102c:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8011030:	e0bffe17 	ldw	r2,-8(fp)
 8011034:	10bfffc4 	addi	r2,r2,-1
 8011038:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 801103c:	e0bffe17 	ldw	r2,-8(fp)
 8011040:	10000526 	beq	r2,zero,8011058 <altera_avalon_jtag_uart_irq+0x1a8>
 8011044:	e0bffd17 	ldw	r2,-12(fp)
 8011048:	10c00d17 	ldw	r3,52(r2)
 801104c:	e0bffd17 	ldw	r2,-12(fp)
 8011050:	10800c17 	ldw	r2,48(r2)
 8011054:	18bfe51e 	bne	r3,r2,8010fec <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
 8011058:	e0bffe17 	ldw	r2,-8(fp)
 801105c:	103f9d26 	beq	r2,zero,8010ed4 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8011060:	e0bffd17 	ldw	r2,-12(fp)
 8011064:	10c00817 	ldw	r3,32(r2)
 8011068:	00bfff44 	movi	r2,-3
 801106c:	1886703a 	and	r3,r3,r2
 8011070:	e0bffd17 	ldw	r2,-12(fp)
 8011074:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8011078:	e0bffd17 	ldw	r2,-12(fp)
 801107c:	10800017 	ldw	r2,0(r2)
 8011080:	10800104 	addi	r2,r2,4
 8011084:	1007883a 	mov	r3,r2
 8011088:	e0bffd17 	ldw	r2,-12(fp)
 801108c:	10800817 	ldw	r2,32(r2)
 8011090:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8011094:	e0bffc17 	ldw	r2,-16(fp)
 8011098:	10800104 	addi	r2,r2,4
 801109c:	10800037 	ldwio	r2,0(r2)
  {
 80110a0:	003f8c06 	br	8010ed4 <altera_avalon_jtag_uart_irq+0x24>
      break;
 80110a4:	0001883a 	nop
      }
    }
  }
}
 80110a8:	0001883a 	nop
 80110ac:	e037883a 	mov	sp,fp
 80110b0:	df000017 	ldw	fp,0(sp)
 80110b4:	dec00104 	addi	sp,sp,4
 80110b8:	f800283a 	ret

080110bc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80110bc:	defffc04 	addi	sp,sp,-16
 80110c0:	df000315 	stw	fp,12(sp)
 80110c4:	df000304 	addi	fp,sp,12
 80110c8:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80110cc:	e0bffd17 	ldw	r2,-12(fp)
 80110d0:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80110d4:	e0bfff17 	ldw	r2,-4(fp)
 80110d8:	10800017 	ldw	r2,0(r2)
 80110dc:	10800104 	addi	r2,r2,4
 80110e0:	10800037 	ldwio	r2,0(r2)
 80110e4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80110e8:	e0bffe17 	ldw	r2,-8(fp)
 80110ec:	1081000c 	andi	r2,r2,1024
 80110f0:	10000b26 	beq	r2,zero,8011120 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80110f4:	e0bfff17 	ldw	r2,-4(fp)
 80110f8:	10800017 	ldw	r2,0(r2)
 80110fc:	10800104 	addi	r2,r2,4
 8011100:	1007883a 	mov	r3,r2
 8011104:	e0bfff17 	ldw	r2,-4(fp)
 8011108:	10800817 	ldw	r2,32(r2)
 801110c:	10810014 	ori	r2,r2,1024
 8011110:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8011114:	e0bfff17 	ldw	r2,-4(fp)
 8011118:	10000915 	stw	zero,36(r2)
 801111c:	00000a06 	br	8011148 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8011120:	e0bfff17 	ldw	r2,-4(fp)
 8011124:	10c00917 	ldw	r3,36(r2)
 8011128:	00a00034 	movhi	r2,32768
 801112c:	10bfff04 	addi	r2,r2,-4
 8011130:	10c00536 	bltu	r2,r3,8011148 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8011134:	e0bfff17 	ldw	r2,-4(fp)
 8011138:	10800917 	ldw	r2,36(r2)
 801113c:	10c00044 	addi	r3,r2,1
 8011140:	e0bfff17 	ldw	r2,-4(fp)
 8011144:	10c00915 	stw	r3,36(r2)
 8011148:	d0a72617 	ldw	r2,-25448(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 801114c:	e037883a 	mov	sp,fp
 8011150:	df000017 	ldw	fp,0(sp)
 8011154:	dec00104 	addi	sp,sp,4
 8011158:	f800283a 	ret

0801115c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 801115c:	defffd04 	addi	sp,sp,-12
 8011160:	df000215 	stw	fp,8(sp)
 8011164:	df000204 	addi	fp,sp,8
 8011168:	e13fff15 	stw	r4,-4(fp)
 801116c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8011170:	00000506 	br	8011188 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8011174:	e0bffe17 	ldw	r2,-8(fp)
 8011178:	1090000c 	andi	r2,r2,16384
 801117c:	10000226 	beq	r2,zero,8011188 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8011180:	00bffd44 	movi	r2,-11
 8011184:	00000b06 	br	80111b4 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8011188:	e0bfff17 	ldw	r2,-4(fp)
 801118c:	10c00d17 	ldw	r3,52(r2)
 8011190:	e0bfff17 	ldw	r2,-4(fp)
 8011194:	10800c17 	ldw	r2,48(r2)
 8011198:	18800526 	beq	r3,r2,80111b0 <altera_avalon_jtag_uart_close+0x54>
 801119c:	e0bfff17 	ldw	r2,-4(fp)
 80111a0:	10c00917 	ldw	r3,36(r2)
 80111a4:	e0bfff17 	ldw	r2,-4(fp)
 80111a8:	10800117 	ldw	r2,4(r2)
 80111ac:	18bff136 	bltu	r3,r2,8011174 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 80111b0:	0005883a 	mov	r2,zero
}
 80111b4:	e037883a 	mov	sp,fp
 80111b8:	df000017 	ldw	fp,0(sp)
 80111bc:	dec00104 	addi	sp,sp,4
 80111c0:	f800283a 	ret

080111c4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80111c4:	defffa04 	addi	sp,sp,-24
 80111c8:	df000515 	stw	fp,20(sp)
 80111cc:	df000504 	addi	fp,sp,20
 80111d0:	e13ffd15 	stw	r4,-12(fp)
 80111d4:	e17ffc15 	stw	r5,-16(fp)
 80111d8:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 80111dc:	00bff9c4 	movi	r2,-25
 80111e0:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 80111e4:	e0bffc17 	ldw	r2,-16(fp)
 80111e8:	109a8060 	cmpeqi	r2,r2,27137
 80111ec:	1000041e 	bne	r2,zero,8011200 <altera_avalon_jtag_uart_ioctl+0x3c>
 80111f0:	e0bffc17 	ldw	r2,-16(fp)
 80111f4:	109a80a0 	cmpeqi	r2,r2,27138
 80111f8:	1000181e 	bne	r2,zero,801125c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 80111fc:	00002906 	br	80112a4 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 8011200:	e0bffd17 	ldw	r2,-12(fp)
 8011204:	10c00117 	ldw	r3,4(r2)
 8011208:	00a00034 	movhi	r2,32768
 801120c:	10bfffc4 	addi	r2,r2,-1
 8011210:	18802126 	beq	r3,r2,8011298 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 8011214:	e0bffb17 	ldw	r2,-20(fp)
 8011218:	10800017 	ldw	r2,0(r2)
 801121c:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8011220:	e0bffe17 	ldw	r2,-8(fp)
 8011224:	10800090 	cmplti	r2,r2,2
 8011228:	1000061e 	bne	r2,zero,8011244 <altera_avalon_jtag_uart_ioctl+0x80>
 801122c:	e0fffe17 	ldw	r3,-8(fp)
 8011230:	00a00034 	movhi	r2,32768
 8011234:	10bfffc4 	addi	r2,r2,-1
 8011238:	18800226 	beq	r3,r2,8011244 <altera_avalon_jtag_uart_ioctl+0x80>
 801123c:	e0bffe17 	ldw	r2,-8(fp)
 8011240:	00000206 	br	801124c <altera_avalon_jtag_uart_ioctl+0x88>
 8011244:	00a00034 	movhi	r2,32768
 8011248:	10bfff84 	addi	r2,r2,-2
 801124c:	e0fffd17 	ldw	r3,-12(fp)
 8011250:	18800115 	stw	r2,4(r3)
      rc = 0;
 8011254:	e03fff15 	stw	zero,-4(fp)
    break;
 8011258:	00000f06 	br	8011298 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 801125c:	e0bffd17 	ldw	r2,-12(fp)
 8011260:	10c00117 	ldw	r3,4(r2)
 8011264:	00a00034 	movhi	r2,32768
 8011268:	10bfffc4 	addi	r2,r2,-1
 801126c:	18800c26 	beq	r3,r2,80112a0 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8011270:	e0bffd17 	ldw	r2,-12(fp)
 8011274:	10c00917 	ldw	r3,36(r2)
 8011278:	e0bffd17 	ldw	r2,-12(fp)
 801127c:	10800117 	ldw	r2,4(r2)
 8011280:	1885803a 	cmpltu	r2,r3,r2
 8011284:	10c03fcc 	andi	r3,r2,255
 8011288:	e0bffb17 	ldw	r2,-20(fp)
 801128c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8011290:	e03fff15 	stw	zero,-4(fp)
    break;
 8011294:	00000206 	br	80112a0 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 8011298:	0001883a 	nop
 801129c:	00000106 	br	80112a4 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 80112a0:	0001883a 	nop
  }

  return rc;
 80112a4:	e0bfff17 	ldw	r2,-4(fp)
}
 80112a8:	e037883a 	mov	sp,fp
 80112ac:	df000017 	ldw	fp,0(sp)
 80112b0:	dec00104 	addi	sp,sp,4
 80112b4:	f800283a 	ret

080112b8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80112b8:	defff304 	addi	sp,sp,-52
 80112bc:	dfc00c15 	stw	ra,48(sp)
 80112c0:	df000b15 	stw	fp,44(sp)
 80112c4:	df000b04 	addi	fp,sp,44
 80112c8:	e13ff815 	stw	r4,-32(fp)
 80112cc:	e17ff715 	stw	r5,-36(fp)
 80112d0:	e1bff615 	stw	r6,-40(fp)
 80112d4:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 80112d8:	e0bff717 	ldw	r2,-36(fp)
 80112dc:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80112e0:	00004706 	br	8011400 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80112e4:	e0bff817 	ldw	r2,-32(fp)
 80112e8:	10800a17 	ldw	r2,40(r2)
 80112ec:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 80112f0:	e0bff817 	ldw	r2,-32(fp)
 80112f4:	10800b17 	ldw	r2,44(r2)
 80112f8:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 80112fc:	e0fffd17 	ldw	r3,-12(fp)
 8011300:	e0bffc17 	ldw	r2,-16(fp)
 8011304:	18800536 	bltu	r3,r2,801131c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8011308:	e0fffd17 	ldw	r3,-12(fp)
 801130c:	e0bffc17 	ldw	r2,-16(fp)
 8011310:	1885c83a 	sub	r2,r3,r2
 8011314:	e0bffe15 	stw	r2,-8(fp)
 8011318:	00000406 	br	801132c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 801131c:	00c20004 	movi	r3,2048
 8011320:	e0bffc17 	ldw	r2,-16(fp)
 8011324:	1885c83a 	sub	r2,r3,r2
 8011328:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 801132c:	e0bffe17 	ldw	r2,-8(fp)
 8011330:	10001e26 	beq	r2,zero,80113ac <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8011334:	e0fff617 	ldw	r3,-40(fp)
 8011338:	e0bffe17 	ldw	r2,-8(fp)
 801133c:	1880022e 	bgeu	r3,r2,8011348 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8011340:	e0bff617 	ldw	r2,-40(fp)
 8011344:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8011348:	e0bff817 	ldw	r2,-32(fp)
 801134c:	10c00e04 	addi	r3,r2,56
 8011350:	e0bffc17 	ldw	r2,-16(fp)
 8011354:	1885883a 	add	r2,r3,r2
 8011358:	e1bffe17 	ldw	r6,-8(fp)
 801135c:	100b883a 	mov	r5,r2
 8011360:	e13fff17 	ldw	r4,-4(fp)
 8011364:	80087100 	call	8008710 <memcpy>
      ptr   += n;
 8011368:	e0ffff17 	ldw	r3,-4(fp)
 801136c:	e0bffe17 	ldw	r2,-8(fp)
 8011370:	1885883a 	add	r2,r3,r2
 8011374:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 8011378:	e0fff617 	ldw	r3,-40(fp)
 801137c:	e0bffe17 	ldw	r2,-8(fp)
 8011380:	1885c83a 	sub	r2,r3,r2
 8011384:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8011388:	e0fffc17 	ldw	r3,-16(fp)
 801138c:	e0bffe17 	ldw	r2,-8(fp)
 8011390:	1885883a 	add	r2,r3,r2
 8011394:	10c1ffcc 	andi	r3,r2,2047
 8011398:	e0bff817 	ldw	r2,-32(fp)
 801139c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80113a0:	e0bff617 	ldw	r2,-40(fp)
 80113a4:	00bfcf16 	blt	zero,r2,80112e4 <altera_avalon_jtag_uart_read+0x2c>
 80113a8:	00000106 	br	80113b0 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 80113ac:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 80113b0:	e0ffff17 	ldw	r3,-4(fp)
 80113b4:	e0bff717 	ldw	r2,-36(fp)
 80113b8:	1880141e 	bne	r3,r2,801140c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80113bc:	e0bff517 	ldw	r2,-44(fp)
 80113c0:	1090000c 	andi	r2,r2,16384
 80113c4:	1000131e 	bne	r2,zero,8011414 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80113c8:	0001883a 	nop
 80113cc:	e0bff817 	ldw	r2,-32(fp)
 80113d0:	10800a17 	ldw	r2,40(r2)
 80113d4:	e0fffd17 	ldw	r3,-12(fp)
 80113d8:	1880051e 	bne	r3,r2,80113f0 <altera_avalon_jtag_uart_read+0x138>
 80113dc:	e0bff817 	ldw	r2,-32(fp)
 80113e0:	10c00917 	ldw	r3,36(r2)
 80113e4:	e0bff817 	ldw	r2,-32(fp)
 80113e8:	10800117 	ldw	r2,4(r2)
 80113ec:	18bff736 	bltu	r3,r2,80113cc <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80113f0:	e0bff817 	ldw	r2,-32(fp)
 80113f4:	10800a17 	ldw	r2,40(r2)
 80113f8:	e0fffd17 	ldw	r3,-12(fp)
 80113fc:	18800726 	beq	r3,r2,801141c <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 8011400:	e0bff617 	ldw	r2,-40(fp)
 8011404:	00bfb716 	blt	zero,r2,80112e4 <altera_avalon_jtag_uart_read+0x2c>
 8011408:	00000506 	br	8011420 <altera_avalon_jtag_uart_read+0x168>
      break;
 801140c:	0001883a 	nop
 8011410:	00000306 	br	8011420 <altera_avalon_jtag_uart_read+0x168>
      break;
 8011414:	0001883a 	nop
 8011418:	00000106 	br	8011420 <altera_avalon_jtag_uart_read+0x168>
      break;
 801141c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8011420:	e0ffff17 	ldw	r3,-4(fp)
 8011424:	e0bff717 	ldw	r2,-36(fp)
 8011428:	18801926 	beq	r3,r2,8011490 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 801142c:	0005303a 	rdctl	r2,status
 8011430:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011434:	e0fff917 	ldw	r3,-28(fp)
 8011438:	00bfff84 	movi	r2,-2
 801143c:	1884703a 	and	r2,r3,r2
 8011440:	1001703a 	wrctl	status,r2
  return context;
 8011444:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8011448:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801144c:	e0bff817 	ldw	r2,-32(fp)
 8011450:	10800817 	ldw	r2,32(r2)
 8011454:	10c00054 	ori	r3,r2,1
 8011458:	e0bff817 	ldw	r2,-32(fp)
 801145c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8011460:	e0bff817 	ldw	r2,-32(fp)
 8011464:	10800017 	ldw	r2,0(r2)
 8011468:	10800104 	addi	r2,r2,4
 801146c:	1007883a 	mov	r3,r2
 8011470:	e0bff817 	ldw	r2,-32(fp)
 8011474:	10800817 	ldw	r2,32(r2)
 8011478:	18800035 	stwio	r2,0(r3)
 801147c:	e0bffb17 	ldw	r2,-20(fp)
 8011480:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8011484:	e0bffa17 	ldw	r2,-24(fp)
 8011488:	1001703a 	wrctl	status,r2
}
 801148c:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8011490:	e0ffff17 	ldw	r3,-4(fp)
 8011494:	e0bff717 	ldw	r2,-36(fp)
 8011498:	18800426 	beq	r3,r2,80114ac <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 801149c:	e0ffff17 	ldw	r3,-4(fp)
 80114a0:	e0bff717 	ldw	r2,-36(fp)
 80114a4:	1885c83a 	sub	r2,r3,r2
 80114a8:	00000606 	br	80114c4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 80114ac:	e0bff517 	ldw	r2,-44(fp)
 80114b0:	1090000c 	andi	r2,r2,16384
 80114b4:	10000226 	beq	r2,zero,80114c0 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 80114b8:	00bffd44 	movi	r2,-11
 80114bc:	00000106 	br	80114c4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 80114c0:	00bffec4 	movi	r2,-5
}
 80114c4:	e037883a 	mov	sp,fp
 80114c8:	dfc00117 	ldw	ra,4(sp)
 80114cc:	df000017 	ldw	fp,0(sp)
 80114d0:	dec00204 	addi	sp,sp,8
 80114d4:	f800283a 	ret

080114d8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80114d8:	defff304 	addi	sp,sp,-52
 80114dc:	dfc00c15 	stw	ra,48(sp)
 80114e0:	df000b15 	stw	fp,44(sp)
 80114e4:	df000b04 	addi	fp,sp,44
 80114e8:	e13ff815 	stw	r4,-32(fp)
 80114ec:	e17ff715 	stw	r5,-36(fp)
 80114f0:	e1bff615 	stw	r6,-40(fp)
 80114f4:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80114f8:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80114fc:	e0bff717 	ldw	r2,-36(fp)
 8011500:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8011504:	00003706 	br	80115e4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8011508:	e0bff817 	ldw	r2,-32(fp)
 801150c:	10800c17 	ldw	r2,48(r2)
 8011510:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 8011514:	e0bff817 	ldw	r2,-32(fp)
 8011518:	10800d17 	ldw	r2,52(r2)
 801151c:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 8011520:	e0fffc17 	ldw	r3,-16(fp)
 8011524:	e0bfff17 	ldw	r2,-4(fp)
 8011528:	1880062e 	bgeu	r3,r2,8011544 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 801152c:	e0ffff17 	ldw	r3,-4(fp)
 8011530:	e0bffc17 	ldw	r2,-16(fp)
 8011534:	1885c83a 	sub	r2,r3,r2
 8011538:	10bfffc4 	addi	r2,r2,-1
 801153c:	e0bffe15 	stw	r2,-8(fp)
 8011540:	00000b06 	br	8011570 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8011544:	e0bfff17 	ldw	r2,-4(fp)
 8011548:	10000526 	beq	r2,zero,8011560 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 801154c:	00c20004 	movi	r3,2048
 8011550:	e0bffc17 	ldw	r2,-16(fp)
 8011554:	1885c83a 	sub	r2,r3,r2
 8011558:	e0bffe15 	stw	r2,-8(fp)
 801155c:	00000406 	br	8011570 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8011560:	00c1ffc4 	movi	r3,2047
 8011564:	e0bffc17 	ldw	r2,-16(fp)
 8011568:	1885c83a 	sub	r2,r3,r2
 801156c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 8011570:	e0bffe17 	ldw	r2,-8(fp)
 8011574:	10001e26 	beq	r2,zero,80115f0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8011578:	e0fff617 	ldw	r3,-40(fp)
 801157c:	e0bffe17 	ldw	r2,-8(fp)
 8011580:	1880022e 	bgeu	r3,r2,801158c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8011584:	e0bff617 	ldw	r2,-40(fp)
 8011588:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 801158c:	e0bff817 	ldw	r2,-32(fp)
 8011590:	10c20e04 	addi	r3,r2,2104
 8011594:	e0bffc17 	ldw	r2,-16(fp)
 8011598:	1885883a 	add	r2,r3,r2
 801159c:	e1bffe17 	ldw	r6,-8(fp)
 80115a0:	e17ff717 	ldw	r5,-36(fp)
 80115a4:	1009883a 	mov	r4,r2
 80115a8:	80087100 	call	8008710 <memcpy>
      ptr   += n;
 80115ac:	e0fff717 	ldw	r3,-36(fp)
 80115b0:	e0bffe17 	ldw	r2,-8(fp)
 80115b4:	1885883a 	add	r2,r3,r2
 80115b8:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 80115bc:	e0fff617 	ldw	r3,-40(fp)
 80115c0:	e0bffe17 	ldw	r2,-8(fp)
 80115c4:	1885c83a 	sub	r2,r3,r2
 80115c8:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80115cc:	e0fffc17 	ldw	r3,-16(fp)
 80115d0:	e0bffe17 	ldw	r2,-8(fp)
 80115d4:	1885883a 	add	r2,r3,r2
 80115d8:	10c1ffcc 	andi	r3,r2,2047
 80115dc:	e0bff817 	ldw	r2,-32(fp)
 80115e0:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 80115e4:	e0bff617 	ldw	r2,-40(fp)
 80115e8:	00bfc716 	blt	zero,r2,8011508 <altera_avalon_jtag_uart_write+0x30>
 80115ec:	00000106 	br	80115f4 <altera_avalon_jtag_uart_write+0x11c>
        break;
 80115f0:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 80115f4:	0005303a 	rdctl	r2,status
 80115f8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80115fc:	e0fff917 	ldw	r3,-28(fp)
 8011600:	00bfff84 	movi	r2,-2
 8011604:	1884703a 	and	r2,r3,r2
 8011608:	1001703a 	wrctl	status,r2
  return context;
 801160c:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8011610:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8011614:	e0bff817 	ldw	r2,-32(fp)
 8011618:	10800817 	ldw	r2,32(r2)
 801161c:	10c00094 	ori	r3,r2,2
 8011620:	e0bff817 	ldw	r2,-32(fp)
 8011624:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8011628:	e0bff817 	ldw	r2,-32(fp)
 801162c:	10800017 	ldw	r2,0(r2)
 8011630:	10800104 	addi	r2,r2,4
 8011634:	1007883a 	mov	r3,r2
 8011638:	e0bff817 	ldw	r2,-32(fp)
 801163c:	10800817 	ldw	r2,32(r2)
 8011640:	18800035 	stwio	r2,0(r3)
 8011644:	e0bffb17 	ldw	r2,-20(fp)
 8011648:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 801164c:	e0bffa17 	ldw	r2,-24(fp)
 8011650:	1001703a 	wrctl	status,r2
}
 8011654:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8011658:	e0bff617 	ldw	r2,-40(fp)
 801165c:	0080100e 	bge	zero,r2,80116a0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 8011660:	e0bff517 	ldw	r2,-44(fp)
 8011664:	1090000c 	andi	r2,r2,16384
 8011668:	1000101e 	bne	r2,zero,80116ac <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 801166c:	0001883a 	nop
 8011670:	e0bff817 	ldw	r2,-32(fp)
 8011674:	10800d17 	ldw	r2,52(r2)
 8011678:	e0ffff17 	ldw	r3,-4(fp)
 801167c:	1880051e 	bne	r3,r2,8011694 <altera_avalon_jtag_uart_write+0x1bc>
 8011680:	e0bff817 	ldw	r2,-32(fp)
 8011684:	10c00917 	ldw	r3,36(r2)
 8011688:	e0bff817 	ldw	r2,-32(fp)
 801168c:	10800117 	ldw	r2,4(r2)
 8011690:	18bff736 	bltu	r3,r2,8011670 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8011694:	e0bff817 	ldw	r2,-32(fp)
 8011698:	10800917 	ldw	r2,36(r2)
 801169c:	1000051e 	bne	r2,zero,80116b4 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 80116a0:	e0bff617 	ldw	r2,-40(fp)
 80116a4:	00bfcf16 	blt	zero,r2,80115e4 <altera_avalon_jtag_uart_write+0x10c>
 80116a8:	00000306 	br	80116b8 <altera_avalon_jtag_uart_write+0x1e0>
        break;
 80116ac:	0001883a 	nop
 80116b0:	00000106 	br	80116b8 <altera_avalon_jtag_uart_write+0x1e0>
         break;
 80116b4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80116b8:	e0fff717 	ldw	r3,-36(fp)
 80116bc:	e0bffd17 	ldw	r2,-12(fp)
 80116c0:	18800426 	beq	r3,r2,80116d4 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 80116c4:	e0fff717 	ldw	r3,-36(fp)
 80116c8:	e0bffd17 	ldw	r2,-12(fp)
 80116cc:	1885c83a 	sub	r2,r3,r2
 80116d0:	00000606 	br	80116ec <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 80116d4:	e0bff517 	ldw	r2,-44(fp)
 80116d8:	1090000c 	andi	r2,r2,16384
 80116dc:	10000226 	beq	r2,zero,80116e8 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 80116e0:	00bffd44 	movi	r2,-11
 80116e4:	00000106 	br	80116ec <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 80116e8:	00bffec4 	movi	r2,-5
}
 80116ec:	e037883a 	mov	sp,fp
 80116f0:	dfc00117 	ldw	ra,4(sp)
 80116f4:	df000017 	ldw	fp,0(sp)
 80116f8:	dec00204 	addi	sp,sp,8
 80116fc:	f800283a 	ret

08011700 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 8011700:	defff404 	addi	sp,sp,-48
 8011704:	df000b15 	stw	fp,44(sp)
 8011708:	df000b04 	addi	fp,sp,44
 801170c:	e13ff815 	stw	r4,-32(fp)
 8011710:	e17ff715 	stw	r5,-36(fp)
 8011714:	e1bff615 	stw	r6,-40(fp)
 8011718:	e1fff515 	stw	r7,-44(fp)
  const alt_u8 * write_end = write_data + write_length;
 801171c:	e0fff517 	ldw	r3,-44(fp)
 8011720:	e0bff617 	ldw	r2,-40(fp)
 8011724:	1885883a 	add	r2,r3,r2
 8011728:	e0bffc15 	stw	r2,-16(fp)
  alt_u8 * read_end = read_data + read_length;
 801172c:	e0c00217 	ldw	r3,8(fp)
 8011730:	e0800117 	ldw	r2,4(fp)
 8011734:	1885883a 	add	r2,r3,r2
 8011738:	e0bffb15 	stw	r2,-20(fp)

  alt_u32 write_zeros = read_length;
 801173c:	e0800117 	ldw	r2,4(fp)
 8011740:	e0bfff15 	stw	r2,-4(fp)
  alt_u32 read_ignore = write_length;
 8011744:	e0bff617 	ldw	r2,-40(fp)
 8011748:	e0bffe15 	stw	r2,-8(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 801174c:	00800044 	movi	r2,1
 8011750:	e0bffd15 	stw	r2,-12(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 8011754:	e0bff817 	ldw	r2,-32(fp)
 8011758:	10800504 	addi	r2,r2,20
 801175c:	1009883a 	mov	r4,r2
 8011760:	00c00044 	movi	r3,1
 8011764:	e0bff717 	ldw	r2,-36(fp)
 8011768:	1884983a 	sll	r2,r3,r2
 801176c:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 8011770:	e0800317 	ldw	r2,12(fp)
 8011774:	1080008c 	andi	r2,r2,2
 8011778:	1000051e 	bne	r2,zero,8011790 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 801177c:	e0bff817 	ldw	r2,-32(fp)
 8011780:	10800304 	addi	r2,r2,12
 8011784:	1007883a 	mov	r3,r2
 8011788:	00810004 	movi	r2,1024
 801178c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8011790:	e0bff817 	ldw	r2,-32(fp)
 8011794:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8011798:	e0bff817 	ldw	r2,-32(fp)
 801179c:	10800204 	addi	r2,r2,8
 80117a0:	10800037 	ldwio	r2,0(r2)
 80117a4:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 80117a8:	e0bffa17 	ldw	r2,-24(fp)
 80117ac:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 80117b0:	10000226 	beq	r2,zero,80117bc <alt_avalon_spi_command+0xbc>
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 80117b4:	e0bffd17 	ldw	r2,-12(fp)
 80117b8:	1000031e 	bne	r2,zero,80117c8 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 80117bc:	e0bffa17 	ldw	r2,-24(fp)
 80117c0:	1080200c 	andi	r2,r2,128
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 80117c4:	103ff426 	beq	r2,zero,8011798 <alt_avalon_spi_command+0x98>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 80117c8:	e0bffa17 	ldw	r2,-24(fp)
 80117cc:	1080100c 	andi	r2,r2,64
 80117d0:	10001e26 	beq	r2,zero,801184c <alt_avalon_spi_command+0x14c>
 80117d4:	e0bffd17 	ldw	r2,-12(fp)
 80117d8:	00801c0e 	bge	zero,r2,801184c <alt_avalon_spi_command+0x14c>
    {
      credits--;
 80117dc:	e0bffd17 	ldw	r2,-12(fp)
 80117e0:	10bfffc4 	addi	r2,r2,-1
 80117e4:	e0bffd15 	stw	r2,-12(fp)

      if (write_data < write_end)
 80117e8:	e0fff517 	ldw	r3,-44(fp)
 80117ec:	e0bffc17 	ldw	r2,-16(fp)
 80117f0:	18800a2e 	bgeu	r3,r2,801181c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 80117f4:	e0bff817 	ldw	r2,-32(fp)
 80117f8:	10800104 	addi	r2,r2,4
 80117fc:	1009883a 	mov	r4,r2
 8011800:	e0bff517 	ldw	r2,-44(fp)
 8011804:	10c00044 	addi	r3,r2,1
 8011808:	e0fff515 	stw	r3,-44(fp)
 801180c:	10800003 	ldbu	r2,0(r2)
 8011810:	10803fcc 	andi	r2,r2,255
 8011814:	20800035 	stwio	r2,0(r4)
 8011818:	00000c06 	br	801184c <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 801181c:	e0bfff17 	ldw	r2,-4(fp)
 8011820:	10000826 	beq	r2,zero,8011844 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 8011824:	e0bfff17 	ldw	r2,-4(fp)
 8011828:	10bfffc4 	addi	r2,r2,-1
 801182c:	e0bfff15 	stw	r2,-4(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 8011830:	e0bff817 	ldw	r2,-32(fp)
 8011834:	10800104 	addi	r2,r2,4
 8011838:	0007883a 	mov	r3,zero
 801183c:	10c00035 	stwio	r3,0(r2)
 8011840:	00000206 	br	801184c <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 8011844:	00bf0004 	movi	r2,-1024
 8011848:	e0bffd15 	stw	r2,-12(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 801184c:	e0bffa17 	ldw	r2,-24(fp)
 8011850:	1080200c 	andi	r2,r2,128
 8011854:	103fd026 	beq	r2,zero,8011798 <alt_avalon_spi_command+0x98>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8011858:	e0bff817 	ldw	r2,-32(fp)
 801185c:	10800037 	ldwio	r2,0(r2)
 8011860:	e0bff915 	stw	r2,-28(fp)

      if (read_ignore > 0)
 8011864:	e0bffe17 	ldw	r2,-8(fp)
 8011868:	10000426 	beq	r2,zero,801187c <alt_avalon_spi_command+0x17c>
        read_ignore--;
 801186c:	e0bffe17 	ldw	r2,-8(fp)
 8011870:	10bfffc4 	addi	r2,r2,-1
 8011874:	e0bffe15 	stw	r2,-8(fp)
 8011878:	00000506 	br	8011890 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 801187c:	e0800217 	ldw	r2,8(fp)
 8011880:	10c00044 	addi	r3,r2,1
 8011884:	e0c00215 	stw	r3,8(fp)
 8011888:	e0fff917 	ldw	r3,-28(fp)
 801188c:	10c00005 	stb	r3,0(r2)
      credits++;
 8011890:	e0bffd17 	ldw	r2,-12(fp)
 8011894:	10800044 	addi	r2,r2,1
 8011898:	e0bffd15 	stw	r2,-12(fp)

      if (read_ignore == 0 && read_data == read_end)
 801189c:	e0bffe17 	ldw	r2,-8(fp)
 80118a0:	103fbd1e 	bne	r2,zero,8011798 <alt_avalon_spi_command+0x98>
 80118a4:	e0c00217 	ldw	r3,8(fp)
 80118a8:	e0bffb17 	ldw	r2,-20(fp)
 80118ac:	18bfba1e 	bne	r3,r2,8011798 <alt_avalon_spi_command+0x98>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 80118b0:	e0bff817 	ldw	r2,-32(fp)
 80118b4:	10800204 	addi	r2,r2,8
 80118b8:	10800037 	ldwio	r2,0(r2)
 80118bc:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 80118c0:	e0bffa17 	ldw	r2,-24(fp)
 80118c4:	1080080c 	andi	r2,r2,32
 80118c8:	103ff926 	beq	r2,zero,80118b0 <alt_avalon_spi_command+0x1b0>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 80118cc:	e0800317 	ldw	r2,12(fp)
 80118d0:	1080004c 	andi	r2,r2,1
 80118d4:	1000041e 	bne	r2,zero,80118e8 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 80118d8:	e0bff817 	ldw	r2,-32(fp)
 80118dc:	10800304 	addi	r2,r2,12
 80118e0:	0007883a 	mov	r3,zero
 80118e4:	10c00035 	stwio	r3,0(r2)

  return read_length;
 80118e8:	e0800117 	ldw	r2,4(fp)
}
 80118ec:	e037883a 	mov	sp,fp
 80118f0:	df000017 	ldw	fp,0(sp)
 80118f4:	dec00104 	addi	sp,sp,4
 80118f8:	f800283a 	ret

080118fc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 80118fc:	defffa04 	addi	sp,sp,-24
 8011900:	dfc00515 	stw	ra,20(sp)
 8011904:	df000415 	stw	fp,16(sp)
 8011908:	df000404 	addi	fp,sp,16
 801190c:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8011910:	0007883a 	mov	r3,zero
 8011914:	e0bffc17 	ldw	r2,-16(fp)
 8011918:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 801191c:	e0bffc17 	ldw	r2,-16(fp)
 8011920:	10800104 	addi	r2,r2,4
 8011924:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
 8011928:	0005303a 	rdctl	r2,status
 801192c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011930:	e0fffd17 	ldw	r3,-12(fp)
 8011934:	00bfff84 	movi	r2,-2
 8011938:	1884703a 	and	r2,r3,r2
 801193c:	1001703a 	wrctl	status,r2
  return context;
 8011940:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8011944:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
 8011948:	80109400 	call	8010940 <alt_tick>
 801194c:	e0bfff17 	ldw	r2,-4(fp)
 8011950:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 8011954:	e0bffe17 	ldw	r2,-8(fp)
 8011958:	1001703a 	wrctl	status,r2
}
 801195c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
 8011960:	0001883a 	nop
 8011964:	e037883a 	mov	sp,fp
 8011968:	dfc00117 	ldw	ra,4(sp)
 801196c:	df000017 	ldw	fp,0(sp)
 8011970:	dec00204 	addi	sp,sp,8
 8011974:	f800283a 	ret

08011978 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8011978:	defff804 	addi	sp,sp,-32
 801197c:	dfc00715 	stw	ra,28(sp)
 8011980:	df000615 	stw	fp,24(sp)
 8011984:	df000604 	addi	fp,sp,24
 8011988:	e13ffe15 	stw	r4,-8(fp)
 801198c:	e17ffd15 	stw	r5,-12(fp)
 8011990:	e1bffc15 	stw	r6,-16(fp)
 8011994:	e1fffb15 	stw	r7,-20(fp)
 8011998:	e0bffb17 	ldw	r2,-20(fp)
 801199c:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 80119a0:	d0a72617 	ldw	r2,-25448(gp)
 80119a4:	1000031e 	bne	r2,zero,80119b4 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
 80119a8:	e0bfff17 	ldw	r2,-4(fp)
 80119ac:	d0a72615 	stw	r2,-25448(gp)
    return 0;
 80119b0:	00000106 	br	80119b8 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
 80119b4:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 80119b8:	e0bffe17 	ldw	r2,-8(fp)
 80119bc:	10800104 	addi	r2,r2,4
 80119c0:	00c001c4 	movi	r3,7
 80119c4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 80119c8:	d8000015 	stw	zero,0(sp)
 80119cc:	e1fffe17 	ldw	r7,-8(fp)
 80119d0:	01820074 	movhi	r6,2049
 80119d4:	31863f04 	addi	r6,r6,6396
 80119d8:	e17ffc17 	ldw	r5,-16(fp)
 80119dc:	e13ffd17 	ldw	r4,-12(fp)
 80119e0:	8011e740 	call	8011e74 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 80119e4:	0001883a 	nop
 80119e8:	e037883a 	mov	sp,fp
 80119ec:	dfc00117 	ldw	ra,4(sp)
 80119f0:	df000017 	ldw	fp,0(sp)
 80119f4:	dec00204 	addi	sp,sp,8
 80119f8:	f800283a 	ret

080119fc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80119fc:	defff504 	addi	sp,sp,-44
 8011a00:	df000a15 	stw	fp,40(sp)
 8011a04:	df000a04 	addi	fp,sp,40
 8011a08:	e13ff915 	stw	r4,-28(fp)
 8011a0c:	e17ff815 	stw	r5,-32(fp)
 8011a10:	e1bff715 	stw	r6,-36(fp)
 8011a14:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8011a18:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
 8011a1c:	d0a72617 	ldw	r2,-25448(gp)
  
  if (alt_ticks_per_second ())
 8011a20:	10003e26 	beq	r2,zero,8011b1c <alt_alarm_start+0x120>
  {
    if (alarm)
 8011a24:	e0bff917 	ldw	r2,-28(fp)
 8011a28:	10003a26 	beq	r2,zero,8011b14 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
 8011a2c:	e0bff917 	ldw	r2,-28(fp)
 8011a30:	e0fff717 	ldw	r3,-36(fp)
 8011a34:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8011a38:	e0bff917 	ldw	r2,-28(fp)
 8011a3c:	e0fff617 	ldw	r3,-40(fp)
 8011a40:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 8011a44:	0005303a 	rdctl	r2,status
 8011a48:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011a4c:	e0fffd17 	ldw	r3,-12(fp)
 8011a50:	00bfff84 	movi	r2,-2
 8011a54:	1884703a 	and	r2,r3,r2
 8011a58:	1001703a 	wrctl	status,r2
  return context;
 8011a5c:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 8011a60:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8011a64:	d0a72717 	ldw	r2,-25444(gp)
      
      current_nticks = alt_nticks();
 8011a68:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8011a6c:	e0fff817 	ldw	r3,-32(fp)
 8011a70:	e0bfff17 	ldw	r2,-4(fp)
 8011a74:	1885883a 	add	r2,r3,r2
 8011a78:	10c00044 	addi	r3,r2,1
 8011a7c:	e0bff917 	ldw	r2,-28(fp)
 8011a80:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8011a84:	e0bff917 	ldw	r2,-28(fp)
 8011a88:	10c00217 	ldw	r3,8(r2)
 8011a8c:	e0bfff17 	ldw	r2,-4(fp)
 8011a90:	1880042e 	bgeu	r3,r2,8011aa4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8011a94:	e0bff917 	ldw	r2,-28(fp)
 8011a98:	00c00044 	movi	r3,1
 8011a9c:	10c00405 	stb	r3,16(r2)
 8011aa0:	00000206 	br	8011aac <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8011aa4:	e0bff917 	ldw	r2,-28(fp)
 8011aa8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8011aac:	e0bff917 	ldw	r2,-28(fp)
 8011ab0:	d0e00f04 	addi	r3,gp,-32708
 8011ab4:	e0fffb15 	stw	r3,-20(fp)
 8011ab8:	e0bffa15 	stw	r2,-24(fp)
  entry->previous = list;
 8011abc:	e0bffa17 	ldw	r2,-24(fp)
 8011ac0:	e0fffb17 	ldw	r3,-20(fp)
 8011ac4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8011ac8:	e0bffb17 	ldw	r2,-20(fp)
 8011acc:	10c00017 	ldw	r3,0(r2)
 8011ad0:	e0bffa17 	ldw	r2,-24(fp)
 8011ad4:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 8011ad8:	e0bffb17 	ldw	r2,-20(fp)
 8011adc:	10800017 	ldw	r2,0(r2)
 8011ae0:	e0fffa17 	ldw	r3,-24(fp)
 8011ae4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8011ae8:	e0bffb17 	ldw	r2,-20(fp)
 8011aec:	e0fffa17 	ldw	r3,-24(fp)
 8011af0:	10c00015 	stw	r3,0(r2)
}
 8011af4:	0001883a 	nop
 8011af8:	e0bffe17 	ldw	r2,-8(fp)
 8011afc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8011b00:	e0bffc17 	ldw	r2,-16(fp)
 8011b04:	1001703a 	wrctl	status,r2
}
 8011b08:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 8011b0c:	0005883a 	mov	r2,zero
 8011b10:	00000306 	br	8011b20 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
 8011b14:	00bffa84 	movi	r2,-22
 8011b18:	00000106 	br	8011b20 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
 8011b1c:	00bfde84 	movi	r2,-134
  }
}
 8011b20:	e037883a 	mov	sp,fp
 8011b24:	df000017 	ldw	fp,0(sp)
 8011b28:	dec00104 	addi	sp,sp,4
 8011b2c:	f800283a 	ret

08011b30 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8011b30:	defffa04 	addi	sp,sp,-24
 8011b34:	dfc00515 	stw	ra,20(sp)
 8011b38:	df000415 	stw	fp,16(sp)
 8011b3c:	df000404 	addi	fp,sp,16
 8011b40:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8011b44:	00800244 	movi	r2,9
 8011b48:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8011b4c:	014003f4 	movhi	r5,15
 8011b50:	29509004 	addi	r5,r5,16960
 8011b54:	e13ffe17 	ldw	r4,-8(fp)
 8011b58:	8002c500 	call	8002c50 <__mulsi3>
 8011b5c:	100b883a 	mov	r5,r2
 8011b60:	0100bef4 	movhi	r4,763
 8011b64:	213c2004 	addi	r4,r4,-3968
 8011b68:	8002b900 	call	8002b90 <__udivsi3>
  big_loops = us / (INT_MAX/
 8011b6c:	100b883a 	mov	r5,r2
 8011b70:	01200034 	movhi	r4,32768
 8011b74:	213fffc4 	addi	r4,r4,-1
 8011b78:	8002b900 	call	8002b90 <__udivsi3>
 8011b7c:	100b883a 	mov	r5,r2
 8011b80:	e13ffc17 	ldw	r4,-16(fp)
 8011b84:	8002b900 	call	8002b90 <__udivsi3>
 8011b88:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 8011b8c:	e0bffd17 	ldw	r2,-12(fp)
 8011b90:	10002a26 	beq	r2,zero,8011c3c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8011b94:	e03fff15 	stw	zero,-4(fp)
 8011b98:	00001706 	br	8011bf8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8011b9c:	00a00034 	movhi	r2,32768
 8011ba0:	10bfffc4 	addi	r2,r2,-1
 8011ba4:	10bfffc4 	addi	r2,r2,-1
 8011ba8:	103ffe1e 	bne	r2,zero,8011ba4 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8011bac:	014003f4 	movhi	r5,15
 8011bb0:	29509004 	addi	r5,r5,16960
 8011bb4:	e13ffe17 	ldw	r4,-8(fp)
 8011bb8:	8002c500 	call	8002c50 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8011bbc:	100b883a 	mov	r5,r2
 8011bc0:	0100bef4 	movhi	r4,763
 8011bc4:	213c2004 	addi	r4,r4,-3968
 8011bc8:	8002b900 	call	8002b90 <__udivsi3>
 8011bcc:	100b883a 	mov	r5,r2
 8011bd0:	01200034 	movhi	r4,32768
 8011bd4:	213fffc4 	addi	r4,r4,-1
 8011bd8:	8002b900 	call	8002b90 <__udivsi3>
 8011bdc:	1007883a 	mov	r3,r2
 8011be0:	e0bffc17 	ldw	r2,-16(fp)
 8011be4:	10c5c83a 	sub	r2,r2,r3
 8011be8:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 8011bec:	e0bfff17 	ldw	r2,-4(fp)
 8011bf0:	10800044 	addi	r2,r2,1
 8011bf4:	e0bfff15 	stw	r2,-4(fp)
 8011bf8:	e0ffff17 	ldw	r3,-4(fp)
 8011bfc:	e0bffd17 	ldw	r2,-12(fp)
 8011c00:	18bfe616 	blt	r3,r2,8011b9c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8011c04:	014003f4 	movhi	r5,15
 8011c08:	29509004 	addi	r5,r5,16960
 8011c0c:	e13ffe17 	ldw	r4,-8(fp)
 8011c10:	8002c500 	call	8002c50 <__mulsi3>
 8011c14:	100b883a 	mov	r5,r2
 8011c18:	0100bef4 	movhi	r4,763
 8011c1c:	213c2004 	addi	r4,r4,-3968
 8011c20:	8002b900 	call	8002b90 <__udivsi3>
 8011c24:	e17ffc17 	ldw	r5,-16(fp)
 8011c28:	1009883a 	mov	r4,r2
 8011c2c:	8002c500 	call	8002c50 <__mulsi3>
    __asm__ volatile (
 8011c30:	10bfffc4 	addi	r2,r2,-1
 8011c34:	103ffe1e 	bne	r2,zero,8011c30 <alt_busy_sleep+0x100>
 8011c38:	00000d06 	br	8011c70 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8011c3c:	014003f4 	movhi	r5,15
 8011c40:	29509004 	addi	r5,r5,16960
 8011c44:	e13ffe17 	ldw	r4,-8(fp)
 8011c48:	8002c500 	call	8002c50 <__mulsi3>
 8011c4c:	100b883a 	mov	r5,r2
 8011c50:	0100bef4 	movhi	r4,763
 8011c54:	213c2004 	addi	r4,r4,-3968
 8011c58:	8002b900 	call	8002b90 <__udivsi3>
 8011c5c:	e17ffc17 	ldw	r5,-16(fp)
 8011c60:	1009883a 	mov	r4,r2
 8011c64:	8002c500 	call	8002c50 <__mulsi3>
    __asm__ volatile (
 8011c68:	10bfffc4 	addi	r2,r2,-1
 8011c6c:	00bffe16 	blt	zero,r2,8011c68 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8011c70:	0005883a 	mov	r2,zero
}
 8011c74:	e037883a 	mov	sp,fp
 8011c78:	dfc00117 	ldw	ra,4(sp)
 8011c7c:	df000017 	ldw	fp,0(sp)
 8011c80:	dec00204 	addi	sp,sp,8
 8011c84:	f800283a 	ret

08011c88 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8011c88:	deffff04 	addi	sp,sp,-4
 8011c8c:	df000015 	stw	fp,0(sp)
 8011c90:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8011c94:	0001883a 	nop
 8011c98:	e037883a 	mov	sp,fp
 8011c9c:	df000017 	ldw	fp,0(sp)
 8011ca0:	dec00104 	addi	sp,sp,4
 8011ca4:	f800283a 	ret

08011ca8 <alt_get_errno>:
{
 8011ca8:	defffe04 	addi	sp,sp,-8
 8011cac:	dfc00115 	stw	ra,4(sp)
 8011cb0:	df000015 	stw	fp,0(sp)
 8011cb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011cb8:	d0a00d17 	ldw	r2,-32716(gp)
 8011cbc:	10000326 	beq	r2,zero,8011ccc <alt_get_errno+0x24>
 8011cc0:	d0a00d17 	ldw	r2,-32716(gp)
 8011cc4:	103ee83a 	callr	r2
 8011cc8:	00000106 	br	8011cd0 <alt_get_errno+0x28>
 8011ccc:	d0a72104 	addi	r2,gp,-25468
}
 8011cd0:	e037883a 	mov	sp,fp
 8011cd4:	dfc00117 	ldw	ra,4(sp)
 8011cd8:	df000017 	ldw	fp,0(sp)
 8011cdc:	dec00204 	addi	sp,sp,8
 8011ce0:	f800283a 	ret

08011ce4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8011ce4:	defffa04 	addi	sp,sp,-24
 8011ce8:	dfc00515 	stw	ra,20(sp)
 8011cec:	df000415 	stw	fp,16(sp)
 8011cf0:	df000404 	addi	fp,sp,16
 8011cf4:	e13ffd15 	stw	r4,-12(fp)
 8011cf8:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8011cfc:	e0bffd17 	ldw	r2,-12(fp)
 8011d00:	10000326 	beq	r2,zero,8011d10 <alt_dev_llist_insert+0x2c>
 8011d04:	e0bffd17 	ldw	r2,-12(fp)
 8011d08:	10800217 	ldw	r2,8(r2)
 8011d0c:	1000061e 	bne	r2,zero,8011d28 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8011d10:	8011ca80 	call	8011ca8 <alt_get_errno>
 8011d14:	1007883a 	mov	r3,r2
 8011d18:	00800584 	movi	r2,22
 8011d1c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8011d20:	00bffa84 	movi	r2,-22
 8011d24:	00001406 	br	8011d78 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8011d28:	e0bffd17 	ldw	r2,-12(fp)
 8011d2c:	e0fffc17 	ldw	r3,-16(fp)
 8011d30:	e0ffff15 	stw	r3,-4(fp)
 8011d34:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 8011d38:	e0bffe17 	ldw	r2,-8(fp)
 8011d3c:	e0ffff17 	ldw	r3,-4(fp)
 8011d40:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8011d44:	e0bfff17 	ldw	r2,-4(fp)
 8011d48:	10c00017 	ldw	r3,0(r2)
 8011d4c:	e0bffe17 	ldw	r2,-8(fp)
 8011d50:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 8011d54:	e0bfff17 	ldw	r2,-4(fp)
 8011d58:	10800017 	ldw	r2,0(r2)
 8011d5c:	e0fffe17 	ldw	r3,-8(fp)
 8011d60:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8011d64:	e0bfff17 	ldw	r2,-4(fp)
 8011d68:	e0fffe17 	ldw	r3,-8(fp)
 8011d6c:	10c00015 	stw	r3,0(r2)
}
 8011d70:	0001883a 	nop

  return 0;  
 8011d74:	0005883a 	mov	r2,zero
}
 8011d78:	e037883a 	mov	sp,fp
 8011d7c:	dfc00117 	ldw	ra,4(sp)
 8011d80:	df000017 	ldw	fp,0(sp)
 8011d84:	dec00204 	addi	sp,sp,8
 8011d88:	f800283a 	ret

08011d8c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8011d8c:	defffd04 	addi	sp,sp,-12
 8011d90:	dfc00215 	stw	ra,8(sp)
 8011d94:	df000115 	stw	fp,4(sp)
 8011d98:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8011d9c:	00820074 	movhi	r2,2049
 8011da0:	108a9304 	addi	r2,r2,10828
 8011da4:	e0bfff15 	stw	r2,-4(fp)
 8011da8:	00000606 	br	8011dc4 <_do_ctors+0x38>
        (*ctor) (); 
 8011dac:	e0bfff17 	ldw	r2,-4(fp)
 8011db0:	10800017 	ldw	r2,0(r2)
 8011db4:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8011db8:	e0bfff17 	ldw	r2,-4(fp)
 8011dbc:	10bfff04 	addi	r2,r2,-4
 8011dc0:	e0bfff15 	stw	r2,-4(fp)
 8011dc4:	e0ffff17 	ldw	r3,-4(fp)
 8011dc8:	00820074 	movhi	r2,2049
 8011dcc:	108a9404 	addi	r2,r2,10832
 8011dd0:	18bff62e 	bgeu	r3,r2,8011dac <_do_ctors+0x20>
}
 8011dd4:	0001883a 	nop
 8011dd8:	0001883a 	nop
 8011ddc:	e037883a 	mov	sp,fp
 8011de0:	dfc00117 	ldw	ra,4(sp)
 8011de4:	df000017 	ldw	fp,0(sp)
 8011de8:	dec00204 	addi	sp,sp,8
 8011dec:	f800283a 	ret

08011df0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8011df0:	defffd04 	addi	sp,sp,-12
 8011df4:	dfc00215 	stw	ra,8(sp)
 8011df8:	df000115 	stw	fp,4(sp)
 8011dfc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8011e00:	00820074 	movhi	r2,2049
 8011e04:	108a9304 	addi	r2,r2,10828
 8011e08:	e0bfff15 	stw	r2,-4(fp)
 8011e0c:	00000606 	br	8011e28 <_do_dtors+0x38>
        (*dtor) (); 
 8011e10:	e0bfff17 	ldw	r2,-4(fp)
 8011e14:	10800017 	ldw	r2,0(r2)
 8011e18:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8011e1c:	e0bfff17 	ldw	r2,-4(fp)
 8011e20:	10bfff04 	addi	r2,r2,-4
 8011e24:	e0bfff15 	stw	r2,-4(fp)
 8011e28:	e0ffff17 	ldw	r3,-4(fp)
 8011e2c:	00820074 	movhi	r2,2049
 8011e30:	108a9404 	addi	r2,r2,10832
 8011e34:	18bff62e 	bgeu	r3,r2,8011e10 <_do_dtors+0x20>
}
 8011e38:	0001883a 	nop
 8011e3c:	0001883a 	nop
 8011e40:	e037883a 	mov	sp,fp
 8011e44:	dfc00117 	ldw	ra,4(sp)
 8011e48:	df000017 	ldw	fp,0(sp)
 8011e4c:	dec00204 	addi	sp,sp,8
 8011e50:	f800283a 	ret

08011e54 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8011e54:	deffff04 	addi	sp,sp,-4
 8011e58:	df000015 	stw	fp,0(sp)
 8011e5c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8011e60:	0001883a 	nop
 8011e64:	e037883a 	mov	sp,fp
 8011e68:	df000017 	ldw	fp,0(sp)
 8011e6c:	dec00104 	addi	sp,sp,4
 8011e70:	f800283a 	ret

08011e74 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8011e74:	defff904 	addi	sp,sp,-28
 8011e78:	dfc00615 	stw	ra,24(sp)
 8011e7c:	df000515 	stw	fp,20(sp)
 8011e80:	df000504 	addi	fp,sp,20
 8011e84:	e13fff15 	stw	r4,-4(fp)
 8011e88:	e17ffe15 	stw	r5,-8(fp)
 8011e8c:	e1bffd15 	stw	r6,-12(fp)
 8011e90:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8011e94:	e0800217 	ldw	r2,8(fp)
 8011e98:	d8800015 	stw	r2,0(sp)
 8011e9c:	e1fffc17 	ldw	r7,-16(fp)
 8011ea0:	e1bffd17 	ldw	r6,-12(fp)
 8011ea4:	e17ffe17 	ldw	r5,-8(fp)
 8011ea8:	e13fff17 	ldw	r4,-4(fp)
 8011eac:	80120240 	call	8012024 <alt_iic_isr_register>
}  
 8011eb0:	e037883a 	mov	sp,fp
 8011eb4:	dfc00117 	ldw	ra,4(sp)
 8011eb8:	df000017 	ldw	fp,0(sp)
 8011ebc:	dec00204 	addi	sp,sp,8
 8011ec0:	f800283a 	ret

08011ec4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8011ec4:	defff904 	addi	sp,sp,-28
 8011ec8:	df000615 	stw	fp,24(sp)
 8011ecc:	df000604 	addi	fp,sp,24
 8011ed0:	e13ffb15 	stw	r4,-20(fp)
 8011ed4:	e17ffa15 	stw	r5,-24(fp)
 8011ed8:	e0bffa17 	ldw	r2,-24(fp)
 8011edc:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 8011ee0:	0005303a 	rdctl	r2,status
 8011ee4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011ee8:	e0fffe17 	ldw	r3,-8(fp)
 8011eec:	00bfff84 	movi	r2,-2
 8011ef0:	1884703a 	and	r2,r3,r2
 8011ef4:	1001703a 	wrctl	status,r2
  return context;
 8011ef8:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8011efc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 8011f00:	00c00044 	movi	r3,1
 8011f04:	e0bfff17 	ldw	r2,-4(fp)
 8011f08:	1884983a 	sll	r2,r3,r2
 8011f0c:	1007883a 	mov	r3,r2
 8011f10:	d0a72817 	ldw	r2,-25440(gp)
 8011f14:	1884b03a 	or	r2,r3,r2
 8011f18:	d0a72815 	stw	r2,-25440(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8011f1c:	d0a72817 	ldw	r2,-25440(gp)
 8011f20:	100170fa 	wrctl	ienable,r2
 8011f24:	e0bffd17 	ldw	r2,-12(fp)
 8011f28:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8011f2c:	e0bffc17 	ldw	r2,-16(fp)
 8011f30:	1001703a 	wrctl	status,r2
}
 8011f34:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 8011f38:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 8011f3c:	e037883a 	mov	sp,fp
 8011f40:	df000017 	ldw	fp,0(sp)
 8011f44:	dec00104 	addi	sp,sp,4
 8011f48:	f800283a 	ret

08011f4c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8011f4c:	defff904 	addi	sp,sp,-28
 8011f50:	df000615 	stw	fp,24(sp)
 8011f54:	df000604 	addi	fp,sp,24
 8011f58:	e13ffb15 	stw	r4,-20(fp)
 8011f5c:	e17ffa15 	stw	r5,-24(fp)
 8011f60:	e0bffa17 	ldw	r2,-24(fp)
 8011f64:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 8011f68:	0005303a 	rdctl	r2,status
 8011f6c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011f70:	e0fffe17 	ldw	r3,-8(fp)
 8011f74:	00bfff84 	movi	r2,-2
 8011f78:	1884703a 	and	r2,r3,r2
 8011f7c:	1001703a 	wrctl	status,r2
  return context;
 8011f80:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 8011f84:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 8011f88:	00c00044 	movi	r3,1
 8011f8c:	e0bfff17 	ldw	r2,-4(fp)
 8011f90:	1884983a 	sll	r2,r3,r2
 8011f94:	0084303a 	nor	r2,zero,r2
 8011f98:	1007883a 	mov	r3,r2
 8011f9c:	d0a72817 	ldw	r2,-25440(gp)
 8011fa0:	1884703a 	and	r2,r3,r2
 8011fa4:	d0a72815 	stw	r2,-25440(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8011fa8:	d0a72817 	ldw	r2,-25440(gp)
 8011fac:	100170fa 	wrctl	ienable,r2
 8011fb0:	e0bffd17 	ldw	r2,-12(fp)
 8011fb4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8011fb8:	e0bffc17 	ldw	r2,-16(fp)
 8011fbc:	1001703a 	wrctl	status,r2
}
 8011fc0:	0001883a 	nop
  return 0;
 8011fc4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8011fc8:	e037883a 	mov	sp,fp
 8011fcc:	df000017 	ldw	fp,0(sp)
 8011fd0:	dec00104 	addi	sp,sp,4
 8011fd4:	f800283a 	ret

08011fd8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8011fd8:	defffc04 	addi	sp,sp,-16
 8011fdc:	df000315 	stw	fp,12(sp)
 8011fe0:	df000304 	addi	fp,sp,12
 8011fe4:	e13ffe15 	stw	r4,-8(fp)
 8011fe8:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8011fec:	000530fa 	rdctl	r2,ienable
 8011ff0:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8011ff4:	00c00044 	movi	r3,1
 8011ff8:	e0bffd17 	ldw	r2,-12(fp)
 8011ffc:	1884983a 	sll	r2,r3,r2
 8012000:	1007883a 	mov	r3,r2
 8012004:	e0bfff17 	ldw	r2,-4(fp)
 8012008:	1884703a 	and	r2,r3,r2
 801200c:	1004c03a 	cmpne	r2,r2,zero
 8012010:	10803fcc 	andi	r2,r2,255
}
 8012014:	e037883a 	mov	sp,fp
 8012018:	df000017 	ldw	fp,0(sp)
 801201c:	dec00104 	addi	sp,sp,4
 8012020:	f800283a 	ret

08012024 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8012024:	defff504 	addi	sp,sp,-44
 8012028:	dfc00a15 	stw	ra,40(sp)
 801202c:	df000915 	stw	fp,36(sp)
 8012030:	df000904 	addi	fp,sp,36
 8012034:	e13ffa15 	stw	r4,-24(fp)
 8012038:	e17ff915 	stw	r5,-28(fp)
 801203c:	e1bff815 	stw	r6,-32(fp)
 8012040:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 8012044:	00bffa84 	movi	r2,-22
 8012048:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 801204c:	e0bff917 	ldw	r2,-28(fp)
 8012050:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8012054:	e0bffe17 	ldw	r2,-8(fp)
 8012058:	10800808 	cmpgei	r2,r2,32
 801205c:	1000251e 	bne	r2,zero,80120f4 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 8012060:	0005303a 	rdctl	r2,status
 8012064:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012068:	e0fffc17 	ldw	r3,-16(fp)
 801206c:	00bfff84 	movi	r2,-2
 8012070:	1884703a 	and	r2,r3,r2
 8012074:	1001703a 	wrctl	status,r2
  return context;
 8012078:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 801207c:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 8012080:	e0bffe17 	ldw	r2,-8(fp)
 8012084:	100890fa 	slli	r4,r2,3
 8012088:	e0fff817 	ldw	r3,-32(fp)
 801208c:	00820074 	movhi	r2,2049
 8012090:	2085883a 	add	r2,r4,r2
 8012094:	10db6315 	stw	r3,28044(r2)
    alt_irq[id].context = isr_context;
 8012098:	e0bffe17 	ldw	r2,-8(fp)
 801209c:	100890fa 	slli	r4,r2,3
 80120a0:	e0fff717 	ldw	r3,-36(fp)
 80120a4:	00820074 	movhi	r2,2049
 80120a8:	2085883a 	add	r2,r4,r2
 80120ac:	10db6415 	stw	r3,28048(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80120b0:	e0bff817 	ldw	r2,-32(fp)
 80120b4:	10000526 	beq	r2,zero,80120cc <alt_iic_isr_register+0xa8>
 80120b8:	e0bffe17 	ldw	r2,-8(fp)
 80120bc:	100b883a 	mov	r5,r2
 80120c0:	e13ffa17 	ldw	r4,-24(fp)
 80120c4:	8011ec40 	call	8011ec4 <alt_ic_irq_enable>
 80120c8:	00000406 	br	80120dc <alt_iic_isr_register+0xb8>
 80120cc:	e0bffe17 	ldw	r2,-8(fp)
 80120d0:	100b883a 	mov	r5,r2
 80120d4:	e13ffa17 	ldw	r4,-24(fp)
 80120d8:	8011f4c0 	call	8011f4c <alt_ic_irq_disable>
 80120dc:	e0bfff15 	stw	r2,-4(fp)
 80120e0:	e0bffd17 	ldw	r2,-12(fp)
 80120e4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 80120e8:	e0bffb17 	ldw	r2,-20(fp)
 80120ec:	1001703a 	wrctl	status,r2
}
 80120f0:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 80120f4:	e0bfff17 	ldw	r2,-4(fp)
}
 80120f8:	e037883a 	mov	sp,fp
 80120fc:	dfc00117 	ldw	ra,4(sp)
 8012100:	df000017 	ldw	fp,0(sp)
 8012104:	dec00204 	addi	sp,sp,8
 8012108:	f800283a 	ret

0801210c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 801210c:	defff904 	addi	sp,sp,-28
 8012110:	dfc00615 	stw	ra,24(sp)
 8012114:	df000515 	stw	fp,20(sp)
 8012118:	df000504 	addi	fp,sp,20
 801211c:	e13ffe15 	stw	r4,-8(fp)
 8012120:	e17ffd15 	stw	r5,-12(fp)
 8012124:	e1bffc15 	stw	r6,-16(fp)
 8012128:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 801212c:	e1bffb17 	ldw	r6,-20(fp)
 8012130:	e17ffc17 	ldw	r5,-16(fp)
 8012134:	e13ffd17 	ldw	r4,-12(fp)
 8012138:	80123740 	call	8012374 <open>
 801213c:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 8012140:	e0bfff17 	ldw	r2,-4(fp)
 8012144:	10002016 	blt	r2,zero,80121c8 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 8012148:	e0ffff17 	ldw	r3,-4(fp)
 801214c:	1805883a 	mov	r2,r3
 8012150:	1085883a 	add	r2,r2,r2
 8012154:	10c5883a 	add	r2,r2,r3
 8012158:	100490ba 	slli	r2,r2,2
 801215c:	00c20074 	movhi	r3,2049
 8012160:	10c7883a 	add	r3,r2,r3
 8012164:	18cf5b17 	ldw	r3,15724(r3)
 8012168:	e0bffe17 	ldw	r2,-8(fp)
 801216c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8012170:	e0ffff17 	ldw	r3,-4(fp)
 8012174:	1805883a 	mov	r2,r3
 8012178:	1085883a 	add	r2,r2,r2
 801217c:	10c5883a 	add	r2,r2,r3
 8012180:	100490ba 	slli	r2,r2,2
 8012184:	00c20074 	movhi	r3,2049
 8012188:	10c7883a 	add	r3,r2,r3
 801218c:	18cf5c17 	ldw	r3,15728(r3)
 8012190:	e0bffe17 	ldw	r2,-8(fp)
 8012194:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8012198:	e0ffff17 	ldw	r3,-4(fp)
 801219c:	1805883a 	mov	r2,r3
 80121a0:	1085883a 	add	r2,r2,r2
 80121a4:	10c5883a 	add	r2,r2,r3
 80121a8:	100490ba 	slli	r2,r2,2
 80121ac:	00c20074 	movhi	r3,2049
 80121b0:	10c7883a 	add	r3,r2,r3
 80121b4:	18cf5d17 	ldw	r3,15732(r3)
 80121b8:	e0bffe17 	ldw	r2,-8(fp)
 80121bc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80121c0:	e13fff17 	ldw	r4,-4(fp)
 80121c4:	80107740 	call	8010774 <alt_release_fd>
  }
} 
 80121c8:	0001883a 	nop
 80121cc:	e037883a 	mov	sp,fp
 80121d0:	dfc00117 	ldw	ra,4(sp)
 80121d4:	df000017 	ldw	fp,0(sp)
 80121d8:	dec00204 	addi	sp,sp,8
 80121dc:	f800283a 	ret

080121e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80121e0:	defffb04 	addi	sp,sp,-20
 80121e4:	dfc00415 	stw	ra,16(sp)
 80121e8:	df000315 	stw	fp,12(sp)
 80121ec:	df000304 	addi	fp,sp,12
 80121f0:	e13fff15 	stw	r4,-4(fp)
 80121f4:	e17ffe15 	stw	r5,-8(fp)
 80121f8:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80121fc:	01c07fc4 	movi	r7,511
 8012200:	01800044 	movi	r6,1
 8012204:	e17fff17 	ldw	r5,-4(fp)
 8012208:	01020074 	movhi	r4,2049
 801220c:	210f5e04 	addi	r4,r4,15736
 8012210:	801210c0 	call	801210c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8012214:	01c07fc4 	movi	r7,511
 8012218:	000d883a 	mov	r6,zero
 801221c:	e17ffe17 	ldw	r5,-8(fp)
 8012220:	01020074 	movhi	r4,2049
 8012224:	210f5b04 	addi	r4,r4,15724
 8012228:	801210c0 	call	801210c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 801222c:	01c07fc4 	movi	r7,511
 8012230:	01800044 	movi	r6,1
 8012234:	e17ffd17 	ldw	r5,-12(fp)
 8012238:	01020074 	movhi	r4,2049
 801223c:	210f6104 	addi	r4,r4,15748
 8012240:	801210c0 	call	801210c <alt_open_fd>
}  
 8012244:	0001883a 	nop
 8012248:	e037883a 	mov	sp,fp
 801224c:	dfc00117 	ldw	ra,4(sp)
 8012250:	df000017 	ldw	fp,0(sp)
 8012254:	dec00204 	addi	sp,sp,8
 8012258:	f800283a 	ret

0801225c <alt_get_errno>:
{
 801225c:	defffe04 	addi	sp,sp,-8
 8012260:	dfc00115 	stw	ra,4(sp)
 8012264:	df000015 	stw	fp,0(sp)
 8012268:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801226c:	d0a00d17 	ldw	r2,-32716(gp)
 8012270:	10000326 	beq	r2,zero,8012280 <alt_get_errno+0x24>
 8012274:	d0a00d17 	ldw	r2,-32716(gp)
 8012278:	103ee83a 	callr	r2
 801227c:	00000106 	br	8012284 <alt_get_errno+0x28>
 8012280:	d0a72104 	addi	r2,gp,-25468
}
 8012284:	e037883a 	mov	sp,fp
 8012288:	dfc00117 	ldw	ra,4(sp)
 801228c:	df000017 	ldw	fp,0(sp)
 8012290:	dec00204 	addi	sp,sp,8
 8012294:	f800283a 	ret

08012298 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8012298:	defffd04 	addi	sp,sp,-12
 801229c:	df000215 	stw	fp,8(sp)
 80122a0:	df000204 	addi	fp,sp,8
 80122a4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80122a8:	e0bffe17 	ldw	r2,-8(fp)
 80122ac:	10800217 	ldw	r2,8(r2)
 80122b0:	10d00034 	orhi	r3,r2,16384
 80122b4:	e0bffe17 	ldw	r2,-8(fp)
 80122b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80122bc:	e03fff15 	stw	zero,-4(fp)
 80122c0:	00002306 	br	8012350 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80122c4:	e0ffff17 	ldw	r3,-4(fp)
 80122c8:	1805883a 	mov	r2,r3
 80122cc:	1085883a 	add	r2,r2,r2
 80122d0:	10c5883a 	add	r2,r2,r3
 80122d4:	100490ba 	slli	r2,r2,2
 80122d8:	00c20074 	movhi	r3,2049
 80122dc:	10c7883a 	add	r3,r2,r3
 80122e0:	18cf5b17 	ldw	r3,15724(r3)
 80122e4:	e0bffe17 	ldw	r2,-8(fp)
 80122e8:	10800017 	ldw	r2,0(r2)
 80122ec:	1880151e 	bne	r3,r2,8012344 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80122f0:	e0ffff17 	ldw	r3,-4(fp)
 80122f4:	1805883a 	mov	r2,r3
 80122f8:	1085883a 	add	r2,r2,r2
 80122fc:	10c5883a 	add	r2,r2,r3
 8012300:	100490ba 	slli	r2,r2,2
 8012304:	00c20074 	movhi	r3,2049
 8012308:	10c7883a 	add	r3,r2,r3
 801230c:	188f5d17 	ldw	r2,15732(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 8012310:	10000c0e 	bge	r2,zero,8012344 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 8012314:	e0ffff17 	ldw	r3,-4(fp)
 8012318:	1805883a 	mov	r2,r3
 801231c:	1085883a 	add	r2,r2,r2
 8012320:	10c5883a 	add	r2,r2,r3
 8012324:	100490ba 	slli	r2,r2,2
 8012328:	00c20074 	movhi	r3,2049
 801232c:	18cf5b04 	addi	r3,r3,15724
 8012330:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8012334:	e0fffe17 	ldw	r3,-8(fp)
 8012338:	18800226 	beq	r3,r2,8012344 <alt_file_locked+0xac>
    {
      return -EACCES;
 801233c:	00bffcc4 	movi	r2,-13
 8012340:	00000806 	br	8012364 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 8012344:	e0bfff17 	ldw	r2,-4(fp)
 8012348:	10800044 	addi	r2,r2,1
 801234c:	e0bfff15 	stw	r2,-4(fp)
 8012350:	d0a00c17 	ldw	r2,-32720(gp)
 8012354:	1007883a 	mov	r3,r2
 8012358:	e0bfff17 	ldw	r2,-4(fp)
 801235c:	18bfd92e 	bgeu	r3,r2,80122c4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8012360:	0005883a 	mov	r2,zero
}
 8012364:	e037883a 	mov	sp,fp
 8012368:	df000017 	ldw	fp,0(sp)
 801236c:	dec00104 	addi	sp,sp,4
 8012370:	f800283a 	ret

08012374 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8012374:	defff604 	addi	sp,sp,-40
 8012378:	dfc00915 	stw	ra,36(sp)
 801237c:	df000815 	stw	fp,32(sp)
 8012380:	df000804 	addi	fp,sp,32
 8012384:	e13ffa15 	stw	r4,-24(fp)
 8012388:	e17ff915 	stw	r5,-28(fp)
 801238c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8012390:	00bfffc4 	movi	r2,-1
 8012394:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 8012398:	00bffb44 	movi	r2,-19
 801239c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 80123a0:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80123a4:	d1600a04 	addi	r5,gp,-32728
 80123a8:	e13ffa17 	ldw	r4,-24(fp)
 80123ac:	80124f80 	call	80124f8 <alt_find_dev>
 80123b0:	e0bfff15 	stw	r2,-4(fp)
 80123b4:	e0bfff17 	ldw	r2,-4(fp)
 80123b8:	1000051e 	bne	r2,zero,80123d0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80123bc:	e13ffa17 	ldw	r4,-24(fp)
 80123c0:	80125880 	call	8012588 <alt_find_file>
 80123c4:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 80123c8:	00800044 	movi	r2,1
 80123cc:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80123d0:	e0bfff17 	ldw	r2,-4(fp)
 80123d4:	10002c26 	beq	r2,zero,8012488 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80123d8:	e13fff17 	ldw	r4,-4(fp)
 80123dc:	80126900 	call	8012690 <alt_get_fd>
 80123e0:	e0bffe15 	stw	r2,-8(fp)
 80123e4:	e0bffe17 	ldw	r2,-8(fp)
 80123e8:	1000030e 	bge	r2,zero,80123f8 <open+0x84>
    {
      status = index;
 80123ec:	e0bffe17 	ldw	r2,-8(fp)
 80123f0:	e0bffd15 	stw	r2,-12(fp)
 80123f4:	00002606 	br	8012490 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 80123f8:	e0fffe17 	ldw	r3,-8(fp)
 80123fc:	1805883a 	mov	r2,r3
 8012400:	1085883a 	add	r2,r2,r2
 8012404:	10c5883a 	add	r2,r2,r3
 8012408:	100490ba 	slli	r2,r2,2
 801240c:	00c20074 	movhi	r3,2049
 8012410:	18cf5b04 	addi	r3,r3,15724
 8012414:	10c5883a 	add	r2,r2,r3
 8012418:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 801241c:	e0fff917 	ldw	r3,-28(fp)
 8012420:	00900034 	movhi	r2,16384
 8012424:	10bfffc4 	addi	r2,r2,-1
 8012428:	1886703a 	and	r3,r3,r2
 801242c:	e0bffb17 	ldw	r2,-20(fp)
 8012430:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8012434:	e0bffc17 	ldw	r2,-16(fp)
 8012438:	1000051e 	bne	r2,zero,8012450 <open+0xdc>
 801243c:	e13ffb17 	ldw	r4,-20(fp)
 8012440:	80122980 	call	8012298 <alt_file_locked>
 8012444:	e0bffd15 	stw	r2,-12(fp)
 8012448:	e0bffd17 	ldw	r2,-12(fp)
 801244c:	10001016 	blt	r2,zero,8012490 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8012450:	e0bfff17 	ldw	r2,-4(fp)
 8012454:	10800317 	ldw	r2,12(r2)
 8012458:	10000826 	beq	r2,zero,801247c <open+0x108>
 801245c:	e0bfff17 	ldw	r2,-4(fp)
 8012460:	10800317 	ldw	r2,12(r2)
 8012464:	e1fff817 	ldw	r7,-32(fp)
 8012468:	e1bff917 	ldw	r6,-28(fp)
 801246c:	e17ffa17 	ldw	r5,-24(fp)
 8012470:	e13ffb17 	ldw	r4,-20(fp)
 8012474:	103ee83a 	callr	r2
 8012478:	00000106 	br	8012480 <open+0x10c>
 801247c:	0005883a 	mov	r2,zero
 8012480:	e0bffd15 	stw	r2,-12(fp)
 8012484:	00000206 	br	8012490 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8012488:	00bffb44 	movi	r2,-19
 801248c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8012490:	e0bffd17 	ldw	r2,-12(fp)
 8012494:	1000090e 	bge	r2,zero,80124bc <open+0x148>
  {
    alt_release_fd (index);  
 8012498:	e13ffe17 	ldw	r4,-8(fp)
 801249c:	80107740 	call	8010774 <alt_release_fd>
    ALT_ERRNO = -status;
 80124a0:	801225c0 	call	801225c <alt_get_errno>
 80124a4:	1007883a 	mov	r3,r2
 80124a8:	e0bffd17 	ldw	r2,-12(fp)
 80124ac:	0085c83a 	sub	r2,zero,r2
 80124b0:	18800015 	stw	r2,0(r3)
    return -1;
 80124b4:	00bfffc4 	movi	r2,-1
 80124b8:	00000106 	br	80124c0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 80124bc:	e0bffe17 	ldw	r2,-8(fp)
}
 80124c0:	e037883a 	mov	sp,fp
 80124c4:	dfc00117 	ldw	ra,4(sp)
 80124c8:	df000017 	ldw	fp,0(sp)
 80124cc:	dec00204 	addi	sp,sp,8
 80124d0:	f800283a 	ret

080124d4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80124d4:	deffff04 	addi	sp,sp,-4
 80124d8:	df000015 	stw	fp,0(sp)
 80124dc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80124e0:	000170fa 	wrctl	ienable,zero
}
 80124e4:	0001883a 	nop
 80124e8:	e037883a 	mov	sp,fp
 80124ec:	df000017 	ldw	fp,0(sp)
 80124f0:	dec00104 	addi	sp,sp,4
 80124f4:	f800283a 	ret

080124f8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80124f8:	defffa04 	addi	sp,sp,-24
 80124fc:	dfc00515 	stw	ra,20(sp)
 8012500:	df000415 	stw	fp,16(sp)
 8012504:	df000404 	addi	fp,sp,16
 8012508:	e13ffd15 	stw	r4,-12(fp)
 801250c:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8012510:	e0bffc17 	ldw	r2,-16(fp)
 8012514:	10800017 	ldw	r2,0(r2)
 8012518:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 801251c:	e13ffd17 	ldw	r4,-12(fp)
 8012520:	8002ddc0 	call	8002ddc <strlen>
 8012524:	10800044 	addi	r2,r2,1
 8012528:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801252c:	00000d06 	br	8012564 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8012530:	e0bfff17 	ldw	r2,-4(fp)
 8012534:	10800217 	ldw	r2,8(r2)
 8012538:	e0fffe17 	ldw	r3,-8(fp)
 801253c:	180d883a 	mov	r6,r3
 8012540:	e17ffd17 	ldw	r5,-12(fp)
 8012544:	1009883a 	mov	r4,r2
 8012548:	80128280 	call	8012828 <memcmp>
 801254c:	1000021e 	bne	r2,zero,8012558 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8012550:	e0bfff17 	ldw	r2,-4(fp)
 8012554:	00000706 	br	8012574 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8012558:	e0bfff17 	ldw	r2,-4(fp)
 801255c:	10800017 	ldw	r2,0(r2)
 8012560:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 8012564:	e0ffff17 	ldw	r3,-4(fp)
 8012568:	e0bffc17 	ldw	r2,-16(fp)
 801256c:	18bff01e 	bne	r3,r2,8012530 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 8012570:	0005883a 	mov	r2,zero
}
 8012574:	e037883a 	mov	sp,fp
 8012578:	dfc00117 	ldw	ra,4(sp)
 801257c:	df000017 	ldw	fp,0(sp)
 8012580:	dec00204 	addi	sp,sp,8
 8012584:	f800283a 	ret

08012588 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8012588:	defffb04 	addi	sp,sp,-20
 801258c:	dfc00415 	stw	ra,16(sp)
 8012590:	df000315 	stw	fp,12(sp)
 8012594:	df000304 	addi	fp,sp,12
 8012598:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 801259c:	d0a00817 	ldw	r2,-32736(gp)
 80125a0:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80125a4:	00003106 	br	801266c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80125a8:	e0bfff17 	ldw	r2,-4(fp)
 80125ac:	10800217 	ldw	r2,8(r2)
 80125b0:	1009883a 	mov	r4,r2
 80125b4:	8002ddc0 	call	8002ddc <strlen>
 80125b8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80125bc:	e0bfff17 	ldw	r2,-4(fp)
 80125c0:	10c00217 	ldw	r3,8(r2)
 80125c4:	e0bffe17 	ldw	r2,-8(fp)
 80125c8:	10bfffc4 	addi	r2,r2,-1
 80125cc:	1885883a 	add	r2,r3,r2
 80125d0:	10800003 	ldbu	r2,0(r2)
 80125d4:	10803fcc 	andi	r2,r2,255
 80125d8:	1080201c 	xori	r2,r2,128
 80125dc:	10bfe004 	addi	r2,r2,-128
 80125e0:	10800bd8 	cmpnei	r2,r2,47
 80125e4:	1000031e 	bne	r2,zero,80125f4 <alt_find_file+0x6c>
    {
      len -= 1;
 80125e8:	e0bffe17 	ldw	r2,-8(fp)
 80125ec:	10bfffc4 	addi	r2,r2,-1
 80125f0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80125f4:	e0bffe17 	ldw	r2,-8(fp)
 80125f8:	e0fffd17 	ldw	r3,-12(fp)
 80125fc:	1885883a 	add	r2,r3,r2
 8012600:	10800003 	ldbu	r2,0(r2)
 8012604:	10803fcc 	andi	r2,r2,255
 8012608:	1080201c 	xori	r2,r2,128
 801260c:	10bfe004 	addi	r2,r2,-128
 8012610:	10800be0 	cmpeqi	r2,r2,47
 8012614:	1000081e 	bne	r2,zero,8012638 <alt_find_file+0xb0>
 8012618:	e0bffe17 	ldw	r2,-8(fp)
 801261c:	e0fffd17 	ldw	r3,-12(fp)
 8012620:	1885883a 	add	r2,r3,r2
 8012624:	10800003 	ldbu	r2,0(r2)
 8012628:	10803fcc 	andi	r2,r2,255
 801262c:	1080201c 	xori	r2,r2,128
 8012630:	10bfe004 	addi	r2,r2,-128
 8012634:	10000a1e 	bne	r2,zero,8012660 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8012638:	e0bfff17 	ldw	r2,-4(fp)
 801263c:	10800217 	ldw	r2,8(r2)
 8012640:	e0fffe17 	ldw	r3,-8(fp)
 8012644:	180d883a 	mov	r6,r3
 8012648:	e17ffd17 	ldw	r5,-12(fp)
 801264c:	1009883a 	mov	r4,r2
 8012650:	80128280 	call	8012828 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 8012654:	1000021e 	bne	r2,zero,8012660 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 8012658:	e0bfff17 	ldw	r2,-4(fp)
 801265c:	00000706 	br	801267c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8012660:	e0bfff17 	ldw	r2,-4(fp)
 8012664:	10800017 	ldw	r2,0(r2)
 8012668:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 801266c:	e0ffff17 	ldw	r3,-4(fp)
 8012670:	d0a00804 	addi	r2,gp,-32736
 8012674:	18bfcc1e 	bne	r3,r2,80125a8 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 8012678:	0005883a 	mov	r2,zero
}
 801267c:	e037883a 	mov	sp,fp
 8012680:	dfc00117 	ldw	ra,4(sp)
 8012684:	df000017 	ldw	fp,0(sp)
 8012688:	dec00204 	addi	sp,sp,8
 801268c:	f800283a 	ret

08012690 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8012690:	defffc04 	addi	sp,sp,-16
 8012694:	df000315 	stw	fp,12(sp)
 8012698:	df000304 	addi	fp,sp,12
 801269c:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 80126a0:	00bffa04 	movi	r2,-24
 80126a4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80126a8:	e03fff15 	stw	zero,-4(fp)
 80126ac:	00001d06 	br	8012724 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 80126b0:	e0ffff17 	ldw	r3,-4(fp)
 80126b4:	1805883a 	mov	r2,r3
 80126b8:	1085883a 	add	r2,r2,r2
 80126bc:	10c5883a 	add	r2,r2,r3
 80126c0:	100490ba 	slli	r2,r2,2
 80126c4:	00c20074 	movhi	r3,2049
 80126c8:	10c7883a 	add	r3,r2,r3
 80126cc:	188f5b17 	ldw	r2,15724(r3)
 80126d0:	1000111e 	bne	r2,zero,8012718 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 80126d4:	e0ffff17 	ldw	r3,-4(fp)
 80126d8:	1805883a 	mov	r2,r3
 80126dc:	1085883a 	add	r2,r2,r2
 80126e0:	10c5883a 	add	r2,r2,r3
 80126e4:	100490ba 	slli	r2,r2,2
 80126e8:	e13ffd17 	ldw	r4,-12(fp)
 80126ec:	00c20074 	movhi	r3,2049
 80126f0:	10c7883a 	add	r3,r2,r3
 80126f4:	190f5b15 	stw	r4,15724(r3)
      if (i > alt_max_fd)
 80126f8:	d0e00c17 	ldw	r3,-32720(gp)
 80126fc:	e0bfff17 	ldw	r2,-4(fp)
 8012700:	1880020e 	bge	r3,r2,801270c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 8012704:	e0bfff17 	ldw	r2,-4(fp)
 8012708:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
 801270c:	e0bfff17 	ldw	r2,-4(fp)
 8012710:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8012714:	00000706 	br	8012734 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 8012718:	e0bfff17 	ldw	r2,-4(fp)
 801271c:	10800044 	addi	r2,r2,1
 8012720:	e0bfff15 	stw	r2,-4(fp)
 8012724:	e0bfff17 	ldw	r2,-4(fp)
 8012728:	10800810 	cmplti	r2,r2,32
 801272c:	103fe01e 	bne	r2,zero,80126b0 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 8012730:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8012734:	e0bffe17 	ldw	r2,-8(fp)
}
 8012738:	e037883a 	mov	sp,fp
 801273c:	df000017 	ldw	fp,0(sp)
 8012740:	dec00104 	addi	sp,sp,4
 8012744:	f800283a 	ret

08012748 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8012748:	defffe04 	addi	sp,sp,-8
 801274c:	df000115 	stw	fp,4(sp)
 8012750:	df000104 	addi	fp,sp,4
 8012754:	e13fff15 	stw	r4,-4(fp)
 8012758:	e0bfff17 	ldw	r2,-4(fp)
 801275c:	10bffe84 	addi	r2,r2,-6
 8012760:	10c00428 	cmpgeui	r3,r2,16
 8012764:	1800191e 	bne	r3,zero,80127cc <alt_exception_cause_generated_bad_addr+0x84>
 8012768:	100690ba 	slli	r3,r2,2
 801276c:	00820074 	movhi	r2,2049
 8012770:	1885883a 	add	r2,r3,r2
 8012774:	1089df17 	ldw	r2,10108(r2)
 8012778:	1000683a 	jmp	r2
 801277c:	080127bc 	xorhi	zero,at,1182
 8012780:	080127bc 	xorhi	zero,at,1182
 8012784:	080127cc 	andi	zero,at,1183
 8012788:	080127cc 	andi	zero,at,1183
 801278c:	080127cc 	andi	zero,at,1183
 8012790:	080127bc 	xorhi	zero,at,1182
 8012794:	080127c4 	addi	zero,at,1183
 8012798:	080127cc 	andi	zero,at,1183
 801279c:	080127bc 	xorhi	zero,at,1182
 80127a0:	080127bc 	xorhi	zero,at,1182
 80127a4:	080127cc 	andi	zero,at,1183
 80127a8:	080127bc 	xorhi	zero,at,1182
 80127ac:	080127c4 	addi	zero,at,1183
 80127b0:	080127cc 	andi	zero,at,1183
 80127b4:	080127cc 	andi	zero,at,1183
 80127b8:	080127bc 	xorhi	zero,at,1182
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80127bc:	00800044 	movi	r2,1
 80127c0:	00000306 	br	80127d0 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80127c4:	0005883a 	mov	r2,zero
 80127c8:	00000106 	br	80127d0 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 80127cc:	0005883a 	mov	r2,zero
  }
}
 80127d0:	e037883a 	mov	sp,fp
 80127d4:	df000017 	ldw	fp,0(sp)
 80127d8:	dec00104 	addi	sp,sp,4
 80127dc:	f800283a 	ret

080127e0 <atexit>:
 80127e0:	200b883a 	mov	r5,r4
 80127e4:	000f883a 	mov	r7,zero
 80127e8:	000d883a 	mov	r6,zero
 80127ec:	0009883a 	mov	r4,zero
 80127f0:	80128a01 	jmpi	80128a0 <__register_exitproc>

080127f4 <exit>:
 80127f4:	defffe04 	addi	sp,sp,-8
 80127f8:	000b883a 	mov	r5,zero
 80127fc:	dc000015 	stw	r16,0(sp)
 8012800:	dfc00115 	stw	ra,4(sp)
 8012804:	2021883a 	mov	r16,r4
 8012808:	80129300 	call	8012930 <__call_exitprocs>
 801280c:	00820074 	movhi	r2,2049
 8012810:	1113d717 	ldw	r4,20316(r2)
 8012814:	20800f17 	ldw	r2,60(r4)
 8012818:	10000126 	beq	r2,zero,8012820 <exit+0x2c>
 801281c:	103ee83a 	callr	r2
 8012820:	8009883a 	mov	r4,r16
 8012824:	800ffc00 	call	800ffc0 <_exit>

08012828 <memcmp>:
 8012828:	30800130 	cmpltui	r2,r6,4
 801282c:	10000b1e 	bne	r2,zero,801285c <memcmp+0x34>
 8012830:	2144b03a 	or	r2,r4,r5
 8012834:	108000cc 	andi	r2,r2,3
 8012838:	1000171e 	bne	r2,zero,8012898 <memcmp+0x70>
 801283c:	20c00017 	ldw	r3,0(r4)
 8012840:	28800017 	ldw	r2,0(r5)
 8012844:	1880141e 	bne	r3,r2,8012898 <memcmp+0x70>
 8012848:	31bfff04 	addi	r6,r6,-4
 801284c:	30800128 	cmpgeui	r2,r6,4
 8012850:	21000104 	addi	r4,r4,4
 8012854:	29400104 	addi	r5,r5,4
 8012858:	103ff81e 	bne	r2,zero,801283c <memcmp+0x14>
 801285c:	30bfffc4 	addi	r2,r6,-1
 8012860:	30000b26 	beq	r6,zero,8012890 <memcmp+0x68>
 8012864:	11800044 	addi	r6,r2,1
 8012868:	218d883a 	add	r6,r4,r6
 801286c:	00000106 	br	8012874 <memcmp+0x4c>
 8012870:	21800726 	beq	r4,r6,8012890 <memcmp+0x68>
 8012874:	20800003 	ldbu	r2,0(r4)
 8012878:	28c00003 	ldbu	r3,0(r5)
 801287c:	21000044 	addi	r4,r4,1
 8012880:	29400044 	addi	r5,r5,1
 8012884:	10fffa26 	beq	r2,r3,8012870 <memcmp+0x48>
 8012888:	10c5c83a 	sub	r2,r2,r3
 801288c:	f800283a 	ret
 8012890:	0005883a 	mov	r2,zero
 8012894:	f800283a 	ret
 8012898:	30bfffc4 	addi	r2,r6,-1
 801289c:	003ff106 	br	8012864 <memcmp+0x3c>

080128a0 <__register_exitproc>:
 80128a0:	00820074 	movhi	r2,2049
 80128a4:	10d3d717 	ldw	r3,20316(r2)
 80128a8:	18805217 	ldw	r2,328(r3)
 80128ac:	10001726 	beq	r2,zero,801290c <__register_exitproc+0x6c>
 80128b0:	10c00117 	ldw	r3,4(r2)
 80128b4:	1a000808 	cmpgei	r8,r3,32
 80128b8:	40001b1e 	bne	r8,zero,8012928 <__register_exitproc+0x88>
 80128bc:	20000b26 	beq	r4,zero,80128ec <__register_exitproc+0x4c>
 80128c0:	181090ba 	slli	r8,r3,2
 80128c4:	02400044 	movi	r9,1
 80128c8:	48d2983a 	sll	r9,r9,r3
 80128cc:	1211883a 	add	r8,r2,r8
 80128d0:	41802215 	stw	r6,136(r8)
 80128d4:	11806217 	ldw	r6,392(r2)
 80128d8:	21000098 	cmpnei	r4,r4,2
 80128dc:	324cb03a 	or	r6,r6,r9
 80128e0:	11806215 	stw	r6,392(r2)
 80128e4:	41c04215 	stw	r7,264(r8)
 80128e8:	20000b26 	beq	r4,zero,8012918 <__register_exitproc+0x78>
 80128ec:	19000084 	addi	r4,r3,2
 80128f0:	200890ba 	slli	r4,r4,2
 80128f4:	18c00044 	addi	r3,r3,1
 80128f8:	10c00115 	stw	r3,4(r2)
 80128fc:	1105883a 	add	r2,r2,r4
 8012900:	11400015 	stw	r5,0(r2)
 8012904:	0005883a 	mov	r2,zero
 8012908:	f800283a 	ret
 801290c:	18805304 	addi	r2,r3,332
 8012910:	18805215 	stw	r2,328(r3)
 8012914:	003fe606 	br	80128b0 <__register_exitproc+0x10>
 8012918:	11006317 	ldw	r4,396(r2)
 801291c:	2252b03a 	or	r9,r4,r9
 8012920:	12406315 	stw	r9,396(r2)
 8012924:	003ff106 	br	80128ec <__register_exitproc+0x4c>
 8012928:	00bfffc4 	movi	r2,-1
 801292c:	f800283a 	ret

08012930 <__call_exitprocs>:
 8012930:	defff704 	addi	sp,sp,-36
 8012934:	00820074 	movhi	r2,2049
 8012938:	dcc00315 	stw	r19,12(sp)
 801293c:	14d3d717 	ldw	r19,20316(r2)
 8012940:	dc800215 	stw	r18,8(sp)
 8012944:	dfc00815 	stw	ra,32(sp)
 8012948:	9c805217 	ldw	r18,328(r19)
 801294c:	ddc00715 	stw	r23,28(sp)
 8012950:	dd800615 	stw	r22,24(sp)
 8012954:	dd400515 	stw	r21,20(sp)
 8012958:	dd000415 	stw	r20,16(sp)
 801295c:	dc400115 	stw	r17,4(sp)
 8012960:	dc000015 	stw	r16,0(sp)
 8012964:	90001026 	beq	r18,zero,80129a8 <__call_exitprocs+0x78>
 8012968:	202b883a 	mov	r21,r4
 801296c:	282d883a 	mov	r22,r5
 8012970:	05000044 	movi	r20,1
 8012974:	94000117 	ldw	r16,4(r18)
 8012978:	847fffc4 	addi	r17,r16,-1
 801297c:	88000a16 	blt	r17,zero,80129a8 <__call_exitprocs+0x78>
 8012980:	84000044 	addi	r16,r16,1
 8012984:	802090ba 	slli	r16,r16,2
 8012988:	9421883a 	add	r16,r18,r16
 801298c:	b0001126 	beq	r22,zero,80129d4 <__call_exitprocs+0xa4>
 8012990:	80804017 	ldw	r2,256(r16)
 8012994:	15800f26 	beq	r2,r22,80129d4 <__call_exitprocs+0xa4>
 8012998:	8c7fffc4 	addi	r17,r17,-1
 801299c:	88bfffd8 	cmpnei	r2,r17,-1
 80129a0:	843fff04 	addi	r16,r16,-4
 80129a4:	103ff91e 	bne	r2,zero,801298c <__call_exitprocs+0x5c>
 80129a8:	dfc00817 	ldw	ra,32(sp)
 80129ac:	ddc00717 	ldw	r23,28(sp)
 80129b0:	dd800617 	ldw	r22,24(sp)
 80129b4:	dd400517 	ldw	r21,20(sp)
 80129b8:	dd000417 	ldw	r20,16(sp)
 80129bc:	dcc00317 	ldw	r19,12(sp)
 80129c0:	dc800217 	ldw	r18,8(sp)
 80129c4:	dc400117 	ldw	r17,4(sp)
 80129c8:	dc000017 	ldw	r16,0(sp)
 80129cc:	dec00904 	addi	sp,sp,36
 80129d0:	f800283a 	ret
 80129d4:	90800117 	ldw	r2,4(r18)
 80129d8:	81800017 	ldw	r6,0(r16)
 80129dc:	10bfffc4 	addi	r2,r2,-1
 80129e0:	14401726 	beq	r2,r17,8012a40 <__call_exitprocs+0x110>
 80129e4:	80000015 	stw	zero,0(r16)
 80129e8:	303feb26 	beq	r6,zero,8012998 <__call_exitprocs+0x68>
 80129ec:	a446983a 	sll	r3,r20,r17
 80129f0:	90806217 	ldw	r2,392(r18)
 80129f4:	95c00117 	ldw	r23,4(r18)
 80129f8:	1884703a 	and	r2,r3,r2
 80129fc:	1000081e 	bne	r2,zero,8012a20 <__call_exitprocs+0xf0>
 8012a00:	303ee83a 	callr	r6
 8012a04:	90c00117 	ldw	r3,4(r18)
 8012a08:	98805217 	ldw	r2,328(r19)
 8012a0c:	1dc0011e 	bne	r3,r23,8012a14 <__call_exitprocs+0xe4>
 8012a10:	90bfe126 	beq	r18,r2,8012998 <__call_exitprocs+0x68>
 8012a14:	103fe426 	beq	r2,zero,80129a8 <__call_exitprocs+0x78>
 8012a18:	1025883a 	mov	r18,r2
 8012a1c:	003fd506 	br	8012974 <__call_exitprocs+0x44>
 8012a20:	90806317 	ldw	r2,396(r18)
 8012a24:	81002017 	ldw	r4,128(r16)
 8012a28:	1886703a 	and	r3,r3,r2
 8012a2c:	1800061e 	bne	r3,zero,8012a48 <__call_exitprocs+0x118>
 8012a30:	200b883a 	mov	r5,r4
 8012a34:	a809883a 	mov	r4,r21
 8012a38:	303ee83a 	callr	r6
 8012a3c:	003ff106 	br	8012a04 <__call_exitprocs+0xd4>
 8012a40:	94400115 	stw	r17,4(r18)
 8012a44:	003fe806 	br	80129e8 <__call_exitprocs+0xb8>
 8012a48:	303ee83a 	callr	r6
 8012a4c:	003fed06 	br	8012a04 <__call_exitprocs+0xd4>
